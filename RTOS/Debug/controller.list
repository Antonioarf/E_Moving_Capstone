
controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08006938  08006938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bbc  08006bbc  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006bbc  08006bbc  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bbc  08006bbc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bbc  08006bbc  00016bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bc0  08006bc0  00016bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c28  20000060  08006c24  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c88  08006c24  00021c88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019044  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032be  00000000  00000000  00039117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  0003c3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f34  00000000  00000000  0003d748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000329a  00000000  00000000  0003e67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000168ec  00000000  00000000  00041916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000afb3e  00000000  00000000  00058202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054b8  00000000  00000000  00107d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0010d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006920 	.word	0x08006920

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006920 	.word	0x08006920

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <osStatusToString>:
	ITM_SendChar(msg);
	ITM_SendChar('\n');

}

char* osStatusToString(osStatus_t status) {
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
    switch (status) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	3305      	adds	r3, #5
 80001ec:	2b05      	cmp	r3, #5
 80001ee:	d81b      	bhi.n	8000228 <osStatusToString+0x48>
 80001f0:	a201      	add	r2, pc, #4	; (adr r2, 80001f8 <osStatusToString+0x18>)
 80001f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f6:	bf00      	nop
 80001f8:	08000225 	.word	0x08000225
 80001fc:	08000221 	.word	0x08000221
 8000200:	0800021d 	.word	0x0800021d
 8000204:	08000219 	.word	0x08000219
 8000208:	08000215 	.word	0x08000215
 800020c:	08000211 	.word	0x08000211
        case osOK:
            return "OK: Operation completed successfully\r\n";
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <osStatusToString+0x58>)
 8000212:	e00a      	b.n	800022a <osStatusToString+0x4a>
        case osError:
            return "osError: Unspecified error\r\n";
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <osStatusToString+0x5c>)
 8000216:	e008      	b.n	800022a <osStatusToString+0x4a>
        case osErrorTimeout:
            return "Timeout: osErrorTimeout:  Operation timed out\r\n";
 8000218:	4b09      	ldr	r3, [pc, #36]	; (8000240 <osStatusToString+0x60>)
 800021a:	e006      	b.n	800022a <osStatusToString+0x4a>
        case osErrorResource:
            return "Resource: osErrorResource: Resource not available\r\n";
 800021c:	4b09      	ldr	r3, [pc, #36]	; (8000244 <osStatusToString+0x64>)
 800021e:	e004      	b.n	800022a <osStatusToString+0x4a>
        case osErrorParameter:
            return "Parameter: osErrorParameter: Parameter error\r\n";
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <osStatusToString+0x68>)
 8000222:	e002      	b.n	800022a <osStatusToString+0x4a>
        case osErrorNoMemory:
            return "NoMemory: osErrorNoMemory: System is out of memory\r\n";
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <osStatusToString+0x6c>)
 8000226:	e000      	b.n	800022a <osStatusToString+0x4a>
        default:
            return "Unknown osStatus_t\r\n";
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <osStatusToString+0x70>)
    }
}
 800022a:	4618      	mov	r0, r3
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	08006938 	.word	0x08006938
 800023c:	08006960 	.word	0x08006960
 8000240:	08006980 	.word	0x08006980
 8000244:	080069b0 	.word	0x080069b0
 8000248:	080069e4 	.word	0x080069e4
 800024c:	08006a14 	.word	0x08006a14
 8000250:	08006a4c 	.word	0x08006a4c

08000254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000258:	f000 fbd6 	bl	8000a08 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025c:	f000 f84e 	bl	80002fc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000260:	f000 f8cc 	bl	80003fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000264:	f000 f89a 	bl	800039c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000268:	f003 fa38 	bl	80036dc <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Input_queue */
  Input_queueHandle = osMessageQueueNew (16, sizeof(command), &Input_queue_attributes);
 800026c:	4a16      	ldr	r2, [pc, #88]	; (80002c8 <main+0x74>)
 800026e:	2108      	movs	r1, #8
 8000270:	2010      	movs	r0, #16
 8000272:	f003 fba5 	bl	80039c0 <osMessageQueueNew>
 8000276:	4603      	mov	r3, r0
 8000278:	4a14      	ldr	r2, [pc, #80]	; (80002cc <main+0x78>)
 800027a:	6013      	str	r3, [r2, #0]

  /* creation of BT_send */
  BT_sendHandle = osMessageQueueNew (16, sizeof(char*), &BT_send_attributes);
 800027c:	4a14      	ldr	r2, [pc, #80]	; (80002d0 <main+0x7c>)
 800027e:	2104      	movs	r1, #4
 8000280:	2010      	movs	r0, #16
 8000282:	f003 fb9d 	bl	80039c0 <osMessageQueueNew>
 8000286:	4603      	mov	r3, r0
 8000288:	4a12      	ldr	r2, [pc, #72]	; (80002d4 <main+0x80>)
 800028a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BT_reader */
  BT_readerHandle = osThreadNew(BT_reader_funct, NULL, &BT_reader_attributes);
 800028c:	4a12      	ldr	r2, [pc, #72]	; (80002d8 <main+0x84>)
 800028e:	2100      	movs	r1, #0
 8000290:	4812      	ldr	r0, [pc, #72]	; (80002dc <main+0x88>)
 8000292:	f003 fa8b 	bl	80037ac <osThreadNew>
 8000296:	4603      	mov	r3, r0
 8000298:	4a11      	ldr	r2, [pc, #68]	; (80002e0 <main+0x8c>)
 800029a:	6013      	str	r3, [r2, #0]

  /* creation of MT_controller */
  MT_controllerHandle = osThreadNew(MT_controller_funct, NULL, &MT_controller_attributes);
 800029c:	4a11      	ldr	r2, [pc, #68]	; (80002e4 <main+0x90>)
 800029e:	2100      	movs	r1, #0
 80002a0:	4811      	ldr	r0, [pc, #68]	; (80002e8 <main+0x94>)
 80002a2:	f003 fa83 	bl	80037ac <osThreadNew>
 80002a6:	4603      	mov	r3, r0
 80002a8:	4a10      	ldr	r2, [pc, #64]	; (80002ec <main+0x98>)
 80002aa:	6013      	str	r3, [r2, #0]

  /* creation of Sensor_Read */
  Sensor_ReadHandle = osThreadNew(Sensor_reader_funct, NULL, &Sensor_Read_attributes);
 80002ac:	4a10      	ldr	r2, [pc, #64]	; (80002f0 <main+0x9c>)
 80002ae:	2100      	movs	r1, #0
 80002b0:	4810      	ldr	r0, [pc, #64]	; (80002f4 <main+0xa0>)
 80002b2:	f003 fa7b 	bl	80037ac <osThreadNew>
 80002b6:	4603      	mov	r3, r0
 80002b8:	4a0f      	ldr	r2, [pc, #60]	; (80002f8 <main+0xa4>)
 80002ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002bc:	f003 fa42 	bl	8003744 <osKernelStart>
 80002c0:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	08006b54 	.word	0x08006b54
 80002cc:	20000110 	.word	0x20000110
 80002d0:	08006b6c 	.word	0x08006b6c
 80002d4:	20000114 	.word	0x20000114
 80002d8:	08006ae8 	.word	0x08006ae8
 80002dc:	0800059d 	.word	0x0800059d
 80002e0:	20000104 	.word	0x20000104
 80002e4:	08006b0c 	.word	0x08006b0c
 80002e8:	08000671 	.word	0x08000671
 80002ec:	20000108 	.word	0x20000108
 80002f0:	08006b30 	.word	0x08006b30
 80002f4:	08000731 	.word	0x08000731
 80002f8:	2000010c 	.word	0x2000010c

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b09c      	sub	sp, #112	; 0x70
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000306:	2228      	movs	r2, #40	; 0x28
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f006 fa1e 	bl	800674c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000310:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
 800031e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000320:	463b      	mov	r3, r7
 8000322:	2234      	movs	r2, #52	; 0x34
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f006 fa10 	bl	800674c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032c:	2302      	movs	r3, #2
 800032e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000330:	2301      	movs	r3, #1
 8000332:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000334:	2310      	movs	r3, #16
 8000336:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000338:	2300      	movs	r3, #0
 800033a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fe1b 	bl	8000f7c <HAL_RCC_OscConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800034c:	f000 fa0a 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	230f      	movs	r3, #15
 8000352:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000354:	2300      	movs	r3, #0
 8000356:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000364:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f001 fe44 	bl	8001ff8 <HAL_RCC_ClockConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000376:	f000 f9f5 	bl	8000764 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800037a:	2301      	movs	r3, #1
 800037c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800037e:	2300      	movs	r3, #0
 8000380:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000382:	463b      	mov	r3, r7
 8000384:	4618      	mov	r0, r3
 8000386:	f002 f89f 	bl	80024c8 <HAL_RCCEx_PeriphCLKConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000390:	f000 f9e8 	bl	8000764 <Error_Handler>
  }
}
 8000394:	bf00      	nop
 8000396:	3770      	adds	r7, #112	; 0x70
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003a2:	4a15      	ldr	r2, [pc, #84]	; (80003f8 <MX_USART1_UART_Init+0x5c>)
 80003a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003a6:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003c2:	220c      	movs	r2, #12
 80003c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003de:	4805      	ldr	r0, [pc, #20]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003e0:	f002 fc8e 	bl	8002d00 <HAL_UART_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003ea:	f000 f9bb 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	2000007c 	.word	0x2000007c
 80003f8:	40013800 	.word	0x40013800

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b088      	sub	sp, #32
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	f107 030c 	add.w	r3, r7, #12
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
 8000410:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000412:	4b1f      	ldr	r3, [pc, #124]	; (8000490 <MX_GPIO_Init+0x94>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a1e      	ldr	r2, [pc, #120]	; (8000490 <MX_GPIO_Init+0x94>)
 8000418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800041c:	6153      	str	r3, [r2, #20]
 800041e:	4b1c      	ldr	r3, [pc, #112]	; (8000490 <MX_GPIO_Init+0x94>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042a:	4b19      	ldr	r3, [pc, #100]	; (8000490 <MX_GPIO_Init+0x94>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a18      	ldr	r2, [pc, #96]	; (8000490 <MX_GPIO_Init+0x94>)
 8000430:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000434:	6153      	str	r3, [r2, #20]
 8000436:	4b16      	ldr	r3, [pc, #88]	; (8000490 <MX_GPIO_Init+0x94>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000442:	4b13      	ldr	r3, [pc, #76]	; (8000490 <MX_GPIO_Init+0x94>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a12      	ldr	r2, [pc, #72]	; (8000490 <MX_GPIO_Init+0x94>)
 8000448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b10      	ldr	r3, [pc, #64]	; (8000490 <MX_GPIO_Init+0x94>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BREAK_Pin */
  GPIO_InitStruct.Pin = BREAK_Pin;
 800045a:	2320      	movs	r3, #32
 800045c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800045e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000464:	2301      	movs	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BREAK_GPIO_Port, &GPIO_InitStruct);
 8000468:	f107 030c 	add.w	r3, r7, #12
 800046c:	4619      	mov	r1, r3
 800046e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000472:	f000 fbe1 	bl	8000c38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000476:	2200      	movs	r2, #0
 8000478:	2105      	movs	r1, #5
 800047a:	2017      	movs	r0, #23
 800047c:	f000 fbb2 	bl	8000be4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000480:	2017      	movs	r0, #23
 8000482:	f000 fbcb 	bl	8000c1c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000486:	bf00      	nop
 8000488:	3720      	adds	r7, #32
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40021000 	.word	0x40021000

08000494 <FON_UART_Receive>:

/* USER CODE BEGIN 4 */

int FON_UART_Receive(char *received, uint16_t timeout) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	460b      	mov	r3, r1
 800049e:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status;
    unsigned char receivedChar;
    int index = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]

    while (1) {
        status = HAL_UART_Receive(&huart1, &receivedChar, 1, timeout);
 80004a4:	887b      	ldrh	r3, [r7, #2]
 80004a6:	f107 010a 	add.w	r1, r7, #10
 80004aa:	2201      	movs	r2, #1
 80004ac:	4811      	ldr	r0, [pc, #68]	; (80004f4 <FON_UART_Receive+0x60>)
 80004ae:	f002 fcff 	bl	8002eb0 <HAL_UART_Receive>
 80004b2:	4603      	mov	r3, r0
 80004b4:	72fb      	strb	r3, [r7, #11]

        if (status == HAL_OK) {
 80004b6:	7afb      	ldrb	r3, [r7, #11]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d112      	bne.n	80004e2 <FON_UART_Receive+0x4e>
            if (receivedChar == '\n') {
 80004bc:	7abb      	ldrb	r3, [r7, #10]
 80004be:	2b0a      	cmp	r3, #10
 80004c0:	d106      	bne.n	80004d0 <FON_UART_Receive+0x3c>
            	received[index] = '\0';
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	4413      	add	r3, r2
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]

                return 1;
 80004cc:	2301      	movs	r3, #1
 80004ce:	e00c      	b.n	80004ea <FON_UART_Receive+0x56>
            } else {
                received[index] = receivedChar;
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	4413      	add	r3, r2
 80004d6:	7aba      	ldrb	r2, [r7, #10]
 80004d8:	701a      	strb	r2, [r3, #0]
                index++;
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	3301      	adds	r3, #1
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	e7e0      	b.n	80004a4 <FON_UART_Receive+0x10>
            }
        } else {
            received[0] = '\0';
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
            return 0;
 80004e8:	2300      	movs	r3, #0
        }
    }
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	2000007c 	.word	0x2000007c

080004f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	80fb      	strh	r3, [r7, #6]
	command com;

	if (GPIO_Pin == BREAK_Pin) {
 8000502:	88fb      	ldrh	r3, [r7, #6]
 8000504:	2b20      	cmp	r3, #32
 8000506:	d141      	bne.n	800058c <HAL_GPIO_EXTI_Callback+0x94>
		com.button_id 		= 1;
 8000508:	2301      	movs	r3, #1
 800050a:	613b      	str	r3, [r7, #16]
		if (HAL_GPIO_ReadPin(BREAK_GPIO_Port, GPIO_Pin) == GPIO_PIN_SET) {
 800050c:	88fb      	ldrh	r3, [r7, #6]
 800050e:	4619      	mov	r1, r3
 8000510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000514:	f000 fd02 	bl	8000f1c <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	2b01      	cmp	r3, #1
 800051c:	d11b      	bne.n	8000556 <HAL_GPIO_EXTI_Callback+0x5e>
			// Your code for rising edge -> apertou
			com.button_status  	= 0;
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
			osStatus_t status=  osMessageQueuePut(Input_queueHandle, &com, 0, 0);
 8000522:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000524:	6818      	ldr	r0, [r3, #0]
 8000526:	f107 0110 	add.w	r1, r7, #16
 800052a:	2300      	movs	r3, #0
 800052c:	2200      	movs	r2, #0
 800052e:	f003 facd 	bl	8003acc <osMessageQueuePut>
 8000532:	61b8      	str	r0, [r7, #24]
				if (status != osOK){
 8000534:	69bb      	ldr	r3, [r7, #24]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d028      	beq.n	800058c <HAL_GPIO_EXTI_Callback+0x94>
				char* str = osStatusToString(status);
 800053a:	69b8      	ldr	r0, [r7, #24]
 800053c:	f7ff fe50 	bl	80001e0 <osStatusToString>
 8000540:	4603      	mov	r3, r0
 8000542:	60fb      	str	r3, [r7, #12]
				osMessageQueuePut(BT_sendHandle, &str, 0, 0);
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000546:	6818      	ldr	r0, [r3, #0]
 8000548:	f107 010c 	add.w	r1, r7, #12
 800054c:	2300      	movs	r3, #0
 800054e:	2200      	movs	r2, #0
 8000550:	f003 fabc 	bl	8003acc <osMessageQueuePut>
				char* str = osStatusToString(status);
				osMessageQueuePut(BT_sendHandle, &str, 0, 0);
			}
		}
	}
}
 8000554:	e01a      	b.n	800058c <HAL_GPIO_EXTI_Callback+0x94>
			com.button_status  	= 1;
 8000556:	2301      	movs	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
			osStatus_t status 	=  osMessageQueuePut(Input_queueHandle, &com, 0, 0);
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <HAL_GPIO_EXTI_Callback+0x9c>)
 800055c:	6818      	ldr	r0, [r3, #0]
 800055e:	f107 0110 	add.w	r1, r7, #16
 8000562:	2300      	movs	r3, #0
 8000564:	2200      	movs	r2, #0
 8000566:	f003 fab1 	bl	8003acc <osMessageQueuePut>
 800056a:	61f8      	str	r0, [r7, #28]
			if (status != osOK){
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d00c      	beq.n	800058c <HAL_GPIO_EXTI_Callback+0x94>
				char* str = osStatusToString(status);
 8000572:	69f8      	ldr	r0, [r7, #28]
 8000574:	f7ff fe34 	bl	80001e0 <osStatusToString>
 8000578:	4603      	mov	r3, r0
 800057a:	60bb      	str	r3, [r7, #8]
				osMessageQueuePut(BT_sendHandle, &str, 0, 0);
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_GPIO_EXTI_Callback+0xa0>)
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	f107 0108 	add.w	r1, r7, #8
 8000584:	2300      	movs	r3, #0
 8000586:	2200      	movs	r2, #0
 8000588:	f003 faa0 	bl	8003acc <osMessageQueuePut>
}
 800058c:	bf00      	nop
 800058e:	3720      	adds	r7, #32
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000110 	.word	0x20000110
 8000598:	20000114 	.word	0x20000114

0800059c <BT_reader_funct>:
/* USER CODE END 4 */

/* USER CODE BEGIN Header_BT_reader_funct */
/* USER CODE END Header_BT_reader_funct */
void BT_reader_funct(void *argument)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b093      	sub	sp, #76	; 0x4c
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	unsigned char str[14] ="\r\nIniciando \r\n";
 80005a4:	4b2e      	ldr	r3, [pc, #184]	; (8000660 <BT_reader_funct+0xc4>)
 80005a6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ac:	c407      	stmia	r4!, {r0, r1, r2}
 80005ae:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, str, sizeof(str), 500);
 80005b0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80005b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005b8:	220e      	movs	r2, #14
 80005ba:	482a      	ldr	r0, [pc, #168]	; (8000664 <BT_reader_funct+0xc8>)
 80005bc:	f002 fbee 	bl	8002d9c <HAL_UART_Transmit>
    char receivedData[32];
	command com;


	while (1) {
	        if (FON_UART_Receive(receivedData,500)){
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ff63 	bl	8000494 <FON_UART_Receive>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d01f      	beq.n	8000614 <BT_reader_funct+0x78>
	        	if (strlen(receivedData)==3){
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff fdf9 	bl	80001d0 <strlen>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	d117      	bne.n	8000614 <BT_reader_funct+0x78>
	        		com.button_id 		= receivedData[0] - '0';
 80005e4:	7d3b      	ldrb	r3, [r7, #20]
 80005e6:	3b30      	subs	r3, #48	; 0x30
 80005e8:	60fb      	str	r3, [r7, #12]
					com.button_status  	= 10*(receivedData[1] - '0') + (receivedData[2] - '0');
 80005ea:	7d7b      	ldrb	r3, [r7, #21]
 80005ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80005f0:	4613      	mov	r3, r2
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	4413      	add	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	461a      	mov	r2, r3
 80005fa:	7dbb      	ldrb	r3, [r7, #22]
 80005fc:	3b30      	subs	r3, #48	; 0x30
 80005fe:	4413      	add	r3, r2
 8000600:	613b      	str	r3, [r7, #16]
					osMessageQueuePut(Input_queueHandle, &com, 0, 2000);
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <BT_reader_funct+0xcc>)
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	f107 010c 	add.w	r1, r7, #12
 800060a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800060e:	2200      	movs	r2, #0
 8000610:	f003 fa5c 	bl	8003acc <osMessageQueuePut>
	        	}
	        }


	        while (1){
	        	if (osMessageQueueGet(BT_sendHandle, &res, NULL, 250) == osOK) {
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <BT_reader_funct+0xd0>)
 8000616:	6818      	ldr	r0, [r3, #0]
 8000618:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800061c:	23fa      	movs	r3, #250	; 0xfa
 800061e:	2200      	movs	r2, #0
 8000620:	f003 fac8 	bl	8003bb4 <osMessageQueueGet>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d10c      	bne.n	8000644 <BT_reader_funct+0xa8>
	        	    HAL_UART_Transmit(&huart1, res, strlen(res), 1000);
 800062a:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800062c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff fdce 	bl	80001d0 <strlen>
 8000634:	4603      	mov	r3, r0
 8000636:	b29a      	uxth	r2, r3
 8000638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063c:	4621      	mov	r1, r4
 800063e:	4809      	ldr	r0, [pc, #36]	; (8000664 <BT_reader_funct+0xc8>)
 8000640:	f002 fbac 	bl	8002d9c <HAL_UART_Transmit>
	        	}
	        	if (osMessageQueueGetCount(BT_sendHandle)==0){
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <BT_reader_funct+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fb25 	bl	8003c98 <osMessageQueueGetCount>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d000      	beq.n	8000656 <BT_reader_funct+0xba>
	        	if (osMessageQueueGet(BT_sendHandle, &res, NULL, 250) == osOK) {
 8000654:	e7de      	b.n	8000614 <BT_reader_funct+0x78>
	        		break;
 8000656:	bf00      	nop
	        	}

	        }

	        //osDelay(1000);
	        osThreadYield();
 8000658:	f003 f952 	bl	8003900 <osThreadYield>
	        if (FON_UART_Receive(receivedData,500)){
 800065c:	e7b0      	b.n	80005c0 <BT_reader_funct+0x24>
 800065e:	bf00      	nop
 8000660:	08006aa0 	.word	0x08006aa0
 8000664:	2000007c 	.word	0x2000007c
 8000668:	20000110 	.word	0x20000110
 800066c:	20000114 	.word	0x20000114

08000670 <MT_controller_funct>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MT_controller_funct */
void MT_controller_funct(void *argument)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MT_controller_funct */
  /* Infinite loop */

	int auth = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
	command com;
	//int speed=0; // max = 255

	while(1){
		if (osMessageQueueGet(Input_queueHandle, &com, NULL, 2000)== osOK){
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <MT_controller_funct+0xa8>)
 800067e:	6818      	ldr	r0, [r3, #0]
 8000680:	f107 011c 	add.w	r1, r7, #28
 8000684:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000688:	2200      	movs	r2, #0
 800068a:	f003 fa93 	bl	8003bb4 <osMessageQueueGet>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d13e      	bne.n	8000712 <MT_controller_funct+0xa2>
			if(com.button_id==9){
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	2b09      	cmp	r3, #9
 8000698:	d11c      	bne.n	80006d4 <MT_controller_funct+0x64>
				auth = com.button_status;
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
				if (auth){
 800069e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d00b      	beq.n	80006bc <MT_controller_funct+0x4c>
					char* str = "ABRIU\n";
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MT_controller_funct+0xac>)
 80006a6:	61bb      	str	r3, [r7, #24]
				    osMessageQueuePut(BT_sendHandle, &str, 0, 2000);
 80006a8:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MT_controller_funct+0xb0>)
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	f107 0118 	add.w	r1, r7, #24
 80006b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006b4:	2200      	movs	r2, #0
 80006b6:	f003 fa09 	bl	8003acc <osMessageQueuePut>
 80006ba:	e02a      	b.n	8000712 <MT_controller_funct+0xa2>
				}
				else{
					char* str = "FECHOU\n";
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <MT_controller_funct+0xb4>)
 80006be:	617b      	str	r3, [r7, #20]
				    osMessageQueuePut(BT_sendHandle, &str, 0, 2000);
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MT_controller_funct+0xb0>)
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	f107 0114 	add.w	r1, r7, #20
 80006c8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006cc:	2200      	movs	r2, #0
 80006ce:	f003 f9fd 	bl	8003acc <osMessageQueuePut>
 80006d2:	e01e      	b.n	8000712 <MT_controller_funct+0xa2>
					}
				}
			else if(com.button_id==1){
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d11b      	bne.n	8000712 <MT_controller_funct+0xa2>
				auth = com.button_status;
 80006da:	6a3b      	ldr	r3, [r7, #32]
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
				if (auth){
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d00b      	beq.n	80006fc <MT_controller_funct+0x8c>
					char* str = "SOLTOU\n";
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MT_controller_funct+0xb8>)
 80006e6:	613b      	str	r3, [r7, #16]
				    osMessageQueuePut(BT_sendHandle, &str, 0, 2000);
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <MT_controller_funct+0xb0>)
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	f107 0110 	add.w	r1, r7, #16
 80006f0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006f4:	2200      	movs	r2, #0
 80006f6:	f003 f9e9 	bl	8003acc <osMessageQueuePut>
 80006fa:	e00a      	b.n	8000712 <MT_controller_funct+0xa2>
				}
				else{
					char* str = "FREIOU\n";
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MT_controller_funct+0xbc>)
 80006fe:	60fb      	str	r3, [r7, #12]
				    osMessageQueuePut(BT_sendHandle, &str, 0, 2000);
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MT_controller_funct+0xb0>)
 8000702:	6818      	ldr	r0, [r3, #0]
 8000704:	f107 010c 	add.w	r1, r7, #12
 8000708:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800070c:	2200      	movs	r2, #0
 800070e:	f003 f9dd 	bl	8003acc <osMessageQueuePut>
				}

		}
		if(auth){}
		//osDelay(1000);
        osThreadYield();
 8000712:	f003 f8f5 	bl	8003900 <osThreadYield>
		if (osMessageQueueGet(Input_queueHandle, &com, NULL, 2000)== osOK){
 8000716:	e7b1      	b.n	800067c <MT_controller_funct+0xc>
 8000718:	20000110 	.word	0x20000110
 800071c:	08006ab0 	.word	0x08006ab0
 8000720:	20000114 	.word	0x20000114
 8000724:	08006ab8 	.word	0x08006ab8
 8000728:	08006ac0 	.word	0x08006ac0
 800072c:	08006ac8 	.word	0x08006ac8

08000730 <Sensor_reader_funct>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensor_reader_funct */
void Sensor_reader_funct(void *argument)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sensor_reader_funct */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000738:	2064      	movs	r0, #100	; 0x64
 800073a:	f003 f913 	bl	8003964 <osDelay>
 800073e:	e7fb      	b.n	8000738 <Sensor_reader_funct+0x8>

08000740 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a04      	ldr	r2, [pc, #16]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d101      	bne.n	8000756 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000752:	f000 f96f 	bl	8000a34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40001000 	.word	0x40001000

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <HAL_MspInit+0x4c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	4a10      	ldr	r2, [pc, #64]	; (80007c0 <HAL_MspInit+0x4c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6193      	str	r3, [r2, #24]
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <HAL_MspInit+0x4c>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <HAL_MspInit+0x4c>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <HAL_MspInit+0x4c>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	61d3      	str	r3, [r2, #28]
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <HAL_MspInit+0x4c>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	210f      	movs	r1, #15
 80007ae:	f06f 0001 	mvn.w	r0, #1
 80007b2:	f000 fa17 	bl	8000be4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a17      	ldr	r2, [pc, #92]	; (8000840 <HAL_UART_MspInit+0x7c>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d127      	bne.n	8000836 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <HAL_UART_MspInit+0x80>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	4a16      	ldr	r2, [pc, #88]	; (8000844 <HAL_UART_MspInit+0x80>)
 80007ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f0:	6193      	str	r3, [r2, #24]
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <HAL_UART_MspInit+0x80>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <HAL_UART_MspInit+0x80>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a10      	ldr	r2, [pc, #64]	; (8000844 <HAL_UART_MspInit+0x80>)
 8000804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000808:	6153      	str	r3, [r2, #20]
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <HAL_UART_MspInit+0x80>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000816:	2330      	movs	r3, #48	; 0x30
 8000818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000826:	2307      	movs	r3, #7
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <HAL_UART_MspInit+0x84>)
 8000832:	f000 fa01 	bl	8000c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40013800 	.word	0x40013800
 8000844:	40021000 	.word	0x40021000
 8000848:	48000800 	.word	0x48000800

0800084c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08e      	sub	sp, #56	; 0x38
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000854:	2300      	movs	r3, #0
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800085c:	4b33      	ldr	r3, [pc, #204]	; (800092c <HAL_InitTick+0xe0>)
 800085e:	69db      	ldr	r3, [r3, #28]
 8000860:	4a32      	ldr	r2, [pc, #200]	; (800092c <HAL_InitTick+0xe0>)
 8000862:	f043 0310 	orr.w	r3, r3, #16
 8000866:	61d3      	str	r3, [r2, #28]
 8000868:	4b30      	ldr	r3, [pc, #192]	; (800092c <HAL_InitTick+0xe0>)
 800086a:	69db      	ldr	r3, [r3, #28]
 800086c:	f003 0310 	and.w	r3, r3, #16
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000874:	f107 0210 	add.w	r2, r7, #16
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4611      	mov	r1, r2
 800087e:	4618      	mov	r0, r3
 8000880:	f001 fdf0 	bl	8002464 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000884:	6a3b      	ldr	r3, [r7, #32]
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088a:	2b00      	cmp	r3, #0
 800088c:	d103      	bne.n	8000896 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800088e:	f001 fda5 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 8000892:	6378      	str	r0, [r7, #52]	; 0x34
 8000894:	e004      	b.n	80008a0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000896:	f001 fda1 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 800089a:	4603      	mov	r3, r0
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a2:	4a23      	ldr	r2, [pc, #140]	; (8000930 <HAL_InitTick+0xe4>)
 80008a4:	fba2 2303 	umull	r2, r3, r2, r3
 80008a8:	0c9b      	lsrs	r3, r3, #18
 80008aa:	3b01      	subs	r3, #1
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <HAL_InitTick+0xe8>)
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <HAL_InitTick+0xec>)
 80008b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <HAL_InitTick+0xe8>)
 80008b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008bc:	4a1d      	ldr	r2, [pc, #116]	; (8000934 <HAL_InitTick+0xe8>)
 80008be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <HAL_InitTick+0xe8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <HAL_InitTick+0xe8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <HAL_InitTick+0xe8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80008d4:	4817      	ldr	r0, [pc, #92]	; (8000934 <HAL_InitTick+0xe8>)
 80008d6:	f001 ff89 	bl	80027ec <HAL_TIM_Base_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d11b      	bne.n	8000920 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80008e8:	4812      	ldr	r0, [pc, #72]	; (8000934 <HAL_InitTick+0xe8>)
 80008ea:	f001 ffe1 	bl	80028b0 <HAL_TIM_Base_Start_IT>
 80008ee:	4603      	mov	r3, r0
 80008f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d111      	bne.n	8000920 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008fc:	2036      	movs	r0, #54	; 0x36
 80008fe:	f000 f98d 	bl	8000c1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d808      	bhi.n	800091a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	2036      	movs	r0, #54	; 0x36
 800090e:	f000 f969 	bl	8000be4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_InitTick+0xf0>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	e002      	b.n	8000920 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000920:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000924:	4618      	mov	r0, r3
 8000926:	3738      	adds	r7, #56	; 0x38
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40021000 	.word	0x40021000
 8000930:	431bde83 	.word	0x431bde83
 8000934:	20000118 	.word	0x20000118
 8000938:	40001000 	.word	0x40001000
 800093c:	20000004 	.word	0x20000004

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <NMI_Handler+0x4>

08000946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <MemManage_Handler+0x4>

08000952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <UsageFault_Handler+0x4>

0800095e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BREAK_Pin);
 8000970:	2020      	movs	r0, #32
 8000972:	f000 faeb 	bl	8000f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <TIM6_DAC_IRQHandler+0x10>)
 8000982:	f001 ffe9 	bl	8002958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000118 	.word	0x20000118

08000990 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <SystemInit+0x20>)
 8000996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <SystemInit+0x20>)
 800099c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009b8:	f7ff ffea 	bl	8000990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009be:	490d      	ldr	r1, [pc, #52]	; (80009f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <LoopForever+0xe>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d4:	4c0a      	ldr	r4, [pc, #40]	; (8000a00 <LoopForever+0x16>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e2:	f005 ff11 	bl	8006808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009e6:	f7ff fc35 	bl	8000254 <main>

080009ea <LoopForever>:

LoopForever:
    b LoopForever
 80009ea:	e7fe      	b.n	80009ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009ec:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009f8:	08006bc4 	.word	0x08006bc4
  ldr r2, =_sbss
 80009fc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a00:	20001c88 	.word	0x20001c88

08000a04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC1_IRQHandler>
	...

08000a08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_Init+0x28>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <HAL_Init+0x28>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 f8d8 	bl	8000bce <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1e:	200f      	movs	r0, #15
 8000a20:	f7ff ff14 	bl	800084c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a24:	f7ff fea6 	bl	8000774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40022000 	.word	0x40022000

08000a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_IncTick+0x20>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_IncTick+0x24>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_IncTick+0x24>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000164 	.word	0x20000164

08000a5c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <HAL_GetTick+0x14>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000164 	.word	0x20000164

08000a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	60d3      	str	r3, [r2, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	f003 0307 	and.w	r3, r3, #7
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	db0b      	blt.n	8000b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	f003 021f 	and.w	r2, r3, #31
 8000af0:	4907      	ldr	r1, [pc, #28]	; (8000b10 <__NVIC_EnableIRQ+0x38>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	095b      	lsrs	r3, r3, #5
 8000af8:	2001      	movs	r0, #1
 8000afa:	fa00 f202 	lsl.w	r2, r0, r2
 8000afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0a      	blt.n	8000b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	490c      	ldr	r1, [pc, #48]	; (8000b60 <__NVIC_SetPriority+0x4c>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b3c:	e00a      	b.n	8000b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4908      	ldr	r1, [pc, #32]	; (8000b64 <__NVIC_SetPriority+0x50>)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	761a      	strb	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	f1c3 0307 	rsb	r3, r3, #7
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	bf28      	it	cs
 8000b86:	2304      	movcs	r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d902      	bls.n	8000b98 <NVIC_EncodePriority+0x30>
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3b03      	subs	r3, #3
 8000b96:	e000      	b.n	8000b9a <NVIC_EncodePriority+0x32>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43d9      	mvns	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	4313      	orrs	r3, r2
         );
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3724      	adds	r7, #36	; 0x24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ff4c 	bl	8000a74 <__NVIC_SetPriorityGrouping>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf6:	f7ff ff61 	bl	8000abc <__NVIC_GetPriorityGrouping>
 8000bfa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	68b9      	ldr	r1, [r7, #8]
 8000c00:	6978      	ldr	r0, [r7, #20]
 8000c02:	f7ff ffb1 	bl	8000b68 <NVIC_EncodePriority>
 8000c06:	4602      	mov	r2, r0
 8000c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff80 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c14:	bf00      	nop
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff54 	bl	8000ad8 <__NVIC_EnableIRQ>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c46:	e14e      	b.n	8000ee6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	4013      	ands	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 8140 	beq.w	8000ee0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d005      	beq.n	8000c78 <HAL_GPIO_Init+0x40>
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d130      	bne.n	8000cda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	2203      	movs	r2, #3
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cae:	2201      	movs	r2, #1
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	091b      	lsrs	r3, r3, #4
 8000cc4:	f003 0201 	and.w	r2, r3, #1
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d017      	beq.n	8000d16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d123      	bne.n	8000d6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	08da      	lsrs	r2, r3, #3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3208      	adds	r2, #8
 8000d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	220f      	movs	r2, #15
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	691a      	ldr	r2, [r3, #16]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	6939      	ldr	r1, [r7, #16]
 8000d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0203 	and.w	r2, r3, #3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 809a 	beq.w	8000ee0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dac:	4b55      	ldr	r3, [pc, #340]	; (8000f04 <HAL_GPIO_Init+0x2cc>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a54      	ldr	r2, [pc, #336]	; (8000f04 <HAL_GPIO_Init+0x2cc>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b52      	ldr	r3, [pc, #328]	; (8000f04 <HAL_GPIO_Init+0x2cc>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dc4:	4a50      	ldr	r2, [pc, #320]	; (8000f08 <HAL_GPIO_Init+0x2d0>)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	3302      	adds	r3, #2
 8000dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	220f      	movs	r2, #15
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dee:	d013      	beq.n	8000e18 <HAL_GPIO_Init+0x1e0>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a46      	ldr	r2, [pc, #280]	; (8000f0c <HAL_GPIO_Init+0x2d4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d00d      	beq.n	8000e14 <HAL_GPIO_Init+0x1dc>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a45      	ldr	r2, [pc, #276]	; (8000f10 <HAL_GPIO_Init+0x2d8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d007      	beq.n	8000e10 <HAL_GPIO_Init+0x1d8>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a44      	ldr	r2, [pc, #272]	; (8000f14 <HAL_GPIO_Init+0x2dc>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d101      	bne.n	8000e0c <HAL_GPIO_Init+0x1d4>
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e006      	b.n	8000e1a <HAL_GPIO_Init+0x1e2>
 8000e0c:	2305      	movs	r3, #5
 8000e0e:	e004      	b.n	8000e1a <HAL_GPIO_Init+0x1e2>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e002      	b.n	8000e1a <HAL_GPIO_Init+0x1e2>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <HAL_GPIO_Init+0x1e2>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	f002 0203 	and.w	r2, r2, #3
 8000e20:	0092      	lsls	r2, r2, #2
 8000e22:	4093      	lsls	r3, r2
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e2a:	4937      	ldr	r1, [pc, #220]	; (8000f08 <HAL_GPIO_Init+0x2d0>)
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	3302      	adds	r3, #2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e38:	4b37      	ldr	r3, [pc, #220]	; (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e5c:	4a2e      	ldr	r2, [pc, #184]	; (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e62:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e86:	4a24      	ldr	r2, [pc, #144]	; (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eb0:	4a19      	ldr	r2, [pc, #100]	; (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eb6:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eda:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f47f aea9 	bne.w	8000c48 <HAL_GPIO_Init+0x10>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	bf00      	nop
 8000efa:	371c      	adds	r7, #28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010000 	.word	0x40010000
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	48000800 	.word	0x48000800
 8000f14:	48000c00 	.word	0x48000c00
 8000f18:	40010400 	.word	0x40010400

08000f1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	887b      	ldrh	r3, [r7, #2]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d002      	beq.n	8000f3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	e001      	b.n	8000f3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f58:	695a      	ldr	r2, [r3, #20]
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d006      	beq.n	8000f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f64:	88fb      	ldrh	r3, [r7, #6]
 8000f66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fac4 	bl	80004f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40010400 	.word	0x40010400

08000f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f8c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d102      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f001 b823 	b.w	8001fe8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 817d 	beq.w	80012b2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fb8:	4bbc      	ldr	r3, [pc, #752]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 030c 	and.w	r3, r3, #12
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d00c      	beq.n	8000fde <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fc4:	4bb9      	ldr	r3, [pc, #740]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 030c 	and.w	r3, r3, #12
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d15c      	bne.n	800108a <HAL_RCC_OscConfig+0x10e>
 8000fd0:	4bb6      	ldr	r3, [pc, #728]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fdc:	d155      	bne.n	800108a <HAL_RCC_OscConfig+0x10e>
 8000fde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000fea:	fa93 f3a3 	rbit	r3, r3
 8000fee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ff2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff6:	fab3 f383 	clz	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	095b      	lsrs	r3, r3, #5
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b01      	cmp	r3, #1
 8001008:	d102      	bne.n	8001010 <HAL_RCC_OscConfig+0x94>
 800100a:	4ba8      	ldr	r3, [pc, #672]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	e015      	b.n	800103c <HAL_RCC_OscConfig+0xc0>
 8001010:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001014:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001018:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800101c:	fa93 f3a3 	rbit	r3, r3
 8001020:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001028:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800102c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001038:	4b9c      	ldr	r3, [pc, #624]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001040:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001044:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001048:	fa92 f2a2 	rbit	r2, r2
 800104c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001050:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001054:	fab2 f282 	clz	r2, r2
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	f042 0220 	orr.w	r2, r2, #32
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	f002 021f 	and.w	r2, r2, #31
 8001064:	2101      	movs	r1, #1
 8001066:	fa01 f202 	lsl.w	r2, r1, r2
 800106a:	4013      	ands	r3, r2
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 811f 	beq.w	80012b0 <HAL_RCC_OscConfig+0x334>
 8001072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f040 8116 	bne.w	80012b0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	f000 bfaf 	b.w	8001fe8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800108e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109a:	d106      	bne.n	80010aa <HAL_RCC_OscConfig+0x12e>
 800109c:	4b83      	ldr	r3, [pc, #524]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a82      	ldr	r2, [pc, #520]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 80010a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	e036      	b.n	8001118 <HAL_RCC_OscConfig+0x19c>
 80010aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x158>
 80010ba:	4b7c      	ldr	r3, [pc, #496]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a7b      	ldr	r2, [pc, #492]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 80010c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	4b79      	ldr	r3, [pc, #484]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a78      	ldr	r2, [pc, #480]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 80010cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e021      	b.n	8001118 <HAL_RCC_OscConfig+0x19c>
 80010d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e4:	d10c      	bne.n	8001100 <HAL_RCC_OscConfig+0x184>
 80010e6:	4b71      	ldr	r3, [pc, #452]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a70      	ldr	r2, [pc, #448]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 80010ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	4b6e      	ldr	r3, [pc, #440]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a6d      	ldr	r2, [pc, #436]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 80010f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e00b      	b.n	8001118 <HAL_RCC_OscConfig+0x19c>
 8001100:	4b6a      	ldr	r3, [pc, #424]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a69      	ldr	r2, [pc, #420]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 8001106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b67      	ldr	r3, [pc, #412]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a66      	ldr	r2, [pc, #408]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 8001112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001116:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001118:	4b64      	ldr	r3, [pc, #400]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 800111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111c:	f023 020f 	bic.w	r2, r3, #15
 8001120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001124:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	495f      	ldr	r1, [pc, #380]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 800112e:	4313      	orrs	r3, r2
 8001130:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001136:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d059      	beq.n	80011f6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001142:	f7ff fc8b 	bl	8000a5c <HAL_GetTick>
 8001146:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114a:	e00a      	b.n	8001162 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800114c:	f7ff fc86 	bl	8000a5c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b64      	cmp	r3, #100	; 0x64
 800115a:	d902      	bls.n	8001162 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	f000 bf43 	b.w	8001fe8 <HAL_RCC_OscConfig+0x106c>
 8001162:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001166:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800116e:	fa93 f3a3 	rbit	r3, r3
 8001172:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001176:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	fab3 f383 	clz	r3, r3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	095b      	lsrs	r3, r3, #5
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b01      	cmp	r3, #1
 800118c:	d102      	bne.n	8001194 <HAL_RCC_OscConfig+0x218>
 800118e:	4b47      	ldr	r3, [pc, #284]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	e015      	b.n	80011c0 <HAL_RCC_OscConfig+0x244>
 8001194:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001198:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80011a0:	fa93 f3a3 	rbit	r3, r3
 80011a4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80011a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ac:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80011b0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80011b4:	fa93 f3a3 	rbit	r3, r3
 80011b8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80011bc:	4b3b      	ldr	r3, [pc, #236]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011c4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80011c8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80011cc:	fa92 f2a2 	rbit	r2, r2
 80011d0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80011d4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80011d8:	fab2 f282 	clz	r2, r2
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	f042 0220 	orr.w	r2, r2, #32
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	f002 021f 	and.w	r2, r2, #31
 80011e8:	2101      	movs	r1, #1
 80011ea:	fa01 f202 	lsl.w	r2, r1, r2
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0ab      	beq.n	800114c <HAL_RCC_OscConfig+0x1d0>
 80011f4:	e05d      	b.n	80012b2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f6:	f7ff fc31 	bl	8000a5c <HAL_GetTick>
 80011fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fe:	e00a      	b.n	8001216 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fc2c 	bl	8000a5c <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b64      	cmp	r3, #100	; 0x64
 800120e:	d902      	bls.n	8001216 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	f000 bee9 	b.w	8001fe8 <HAL_RCC_OscConfig+0x106c>
 8001216:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800121a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800122a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122e:	fab3 f383 	clz	r3, r3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	095b      	lsrs	r3, r3, #5
 8001236:	b2db      	uxtb	r3, r3
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b01      	cmp	r3, #1
 8001240:	d102      	bne.n	8001248 <HAL_RCC_OscConfig+0x2cc>
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	e015      	b.n	8001274 <HAL_RCC_OscConfig+0x2f8>
 8001248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800124c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800125c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001260:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001264:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001268:	fa93 f3a3 	rbit	r3, r3
 800126c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_RCC_OscConfig+0x330>)
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001278:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800127c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001280:	fa92 f2a2 	rbit	r2, r2
 8001284:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001288:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800128c:	fab2 f282 	clz	r2, r2
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	f042 0220 	orr.w	r2, r2, #32
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	f002 021f 	and.w	r2, r2, #31
 800129c:	2101      	movs	r1, #1
 800129e:	fa01 f202 	lsl.w	r2, r1, r2
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1ab      	bne.n	8001200 <HAL_RCC_OscConfig+0x284>
 80012a8:	e003      	b.n	80012b2 <HAL_RCC_OscConfig+0x336>
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 817d 	beq.w	80015c2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012c8:	4ba6      	ldr	r3, [pc, #664]	; (8001564 <HAL_RCC_OscConfig+0x5e8>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 030c 	and.w	r3, r3, #12
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00b      	beq.n	80012ec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012d4:	4ba3      	ldr	r3, [pc, #652]	; (8001564 <HAL_RCC_OscConfig+0x5e8>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 030c 	and.w	r3, r3, #12
 80012dc:	2b08      	cmp	r3, #8
 80012de:	d172      	bne.n	80013c6 <HAL_RCC_OscConfig+0x44a>
 80012e0:	4ba0      	ldr	r3, [pc, #640]	; (8001564 <HAL_RCC_OscConfig+0x5e8>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d16c      	bne.n	80013c6 <HAL_RCC_OscConfig+0x44a>
 80012ec:	2302      	movs	r3, #2
 80012ee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80012fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001302:	fab3 f383 	clz	r3, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	095b      	lsrs	r3, r3, #5
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b01      	cmp	r3, #1
 8001314:	d102      	bne.n	800131c <HAL_RCC_OscConfig+0x3a0>
 8001316:	4b93      	ldr	r3, [pc, #588]	; (8001564 <HAL_RCC_OscConfig+0x5e8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	e013      	b.n	8001344 <HAL_RCC_OscConfig+0x3c8>
 800131c:	2302      	movs	r3, #2
 800131e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001322:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001326:	fa93 f3a3 	rbit	r3, r3
 800132a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800132e:	2302      	movs	r3, #2
 8001330:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001334:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001338:	fa93 f3a3 	rbit	r3, r3
 800133c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001340:	4b88      	ldr	r3, [pc, #544]	; (8001564 <HAL_RCC_OscConfig+0x5e8>)
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	2202      	movs	r2, #2
 8001346:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800134a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800134e:	fa92 f2a2 	rbit	r2, r2
 8001352:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001356:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800135a:	fab2 f282 	clz	r2, r2
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	f042 0220 	orr.w	r2, r2, #32
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	f002 021f 	and.w	r2, r2, #31
 800136a:	2101      	movs	r1, #1
 800136c:	fa01 f202 	lsl.w	r2, r1, r2
 8001370:	4013      	ands	r3, r2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00a      	beq.n	800138c <HAL_RCC_OscConfig+0x410>
 8001376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d002      	beq.n	800138c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	f000 be2e 	b.w	8001fe8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138c:	4b75      	ldr	r3, [pc, #468]	; (8001564 <HAL_RCC_OscConfig+0x5e8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001398:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	21f8      	movs	r1, #248	; 0xf8
 80013a2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80013aa:	fa91 f1a1 	rbit	r1, r1
 80013ae:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80013b2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80013b6:	fab1 f181 	clz	r1, r1
 80013ba:	b2c9      	uxtb	r1, r1
 80013bc:	408b      	lsls	r3, r1
 80013be:	4969      	ldr	r1, [pc, #420]	; (8001564 <HAL_RCC_OscConfig+0x5e8>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c4:	e0fd      	b.n	80015c2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 8088 	beq.w	80014e8 <HAL_RCC_OscConfig+0x56c>
 80013d8:	2301      	movs	r3, #1
 80013da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80013e2:	fa93 f3a3 	rbit	r3, r3
 80013e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80013ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ee:	fab3 f383 	clz	r3, r3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	461a      	mov	r2, r3
 8001400:	2301      	movs	r3, #1
 8001402:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fb2a 	bl	8000a5c <HAL_GetTick>
 8001408:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140c:	e00a      	b.n	8001424 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140e:	f7ff fb25 	bl	8000a5c <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d902      	bls.n	8001424 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	f000 bde2 	b.w	8001fe8 <HAL_RCC_OscConfig+0x106c>
 8001424:	2302      	movs	r3, #2
 8001426:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800142e:	fa93 f3a3 	rbit	r3, r3
 8001432:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001436:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143a:	fab3 f383 	clz	r3, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	095b      	lsrs	r3, r3, #5
 8001442:	b2db      	uxtb	r3, r3
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d102      	bne.n	8001454 <HAL_RCC_OscConfig+0x4d8>
 800144e:	4b45      	ldr	r3, [pc, #276]	; (8001564 <HAL_RCC_OscConfig+0x5e8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	e013      	b.n	800147c <HAL_RCC_OscConfig+0x500>
 8001454:	2302      	movs	r3, #2
 8001456:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800146c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001470:	fa93 f3a3 	rbit	r3, r3
 8001474:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001478:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <HAL_RCC_OscConfig+0x5e8>)
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	2202      	movs	r2, #2
 800147e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001482:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001486:	fa92 f2a2 	rbit	r2, r2
 800148a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800148e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001492:	fab2 f282 	clz	r2, r2
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	f042 0220 	orr.w	r2, r2, #32
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	f002 021f 	and.w	r2, r2, #31
 80014a2:	2101      	movs	r1, #1
 80014a4:	fa01 f202 	lsl.w	r2, r1, r2
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0af      	beq.n	800140e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ae:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <HAL_RCC_OscConfig+0x5e8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	21f8      	movs	r1, #248	; 0xf8
 80014c4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80014cc:	fa91 f1a1 	rbit	r1, r1
 80014d0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80014d4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80014d8:	fab1 f181 	clz	r1, r1
 80014dc:	b2c9      	uxtb	r1, r1
 80014de:	408b      	lsls	r3, r1
 80014e0:	4920      	ldr	r1, [pc, #128]	; (8001564 <HAL_RCC_OscConfig+0x5e8>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
 80014e6:	e06c      	b.n	80015c2 <HAL_RCC_OscConfig+0x646>
 80014e8:	2301      	movs	r3, #1
 80014ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014f2:	fa93 f3a3 	rbit	r3, r3
 80014f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80014fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fe:	fab3 f383 	clz	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001508:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	461a      	mov	r2, r3
 8001510:	2300      	movs	r3, #0
 8001512:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff faa2 	bl	8000a5c <HAL_GetTick>
 8001518:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151c:	e00a      	b.n	8001534 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151e:	f7ff fa9d 	bl	8000a5c <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d902      	bls.n	8001534 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	f000 bd5a 	b.w	8001fe8 <HAL_RCC_OscConfig+0x106c>
 8001534:	2302      	movs	r3, #2
 8001536:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800153e:	fa93 f3a3 	rbit	r3, r3
 8001542:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154a:	fab3 f383 	clz	r3, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	095b      	lsrs	r3, r3, #5
 8001552:	b2db      	uxtb	r3, r3
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b01      	cmp	r3, #1
 800155c:	d104      	bne.n	8001568 <HAL_RCC_OscConfig+0x5ec>
 800155e:	4b01      	ldr	r3, [pc, #4]	; (8001564 <HAL_RCC_OscConfig+0x5e8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	e015      	b.n	8001590 <HAL_RCC_OscConfig+0x614>
 8001564:	40021000 	.word	0x40021000
 8001568:	2302      	movs	r3, #2
 800156a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001572:	fa93 f3a3 	rbit	r3, r3
 8001576:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800157a:	2302      	movs	r3, #2
 800157c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001580:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001584:	fa93 f3a3 	rbit	r3, r3
 8001588:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800158c:	4bc8      	ldr	r3, [pc, #800]	; (80018b0 <HAL_RCC_OscConfig+0x934>)
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	2202      	movs	r2, #2
 8001592:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001596:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800159a:	fa92 f2a2 	rbit	r2, r2
 800159e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80015a2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015a6:	fab2 f282 	clz	r2, r2
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	f042 0220 	orr.w	r2, r2, #32
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	f002 021f 	and.w	r2, r2, #31
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f202 	lsl.w	r2, r1, r2
 80015bc:	4013      	ands	r3, r2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1ad      	bne.n	800151e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 8110 	beq.w	80017f8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d079      	beq.n	80016dc <HAL_RCC_OscConfig+0x760>
 80015e8:	2301      	movs	r3, #1
 80015ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80015f2:	fa93 f3a3 	rbit	r3, r3
 80015f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80015fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fe:	fab3 f383 	clz	r3, r3
 8001602:	b2db      	uxtb	r3, r3
 8001604:	461a      	mov	r2, r3
 8001606:	4bab      	ldr	r3, [pc, #684]	; (80018b4 <HAL_RCC_OscConfig+0x938>)
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	461a      	mov	r2, r3
 800160e:	2301      	movs	r3, #1
 8001610:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001612:	f7ff fa23 	bl	8000a5c <HAL_GetTick>
 8001616:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161a:	e00a      	b.n	8001632 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800161c:	f7ff fa1e 	bl	8000a5c <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d902      	bls.n	8001632 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	f000 bcdb 	b.w	8001fe8 <HAL_RCC_OscConfig+0x106c>
 8001632:	2302      	movs	r3, #2
 8001634:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001638:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800163c:	fa93 f3a3 	rbit	r3, r3
 8001640:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001648:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800164c:	2202      	movs	r2, #2
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001654:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	fa93 f2a3 	rbit	r2, r3
 800165e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001662:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001670:	2202      	movs	r2, #2
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	fa93 f2a3 	rbit	r2, r3
 8001682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001686:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800168a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168c:	4b88      	ldr	r3, [pc, #544]	; (80018b0 <HAL_RCC_OscConfig+0x934>)
 800168e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001694:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001698:	2102      	movs	r1, #2
 800169a:	6019      	str	r1, [r3, #0]
 800169c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	fa93 f1a3 	rbit	r1, r3
 80016aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016b2:	6019      	str	r1, [r3, #0]
  return result;
 80016b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	fab3 f383 	clz	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	2101      	movs	r1, #1
 80016d0:	fa01 f303 	lsl.w	r3, r1, r3
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0a0      	beq.n	800161c <HAL_RCC_OscConfig+0x6a0>
 80016da:	e08d      	b.n	80017f8 <HAL_RCC_OscConfig+0x87c>
 80016dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	fa93 f2a3 	rbit	r2, r3
 80016f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016fe:	601a      	str	r2, [r3, #0]
  return result;
 8001700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001704:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001708:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	461a      	mov	r2, r3
 8001712:	4b68      	ldr	r3, [pc, #416]	; (80018b4 <HAL_RCC_OscConfig+0x938>)
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	461a      	mov	r2, r3
 800171a:	2300      	movs	r3, #0
 800171c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171e:	f7ff f99d 	bl	8000a5c <HAL_GetTick>
 8001722:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001726:	e00a      	b.n	800173e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001728:	f7ff f998 	bl	8000a5c <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d902      	bls.n	800173e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	f000 bc55 	b.w	8001fe8 <HAL_RCC_OscConfig+0x106c>
 800173e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001742:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001746:	2202      	movs	r2, #2
 8001748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	fa93 f2a3 	rbit	r2, r3
 8001758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001766:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800176a:	2202      	movs	r2, #2
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	fa93 f2a3 	rbit	r2, r3
 800177c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001780:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800178e:	2202      	movs	r2, #2
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	fa93 f2a3 	rbit	r2, r3
 80017a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017aa:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <HAL_RCC_OscConfig+0x934>)
 80017ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017b6:	2102      	movs	r1, #2
 80017b8:	6019      	str	r1, [r3, #0]
 80017ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	fa93 f1a3 	rbit	r1, r3
 80017c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017d0:	6019      	str	r1, [r3, #0]
  return result;
 80017d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f003 031f 	and.w	r3, r3, #31
 80017ec:	2101      	movs	r1, #1
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d197      	bne.n	8001728 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 81a1 	beq.w	8001b50 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001814:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <HAL_RCC_OscConfig+0x934>)
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d116      	bne.n	800184e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001820:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <HAL_RCC_OscConfig+0x934>)
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	4a22      	ldr	r2, [pc, #136]	; (80018b0 <HAL_RCC_OscConfig+0x934>)
 8001826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182a:	61d3      	str	r3, [r2, #28]
 800182c:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_RCC_OscConfig+0x934>)
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001838:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001842:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001846:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001848:	2301      	movs	r3, #1
 800184a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <HAL_RCC_OscConfig+0x93c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d11a      	bne.n	8001890 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <HAL_RCC_OscConfig+0x93c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a16      	ldr	r2, [pc, #88]	; (80018b8 <HAL_RCC_OscConfig+0x93c>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001866:	f7ff f8f9 	bl	8000a5c <HAL_GetTick>
 800186a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186e:	e009      	b.n	8001884 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001870:	f7ff f8f4 	bl	8000a5c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b64      	cmp	r3, #100	; 0x64
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e3b1      	b.n	8001fe8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_RCC_OscConfig+0x93c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ef      	beq.n	8001870 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001894:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d10d      	bne.n	80018bc <HAL_RCC_OscConfig+0x940>
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_RCC_OscConfig+0x934>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4a02      	ldr	r2, [pc, #8]	; (80018b0 <HAL_RCC_OscConfig+0x934>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6213      	str	r3, [r2, #32]
 80018ac:	e03c      	b.n	8001928 <HAL_RCC_OscConfig+0x9ac>
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	10908120 	.word	0x10908120
 80018b8:	40007000 	.word	0x40007000
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10c      	bne.n	80018e6 <HAL_RCC_OscConfig+0x96a>
 80018cc:	4bc1      	ldr	r3, [pc, #772]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	4ac0      	ldr	r2, [pc, #768]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	6213      	str	r3, [r2, #32]
 80018d8:	4bbe      	ldr	r3, [pc, #760]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	4abd      	ldr	r2, [pc, #756]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 80018de:	f023 0304 	bic.w	r3, r3, #4
 80018e2:	6213      	str	r3, [r2, #32]
 80018e4:	e020      	b.n	8001928 <HAL_RCC_OscConfig+0x9ac>
 80018e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b05      	cmp	r3, #5
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0x994>
 80018f6:	4bb7      	ldr	r3, [pc, #732]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4ab6      	ldr	r2, [pc, #728]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	6213      	str	r3, [r2, #32]
 8001902:	4bb4      	ldr	r3, [pc, #720]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	4ab3      	ldr	r2, [pc, #716]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6213      	str	r3, [r2, #32]
 800190e:	e00b      	b.n	8001928 <HAL_RCC_OscConfig+0x9ac>
 8001910:	4bb0      	ldr	r3, [pc, #704]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	4aaf      	ldr	r2, [pc, #700]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 8001916:	f023 0301 	bic.w	r3, r3, #1
 800191a:	6213      	str	r3, [r2, #32]
 800191c:	4bad      	ldr	r3, [pc, #692]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	4aac      	ldr	r2, [pc, #688]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 8001922:	f023 0304 	bic.w	r3, r3, #4
 8001926:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 8081 	beq.w	8001a3c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193a:	f7ff f88f 	bl	8000a5c <HAL_GetTick>
 800193e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001942:	e00b      	b.n	800195c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001944:	f7ff f88a 	bl	8000a5c <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	f241 3288 	movw	r2, #5000	; 0x1388
 8001954:	4293      	cmp	r3, r2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e345      	b.n	8001fe8 <HAL_RCC_OscConfig+0x106c>
 800195c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001960:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001964:	2202      	movs	r2, #2
 8001966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	fa93 f2a3 	rbit	r2, r3
 8001976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001984:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001988:	2202      	movs	r2, #2
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	fa93 f2a3 	rbit	r2, r3
 800199a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019a2:	601a      	str	r2, [r3, #0]
  return result;
 80019a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	095b      	lsrs	r3, r3, #5
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d102      	bne.n	80019c8 <HAL_RCC_OscConfig+0xa4c>
 80019c2:	4b84      	ldr	r3, [pc, #528]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	e013      	b.n	80019f0 <HAL_RCC_OscConfig+0xa74>
 80019c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80019d0:	2202      	movs	r2, #2
 80019d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	fa93 f2a3 	rbit	r2, r3
 80019e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	4b79      	ldr	r3, [pc, #484]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019f4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80019f8:	2102      	movs	r1, #2
 80019fa:	6011      	str	r1, [r2, #0]
 80019fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a00:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	fa92 f1a2 	rbit	r1, r2
 8001a0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a0e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a12:	6011      	str	r1, [r2, #0]
  return result;
 8001a14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a18:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	fab2 f282 	clz	r2, r2
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	f002 021f 	and.w	r2, r2, #31
 8001a2e:	2101      	movs	r1, #1
 8001a30:	fa01 f202 	lsl.w	r2, r1, r2
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d084      	beq.n	8001944 <HAL_RCC_OscConfig+0x9c8>
 8001a3a:	e07f      	b.n	8001b3c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3c:	f7ff f80e 	bl	8000a5c <HAL_GetTick>
 8001a40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a44:	e00b      	b.n	8001a5e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a46:	f7ff f809 	bl	8000a5c <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e2c4      	b.n	8001fe8 <HAL_RCC_OscConfig+0x106c>
 8001a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a62:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a66:	2202      	movs	r2, #2
 8001a68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	fa93 f2a3 	rbit	r2, r3
 8001a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a86:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a92:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fa93 f2a3 	rbit	r2, r3
 8001a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001aa4:	601a      	str	r2, [r3, #0]
  return result;
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001aae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab0:	fab3 f383 	clz	r3, r3
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	f043 0302 	orr.w	r3, r3, #2
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d102      	bne.n	8001aca <HAL_RCC_OscConfig+0xb4e>
 8001ac4:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	e013      	b.n	8001af2 <HAL_RCC_OscConfig+0xb76>
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ada:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	fa93 f2a3 	rbit	r2, r3
 8001ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001af6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001afa:	2102      	movs	r1, #2
 8001afc:	6011      	str	r1, [r2, #0]
 8001afe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b02:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	fa92 f1a2 	rbit	r1, r2
 8001b0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b10:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b14:	6011      	str	r1, [r2, #0]
  return result;
 8001b16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b1a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	fab2 f282 	clz	r2, r2
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	f002 021f 	and.w	r2, r2, #31
 8001b30:	2101      	movs	r1, #1
 8001b32:	fa01 f202 	lsl.w	r2, r1, r2
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d184      	bne.n	8001a46 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b3c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d105      	bne.n	8001b50 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b44:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	4a22      	ldr	r2, [pc, #136]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 8001b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 8242 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b62:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <HAL_RCC_OscConfig+0xc58>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	f000 8213 	beq.w	8001f96 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	f040 8162 	bne.w	8001e46 <HAL_RCC_OscConfig+0xeca>
 8001b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b86:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b94:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	fa93 f2a3 	rbit	r2, r3
 8001b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ba6:	601a      	str	r2, [r3, #0]
  return result;
 8001ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bac:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bb0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7fe ff48 	bl	8000a5c <HAL_GetTick>
 8001bcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd0:	e00c      	b.n	8001bec <HAL_RCC_OscConfig+0xc70>
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7fe ff40 	bl	8000a5c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e1fd      	b.n	8001fe8 <HAL_RCC_OscConfig+0x106c>
 8001bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001bf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	fa93 f2a3 	rbit	r2, r3
 8001c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c10:	601a      	str	r2, [r3, #0]
  return result;
 8001c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c16:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d102      	bne.n	8001c36 <HAL_RCC_OscConfig+0xcba>
 8001c30:	4bb0      	ldr	r3, [pc, #704]	; (8001ef4 <HAL_RCC_OscConfig+0xf78>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	e027      	b.n	8001c86 <HAL_RCC_OscConfig+0xd0a>
 8001c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c48:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	fa93 f2a3 	rbit	r2, r3
 8001c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c56:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c60:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	fa93 f2a3 	rbit	r2, r3
 8001c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	4b9c      	ldr	r3, [pc, #624]	; (8001ef4 <HAL_RCC_OscConfig+0xf78>)
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c8a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001c8e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c92:	6011      	str	r1, [r2, #0]
 8001c94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c98:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	fa92 f1a2 	rbit	r1, r2
 8001ca2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ca6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001caa:	6011      	str	r1, [r2, #0]
  return result;
 8001cac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cb0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	fab2 f282 	clz	r2, r2
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f042 0220 	orr.w	r2, r2, #32
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	f002 021f 	and.w	r2, r2, #31
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d182      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd2:	4b88      	ldr	r3, [pc, #544]	; (8001ef4 <HAL_RCC_OscConfig+0xf78>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	430b      	orrs	r3, r1
 8001cf4:	497f      	ldr	r1, [pc, #508]	; (8001ef4 <HAL_RCC_OscConfig+0xf78>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
 8001cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	fa93 f2a3 	rbit	r2, r3
 8001d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d1e:	601a      	str	r2, [r3, #0]
  return result;
 8001d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d24:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d28:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7fe fe8c 	bl	8000a5c <HAL_GetTick>
 8001d44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d48:	e009      	b.n	8001d5e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4a:	f7fe fe87 	bl	8000a5c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e144      	b.n	8001fe8 <HAL_RCC_OscConfig+0x106c>
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d70:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	fa93 f2a3 	rbit	r2, r3
 8001d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d82:	601a      	str	r2, [r3, #0]
  return result;
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	095b      	lsrs	r3, r3, #5
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d102      	bne.n	8001da8 <HAL_RCC_OscConfig+0xe2c>
 8001da2:	4b54      	ldr	r3, [pc, #336]	; (8001ef4 <HAL_RCC_OscConfig+0xf78>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	e027      	b.n	8001df8 <HAL_RCC_OscConfig+0xe7c>
 8001da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001db0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	fa93 f2a3 	rbit	r2, r3
 8001dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001dd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	fa93 f2a3 	rbit	r2, r3
 8001dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	4b3f      	ldr	r3, [pc, #252]	; (8001ef4 <HAL_RCC_OscConfig+0xf78>)
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dfc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e04:	6011      	str	r1, [r2, #0]
 8001e06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e0a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	fa92 f1a2 	rbit	r1, r2
 8001e14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e18:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e1c:	6011      	str	r1, [r2, #0]
  return result;
 8001e1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e22:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	fab2 f282 	clz	r2, r2
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	f042 0220 	orr.w	r2, r2, #32
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	f002 021f 	and.w	r2, r2, #31
 8001e38:	2101      	movs	r1, #1
 8001e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d082      	beq.n	8001d4a <HAL_RCC_OscConfig+0xdce>
 8001e44:	e0cf      	b.n	8001fe6 <HAL_RCC_OscConfig+0x106a>
 8001e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e58:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	fa93 f2a3 	rbit	r2, r3
 8001e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e66:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e6a:	601a      	str	r2, [r3, #0]
  return result;
 8001e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e70:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e74:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	461a      	mov	r2, r3
 8001e88:	2300      	movs	r3, #0
 8001e8a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7fe fde6 	bl	8000a5c <HAL_GetTick>
 8001e90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e94:	e009      	b.n	8001eaa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e96:	f7fe fde1 	bl	8000a5c <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e09e      	b.n	8001fe8 <HAL_RCC_OscConfig+0x106c>
 8001eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001eb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	fa93 f2a3 	rbit	r2, r3
 8001ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ece:	601a      	str	r2, [r3, #0]
  return result;
 8001ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ed8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	095b      	lsrs	r3, r3, #5
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d104      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xf7c>
 8001eee:	4b01      	ldr	r3, [pc, #4]	; (8001ef4 <HAL_RCC_OscConfig+0xf78>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	e029      	b.n	8001f48 <HAL_RCC_OscConfig+0xfcc>
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	fa93 f2a3 	rbit	r2, r3
 8001f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f18:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f22:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f30:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f2a3 	rbit	r2, r3
 8001f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <HAL_RCC_OscConfig+0x1078>)
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f4c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f54:	6011      	str	r1, [r2, #0]
 8001f56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f5a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	fa92 f1a2 	rbit	r1, r2
 8001f64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f68:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f6c:	6011      	str	r1, [r2, #0]
  return result;
 8001f6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f72:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	fab2 f282 	clz	r2, r2
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	f042 0220 	orr.w	r2, r2, #32
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	f002 021f 	and.w	r2, r2, #31
 8001f88:	2101      	movs	r1, #1
 8001f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d180      	bne.n	8001e96 <HAL_RCC_OscConfig+0xf1a>
 8001f94:	e027      	b.n	8001fe6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e01e      	b.n	8001fe8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_RCC_OscConfig+0x1078>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fb6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d10b      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001fca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000

08001ff8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b09e      	sub	sp, #120	; 0x78
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e162      	b.n	80022d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002010:	4b90      	ldr	r3, [pc, #576]	; (8002254 <HAL_RCC_ClockConfig+0x25c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d910      	bls.n	8002040 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201e:	4b8d      	ldr	r3, [pc, #564]	; (8002254 <HAL_RCC_ClockConfig+0x25c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 0207 	bic.w	r2, r3, #7
 8002026:	498b      	ldr	r1, [pc, #556]	; (8002254 <HAL_RCC_ClockConfig+0x25c>)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	4313      	orrs	r3, r2
 800202c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	4b89      	ldr	r3, [pc, #548]	; (8002254 <HAL_RCC_ClockConfig+0x25c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e14a      	b.n	80022d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204c:	4b82      	ldr	r3, [pc, #520]	; (8002258 <HAL_RCC_ClockConfig+0x260>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	497f      	ldr	r1, [pc, #508]	; (8002258 <HAL_RCC_ClockConfig+0x260>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 80dc 	beq.w	8002224 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d13c      	bne.n	80020ee <HAL_RCC_ClockConfig+0xf6>
 8002074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002078:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002084:	fab3 f383 	clz	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	b2db      	uxtb	r3, r3
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b01      	cmp	r3, #1
 8002096:	d102      	bne.n	800209e <HAL_RCC_ClockConfig+0xa6>
 8002098:	4b6f      	ldr	r3, [pc, #444]	; (8002258 <HAL_RCC_ClockConfig+0x260>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	e00f      	b.n	80020be <HAL_RCC_ClockConfig+0xc6>
 800209e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	667b      	str	r3, [r7, #100]	; 0x64
 80020ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b0:	663b      	str	r3, [r7, #96]	; 0x60
 80020b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020ba:	4b67      	ldr	r3, [pc, #412]	; (8002258 <HAL_RCC_ClockConfig+0x260>)
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80020c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020c6:	fa92 f2a2 	rbit	r2, r2
 80020ca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80020cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020ce:	fab2 f282 	clz	r2, r2
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	f042 0220 	orr.w	r2, r2, #32
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	f002 021f 	and.w	r2, r2, #31
 80020de:	2101      	movs	r1, #1
 80020e0:	fa01 f202 	lsl.w	r2, r1, r2
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d17b      	bne.n	80021e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e0f3      	b.n	80022d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d13c      	bne.n	8002170 <HAL_RCC_ClockConfig+0x178>
 80020f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	095b      	lsrs	r3, r3, #5
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d102      	bne.n	8002120 <HAL_RCC_ClockConfig+0x128>
 800211a:	4b4f      	ldr	r3, [pc, #316]	; (8002258 <HAL_RCC_ClockConfig+0x260>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	e00f      	b.n	8002140 <HAL_RCC_ClockConfig+0x148>
 8002120:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002124:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	647b      	str	r3, [r7, #68]	; 0x44
 800212e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002132:	643b      	str	r3, [r7, #64]	; 0x40
 8002134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800213c:	4b46      	ldr	r3, [pc, #280]	; (8002258 <HAL_RCC_ClockConfig+0x260>)
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002144:	63ba      	str	r2, [r7, #56]	; 0x38
 8002146:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002148:	fa92 f2a2 	rbit	r2, r2
 800214c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800214e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002150:	fab2 f282 	clz	r2, r2
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	f042 0220 	orr.w	r2, r2, #32
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	f002 021f 	and.w	r2, r2, #31
 8002160:	2101      	movs	r1, #1
 8002162:	fa01 f202 	lsl.w	r2, r1, r2
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d13a      	bne.n	80021e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0b2      	b.n	80022d6 <HAL_RCC_ClockConfig+0x2de>
 8002170:	2302      	movs	r3, #2
 8002172:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	095b      	lsrs	r3, r3, #5
 8002186:	b2db      	uxtb	r3, r3
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b01      	cmp	r3, #1
 8002190:	d102      	bne.n	8002198 <HAL_RCC_ClockConfig+0x1a0>
 8002192:	4b31      	ldr	r3, [pc, #196]	; (8002258 <HAL_RCC_ClockConfig+0x260>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	e00d      	b.n	80021b4 <HAL_RCC_ClockConfig+0x1bc>
 8002198:	2302      	movs	r3, #2
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
 80021a4:	2302      	movs	r3, #2
 80021a6:	623b      	str	r3, [r7, #32]
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	4b29      	ldr	r3, [pc, #164]	; (8002258 <HAL_RCC_ClockConfig+0x260>)
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	2202      	movs	r2, #2
 80021b6:	61ba      	str	r2, [r7, #24]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	fa92 f2a2 	rbit	r2, r2
 80021be:	617a      	str	r2, [r7, #20]
  return result;
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	fab2 f282 	clz	r2, r2
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	f042 0220 	orr.w	r2, r2, #32
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	f002 021f 	and.w	r2, r2, #31
 80021d2:	2101      	movs	r1, #1
 80021d4:	fa01 f202 	lsl.w	r2, r1, r2
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e079      	b.n	80022d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e2:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <HAL_RCC_ClockConfig+0x260>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f023 0203 	bic.w	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	491a      	ldr	r1, [pc, #104]	; (8002258 <HAL_RCC_ClockConfig+0x260>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f4:	f7fe fc32 	bl	8000a5c <HAL_GetTick>
 80021f8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	e00a      	b.n	8002212 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fc:	f7fe fc2e 	bl	8000a5c <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	; 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e061      	b.n	80022d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <HAL_RCC_ClockConfig+0x260>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 020c 	and.w	r2, r3, #12
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	429a      	cmp	r2, r3
 8002222:	d1eb      	bne.n	80021fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_RCC_ClockConfig+0x25c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d214      	bcs.n	800225c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <HAL_RCC_ClockConfig+0x25c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 0207 	bic.w	r2, r3, #7
 800223a:	4906      	ldr	r1, [pc, #24]	; (8002254 <HAL_RCC_ClockConfig+0x25c>)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b04      	ldr	r3, [pc, #16]	; (8002254 <HAL_RCC_ClockConfig+0x25c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d005      	beq.n	800225c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e040      	b.n	80022d6 <HAL_RCC_ClockConfig+0x2de>
 8002254:	40022000 	.word	0x40022000
 8002258:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002268:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <HAL_RCC_ClockConfig+0x2e8>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	491a      	ldr	r1, [pc, #104]	; (80022e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002286:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4912      	ldr	r1, [pc, #72]	; (80022e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800229a:	f000 f829 	bl	80022f0 <HAL_RCC_GetSysClockFreq>
 800229e:	4601      	mov	r1, r0
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <HAL_RCC_ClockConfig+0x2e8>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a8:	22f0      	movs	r2, #240	; 0xf0
 80022aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	fa92 f2a2 	rbit	r2, r2
 80022b2:	60fa      	str	r2, [r7, #12]
  return result;
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	fab2 f282 	clz	r2, r2
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	40d3      	lsrs	r3, r2
 80022be:	4a09      	ldr	r2, [pc, #36]	; (80022e4 <HAL_RCC_ClockConfig+0x2ec>)
 80022c0:	5cd3      	ldrb	r3, [r2, r3]
 80022c2:	fa21 f303 	lsr.w	r3, r1, r3
 80022c6:	4a08      	ldr	r2, [pc, #32]	; (80022e8 <HAL_RCC_ClockConfig+0x2f0>)
 80022c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <HAL_RCC_ClockConfig+0x2f4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fabc 	bl	800084c <HAL_InitTick>
  
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3778      	adds	r7, #120	; 0x78
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	08006b84 	.word	0x08006b84
 80022e8:	20000000 	.word	0x20000000
 80022ec:	20000004 	.word	0x20000004

080022f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b08b      	sub	sp, #44	; 0x2c
 80022f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800230a:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b04      	cmp	r3, #4
 8002318:	d002      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0x30>
 800231a:	2b08      	cmp	r3, #8
 800231c:	d003      	beq.n	8002326 <HAL_RCC_GetSysClockFreq+0x36>
 800231e:	e03c      	b.n	800239a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002320:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002322:	623b      	str	r3, [r7, #32]
      break;
 8002324:	e03c      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800232c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002330:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	fa92 f2a2 	rbit	r2, r2
 8002338:	607a      	str	r2, [r7, #4]
  return result;
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	fab2 f282 	clz	r2, r2
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	40d3      	lsrs	r3, r2
 8002344:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002346:	5cd3      	ldrb	r3, [r2, r3]
 8002348:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800234a:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	220f      	movs	r2, #15
 8002354:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	fa92 f2a2 	rbit	r2, r2
 800235c:	60fa      	str	r2, [r7, #12]
  return result;
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	fab2 f282 	clz	r2, r2
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	40d3      	lsrs	r3, r2
 8002368:	4a14      	ldr	r2, [pc, #80]	; (80023bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002378:	4a0e      	ldr	r2, [pc, #56]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
 8002388:	e004      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	4a0c      	ldr	r2, [pc, #48]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	623b      	str	r3, [r7, #32]
      break;
 8002398:	e002      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800239c:	623b      	str	r3, [r7, #32]
      break;
 800239e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a0:	6a3b      	ldr	r3, [r7, #32]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	372c      	adds	r7, #44	; 0x2c
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
 80023b4:	007a1200 	.word	0x007a1200
 80023b8:	08006b9c 	.word	0x08006b9c
 80023bc:	08006bac 	.word	0x08006bac
 80023c0:	003d0900 	.word	0x003d0900

080023c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000000 	.word	0x20000000

080023dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023e2:	f7ff ffef 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 80023e6:	4601      	mov	r1, r0
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	fa92 f2a2 	rbit	r2, r2
 80023fc:	603a      	str	r2, [r7, #0]
  return result;
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	fab2 f282 	clz	r2, r2
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	40d3      	lsrs	r3, r2
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <HAL_RCC_GetPCLK1Freq+0x40>)
 800240a:	5cd3      	ldrb	r3, [r2, r3]
 800240c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40021000 	.word	0x40021000
 800241c:	08006b94 	.word	0x08006b94

08002420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002426:	f7ff ffcd 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 800242a:	4601      	mov	r1, r0
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002434:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002438:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	fa92 f2a2 	rbit	r2, r2
 8002440:	603a      	str	r2, [r7, #0]
  return result;
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	fab2 f282 	clz	r2, r2
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	40d3      	lsrs	r3, r2
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <HAL_RCC_GetPCLK2Freq+0x40>)
 800244e:	5cd3      	ldrb	r3, [r2, r3]
 8002450:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	08006b94 	.word	0x08006b94

08002464 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	220f      	movs	r2, #15
 8002472:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0203 	and.w	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002480:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <HAL_RCC_GetClockConfig+0x5c>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_RCC_GetClockConfig+0x5c>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	08db      	lsrs	r3, r3, #3
 800249e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <HAL_RCC_GetClockConfig+0x60>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0207 	and.w	r2, r3, #7
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	601a      	str	r2, [r3, #0]
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40022000 	.word	0x40022000

080024c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b092      	sub	sp, #72	; 0x48
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80024d8:	2300      	movs	r3, #0
 80024da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 80d4 	beq.w	8002694 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ec:	4b4e      	ldr	r3, [pc, #312]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10e      	bne.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f8:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	4a4a      	ldr	r2, [pc, #296]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002502:	61d3      	str	r3, [r2, #28]
 8002504:	4b48      	ldr	r3, [pc, #288]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002510:	2301      	movs	r3, #1
 8002512:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002516:	4b45      	ldr	r3, [pc, #276]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d118      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002522:	4b42      	ldr	r3, [pc, #264]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a41      	ldr	r2, [pc, #260]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800252e:	f7fe fa95 	bl	8000a5c <HAL_GetTick>
 8002532:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002534:	e008      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002536:	f7fe fa91 	bl	8000a5c <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b64      	cmp	r3, #100	; 0x64
 8002542:	d901      	bls.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e14b      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002548:	4b38      	ldr	r3, [pc, #224]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002554:	4b34      	ldr	r3, [pc, #208]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800255e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 8084 	beq.w	800266e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002570:	429a      	cmp	r2, r3
 8002572:	d07c      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002574:	4b2c      	ldr	r3, [pc, #176]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800257c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800257e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002582:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800258c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	4b26      	ldr	r3, [pc, #152]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	461a      	mov	r2, r3
 800259e:	2301      	movs	r3, #1
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025b2:	fab3 f383 	clz	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	461a      	mov	r2, r3
 80025c2:	2300      	movs	r3, #0
 80025c4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025c6:	4a18      	ldr	r2, [pc, #96]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d04b      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7fe fa41 	bl	8000a5c <HAL_GetTick>
 80025da:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025dc:	e00a      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025de:	f7fe fa3d 	bl	8000a5c <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e0f5      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80025f4:	2302      	movs	r3, #2
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002600:	2302      	movs	r3, #2
 8002602:	623b      	str	r3, [r7, #32]
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	61fb      	str	r3, [r7, #28]
  return result;
 800260c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	095b      	lsrs	r3, r3, #5
 8002616:	b2db      	uxtb	r3, r3
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d108      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002622:	4b01      	ldr	r3, [pc, #4]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	e00d      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002628:	40021000 	.word	0x40021000
 800262c:	40007000 	.word	0x40007000
 8002630:	10908100 	.word	0x10908100
 8002634:	2302      	movs	r3, #2
 8002636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	4b69      	ldr	r3, [pc, #420]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	2202      	movs	r2, #2
 8002646:	613a      	str	r2, [r7, #16]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	fa92 f2a2 	rbit	r2, r2
 800264e:	60fa      	str	r2, [r7, #12]
  return result;
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	fab2 f282 	clz	r2, r2
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	f002 021f 	and.w	r2, r2, #31
 8002662:	2101      	movs	r1, #1
 8002664:	fa01 f202 	lsl.w	r2, r1, r2
 8002668:	4013      	ands	r3, r2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0b7      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800266e:	4b5e      	ldr	r3, [pc, #376]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	495b      	ldr	r1, [pc, #364]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800267c:	4313      	orrs	r3, r2
 800267e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002680:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002684:	2b01      	cmp	r3, #1
 8002686:	d105      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002688:	4b57      	ldr	r3, [pc, #348]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	4a56      	ldr	r2, [pc, #344]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800268e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002692:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026a0:	4b51      	ldr	r3, [pc, #324]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	f023 0203 	bic.w	r2, r3, #3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	494e      	ldr	r1, [pc, #312]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026be:	4b4a      	ldr	r3, [pc, #296]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f023 0210 	bic.w	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	4947      	ldr	r1, [pc, #284]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80026dc:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	493f      	ldr	r1, [pc, #252]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d008      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026fa:	4b3b      	ldr	r3, [pc, #236]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f023 0220 	bic.w	r2, r3, #32
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	4938      	ldr	r1, [pc, #224]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002708:	4313      	orrs	r3, r2
 800270a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002718:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	4930      	ldr	r1, [pc, #192]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002726:	4313      	orrs	r3, r2
 8002728:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002732:	2b00      	cmp	r3, #0
 8002734:	d008      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002736:	4b2c      	ldr	r3, [pc, #176]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	4929      	ldr	r1, [pc, #164]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002754:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	4921      	ldr	r1, [pc, #132]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002762:	4313      	orrs	r3, r2
 8002764:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d008      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002772:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	491a      	ldr	r1, [pc, #104]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002780:	4313      	orrs	r3, r2
 8002782:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002790:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	4912      	ldr	r1, [pc, #72]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	490b      	ldr	r1, [pc, #44]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	4903      	ldr	r1, [pc, #12]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3748      	adds	r7, #72	; 0x48
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000

080027ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e049      	b.n	8002892 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f841 	bl	800289a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3304      	adds	r3, #4
 8002828:	4619      	mov	r1, r3
 800282a:	4610      	mov	r0, r2
 800282c:	f000 f9dc 	bl	8002be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d001      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e03b      	b.n	8002940 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a19      	ldr	r2, [pc, #100]	; (800294c <HAL_TIM_Base_Start_IT+0x9c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d009      	beq.n	80028fe <HAL_TIM_Base_Start_IT+0x4e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f2:	d004      	beq.n	80028fe <HAL_TIM_Base_Start_IT+0x4e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a15      	ldr	r2, [pc, #84]	; (8002950 <HAL_TIM_Base_Start_IT+0xa0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d115      	bne.n	800292a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	4b13      	ldr	r3, [pc, #76]	; (8002954 <HAL_TIM_Base_Start_IT+0xa4>)
 8002906:	4013      	ands	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2b06      	cmp	r3, #6
 800290e:	d015      	beq.n	800293c <HAL_TIM_Base_Start_IT+0x8c>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002916:	d011      	beq.n	800293c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002928:	e008      	b.n	800293c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	e000      	b.n	800293e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800293c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	40012c00 	.word	0x40012c00
 8002950:	40014000 	.word	0x40014000
 8002954:	00010007 	.word	0x00010007

08002958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b02      	cmp	r3, #2
 800296c:	d122      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b02      	cmp	r3, #2
 800297a:	d11b      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0202 	mvn.w	r2, #2
 8002984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f905 	bl	8002baa <HAL_TIM_IC_CaptureCallback>
 80029a0:	e005      	b.n	80029ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f8f7 	bl	8002b96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f908 	bl	8002bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d122      	bne.n	8002a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d11b      	bne.n	8002a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0204 	mvn.w	r2, #4
 80029d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2202      	movs	r2, #2
 80029de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f8db 	bl	8002baa <HAL_TIM_IC_CaptureCallback>
 80029f4:	e005      	b.n	8002a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f8cd 	bl	8002b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f8de 	bl	8002bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d122      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d11b      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0208 	mvn.w	r2, #8
 8002a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2204      	movs	r2, #4
 8002a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f8b1 	bl	8002baa <HAL_TIM_IC_CaptureCallback>
 8002a48:	e005      	b.n	8002a56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f8a3 	bl	8002b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f8b4 	bl	8002bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2b10      	cmp	r3, #16
 8002a68:	d122      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b10      	cmp	r3, #16
 8002a76:	d11b      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0210 	mvn.w	r2, #16
 8002a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2208      	movs	r2, #8
 8002a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f887 	bl	8002baa <HAL_TIM_IC_CaptureCallback>
 8002a9c:	e005      	b.n	8002aaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f879 	bl	8002b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f88a 	bl	8002bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d10e      	bne.n	8002adc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d107      	bne.n	8002adc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0201 	mvn.w	r2, #1
 8002ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7fd fe32 	bl	8000740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae6:	2b80      	cmp	r3, #128	; 0x80
 8002ae8:	d10e      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af4:	2b80      	cmp	r3, #128	; 0x80
 8002af6:	d107      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f8e8 	bl	8002cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b16:	d10e      	bne.n	8002b36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b22:	2b80      	cmp	r3, #128	; 0x80
 8002b24:	d107      	bne.n	8002b36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f8db 	bl	8002cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b40:	2b40      	cmp	r3, #64	; 0x40
 8002b42:	d10e      	bne.n	8002b62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4e:	2b40      	cmp	r3, #64	; 0x40
 8002b50:	d107      	bne.n	8002b62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f838 	bl	8002bd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	d10e      	bne.n	8002b8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b20      	cmp	r3, #32
 8002b7c:	d107      	bne.n	8002b8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f06f 0220 	mvn.w	r2, #32
 8002b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f89b 	bl	8002cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a2e      	ldr	r2, [pc, #184]	; (8002cb4 <TIM_Base_SetConfig+0xcc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d003      	beq.n	8002c08 <TIM_Base_SetConfig+0x20>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c06:	d108      	bne.n	8002c1a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a25      	ldr	r2, [pc, #148]	; (8002cb4 <TIM_Base_SetConfig+0xcc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00f      	beq.n	8002c42 <TIM_Base_SetConfig+0x5a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c28:	d00b      	beq.n	8002c42 <TIM_Base_SetConfig+0x5a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a22      	ldr	r2, [pc, #136]	; (8002cb8 <TIM_Base_SetConfig+0xd0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d007      	beq.n	8002c42 <TIM_Base_SetConfig+0x5a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a21      	ldr	r2, [pc, #132]	; (8002cbc <TIM_Base_SetConfig+0xd4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d003      	beq.n	8002c42 <TIM_Base_SetConfig+0x5a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a20      	ldr	r2, [pc, #128]	; (8002cc0 <TIM_Base_SetConfig+0xd8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d108      	bne.n	8002c54 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <TIM_Base_SetConfig+0xcc>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00b      	beq.n	8002c98 <TIM_Base_SetConfig+0xb0>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <TIM_Base_SetConfig+0xd0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d007      	beq.n	8002c98 <TIM_Base_SetConfig+0xb0>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a0c      	ldr	r2, [pc, #48]	; (8002cbc <TIM_Base_SetConfig+0xd4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d003      	beq.n	8002c98 <TIM_Base_SetConfig+0xb0>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a0b      	ldr	r2, [pc, #44]	; (8002cc0 <TIM_Base_SetConfig+0xd8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d103      	bne.n	8002ca0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	615a      	str	r2, [r3, #20]
}
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40012c00 	.word	0x40012c00
 8002cb8:	40014000 	.word	0x40014000
 8002cbc:	40014400 	.word	0x40014400
 8002cc0:	40014800 	.word	0x40014800

08002cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e040      	b.n	8002d94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fd fd4e 	bl	80007c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2224      	movs	r2, #36	; 0x24
 8002d2c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0201 	bic.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f980 	bl	8003044 <UART_SetConfig>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e022      	b.n	8002d94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 faaa 	bl	80032b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fb31 	bl	80033f4 <UART_CheckIdleState>
 8002d92:	4603      	mov	r3, r0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08a      	sub	sp, #40	; 0x28
 8002da0:	af02      	add	r7, sp, #8
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d178      	bne.n	8002ea6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_UART_Transmit+0x24>
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e071      	b.n	8002ea8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2221      	movs	r2, #33	; 0x21
 8002dd0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dd2:	f7fd fe43 	bl	8000a5c <HAL_GetTick>
 8002dd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	88fa      	ldrh	r2, [r7, #6]
 8002ddc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	88fa      	ldrh	r2, [r7, #6]
 8002de4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df0:	d108      	bne.n	8002e04 <HAL_UART_Transmit+0x68>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d104      	bne.n	8002e04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	61bb      	str	r3, [r7, #24]
 8002e02:	e003      	b.n	8002e0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e0c:	e030      	b.n	8002e70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2200      	movs	r2, #0
 8002e16:	2180      	movs	r1, #128	; 0x80
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 fb93 	bl	8003544 <UART_WaitOnFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d004      	beq.n	8002e2e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e03c      	b.n	8002ea8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10b      	bne.n	8002e4c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	881a      	ldrh	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e40:	b292      	uxth	r2, r2
 8002e42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	3302      	adds	r3, #2
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	e008      	b.n	8002e5e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	781a      	ldrb	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	b292      	uxth	r2, r2
 8002e56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1c8      	bne.n	8002e0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2200      	movs	r2, #0
 8002e84:	2140      	movs	r1, #64	; 0x40
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fb5c 	bl	8003544 <UART_WaitOnFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d004      	beq.n	8002e9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2220      	movs	r2, #32
 8002e96:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e005      	b.n	8002ea8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e000      	b.n	8002ea8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002ea6:	2302      	movs	r3, #2
  }
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3720      	adds	r7, #32
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	; 0x28
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	f040 80b6 	bne.w	8003038 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_UART_Receive+0x28>
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0ae      	b.n	800303a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2222      	movs	r2, #34	; 0x22
 8002ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ef2:	f7fd fdb3 	bl	8000a5c <HAL_GetTick>
 8002ef6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	88fa      	ldrh	r2, [r7, #6]
 8002efc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	88fa      	ldrh	r2, [r7, #6]
 8002f04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f10:	d10e      	bne.n	8002f30 <HAL_UART_Receive+0x80>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d105      	bne.n	8002f26 <HAL_UART_Receive+0x76>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002f20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f24:	e02d      	b.n	8002f82 <HAL_UART_Receive+0xd2>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	22ff      	movs	r2, #255	; 0xff
 8002f2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f2e:	e028      	b.n	8002f82 <HAL_UART_Receive+0xd2>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10d      	bne.n	8002f54 <HAL_UART_Receive+0xa4>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d104      	bne.n	8002f4a <HAL_UART_Receive+0x9a>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	22ff      	movs	r2, #255	; 0xff
 8002f44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f48:	e01b      	b.n	8002f82 <HAL_UART_Receive+0xd2>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	227f      	movs	r2, #127	; 0x7f
 8002f4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f52:	e016      	b.n	8002f82 <HAL_UART_Receive+0xd2>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f5c:	d10d      	bne.n	8002f7a <HAL_UART_Receive+0xca>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d104      	bne.n	8002f70 <HAL_UART_Receive+0xc0>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	227f      	movs	r2, #127	; 0x7f
 8002f6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f6e:	e008      	b.n	8002f82 <HAL_UART_Receive+0xd2>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	223f      	movs	r2, #63	; 0x3f
 8002f74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f78:	e003      	b.n	8002f82 <HAL_UART_Receive+0xd2>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002f88:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f92:	d108      	bne.n	8002fa6 <HAL_UART_Receive+0xf6>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d104      	bne.n	8002fa6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	61bb      	str	r3, [r7, #24]
 8002fa4:	e003      	b.n	8002fae <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002fae:	e037      	b.n	8003020 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2120      	movs	r1, #32
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 fac2 	bl	8003544 <UART_WaitOnFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e033      	b.n	800303a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10c      	bne.n	8002ff2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	8a7b      	ldrh	r3, [r7, #18]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	3302      	adds	r3, #2
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	e00d      	b.n	800300e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	8a7b      	ldrh	r3, [r7, #18]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	4013      	ands	r3, r2
 8003002:	b2da      	uxtb	r2, r3
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	3301      	adds	r3, #1
 800300c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1c1      	bne.n	8002fb0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	e000      	b.n	800303a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003038:	2302      	movs	r3, #2
  }
}
 800303a:	4618      	mov	r0, r3
 800303c:	3720      	adds	r7, #32
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4b8a      	ldr	r3, [pc, #552]	; (8003298 <UART_SetConfig+0x254>)
 8003070:	4013      	ands	r3, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	6979      	ldr	r1, [r7, #20]
 8003078:	430b      	orrs	r3, r1
 800307a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a78      	ldr	r2, [pc, #480]	; (800329c <UART_SetConfig+0x258>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d120      	bne.n	8003102 <UART_SetConfig+0xbe>
 80030c0:	4b77      	ldr	r3, [pc, #476]	; (80032a0 <UART_SetConfig+0x25c>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d817      	bhi.n	80030fc <UART_SetConfig+0xb8>
 80030cc:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <UART_SetConfig+0x90>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	080030e5 	.word	0x080030e5
 80030d8:	080030f1 	.word	0x080030f1
 80030dc:	080030f7 	.word	0x080030f7
 80030e0:	080030eb 	.word	0x080030eb
 80030e4:	2300      	movs	r3, #0
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	e01d      	b.n	8003126 <UART_SetConfig+0xe2>
 80030ea:	2302      	movs	r3, #2
 80030ec:	77fb      	strb	r3, [r7, #31]
 80030ee:	e01a      	b.n	8003126 <UART_SetConfig+0xe2>
 80030f0:	2304      	movs	r3, #4
 80030f2:	77fb      	strb	r3, [r7, #31]
 80030f4:	e017      	b.n	8003126 <UART_SetConfig+0xe2>
 80030f6:	2308      	movs	r3, #8
 80030f8:	77fb      	strb	r3, [r7, #31]
 80030fa:	e014      	b.n	8003126 <UART_SetConfig+0xe2>
 80030fc:	2310      	movs	r3, #16
 80030fe:	77fb      	strb	r3, [r7, #31]
 8003100:	e011      	b.n	8003126 <UART_SetConfig+0xe2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a67      	ldr	r2, [pc, #412]	; (80032a4 <UART_SetConfig+0x260>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d102      	bne.n	8003112 <UART_SetConfig+0xce>
 800310c:	2300      	movs	r3, #0
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e009      	b.n	8003126 <UART_SetConfig+0xe2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a64      	ldr	r2, [pc, #400]	; (80032a8 <UART_SetConfig+0x264>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d102      	bne.n	8003122 <UART_SetConfig+0xde>
 800311c:	2300      	movs	r3, #0
 800311e:	77fb      	strb	r3, [r7, #31]
 8003120:	e001      	b.n	8003126 <UART_SetConfig+0xe2>
 8003122:	2310      	movs	r3, #16
 8003124:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800312e:	d15a      	bne.n	80031e6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003130:	7ffb      	ldrb	r3, [r7, #31]
 8003132:	2b08      	cmp	r3, #8
 8003134:	d827      	bhi.n	8003186 <UART_SetConfig+0x142>
 8003136:	a201      	add	r2, pc, #4	; (adr r2, 800313c <UART_SetConfig+0xf8>)
 8003138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313c:	08003161 	.word	0x08003161
 8003140:	08003169 	.word	0x08003169
 8003144:	08003171 	.word	0x08003171
 8003148:	08003187 	.word	0x08003187
 800314c:	08003177 	.word	0x08003177
 8003150:	08003187 	.word	0x08003187
 8003154:	08003187 	.word	0x08003187
 8003158:	08003187 	.word	0x08003187
 800315c:	0800317f 	.word	0x0800317f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003160:	f7ff f93c 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 8003164:	61b8      	str	r0, [r7, #24]
        break;
 8003166:	e013      	b.n	8003190 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003168:	f7ff f95a 	bl	8002420 <HAL_RCC_GetPCLK2Freq>
 800316c:	61b8      	str	r0, [r7, #24]
        break;
 800316e:	e00f      	b.n	8003190 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003170:	4b4e      	ldr	r3, [pc, #312]	; (80032ac <UART_SetConfig+0x268>)
 8003172:	61bb      	str	r3, [r7, #24]
        break;
 8003174:	e00c      	b.n	8003190 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003176:	f7ff f8bb 	bl	80022f0 <HAL_RCC_GetSysClockFreq>
 800317a:	61b8      	str	r0, [r7, #24]
        break;
 800317c:	e008      	b.n	8003190 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800317e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003182:	61bb      	str	r3, [r7, #24]
        break;
 8003184:	e004      	b.n	8003190 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	77bb      	strb	r3, [r7, #30]
        break;
 800318e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d074      	beq.n	8003280 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	005a      	lsls	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	085b      	lsrs	r3, r3, #1
 80031a0:	441a      	add	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b0f      	cmp	r3, #15
 80031b0:	d916      	bls.n	80031e0 <UART_SetConfig+0x19c>
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b8:	d212      	bcs.n	80031e0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f023 030f 	bic.w	r3, r3, #15
 80031c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	89fb      	ldrh	r3, [r7, #14]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	89fa      	ldrh	r2, [r7, #14]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	e04f      	b.n	8003280 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	77bb      	strb	r3, [r7, #30]
 80031e4:	e04c      	b.n	8003280 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031e6:	7ffb      	ldrb	r3, [r7, #31]
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d828      	bhi.n	800323e <UART_SetConfig+0x1fa>
 80031ec:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <UART_SetConfig+0x1b0>)
 80031ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f2:	bf00      	nop
 80031f4:	08003219 	.word	0x08003219
 80031f8:	08003221 	.word	0x08003221
 80031fc:	08003229 	.word	0x08003229
 8003200:	0800323f 	.word	0x0800323f
 8003204:	0800322f 	.word	0x0800322f
 8003208:	0800323f 	.word	0x0800323f
 800320c:	0800323f 	.word	0x0800323f
 8003210:	0800323f 	.word	0x0800323f
 8003214:	08003237 	.word	0x08003237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003218:	f7ff f8e0 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 800321c:	61b8      	str	r0, [r7, #24]
        break;
 800321e:	e013      	b.n	8003248 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003220:	f7ff f8fe 	bl	8002420 <HAL_RCC_GetPCLK2Freq>
 8003224:	61b8      	str	r0, [r7, #24]
        break;
 8003226:	e00f      	b.n	8003248 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003228:	4b20      	ldr	r3, [pc, #128]	; (80032ac <UART_SetConfig+0x268>)
 800322a:	61bb      	str	r3, [r7, #24]
        break;
 800322c:	e00c      	b.n	8003248 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800322e:	f7ff f85f 	bl	80022f0 <HAL_RCC_GetSysClockFreq>
 8003232:	61b8      	str	r0, [r7, #24]
        break;
 8003234:	e008      	b.n	8003248 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800323a:	61bb      	str	r3, [r7, #24]
        break;
 800323c:	e004      	b.n	8003248 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	77bb      	strb	r3, [r7, #30]
        break;
 8003246:	bf00      	nop
    }

    if (pclk != 0U)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d018      	beq.n	8003280 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	085a      	lsrs	r2, r3, #1
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	441a      	add	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2b0f      	cmp	r3, #15
 8003266:	d909      	bls.n	800327c <UART_SetConfig+0x238>
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326e:	d205      	bcs.n	800327c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	b29a      	uxth	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	e001      	b.n	8003280 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800328c:	7fbb      	ldrb	r3, [r7, #30]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3720      	adds	r7, #32
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	efff69f3 	.word	0xefff69f3
 800329c:	40013800 	.word	0x40013800
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40004400 	.word	0x40004400
 80032a8:	40004800 	.word	0x40004800
 80032ac:	007a1200 	.word	0x007a1200

080032b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01a      	beq.n	80033c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ae:	d10a      	bne.n	80033c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	605a      	str	r2, [r3, #4]
  }
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b098      	sub	sp, #96	; 0x60
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003404:	f7fd fb2a 	bl	8000a5c <HAL_GetTick>
 8003408:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b08      	cmp	r3, #8
 8003416:	d12e      	bne.n	8003476 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003418:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003420:	2200      	movs	r2, #0
 8003422:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f88c 	bl	8003544 <UART_WaitOnFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d021      	beq.n	8003476 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343a:	e853 3f00 	ldrex	r3, [r3]
 800343e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003446:	653b      	str	r3, [r7, #80]	; 0x50
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003450:	647b      	str	r3, [r7, #68]	; 0x44
 8003452:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003454:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003456:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003458:	e841 2300 	strex	r3, r2, [r1]
 800345c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800345e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e6      	bne.n	8003432 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e062      	b.n	800353c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b04      	cmp	r3, #4
 8003482:	d149      	bne.n	8003518 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003484:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800348c:	2200      	movs	r2, #0
 800348e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f856 	bl	8003544 <UART_WaitOnFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d03c      	beq.n	8003518 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	e853 3f00 	ldrex	r3, [r3]
 80034aa:	623b      	str	r3, [r7, #32]
   return(result);
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034bc:	633b      	str	r3, [r7, #48]	; 0x30
 80034be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e6      	bne.n	800349e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3308      	adds	r3, #8
 80034d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	e853 3f00 	ldrex	r3, [r3]
 80034de:	60fb      	str	r3, [r7, #12]
   return(result);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3308      	adds	r3, #8
 80034ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034f0:	61fa      	str	r2, [r7, #28]
 80034f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f4:	69b9      	ldr	r1, [r7, #24]
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	e841 2300 	strex	r3, r2, [r1]
 80034fc:	617b      	str	r3, [r7, #20]
   return(result);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1e5      	bne.n	80034d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e011      	b.n	800353c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3758      	adds	r7, #88	; 0x58
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003554:	e049      	b.n	80035ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800355c:	d045      	beq.n	80035ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355e:	f7fd fa7d 	bl	8000a5c <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	429a      	cmp	r2, r3
 800356c:	d302      	bcc.n	8003574 <UART_WaitOnFlagUntilTimeout+0x30>
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e048      	b.n	800360a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	2b00      	cmp	r3, #0
 8003584:	d031      	beq.n	80035ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b08      	cmp	r3, #8
 8003592:	d110      	bne.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2208      	movs	r2, #8
 800359a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f838 	bl	8003612 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2208      	movs	r2, #8
 80035a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e029      	b.n	800360a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c4:	d111      	bne.n	80035ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f81e 	bl	8003612 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e00f      	b.n	800360a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69da      	ldr	r2, [r3, #28]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4013      	ands	r3, r2
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	bf0c      	ite	eq
 80035fa:	2301      	moveq	r3, #1
 80035fc:	2300      	movne	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	429a      	cmp	r2, r3
 8003606:	d0a6      	beq.n	8003556 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003612:	b480      	push	{r7}
 8003614:	b095      	sub	sp, #84	; 0x54
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800362e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	461a      	mov	r2, r3
 8003636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003638:	643b      	str	r3, [r7, #64]	; 0x40
 800363a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800363e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e6      	bne.n	800361a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3308      	adds	r3, #8
 8003652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	61fb      	str	r3, [r7, #28]
   return(result);
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	64bb      	str	r3, [r7, #72]	; 0x48
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3308      	adds	r3, #8
 800366a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800366c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003684:	2b01      	cmp	r3, #1
 8003686:	d118      	bne.n	80036ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	e853 3f00 	ldrex	r3, [r3]
 8003694:	60bb      	str	r3, [r7, #8]
   return(result);
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f023 0310 	bic.w	r3, r3, #16
 800369c:	647b      	str	r3, [r7, #68]	; 0x44
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036aa:	6979      	ldr	r1, [r7, #20]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	e841 2300 	strex	r3, r2, [r1]
 80036b2:	613b      	str	r3, [r7, #16]
   return(result);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1e6      	bne.n	8003688 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80036ce:	bf00      	nop
 80036d0:	3754      	adds	r7, #84	; 0x54
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036e2:	f3ef 8305 	mrs	r3, IPSR
 80036e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80036e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10f      	bne.n	800370e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ee:	f3ef 8310 	mrs	r3, PRIMASK
 80036f2:	607b      	str	r3, [r7, #4]
  return(result);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <osKernelInitialize+0x32>
 80036fa:	4b11      	ldr	r3, [pc, #68]	; (8003740 <osKernelInitialize+0x64>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d109      	bne.n	8003716 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003702:	f3ef 8311 	mrs	r3, BASEPRI
 8003706:	603b      	str	r3, [r7, #0]
  return(result);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800370e:	f06f 0305 	mvn.w	r3, #5
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e00c      	b.n	8003730 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003716:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <osKernelInitialize+0x64>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d105      	bne.n	800372a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800371e:	4b08      	ldr	r3, [pc, #32]	; (8003740 <osKernelInitialize+0x64>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e002      	b.n	8003730 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800372a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800372e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003730:	68fb      	ldr	r3, [r7, #12]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	20000168 	.word	0x20000168

08003744 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800374a:	f3ef 8305 	mrs	r3, IPSR
 800374e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003750:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10f      	bne.n	8003776 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003756:	f3ef 8310 	mrs	r3, PRIMASK
 800375a:	607b      	str	r3, [r7, #4]
  return(result);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d109      	bne.n	8003776 <osKernelStart+0x32>
 8003762:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <osKernelStart+0x64>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d109      	bne.n	800377e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800376a:	f3ef 8311 	mrs	r3, BASEPRI
 800376e:	603b      	str	r3, [r7, #0]
  return(result);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003776:	f06f 0305 	mvn.w	r3, #5
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	e00e      	b.n	800379c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <osKernelStart+0x64>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d107      	bne.n	8003796 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <osKernelStart+0x64>)
 8003788:	2202      	movs	r2, #2
 800378a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800378c:	f001 fb60 	bl	8004e50 <vTaskStartScheduler>
      stat = osOK;
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	e002      	b.n	800379c <osKernelStart+0x58>
    } else {
      stat = osError;
 8003796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800379a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800379c:	68fb      	ldr	r3, [r7, #12]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000168 	.word	0x20000168

080037ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b092      	sub	sp, #72	; 0x48
 80037b0:	af04      	add	r7, sp, #16
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037bc:	f3ef 8305 	mrs	r3, IPSR
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f040 8094 	bne.w	80038f2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ca:	f3ef 8310 	mrs	r3, PRIMASK
 80037ce:	623b      	str	r3, [r7, #32]
  return(result);
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f040 808d 	bne.w	80038f2 <osThreadNew+0x146>
 80037d8:	4b48      	ldr	r3, [pc, #288]	; (80038fc <osThreadNew+0x150>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d106      	bne.n	80037ee <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037e0:	f3ef 8311 	mrs	r3, BASEPRI
 80037e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f040 8082 	bne.w	80038f2 <osThreadNew+0x146>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d07e      	beq.n	80038f2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80037f8:	2318      	movs	r3, #24
 80037fa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80037fc:	2300      	movs	r3, #0
 80037fe:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003800:	f107 031b 	add.w	r3, r7, #27
 8003804:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800380a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d045      	beq.n	800389e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <osThreadNew+0x74>
        name = attr->name;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <osThreadNew+0x9a>
 8003834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003836:	2b38      	cmp	r3, #56	; 0x38
 8003838:	d805      	bhi.n	8003846 <osThreadNew+0x9a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <osThreadNew+0x9e>
        return (NULL);
 8003846:	2300      	movs	r3, #0
 8003848:	e054      	b.n	80038f4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00e      	beq.n	8003880 <osThreadNew+0xd4>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2ba7      	cmp	r3, #167	; 0xa7
 8003868:	d90a      	bls.n	8003880 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800386e:	2b00      	cmp	r3, #0
 8003870:	d006      	beq.n	8003880 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <osThreadNew+0xd4>
        mem = 1;
 800387a:	2301      	movs	r3, #1
 800387c:	62bb      	str	r3, [r7, #40]	; 0x28
 800387e:	e010      	b.n	80038a2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10c      	bne.n	80038a2 <osThreadNew+0xf6>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d108      	bne.n	80038a2 <osThreadNew+0xf6>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d104      	bne.n	80038a2 <osThreadNew+0xf6>
          mem = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	62bb      	str	r3, [r7, #40]	; 0x28
 800389c:	e001      	b.n	80038a2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d110      	bne.n	80038ca <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038b0:	9202      	str	r2, [sp, #8]
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f001 f8e2 	bl	8004a88 <xTaskCreateStatic>
 80038c4:	4603      	mov	r3, r0
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	e013      	b.n	80038f2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d110      	bne.n	80038f2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f001 f92c 	bl	8004b40 <xTaskCreate>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d001      	beq.n	80038f2 <osThreadNew+0x146>
          hTask = NULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80038f2:	697b      	ldr	r3, [r7, #20]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3738      	adds	r7, #56	; 0x38
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000168 	.word	0x20000168

08003900 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003906:	f3ef 8305 	mrs	r3, IPSR
 800390a:	60bb      	str	r3, [r7, #8]
  return(result);
 800390c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10f      	bne.n	8003932 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003912:	f3ef 8310 	mrs	r3, PRIMASK
 8003916:	607b      	str	r3, [r7, #4]
  return(result);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <osThreadYield+0x32>
 800391e:	4b0f      	ldr	r3, [pc, #60]	; (800395c <osThreadYield+0x5c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d109      	bne.n	800393a <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003926:	f3ef 8311 	mrs	r3, BASEPRI
 800392a:	603b      	str	r3, [r7, #0]
  return(result);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <osThreadYield+0x3a>
    stat = osErrorISR;
 8003932:	f06f 0305 	mvn.w	r3, #5
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	e009      	b.n	800394e <osThreadYield+0x4e>
  } else {
    stat = osOK;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 800393e:	4b08      	ldr	r3, [pc, #32]	; (8003960 <osThreadYield+0x60>)
 8003940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800394e:	68fb      	ldr	r3, [r7, #12]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	20000168 	.word	0x20000168
 8003960:	e000ed04 	.word	0xe000ed04

08003964 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800396c:	f3ef 8305 	mrs	r3, IPSR
 8003970:	613b      	str	r3, [r7, #16]
  return(result);
 8003972:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10f      	bne.n	8003998 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003978:	f3ef 8310 	mrs	r3, PRIMASK
 800397c:	60fb      	str	r3, [r7, #12]
  return(result);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d109      	bne.n	8003998 <osDelay+0x34>
 8003984:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <osDelay+0x58>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d109      	bne.n	80039a0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800398c:	f3ef 8311 	mrs	r3, BASEPRI
 8003990:	60bb      	str	r3, [r7, #8]
  return(result);
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <osDelay+0x3c>
    stat = osErrorISR;
 8003998:	f06f 0305 	mvn.w	r3, #5
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	e007      	b.n	80039b0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f001 fa1c 	bl	8004de8 <vTaskDelay>
    }
  }

  return (stat);
 80039b0:	697b      	ldr	r3, [r7, #20]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000168 	.word	0x20000168

080039c0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08c      	sub	sp, #48	; 0x30
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039d0:	f3ef 8305 	mrs	r3, IPSR
 80039d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80039d6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d16f      	bne.n	8003abc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039dc:	f3ef 8310 	mrs	r3, PRIMASK
 80039e0:	617b      	str	r3, [r7, #20]
  return(result);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d169      	bne.n	8003abc <osMessageQueueNew+0xfc>
 80039e8:	4b37      	ldr	r3, [pc, #220]	; (8003ac8 <osMessageQueueNew+0x108>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d105      	bne.n	80039fc <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039f0:	f3ef 8311 	mrs	r3, BASEPRI
 80039f4:	613b      	str	r3, [r7, #16]
  return(result);
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d15f      	bne.n	8003abc <osMessageQueueNew+0xfc>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d05c      	beq.n	8003abc <osMessageQueueNew+0xfc>
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d059      	beq.n	8003abc <osMessageQueueNew+0xfc>
    mem = -1;
 8003a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a0c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d029      	beq.n	8003a68 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d012      	beq.n	8003a42 <osMessageQueueNew+0x82>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b4f      	cmp	r3, #79	; 0x4f
 8003a22:	d90e      	bls.n	8003a42 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	695a      	ldr	r2, [r3, #20]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d302      	bcc.n	8003a42 <osMessageQueueNew+0x82>
        mem = 1;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	623b      	str	r3, [r7, #32]
 8003a40:	e014      	b.n	8003a6c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d110      	bne.n	8003a6c <osMessageQueueNew+0xac>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10c      	bne.n	8003a6c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d108      	bne.n	8003a6c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d104      	bne.n	8003a6c <osMessageQueueNew+0xac>
          mem = 0;
 8003a62:	2300      	movs	r3, #0
 8003a64:	623b      	str	r3, [r7, #32]
 8003a66:	e001      	b.n	8003a6c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d10b      	bne.n	8003a8a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	9100      	str	r1, [sp, #0]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 fa8b 	bl	8003f9c <xQueueGenericCreateStatic>
 8003a86:	6278      	str	r0, [r7, #36]	; 0x24
 8003a88:	e008      	b.n	8003a9c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d105      	bne.n	8003a9c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003a90:	2200      	movs	r2, #0
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 faf8 	bl	800408a <xQueueGenericCreate>
 8003a9a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00c      	beq.n	8003abc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <osMessageQueueNew+0xf0>
        name = attr->name;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	e001      	b.n	8003ab4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003ab4:	69f9      	ldr	r1, [r7, #28]
 8003ab6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ab8:	f000 ff88 	bl	80049cc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3728      	adds	r7, #40	; 0x28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000168 	.word	0x20000168

08003acc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	; 0x28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ae4:	f3ef 8305 	mrs	r3, IPSR
 8003ae8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003aea:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10f      	bne.n	8003b10 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af0:	f3ef 8310 	mrs	r3, PRIMASK
 8003af4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <osMessageQueuePut+0x44>
 8003afc:	4b2b      	ldr	r3, [pc, #172]	; (8003bac <osMessageQueuePut+0xe0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d12e      	bne.n	8003b62 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b04:	f3ef 8311 	mrs	r3, BASEPRI
 8003b08:	617b      	str	r3, [r7, #20]
  return(result);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d028      	beq.n	8003b62 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <osMessageQueuePut+0x56>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <osMessageQueuePut+0x56>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8003b22:	f06f 0303 	mvn.w	r3, #3
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b28:	e039      	b.n	8003b9e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003b2e:	f107 0210 	add.w	r2, r7, #16
 8003b32:	2300      	movs	r3, #0
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	6a38      	ldr	r0, [r7, #32]
 8003b38:	f000 fc06 	bl	8004348 <xQueueGenericSendFromISR>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d003      	beq.n	8003b4a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8003b42:	f06f 0302 	mvn.w	r3, #2
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b48:	e029      	b.n	8003b9e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d026      	beq.n	8003b9e <osMessageQueuePut+0xd2>
 8003b50:	4b17      	ldr	r3, [pc, #92]	; (8003bb0 <osMessageQueuePut+0xe4>)
 8003b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b60:	e01d      	b.n	8003b9e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <osMessageQueuePut+0xa2>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d103      	bne.n	8003b76 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003b6e:	f06f 0303 	mvn.w	r3, #3
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
 8003b74:	e014      	b.n	8003ba0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003b76:	2300      	movs	r3, #0
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	6a38      	ldr	r0, [r7, #32]
 8003b7e:	f000 fae5 	bl	800414c <xQueueGenericSend>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d00b      	beq.n	8003ba0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003b8e:	f06f 0301 	mvn.w	r3, #1
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
 8003b94:	e004      	b.n	8003ba0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8003b96:	f06f 0302 	mvn.w	r3, #2
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9c:	e000      	b.n	8003ba0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b9e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3728      	adds	r7, #40	; 0x28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000168 	.word	0x20000168
 8003bb0:	e000ed04 	.word	0xe000ed04

08003bb4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	; 0x28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bca:	f3ef 8305 	mrs	r3, IPSR
 8003bce:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bd0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10f      	bne.n	8003bf6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bda:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <osMessageQueueGet+0x42>
 8003be2:	4b2b      	ldr	r3, [pc, #172]	; (8003c90 <osMessageQueueGet+0xdc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d12e      	bne.n	8003c48 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bea:	f3ef 8311 	mrs	r3, BASEPRI
 8003bee:	617b      	str	r3, [r7, #20]
  return(result);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d028      	beq.n	8003c48 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <osMessageQueueGet+0x54>
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <osMessageQueueGet+0x54>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003c08:	f06f 0303 	mvn.w	r3, #3
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c0e:	e038      	b.n	8003c82 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003c14:	f107 0310 	add.w	r3, r7, #16
 8003c18:	461a      	mov	r2, r3
 8003c1a:	68b9      	ldr	r1, [r7, #8]
 8003c1c:	6a38      	ldr	r0, [r7, #32]
 8003c1e:	f000 fd0b 	bl	8004638 <xQueueReceiveFromISR>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d003      	beq.n	8003c30 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003c28:	f06f 0302 	mvn.w	r3, #2
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c2e:	e028      	b.n	8003c82 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d025      	beq.n	8003c82 <osMessageQueueGet+0xce>
 8003c36:	4b17      	ldr	r3, [pc, #92]	; (8003c94 <osMessageQueueGet+0xe0>)
 8003c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c46:	e01c      	b.n	8003c82 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <osMessageQueueGet+0xa0>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d103      	bne.n	8003c5c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003c54:	f06f 0303 	mvn.w	r3, #3
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5a:	e013      	b.n	8003c84 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	6a38      	ldr	r0, [r7, #32]
 8003c62:	f000 fc09 	bl	8004478 <xQueueReceive>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d00b      	beq.n	8003c84 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8003c72:	f06f 0301 	mvn.w	r3, #1
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
 8003c78:	e004      	b.n	8003c84 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003c7a:	f06f 0302 	mvn.w	r3, #2
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c80:	e000      	b.n	8003c84 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c82:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3728      	adds	r7, #40	; 0x28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000168 	.word	0x20000168
 8003c94:	e000ed04 	.word	0xe000ed04

08003c98 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <osMessageQueueGetCount+0x18>
    count = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
 8003cae:	e01e      	b.n	8003cee <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cb0:	f3ef 8305 	mrs	r3, IPSR
 8003cb4:	617b      	str	r3, [r7, #20]
  return(result);
 8003cb6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10f      	bne.n	8003cdc <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc0:	613b      	str	r3, [r7, #16]
  return(result);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d109      	bne.n	8003cdc <osMessageQueueGetCount+0x44>
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <osMessageQueueGetCount+0x60>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d10a      	bne.n	8003ce6 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cd0:	f3ef 8311 	mrs	r3, BASEPRI
 8003cd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8003cdc:	69b8      	ldr	r0, [r7, #24]
 8003cde:	f000 fd49 	bl	8004774 <uxQueueMessagesWaitingFromISR>
 8003ce2:	61f8      	str	r0, [r7, #28]
 8003ce4:	e003      	b.n	8003cee <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8003ce6:	69b8      	ldr	r0, [r7, #24]
 8003ce8:	f000 fd26 	bl	8004738 <uxQueueMessagesWaiting>
 8003cec:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8003cee:	69fb      	ldr	r3, [r7, #28]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3720      	adds	r7, #32
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20000168 	.word	0x20000168

08003cfc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4a07      	ldr	r2, [pc, #28]	; (8003d28 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4a06      	ldr	r2, [pc, #24]	; (8003d2c <vApplicationGetIdleTaskMemory+0x30>)
 8003d12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2280      	movs	r2, #128	; 0x80
 8003d18:	601a      	str	r2, [r3, #0]
}
 8003d1a:	bf00      	nop
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	2000016c 	.word	0x2000016c
 8003d2c:	20000214 	.word	0x20000214

08003d30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4a07      	ldr	r2, [pc, #28]	; (8003d5c <vApplicationGetTimerTaskMemory+0x2c>)
 8003d40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4a06      	ldr	r2, [pc, #24]	; (8003d60 <vApplicationGetTimerTaskMemory+0x30>)
 8003d46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d4e:	601a      	str	r2, [r3, #0]
}
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	20000414 	.word	0x20000414
 8003d60:	200004bc 	.word	0x200004bc

08003d64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f103 0208 	add.w	r2, r3, #8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f103 0208 	add.w	r2, r3, #8
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f103 0208 	add.w	r2, r3, #8
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	601a      	str	r2, [r3, #0]
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e1c:	d103      	bne.n	8003e26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	e00c      	b.n	8003e40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3308      	adds	r3, #8
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	e002      	b.n	8003e34 <vListInsert+0x2e>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d2f6      	bcs.n	8003e2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	601a      	str	r2, [r3, #0]
}
 8003e6c:	bf00      	nop
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6892      	ldr	r2, [r2, #8]
 8003e8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6852      	ldr	r2, [r2, #4]
 8003e98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d103      	bne.n	8003eac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	1e5a      	subs	r2, r3, #1
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10a      	bne.n	8003ef6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ef2:	bf00      	nop
 8003ef4:	e7fe      	b.n	8003ef4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ef6:	f002 f92d 	bl	8006154 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	68f9      	ldr	r1, [r7, #12]
 8003f04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	441a      	add	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f26:	3b01      	subs	r3, #1
 8003f28:	68f9      	ldr	r1, [r7, #12]
 8003f2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	441a      	add	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	22ff      	movs	r2, #255	; 0xff
 8003f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	22ff      	movs	r2, #255	; 0xff
 8003f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d114      	bne.n	8003f76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01a      	beq.n	8003f8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	3310      	adds	r3, #16
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f001 fa17 	bl	800538c <xTaskRemoveFromEventList>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d012      	beq.n	8003f8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f64:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <xQueueGenericReset+0xcc>)
 8003f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	e009      	b.n	8003f8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	3310      	adds	r3, #16
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fef2 	bl	8003d64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3324      	adds	r3, #36	; 0x24
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff feed 	bl	8003d64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f8a:	f002 f913 	bl	80061b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f8e:	2301      	movs	r3, #1
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	e000ed04 	.word	0xe000ed04

08003f9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08e      	sub	sp, #56	; 0x38
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fc2:	bf00      	nop
 8003fc4:	e7fe      	b.n	8003fc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fde:	bf00      	nop
 8003fe0:	e7fe      	b.n	8003fe0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <xQueueGenericCreateStatic+0x52>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <xQueueGenericCreateStatic+0x56>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <xQueueGenericCreateStatic+0x58>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10a      	bne.n	800400e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	623b      	str	r3, [r7, #32]
}
 800400a:	bf00      	nop
 800400c:	e7fe      	b.n	800400c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d102      	bne.n	800401a <xQueueGenericCreateStatic+0x7e>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <xQueueGenericCreateStatic+0x82>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <xQueueGenericCreateStatic+0x84>
 800401e:	2300      	movs	r3, #0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	61fb      	str	r3, [r7, #28]
}
 8004036:	bf00      	nop
 8004038:	e7fe      	b.n	8004038 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800403a:	2350      	movs	r3, #80	; 0x50
 800403c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b50      	cmp	r3, #80	; 0x50
 8004042:	d00a      	beq.n	800405a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	61bb      	str	r3, [r7, #24]
}
 8004056:	bf00      	nop
 8004058:	e7fe      	b.n	8004058 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800405e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00d      	beq.n	8004080 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800406c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	4613      	mov	r3, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f843 	bl	8004106 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004082:	4618      	mov	r0, r3
 8004084:	3730      	adds	r7, #48	; 0x30
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800408a:	b580      	push	{r7, lr}
 800408c:	b08a      	sub	sp, #40	; 0x28
 800408e:	af02      	add	r7, sp, #8
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	4613      	mov	r3, r2
 8004096:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10a      	bne.n	80040b4 <xQueueGenericCreate+0x2a>
	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	613b      	str	r3, [r7, #16]
}
 80040b0:	bf00      	nop
 80040b2:	e7fe      	b.n	80040b2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	e004      	b.n	80040ca <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	fb02 f303 	mul.w	r3, r2, r3
 80040c8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	3350      	adds	r3, #80	; 0x50
 80040ce:	4618      	mov	r0, r3
 80040d0:	f002 f962 	bl	8006398 <pvPortMalloc>
 80040d4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00f      	beq.n	80040fc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	3350      	adds	r3, #80	; 0x50
 80040e0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040ea:	79fa      	ldrb	r2, [r7, #7]
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f805 	bl	8004106 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80040fc:	69bb      	ldr	r3, [r7, #24]
	}
 80040fe:	4618      	mov	r0, r3
 8004100:	3720      	adds	r7, #32
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d103      	bne.n	8004122 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	e002      	b.n	8004128 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004134:	2101      	movs	r1, #1
 8004136:	69b8      	ldr	r0, [r7, #24]
 8004138:	f7ff fec8 	bl	8003ecc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	78fa      	ldrb	r2, [r7, #3]
 8004140:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08e      	sub	sp, #56	; 0x38
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800415a:	2300      	movs	r3, #0
 800415c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10a      	bne.n	800417e <xQueueGenericSend+0x32>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800417a:	bf00      	nop
 800417c:	e7fe      	b.n	800417c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d103      	bne.n	800418c <xQueueGenericSend+0x40>
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <xQueueGenericSend+0x44>
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <xQueueGenericSend+0x46>
 8004190:	2300      	movs	r3, #0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10a      	bne.n	80041ac <xQueueGenericSend+0x60>
	__asm volatile
 8004196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041a8:	bf00      	nop
 80041aa:	e7fe      	b.n	80041aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d103      	bne.n	80041ba <xQueueGenericSend+0x6e>
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d101      	bne.n	80041be <xQueueGenericSend+0x72>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <xQueueGenericSend+0x74>
 80041be:	2300      	movs	r3, #0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10a      	bne.n	80041da <xQueueGenericSend+0x8e>
	__asm volatile
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	623b      	str	r3, [r7, #32]
}
 80041d6:	bf00      	nop
 80041d8:	e7fe      	b.n	80041d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041da:	f001 fa9f 	bl	800571c <xTaskGetSchedulerState>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d102      	bne.n	80041ea <xQueueGenericSend+0x9e>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <xQueueGenericSend+0xa2>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <xQueueGenericSend+0xa4>
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10a      	bne.n	800420a <xQueueGenericSend+0xbe>
	__asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	61fb      	str	r3, [r7, #28]
}
 8004206:	bf00      	nop
 8004208:	e7fe      	b.n	8004208 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800420a:	f001 ffa3 	bl	8006154 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004216:	429a      	cmp	r2, r3
 8004218:	d302      	bcc.n	8004220 <xQueueGenericSend+0xd4>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d129      	bne.n	8004274 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	68b9      	ldr	r1, [r7, #8]
 8004224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004226:	f000 fac1 	bl	80047ac <prvCopyDataToQueue>
 800422a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	2b00      	cmp	r3, #0
 8004232:	d010      	beq.n	8004256 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	3324      	adds	r3, #36	; 0x24
 8004238:	4618      	mov	r0, r3
 800423a:	f001 f8a7 	bl	800538c <xTaskRemoveFromEventList>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d013      	beq.n	800426c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004244:	4b3f      	ldr	r3, [pc, #252]	; (8004344 <xQueueGenericSend+0x1f8>)
 8004246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	e00a      	b.n	800426c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004258:	2b00      	cmp	r3, #0
 800425a:	d007      	beq.n	800426c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800425c:	4b39      	ldr	r3, [pc, #228]	; (8004344 <xQueueGenericSend+0x1f8>)
 800425e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800426c:	f001 ffa2 	bl	80061b4 <vPortExitCritical>
				return pdPASS;
 8004270:	2301      	movs	r3, #1
 8004272:	e063      	b.n	800433c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d103      	bne.n	8004282 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800427a:	f001 ff9b 	bl	80061b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800427e:	2300      	movs	r3, #0
 8004280:	e05c      	b.n	800433c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004284:	2b00      	cmp	r3, #0
 8004286:	d106      	bne.n	8004296 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004288:	f107 0314 	add.w	r3, r7, #20
 800428c:	4618      	mov	r0, r3
 800428e:	f001 f8e1 	bl	8005454 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004292:	2301      	movs	r3, #1
 8004294:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004296:	f001 ff8d 	bl	80061b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800429a:	f000 fe49 	bl	8004f30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800429e:	f001 ff59 	bl	8006154 <vPortEnterCritical>
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042a8:	b25b      	sxtb	r3, r3
 80042aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ae:	d103      	bne.n	80042b8 <xQueueGenericSend+0x16c>
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042be:	b25b      	sxtb	r3, r3
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042c4:	d103      	bne.n	80042ce <xQueueGenericSend+0x182>
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042ce:	f001 ff71 	bl	80061b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042d2:	1d3a      	adds	r2, r7, #4
 80042d4:	f107 0314 	add.w	r3, r7, #20
 80042d8:	4611      	mov	r1, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f001 f8d0 	bl	8005480 <xTaskCheckForTimeOut>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d124      	bne.n	8004330 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042e8:	f000 fb58 	bl	800499c <prvIsQueueFull>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d018      	beq.n	8004324 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	3310      	adds	r3, #16
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	4611      	mov	r1, r2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fff6 	bl	80052ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004302:	f000 fae3 	bl	80048cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004306:	f000 fe21 	bl	8004f4c <xTaskResumeAll>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	f47f af7c 	bne.w	800420a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004312:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <xQueueGenericSend+0x1f8>)
 8004314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	e772      	b.n	800420a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004326:	f000 fad1 	bl	80048cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800432a:	f000 fe0f 	bl	8004f4c <xTaskResumeAll>
 800432e:	e76c      	b.n	800420a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004332:	f000 facb 	bl	80048cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004336:	f000 fe09 	bl	8004f4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800433a:	2300      	movs	r3, #0
		}
	}
}
 800433c:	4618      	mov	r0, r3
 800433e:	3738      	adds	r7, #56	; 0x38
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	e000ed04 	.word	0xe000ed04

08004348 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08e      	sub	sp, #56	; 0x38
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10a      	bne.n	8004376 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004372:	bf00      	nop
 8004374:	e7fe      	b.n	8004374 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d103      	bne.n	8004384 <xQueueGenericSendFromISR+0x3c>
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <xQueueGenericSendFromISR+0x40>
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <xQueueGenericSendFromISR+0x42>
 8004388:	2300      	movs	r3, #0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10a      	bne.n	80043a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	623b      	str	r3, [r7, #32]
}
 80043a0:	bf00      	nop
 80043a2:	e7fe      	b.n	80043a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d103      	bne.n	80043b2 <xQueueGenericSendFromISR+0x6a>
 80043aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <xQueueGenericSendFromISR+0x6e>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <xQueueGenericSendFromISR+0x70>
 80043b6:	2300      	movs	r3, #0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	61fb      	str	r3, [r7, #28]
}
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043d2:	f001 ffa1 	bl	8006318 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043d6:	f3ef 8211 	mrs	r2, BASEPRI
 80043da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	61ba      	str	r2, [r7, #24]
 80043ec:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043ee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d302      	bcc.n	8004404 <xQueueGenericSendFromISR+0xbc>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d12c      	bne.n	800445e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800440a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	68b9      	ldr	r1, [r7, #8]
 8004412:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004414:	f000 f9ca 	bl	80047ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004418:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004420:	d112      	bne.n	8004448 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	2b00      	cmp	r3, #0
 8004428:	d016      	beq.n	8004458 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	3324      	adds	r3, #36	; 0x24
 800442e:	4618      	mov	r0, r3
 8004430:	f000 ffac 	bl	800538c <xTaskRemoveFromEventList>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00e      	beq.n	8004458 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00b      	beq.n	8004458 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	e007      	b.n	8004458 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004448:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800444c:	3301      	adds	r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	b25a      	sxtb	r2, r3
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004458:	2301      	movs	r3, #1
 800445a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800445c:	e001      	b.n	8004462 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800445e:	2300      	movs	r3, #0
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800446c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800446e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004470:	4618      	mov	r0, r3
 8004472:	3738      	adds	r7, #56	; 0x38
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08c      	sub	sp, #48	; 0x30
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004484:	2300      	movs	r3, #0
 8004486:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10a      	bne.n	80044a8 <xQueueReceive+0x30>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	623b      	str	r3, [r7, #32]
}
 80044a4:	bf00      	nop
 80044a6:	e7fe      	b.n	80044a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d103      	bne.n	80044b6 <xQueueReceive+0x3e>
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <xQueueReceive+0x42>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <xQueueReceive+0x44>
 80044ba:	2300      	movs	r3, #0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <xQueueReceive+0x5e>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	61fb      	str	r3, [r7, #28]
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044d6:	f001 f921 	bl	800571c <xTaskGetSchedulerState>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d102      	bne.n	80044e6 <xQueueReceive+0x6e>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <xQueueReceive+0x72>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <xQueueReceive+0x74>
 80044ea:	2300      	movs	r3, #0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10a      	bne.n	8004506 <xQueueReceive+0x8e>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	61bb      	str	r3, [r7, #24]
}
 8004502:	bf00      	nop
 8004504:	e7fe      	b.n	8004504 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004506:	f001 fe25 	bl	8006154 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	2b00      	cmp	r3, #0
 8004514:	d01f      	beq.n	8004556 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004516:	68b9      	ldr	r1, [r7, #8]
 8004518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800451a:	f000 f9b1 	bl	8004880 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	1e5a      	subs	r2, r3, #1
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00f      	beq.n	800454e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	3310      	adds	r3, #16
 8004532:	4618      	mov	r0, r3
 8004534:	f000 ff2a 	bl	800538c <xTaskRemoveFromEventList>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800453e:	4b3d      	ldr	r3, [pc, #244]	; (8004634 <xQueueReceive+0x1bc>)
 8004540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800454e:	f001 fe31 	bl	80061b4 <vPortExitCritical>
				return pdPASS;
 8004552:	2301      	movs	r3, #1
 8004554:	e069      	b.n	800462a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d103      	bne.n	8004564 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800455c:	f001 fe2a 	bl	80061b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004560:	2300      	movs	r3, #0
 8004562:	e062      	b.n	800462a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800456a:	f107 0310 	add.w	r3, r7, #16
 800456e:	4618      	mov	r0, r3
 8004570:	f000 ff70 	bl	8005454 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004574:	2301      	movs	r3, #1
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004578:	f001 fe1c 	bl	80061b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800457c:	f000 fcd8 	bl	8004f30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004580:	f001 fde8 	bl	8006154 <vPortEnterCritical>
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800458a:	b25b      	sxtb	r3, r3
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004590:	d103      	bne.n	800459a <xQueueReceive+0x122>
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045a0:	b25b      	sxtb	r3, r3
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045a6:	d103      	bne.n	80045b0 <xQueueReceive+0x138>
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045b0:	f001 fe00 	bl	80061b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045b4:	1d3a      	adds	r2, r7, #4
 80045b6:	f107 0310 	add.w	r3, r7, #16
 80045ba:	4611      	mov	r1, r2
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 ff5f 	bl	8005480 <xTaskCheckForTimeOut>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d123      	bne.n	8004610 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ca:	f000 f9d1 	bl	8004970 <prvIsQueueEmpty>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d017      	beq.n	8004604 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d6:	3324      	adds	r3, #36	; 0x24
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	4611      	mov	r1, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fe85 	bl	80052ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e4:	f000 f972 	bl	80048cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045e8:	f000 fcb0 	bl	8004f4c <xTaskResumeAll>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d189      	bne.n	8004506 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80045f2:	4b10      	ldr	r3, [pc, #64]	; (8004634 <xQueueReceive+0x1bc>)
 80045f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	e780      	b.n	8004506 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004606:	f000 f961 	bl	80048cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800460a:	f000 fc9f 	bl	8004f4c <xTaskResumeAll>
 800460e:	e77a      	b.n	8004506 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004612:	f000 f95b 	bl	80048cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004616:	f000 fc99 	bl	8004f4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800461a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800461c:	f000 f9a8 	bl	8004970 <prvIsQueueEmpty>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	f43f af6f 	beq.w	8004506 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004628:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800462a:	4618      	mov	r0, r3
 800462c:	3730      	adds	r7, #48	; 0x30
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	e000ed04 	.word	0xe000ed04

08004638 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08e      	sub	sp, #56	; 0x38
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10a      	bne.n	8004664 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	623b      	str	r3, [r7, #32]
}
 8004660:	bf00      	nop
 8004662:	e7fe      	b.n	8004662 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d103      	bne.n	8004672 <xQueueReceiveFromISR+0x3a>
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <xQueueReceiveFromISR+0x3e>
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <xQueueReceiveFromISR+0x40>
 8004676:	2300      	movs	r3, #0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10a      	bne.n	8004692 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	61fb      	str	r3, [r7, #28]
}
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004692:	f001 fe41 	bl	8006318 <vPortValidateInterruptPriority>
	__asm volatile
 8004696:	f3ef 8211 	mrs	r2, BASEPRI
 800469a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	61ba      	str	r2, [r7, #24]
 80046ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80046ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d02f      	beq.n	800471e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046cc:	f000 f8d8 	bl	8004880 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	1e5a      	subs	r2, r3, #1
 80046d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80046d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046e0:	d112      	bne.n	8004708 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d016      	beq.n	8004718 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	3310      	adds	r3, #16
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fe4c 	bl	800538c <xTaskRemoveFromEventList>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00e      	beq.n	8004718 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00b      	beq.n	8004718 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	e007      	b.n	8004718 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800470c:	3301      	adds	r3, #1
 800470e:	b2db      	uxtb	r3, r3
 8004710:	b25a      	sxtb	r2, r3
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004718:	2301      	movs	r3, #1
 800471a:	637b      	str	r3, [r7, #52]	; 0x34
 800471c:	e001      	b.n	8004722 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800471e:	2300      	movs	r3, #0
 8004720:	637b      	str	r3, [r7, #52]	; 0x34
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f383 8811 	msr	BASEPRI, r3
}
 800472c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800472e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004730:	4618      	mov	r0, r3
 8004732:	3738      	adds	r7, #56	; 0x38
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10a      	bne.n	800475c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	60bb      	str	r3, [r7, #8]
}
 8004758:	bf00      	nop
 800475a:	e7fe      	b.n	800475a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800475c:	f001 fcfa 	bl	8006154 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004766:	f001 fd25 	bl	80061b4 <vPortExitCritical>

	return uxReturn;
 800476a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10a      	bne.n	8004798 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	60bb      	str	r3, [r7, #8]
}
 8004794:	bf00      	nop
 8004796:	e7fe      	b.n	8004796 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479c:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800479e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10d      	bne.n	80047e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d14d      	bne.n	800486e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 ffbe 	bl	8005758 <xTaskPriorityDisinherit>
 80047dc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	605a      	str	r2, [r3, #4]
 80047e4:	e043      	b.n	800486e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d119      	bne.n	8004820 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6898      	ldr	r0, [r3, #8]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	461a      	mov	r2, r3
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	f002 f82c 	bl	8006854 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	441a      	add	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	429a      	cmp	r2, r3
 8004814:	d32b      	bcc.n	800486e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	609a      	str	r2, [r3, #8]
 800481e:	e026      	b.n	800486e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	68d8      	ldr	r0, [r3, #12]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	461a      	mov	r2, r3
 800482a:	68b9      	ldr	r1, [r7, #8]
 800482c:	f002 f812 	bl	8006854 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	425b      	negs	r3, r3
 800483a:	441a      	add	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d207      	bcs.n	800485c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	425b      	negs	r3, r3
 8004856:	441a      	add	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d105      	bne.n	800486e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	3b01      	subs	r3, #1
 800486c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004876:	697b      	ldr	r3, [r7, #20]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d018      	beq.n	80048c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	441a      	add	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d303      	bcc.n	80048b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68d9      	ldr	r1, [r3, #12]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	461a      	mov	r2, r3
 80048be:	6838      	ldr	r0, [r7, #0]
 80048c0:	f001 ffc8 	bl	8006854 <memcpy>
	}
}
 80048c4:	bf00      	nop
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80048d4:	f001 fc3e 	bl	8006154 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048e0:	e011      	b.n	8004906 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d012      	beq.n	8004910 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3324      	adds	r3, #36	; 0x24
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fd4c 	bl	800538c <xTaskRemoveFromEventList>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80048fa:	f000 fe23 	bl	8005544 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	3b01      	subs	r3, #1
 8004902:	b2db      	uxtb	r3, r3
 8004904:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800490a:	2b00      	cmp	r3, #0
 800490c:	dce9      	bgt.n	80048e2 <prvUnlockQueue+0x16>
 800490e:	e000      	b.n	8004912 <prvUnlockQueue+0x46>
					break;
 8004910:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	22ff      	movs	r2, #255	; 0xff
 8004916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800491a:	f001 fc4b 	bl	80061b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800491e:	f001 fc19 	bl	8006154 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004928:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800492a:	e011      	b.n	8004950 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d012      	beq.n	800495a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3310      	adds	r3, #16
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fd27 	bl	800538c <xTaskRemoveFromEventList>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004944:	f000 fdfe 	bl	8005544 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004948:	7bbb      	ldrb	r3, [r7, #14]
 800494a:	3b01      	subs	r3, #1
 800494c:	b2db      	uxtb	r3, r3
 800494e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004954:	2b00      	cmp	r3, #0
 8004956:	dce9      	bgt.n	800492c <prvUnlockQueue+0x60>
 8004958:	e000      	b.n	800495c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800495a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	22ff      	movs	r2, #255	; 0xff
 8004960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004964:	f001 fc26 	bl	80061b4 <vPortExitCritical>
}
 8004968:	bf00      	nop
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004978:	f001 fbec 	bl	8006154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	2b00      	cmp	r3, #0
 8004982:	d102      	bne.n	800498a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004984:	2301      	movs	r3, #1
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e001      	b.n	800498e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800498e:	f001 fc11 	bl	80061b4 <vPortExitCritical>

	return xReturn;
 8004992:	68fb      	ldr	r3, [r7, #12]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049a4:	f001 fbd6 	bl	8006154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d102      	bne.n	80049ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80049b4:	2301      	movs	r3, #1
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	e001      	b.n	80049be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049be:	f001 fbf9 	bl	80061b4 <vPortExitCritical>

	return xReturn;
 80049c2:	68fb      	ldr	r3, [r7, #12]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	e014      	b.n	8004a06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80049dc:	4a0f      	ldr	r2, [pc, #60]	; (8004a1c <vQueueAddToRegistry+0x50>)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10b      	bne.n	8004a00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80049e8:	490c      	ldr	r1, [pc, #48]	; (8004a1c <vQueueAddToRegistry+0x50>)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80049f2:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <vQueueAddToRegistry+0x50>)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	4413      	add	r3, r2
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80049fe:	e006      	b.n	8004a0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3301      	adds	r3, #1
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b07      	cmp	r3, #7
 8004a0a:	d9e7      	bls.n	80049dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a0c:	bf00      	nop
 8004a0e:	bf00      	nop
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	200008bc 	.word	0x200008bc

08004a20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a30:	f001 fb90 	bl	8006154 <vPortEnterCritical>
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a3a:	b25b      	sxtb	r3, r3
 8004a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a40:	d103      	bne.n	8004a4a <vQueueWaitForMessageRestricted+0x2a>
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a50:	b25b      	sxtb	r3, r3
 8004a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a56:	d103      	bne.n	8004a60 <vQueueWaitForMessageRestricted+0x40>
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a60:	f001 fba8 	bl	80061b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d106      	bne.n	8004a7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	3324      	adds	r3, #36	; 0x24
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	68b9      	ldr	r1, [r7, #8]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fc5d 	bl	8005334 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a7a:	6978      	ldr	r0, [r7, #20]
 8004a7c:	f7ff ff26 	bl	80048cc <prvUnlockQueue>
	}
 8004a80:	bf00      	nop
 8004a82:	3718      	adds	r7, #24
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08e      	sub	sp, #56	; 0x38
 8004a8c:	af04      	add	r7, sp, #16
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	623b      	str	r3, [r7, #32]
}
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <xTaskCreateStatic+0x46>
	__asm volatile
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	61fb      	str	r3, [r7, #28]
}
 8004aca:	bf00      	nop
 8004acc:	e7fe      	b.n	8004acc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ace:	23a8      	movs	r3, #168	; 0xa8
 8004ad0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2ba8      	cmp	r3, #168	; 0xa8
 8004ad6:	d00a      	beq.n	8004aee <xTaskCreateStatic+0x66>
	__asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	61bb      	str	r3, [r7, #24]
}
 8004aea:	bf00      	nop
 8004aec:	e7fe      	b.n	8004aec <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01e      	beq.n	8004b32 <xTaskCreateStatic+0xaa>
 8004af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01b      	beq.n	8004b32 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	9303      	str	r3, [sp, #12]
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	9302      	str	r3, [sp, #8]
 8004b14:	f107 0314 	add.w	r3, r7, #20
 8004b18:	9301      	str	r3, [sp, #4]
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f851 	bl	8004bcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b2c:	f000 f8ec 	bl	8004d08 <prvAddNewTaskToReadyList>
 8004b30:	e001      	b.n	8004b36 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b36:	697b      	ldr	r3, [r7, #20]
	}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3728      	adds	r7, #40	; 0x28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08c      	sub	sp, #48	; 0x30
 8004b44:	af04      	add	r7, sp, #16
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b50:	88fb      	ldrh	r3, [r7, #6]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4618      	mov	r0, r3
 8004b56:	f001 fc1f 	bl	8006398 <pvPortMalloc>
 8004b5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00e      	beq.n	8004b80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004b62:	20a8      	movs	r0, #168	; 0xa8
 8004b64:	f001 fc18 	bl	8006398 <pvPortMalloc>
 8004b68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30
 8004b76:	e005      	b.n	8004b84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b78:	6978      	ldr	r0, [r7, #20]
 8004b7a:	f001 fcd1 	bl	8006520 <vPortFree>
 8004b7e:	e001      	b.n	8004b84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d017      	beq.n	8004bba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b92:	88fa      	ldrh	r2, [r7, #6]
 8004b94:	2300      	movs	r3, #0
 8004b96:	9303      	str	r3, [sp, #12]
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	9302      	str	r3, [sp, #8]
 8004b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9e:	9301      	str	r3, [sp, #4]
 8004ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f80f 	bl	8004bcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bae:	69f8      	ldr	r0, [r7, #28]
 8004bb0:	f000 f8aa 	bl	8004d08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	61bb      	str	r3, [r7, #24]
 8004bb8:	e002      	b.n	8004bc0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bbe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004bc0:	69bb      	ldr	r3, [r7, #24]
	}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3720      	adds	r7, #32
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	461a      	mov	r2, r3
 8004be4:	21a5      	movs	r1, #165	; 0xa5
 8004be6:	f001 fdb1 	bl	800674c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f023 0307 	bic.w	r3, r3, #7
 8004c02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	617b      	str	r3, [r7, #20]
}
 8004c20:	bf00      	nop
 8004c22:	e7fe      	b.n	8004c22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c24:	2300      	movs	r3, #0
 8004c26:	61fb      	str	r3, [r7, #28]
 8004c28:	e012      	b.n	8004c50 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	4413      	add	r3, r2
 8004c30:	7819      	ldrb	r1, [r3, #0]
 8004c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	4413      	add	r3, r2
 8004c38:	3334      	adds	r3, #52	; 0x34
 8004c3a:	460a      	mov	r2, r1
 8004c3c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	4413      	add	r3, r2
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d006      	beq.n	8004c58 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	61fb      	str	r3, [r7, #28]
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	2b0f      	cmp	r3, #15
 8004c54:	d9e9      	bls.n	8004c2a <prvInitialiseNewTask+0x5e>
 8004c56:	e000      	b.n	8004c5a <prvInitialiseNewTask+0x8e>
		{
			break;
 8004c58:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c64:	2b37      	cmp	r3, #55	; 0x37
 8004c66:	d901      	bls.n	8004c6c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c68:	2337      	movs	r3, #55	; 0x37
 8004c6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	3304      	adds	r3, #4
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff f88e 	bl	8003da4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8a:	3318      	adds	r3, #24
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff f889 	bl	8003da4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ca6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	3354      	adds	r3, #84	; 0x54
 8004cbc:	224c      	movs	r2, #76	; 0x4c
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f001 fd43 	bl	800674c <memset>
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	4a0c      	ldr	r2, [pc, #48]	; (8004cfc <prvInitialiseNewTask+0x130>)
 8004cca:	659a      	str	r2, [r3, #88]	; 0x58
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	4a0c      	ldr	r2, [pc, #48]	; (8004d00 <prvInitialiseNewTask+0x134>)
 8004cd0:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	4a0b      	ldr	r2, [pc, #44]	; (8004d04 <prvInitialiseNewTask+0x138>)
 8004cd6:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	68f9      	ldr	r1, [r7, #12]
 8004cdc:	69b8      	ldr	r0, [r7, #24]
 8004cde:	f001 f90f 	bl	8005f00 <pxPortInitialiseStack>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cf4:	bf00      	nop
 8004cf6:	3720      	adds	r7, #32
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	20001b48 	.word	0x20001b48
 8004d00:	20001bb0 	.word	0x20001bb0
 8004d04:	20001c18 	.word	0x20001c18

08004d08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d10:	f001 fa20 	bl	8006154 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d14:	4b2d      	ldr	r3, [pc, #180]	; (8004dcc <prvAddNewTaskToReadyList+0xc4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	4a2c      	ldr	r2, [pc, #176]	; (8004dcc <prvAddNewTaskToReadyList+0xc4>)
 8004d1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d1e:	4b2c      	ldr	r3, [pc, #176]	; (8004dd0 <prvAddNewTaskToReadyList+0xc8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d109      	bne.n	8004d3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d26:	4a2a      	ldr	r2, [pc, #168]	; (8004dd0 <prvAddNewTaskToReadyList+0xc8>)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d2c:	4b27      	ldr	r3, [pc, #156]	; (8004dcc <prvAddNewTaskToReadyList+0xc4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d110      	bne.n	8004d56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d34:	f000 fc2a 	bl	800558c <prvInitialiseTaskLists>
 8004d38:	e00d      	b.n	8004d56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d3a:	4b26      	ldr	r3, [pc, #152]	; (8004dd4 <prvAddNewTaskToReadyList+0xcc>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d109      	bne.n	8004d56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d42:	4b23      	ldr	r3, [pc, #140]	; (8004dd0 <prvAddNewTaskToReadyList+0xc8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d802      	bhi.n	8004d56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d50:	4a1f      	ldr	r2, [pc, #124]	; (8004dd0 <prvAddNewTaskToReadyList+0xc8>)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d56:	4b20      	ldr	r3, [pc, #128]	; (8004dd8 <prvAddNewTaskToReadyList+0xd0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	4a1e      	ldr	r2, [pc, #120]	; (8004dd8 <prvAddNewTaskToReadyList+0xd0>)
 8004d5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d60:	4b1d      	ldr	r3, [pc, #116]	; (8004dd8 <prvAddNewTaskToReadyList+0xd0>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6c:	4b1b      	ldr	r3, [pc, #108]	; (8004ddc <prvAddNewTaskToReadyList+0xd4>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d903      	bls.n	8004d7c <prvAddNewTaskToReadyList+0x74>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	4a18      	ldr	r2, [pc, #96]	; (8004ddc <prvAddNewTaskToReadyList+0xd4>)
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4a15      	ldr	r2, [pc, #84]	; (8004de0 <prvAddNewTaskToReadyList+0xd8>)
 8004d8a:	441a      	add	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	4619      	mov	r1, r3
 8004d92:	4610      	mov	r0, r2
 8004d94:	f7ff f813 	bl	8003dbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d98:	f001 fa0c 	bl	80061b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d9c:	4b0d      	ldr	r3, [pc, #52]	; (8004dd4 <prvAddNewTaskToReadyList+0xcc>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00e      	beq.n	8004dc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004da4:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <prvAddNewTaskToReadyList+0xc8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d207      	bcs.n	8004dc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004db2:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <prvAddNewTaskToReadyList+0xdc>)
 8004db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dc2:	bf00      	nop
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000dd0 	.word	0x20000dd0
 8004dd0:	200008fc 	.word	0x200008fc
 8004dd4:	20000ddc 	.word	0x20000ddc
 8004dd8:	20000dec 	.word	0x20000dec
 8004ddc:	20000dd8 	.word	0x20000dd8
 8004de0:	20000900 	.word	0x20000900
 8004de4:	e000ed04 	.word	0xe000ed04

08004de8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d017      	beq.n	8004e2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004dfa:	4b13      	ldr	r3, [pc, #76]	; (8004e48 <vTaskDelay+0x60>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <vTaskDelay+0x30>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	60bb      	str	r3, [r7, #8]
}
 8004e14:	bf00      	nop
 8004e16:	e7fe      	b.n	8004e16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e18:	f000 f88a 	bl	8004f30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fd08 	bl	8005834 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e24:	f000 f892 	bl	8004f4c <xTaskResumeAll>
 8004e28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d107      	bne.n	8004e40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004e30:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <vTaskDelay+0x64>)
 8004e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e40:	bf00      	nop
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000df8 	.word	0x20000df8
 8004e4c:	e000ed04 	.word	0xe000ed04

08004e50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08a      	sub	sp, #40	; 0x28
 8004e54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e5e:	463a      	mov	r2, r7
 8004e60:	1d39      	adds	r1, r7, #4
 8004e62:	f107 0308 	add.w	r3, r7, #8
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fe ff48 	bl	8003cfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e6c:	6839      	ldr	r1, [r7, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	9202      	str	r2, [sp, #8]
 8004e74:	9301      	str	r3, [sp, #4]
 8004e76:	2300      	movs	r3, #0
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	460a      	mov	r2, r1
 8004e7e:	4924      	ldr	r1, [pc, #144]	; (8004f10 <vTaskStartScheduler+0xc0>)
 8004e80:	4824      	ldr	r0, [pc, #144]	; (8004f14 <vTaskStartScheduler+0xc4>)
 8004e82:	f7ff fe01 	bl	8004a88 <xTaskCreateStatic>
 8004e86:	4603      	mov	r3, r0
 8004e88:	4a23      	ldr	r2, [pc, #140]	; (8004f18 <vTaskStartScheduler+0xc8>)
 8004e8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e8c:	4b22      	ldr	r3, [pc, #136]	; (8004f18 <vTaskStartScheduler+0xc8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e94:	2301      	movs	r3, #1
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	e001      	b.n	8004e9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d102      	bne.n	8004eaa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ea4:	f000 fd1a 	bl	80058dc <xTimerCreateTimerTask>
 8004ea8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d11b      	bne.n	8004ee8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	613b      	str	r3, [r7, #16]
}
 8004ec2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ec4:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <vTaskStartScheduler+0xcc>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3354      	adds	r3, #84	; 0x54
 8004eca:	4a15      	ldr	r2, [pc, #84]	; (8004f20 <vTaskStartScheduler+0xd0>)
 8004ecc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ece:	4b15      	ldr	r3, [pc, #84]	; (8004f24 <vTaskStartScheduler+0xd4>)
 8004ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ed4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ed6:	4b14      	ldr	r3, [pc, #80]	; (8004f28 <vTaskStartScheduler+0xd8>)
 8004ed8:	2201      	movs	r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004edc:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <vTaskStartScheduler+0xdc>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ee2:	f001 f895 	bl	8006010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ee6:	e00e      	b.n	8004f06 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eee:	d10a      	bne.n	8004f06 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	60fb      	str	r3, [r7, #12]
}
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <vTaskStartScheduler+0xb4>
}
 8004f06:	bf00      	nop
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	08006ad0 	.word	0x08006ad0
 8004f14:	0800555d 	.word	0x0800555d
 8004f18:	20000df4 	.word	0x20000df4
 8004f1c:	200008fc 	.word	0x200008fc
 8004f20:	2000005c 	.word	0x2000005c
 8004f24:	20000df0 	.word	0x20000df0
 8004f28:	20000ddc 	.word	0x20000ddc
 8004f2c:	20000dd4 	.word	0x20000dd4

08004f30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004f34:	4b04      	ldr	r3, [pc, #16]	; (8004f48 <vTaskSuspendAll+0x18>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	4a03      	ldr	r2, [pc, #12]	; (8004f48 <vTaskSuspendAll+0x18>)
 8004f3c:	6013      	str	r3, [r2, #0]
}
 8004f3e:	bf00      	nop
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	20000df8 	.word	0x20000df8

08004f4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f5a:	4b42      	ldr	r3, [pc, #264]	; (8005064 <xTaskResumeAll+0x118>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10a      	bne.n	8004f78 <xTaskResumeAll+0x2c>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	603b      	str	r3, [r7, #0]
}
 8004f74:	bf00      	nop
 8004f76:	e7fe      	b.n	8004f76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f78:	f001 f8ec 	bl	8006154 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f7c:	4b39      	ldr	r3, [pc, #228]	; (8005064 <xTaskResumeAll+0x118>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	4a38      	ldr	r2, [pc, #224]	; (8005064 <xTaskResumeAll+0x118>)
 8004f84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f86:	4b37      	ldr	r3, [pc, #220]	; (8005064 <xTaskResumeAll+0x118>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d162      	bne.n	8005054 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f8e:	4b36      	ldr	r3, [pc, #216]	; (8005068 <xTaskResumeAll+0x11c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d05e      	beq.n	8005054 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f96:	e02f      	b.n	8004ff8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004f98:	4b34      	ldr	r3, [pc, #208]	; (800506c <xTaskResumeAll+0x120>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3318      	adds	r3, #24
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7fe ff67 	bl	8003e78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3304      	adds	r3, #4
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe ff62 	bl	8003e78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb8:	4b2d      	ldr	r3, [pc, #180]	; (8005070 <xTaskResumeAll+0x124>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d903      	bls.n	8004fc8 <xTaskResumeAll+0x7c>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	4a2a      	ldr	r2, [pc, #168]	; (8005070 <xTaskResumeAll+0x124>)
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4a27      	ldr	r2, [pc, #156]	; (8005074 <xTaskResumeAll+0x128>)
 8004fd6:	441a      	add	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	3304      	adds	r3, #4
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	f7fe feed 	bl	8003dbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe8:	4b23      	ldr	r3, [pc, #140]	; (8005078 <xTaskResumeAll+0x12c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d302      	bcc.n	8004ff8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004ff2:	4b22      	ldr	r3, [pc, #136]	; (800507c <xTaskResumeAll+0x130>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ff8:	4b1c      	ldr	r3, [pc, #112]	; (800506c <xTaskResumeAll+0x120>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1cb      	bne.n	8004f98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005006:	f000 fb63 	bl	80056d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800500a:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <xTaskResumeAll+0x134>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d010      	beq.n	8005038 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005016:	f000 f847 	bl	80050a8 <xTaskIncrementTick>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005020:	4b16      	ldr	r3, [pc, #88]	; (800507c <xTaskResumeAll+0x130>)
 8005022:	2201      	movs	r2, #1
 8005024:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3b01      	subs	r3, #1
 800502a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f1      	bne.n	8005016 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005032:	4b13      	ldr	r3, [pc, #76]	; (8005080 <xTaskResumeAll+0x134>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005038:	4b10      	ldr	r3, [pc, #64]	; (800507c <xTaskResumeAll+0x130>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d009      	beq.n	8005054 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005040:	2301      	movs	r3, #1
 8005042:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005044:	4b0f      	ldr	r3, [pc, #60]	; (8005084 <xTaskResumeAll+0x138>)
 8005046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005054:	f001 f8ae 	bl	80061b4 <vPortExitCritical>

	return xAlreadyYielded;
 8005058:	68bb      	ldr	r3, [r7, #8]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000df8 	.word	0x20000df8
 8005068:	20000dd0 	.word	0x20000dd0
 800506c:	20000d90 	.word	0x20000d90
 8005070:	20000dd8 	.word	0x20000dd8
 8005074:	20000900 	.word	0x20000900
 8005078:	200008fc 	.word	0x200008fc
 800507c:	20000de4 	.word	0x20000de4
 8005080:	20000de0 	.word	0x20000de0
 8005084:	e000ed04 	.word	0xe000ed04

08005088 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800508e:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <xTaskGetTickCount+0x1c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005094:	687b      	ldr	r3, [r7, #4]
}
 8005096:	4618      	mov	r0, r3
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	20000dd4 	.word	0x20000dd4

080050a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050b2:	4b51      	ldr	r3, [pc, #324]	; (80051f8 <xTaskIncrementTick+0x150>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f040 808e 	bne.w	80051d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050bc:	4b4f      	ldr	r3, [pc, #316]	; (80051fc <xTaskIncrementTick+0x154>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3301      	adds	r3, #1
 80050c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050c4:	4a4d      	ldr	r2, [pc, #308]	; (80051fc <xTaskIncrementTick+0x154>)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d120      	bne.n	8005112 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80050d0:	4b4b      	ldr	r3, [pc, #300]	; (8005200 <xTaskIncrementTick+0x158>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	603b      	str	r3, [r7, #0]
}
 80050ec:	bf00      	nop
 80050ee:	e7fe      	b.n	80050ee <xTaskIncrementTick+0x46>
 80050f0:	4b43      	ldr	r3, [pc, #268]	; (8005200 <xTaskIncrementTick+0x158>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	4b43      	ldr	r3, [pc, #268]	; (8005204 <xTaskIncrementTick+0x15c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a41      	ldr	r2, [pc, #260]	; (8005200 <xTaskIncrementTick+0x158>)
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	4a41      	ldr	r2, [pc, #260]	; (8005204 <xTaskIncrementTick+0x15c>)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	4b40      	ldr	r3, [pc, #256]	; (8005208 <xTaskIncrementTick+0x160>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3301      	adds	r3, #1
 800510a:	4a3f      	ldr	r2, [pc, #252]	; (8005208 <xTaskIncrementTick+0x160>)
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	f000 fadf 	bl	80056d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005112:	4b3e      	ldr	r3, [pc, #248]	; (800520c <xTaskIncrementTick+0x164>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	429a      	cmp	r2, r3
 800511a:	d34e      	bcc.n	80051ba <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800511c:	4b38      	ldr	r3, [pc, #224]	; (8005200 <xTaskIncrementTick+0x158>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <xTaskIncrementTick+0x82>
 8005126:	2301      	movs	r3, #1
 8005128:	e000      	b.n	800512c <xTaskIncrementTick+0x84>
 800512a:	2300      	movs	r3, #0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d004      	beq.n	800513a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005130:	4b36      	ldr	r3, [pc, #216]	; (800520c <xTaskIncrementTick+0x164>)
 8005132:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005136:	601a      	str	r2, [r3, #0]
					break;
 8005138:	e03f      	b.n	80051ba <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800513a:	4b31      	ldr	r3, [pc, #196]	; (8005200 <xTaskIncrementTick+0x158>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	429a      	cmp	r2, r3
 8005150:	d203      	bcs.n	800515a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005152:	4a2e      	ldr	r2, [pc, #184]	; (800520c <xTaskIncrementTick+0x164>)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6013      	str	r3, [r2, #0]
						break;
 8005158:	e02f      	b.n	80051ba <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	3304      	adds	r3, #4
 800515e:	4618      	mov	r0, r3
 8005160:	f7fe fe8a 	bl	8003e78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005168:	2b00      	cmp	r3, #0
 800516a:	d004      	beq.n	8005176 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	3318      	adds	r3, #24
 8005170:	4618      	mov	r0, r3
 8005172:	f7fe fe81 	bl	8003e78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517a:	4b25      	ldr	r3, [pc, #148]	; (8005210 <xTaskIncrementTick+0x168>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d903      	bls.n	800518a <xTaskIncrementTick+0xe2>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	4a22      	ldr	r2, [pc, #136]	; (8005210 <xTaskIncrementTick+0x168>)
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4a1f      	ldr	r2, [pc, #124]	; (8005214 <xTaskIncrementTick+0x16c>)
 8005198:	441a      	add	r2, r3
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	3304      	adds	r3, #4
 800519e:	4619      	mov	r1, r3
 80051a0:	4610      	mov	r0, r2
 80051a2:	f7fe fe0c 	bl	8003dbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051aa:	4b1b      	ldr	r3, [pc, #108]	; (8005218 <xTaskIncrementTick+0x170>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d3b3      	bcc.n	800511c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80051b4:	2301      	movs	r3, #1
 80051b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051b8:	e7b0      	b.n	800511c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051ba:	4b17      	ldr	r3, [pc, #92]	; (8005218 <xTaskIncrementTick+0x170>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c0:	4914      	ldr	r1, [pc, #80]	; (8005214 <xTaskIncrementTick+0x16c>)
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	440b      	add	r3, r1
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d907      	bls.n	80051e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80051d2:	2301      	movs	r3, #1
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	e004      	b.n	80051e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80051d8:	4b10      	ldr	r3, [pc, #64]	; (800521c <xTaskIncrementTick+0x174>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3301      	adds	r3, #1
 80051de:	4a0f      	ldr	r2, [pc, #60]	; (800521c <xTaskIncrementTick+0x174>)
 80051e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80051e2:	4b0f      	ldr	r3, [pc, #60]	; (8005220 <xTaskIncrementTick+0x178>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80051ea:	2301      	movs	r3, #1
 80051ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80051ee:	697b      	ldr	r3, [r7, #20]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20000df8 	.word	0x20000df8
 80051fc:	20000dd4 	.word	0x20000dd4
 8005200:	20000d88 	.word	0x20000d88
 8005204:	20000d8c 	.word	0x20000d8c
 8005208:	20000de8 	.word	0x20000de8
 800520c:	20000df0 	.word	0x20000df0
 8005210:	20000dd8 	.word	0x20000dd8
 8005214:	20000900 	.word	0x20000900
 8005218:	200008fc 	.word	0x200008fc
 800521c:	20000de0 	.word	0x20000de0
 8005220:	20000de4 	.word	0x20000de4

08005224 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800522a:	4b2a      	ldr	r3, [pc, #168]	; (80052d4 <vTaskSwitchContext+0xb0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005232:	4b29      	ldr	r3, [pc, #164]	; (80052d8 <vTaskSwitchContext+0xb4>)
 8005234:	2201      	movs	r2, #1
 8005236:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005238:	e046      	b.n	80052c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800523a:	4b27      	ldr	r3, [pc, #156]	; (80052d8 <vTaskSwitchContext+0xb4>)
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005240:	4b26      	ldr	r3, [pc, #152]	; (80052dc <vTaskSwitchContext+0xb8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	e010      	b.n	800526a <vTaskSwitchContext+0x46>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10a      	bne.n	8005264 <vTaskSwitchContext+0x40>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	607b      	str	r3, [r7, #4]
}
 8005260:	bf00      	nop
 8005262:	e7fe      	b.n	8005262 <vTaskSwitchContext+0x3e>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3b01      	subs	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	491d      	ldr	r1, [pc, #116]	; (80052e0 <vTaskSwitchContext+0xbc>)
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4613      	mov	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	440b      	add	r3, r1
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0e4      	beq.n	8005248 <vTaskSwitchContext+0x24>
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4a15      	ldr	r2, [pc, #84]	; (80052e0 <vTaskSwitchContext+0xbc>)
 800528a:	4413      	add	r3, r2
 800528c:	60bb      	str	r3, [r7, #8]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	605a      	str	r2, [r3, #4]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	3308      	adds	r3, #8
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d104      	bne.n	80052ae <vTaskSwitchContext+0x8a>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	605a      	str	r2, [r3, #4]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4a0b      	ldr	r2, [pc, #44]	; (80052e4 <vTaskSwitchContext+0xc0>)
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	4a08      	ldr	r2, [pc, #32]	; (80052dc <vTaskSwitchContext+0xb8>)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80052be:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <vTaskSwitchContext+0xc0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3354      	adds	r3, #84	; 0x54
 80052c4:	4a08      	ldr	r2, [pc, #32]	; (80052e8 <vTaskSwitchContext+0xc4>)
 80052c6:	6013      	str	r3, [r2, #0]
}
 80052c8:	bf00      	nop
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	20000df8 	.word	0x20000df8
 80052d8:	20000de4 	.word	0x20000de4
 80052dc:	20000dd8 	.word	0x20000dd8
 80052e0:	20000900 	.word	0x20000900
 80052e4:	200008fc 	.word	0x200008fc
 80052e8:	2000005c 	.word	0x2000005c

080052ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	60fb      	str	r3, [r7, #12]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005312:	4b07      	ldr	r3, [pc, #28]	; (8005330 <vTaskPlaceOnEventList+0x44>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3318      	adds	r3, #24
 8005318:	4619      	mov	r1, r3
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fe fd73 	bl	8003e06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005320:	2101      	movs	r1, #1
 8005322:	6838      	ldr	r0, [r7, #0]
 8005324:	f000 fa86 	bl	8005834 <prvAddCurrentTaskToDelayedList>
}
 8005328:	bf00      	nop
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	200008fc 	.word	0x200008fc

08005334 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	617b      	str	r3, [r7, #20]
}
 8005358:	bf00      	nop
 800535a:	e7fe      	b.n	800535a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800535c:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <vTaskPlaceOnEventListRestricted+0x54>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3318      	adds	r3, #24
 8005362:	4619      	mov	r1, r3
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f7fe fd2a 	bl	8003dbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005374:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005376:	6879      	ldr	r1, [r7, #4]
 8005378:	68b8      	ldr	r0, [r7, #8]
 800537a:	f000 fa5b 	bl	8005834 <prvAddCurrentTaskToDelayedList>
	}
 800537e:	bf00      	nop
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	200008fc 	.word	0x200008fc

0800538c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10a      	bne.n	80053b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	60fb      	str	r3, [r7, #12]
}
 80053b4:	bf00      	nop
 80053b6:	e7fe      	b.n	80053b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	3318      	adds	r3, #24
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fe fd5b 	bl	8003e78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053c2:	4b1e      	ldr	r3, [pc, #120]	; (800543c <xTaskRemoveFromEventList+0xb0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d11d      	bne.n	8005406 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	3304      	adds	r3, #4
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe fd52 	bl	8003e78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d8:	4b19      	ldr	r3, [pc, #100]	; (8005440 <xTaskRemoveFromEventList+0xb4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d903      	bls.n	80053e8 <xTaskRemoveFromEventList+0x5c>
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	4a16      	ldr	r2, [pc, #88]	; (8005440 <xTaskRemoveFromEventList+0xb4>)
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4a13      	ldr	r2, [pc, #76]	; (8005444 <xTaskRemoveFromEventList+0xb8>)
 80053f6:	441a      	add	r2, r3
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	3304      	adds	r3, #4
 80053fc:	4619      	mov	r1, r3
 80053fe:	4610      	mov	r0, r2
 8005400:	f7fe fcdd 	bl	8003dbe <vListInsertEnd>
 8005404:	e005      	b.n	8005412 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	3318      	adds	r3, #24
 800540a:	4619      	mov	r1, r3
 800540c:	480e      	ldr	r0, [pc, #56]	; (8005448 <xTaskRemoveFromEventList+0xbc>)
 800540e:	f7fe fcd6 	bl	8003dbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005416:	4b0d      	ldr	r3, [pc, #52]	; (800544c <xTaskRemoveFromEventList+0xc0>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	429a      	cmp	r2, r3
 800541e:	d905      	bls.n	800542c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005420:	2301      	movs	r3, #1
 8005422:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005424:	4b0a      	ldr	r3, [pc, #40]	; (8005450 <xTaskRemoveFromEventList+0xc4>)
 8005426:	2201      	movs	r2, #1
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	e001      	b.n	8005430 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800542c:	2300      	movs	r3, #0
 800542e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005430:	697b      	ldr	r3, [r7, #20]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20000df8 	.word	0x20000df8
 8005440:	20000dd8 	.word	0x20000dd8
 8005444:	20000900 	.word	0x20000900
 8005448:	20000d90 	.word	0x20000d90
 800544c:	200008fc 	.word	0x200008fc
 8005450:	20000de4 	.word	0x20000de4

08005454 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800545c:	4b06      	ldr	r3, [pc, #24]	; (8005478 <vTaskInternalSetTimeOutState+0x24>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005464:	4b05      	ldr	r3, [pc, #20]	; (800547c <vTaskInternalSetTimeOutState+0x28>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	605a      	str	r2, [r3, #4]
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	20000de8 	.word	0x20000de8
 800547c:	20000dd4 	.word	0x20000dd4

08005480 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b088      	sub	sp, #32
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	613b      	str	r3, [r7, #16]
}
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10a      	bne.n	80054c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	60fb      	str	r3, [r7, #12]
}
 80054be:	bf00      	nop
 80054c0:	e7fe      	b.n	80054c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80054c2:	f000 fe47 	bl	8006154 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054c6:	4b1d      	ldr	r3, [pc, #116]	; (800553c <xTaskCheckForTimeOut+0xbc>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054de:	d102      	bne.n	80054e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61fb      	str	r3, [r7, #28]
 80054e4:	e023      	b.n	800552e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	4b15      	ldr	r3, [pc, #84]	; (8005540 <xTaskCheckForTimeOut+0xc0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d007      	beq.n	8005502 <xTaskCheckForTimeOut+0x82>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d302      	bcc.n	8005502 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80054fc:	2301      	movs	r3, #1
 80054fe:	61fb      	str	r3, [r7, #28]
 8005500:	e015      	b.n	800552e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	429a      	cmp	r2, r3
 800550a:	d20b      	bcs.n	8005524 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	1ad2      	subs	r2, r2, r3
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff ff9b 	bl	8005454 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800551e:	2300      	movs	r3, #0
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	e004      	b.n	800552e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800552a:	2301      	movs	r3, #1
 800552c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800552e:	f000 fe41 	bl	80061b4 <vPortExitCritical>

	return xReturn;
 8005532:	69fb      	ldr	r3, [r7, #28]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3720      	adds	r7, #32
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	20000dd4 	.word	0x20000dd4
 8005540:	20000de8 	.word	0x20000de8

08005544 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005548:	4b03      	ldr	r3, [pc, #12]	; (8005558 <vTaskMissedYield+0x14>)
 800554a:	2201      	movs	r2, #1
 800554c:	601a      	str	r2, [r3, #0]
}
 800554e:	bf00      	nop
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	20000de4 	.word	0x20000de4

0800555c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005564:	f000 f852 	bl	800560c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005568:	4b06      	ldr	r3, [pc, #24]	; (8005584 <prvIdleTask+0x28>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d9f9      	bls.n	8005564 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <prvIdleTask+0x2c>)
 8005572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005580:	e7f0      	b.n	8005564 <prvIdleTask+0x8>
 8005582:	bf00      	nop
 8005584:	20000900 	.word	0x20000900
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005592:	2300      	movs	r3, #0
 8005594:	607b      	str	r3, [r7, #4]
 8005596:	e00c      	b.n	80055b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4a12      	ldr	r2, [pc, #72]	; (80055ec <prvInitialiseTaskLists+0x60>)
 80055a4:	4413      	add	r3, r2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fe fbdc 	bl	8003d64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3301      	adds	r3, #1
 80055b0:	607b      	str	r3, [r7, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b37      	cmp	r3, #55	; 0x37
 80055b6:	d9ef      	bls.n	8005598 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055b8:	480d      	ldr	r0, [pc, #52]	; (80055f0 <prvInitialiseTaskLists+0x64>)
 80055ba:	f7fe fbd3 	bl	8003d64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055be:	480d      	ldr	r0, [pc, #52]	; (80055f4 <prvInitialiseTaskLists+0x68>)
 80055c0:	f7fe fbd0 	bl	8003d64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055c4:	480c      	ldr	r0, [pc, #48]	; (80055f8 <prvInitialiseTaskLists+0x6c>)
 80055c6:	f7fe fbcd 	bl	8003d64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055ca:	480c      	ldr	r0, [pc, #48]	; (80055fc <prvInitialiseTaskLists+0x70>)
 80055cc:	f7fe fbca 	bl	8003d64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055d0:	480b      	ldr	r0, [pc, #44]	; (8005600 <prvInitialiseTaskLists+0x74>)
 80055d2:	f7fe fbc7 	bl	8003d64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055d6:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <prvInitialiseTaskLists+0x78>)
 80055d8:	4a05      	ldr	r2, [pc, #20]	; (80055f0 <prvInitialiseTaskLists+0x64>)
 80055da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055dc:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <prvInitialiseTaskLists+0x7c>)
 80055de:	4a05      	ldr	r2, [pc, #20]	; (80055f4 <prvInitialiseTaskLists+0x68>)
 80055e0:	601a      	str	r2, [r3, #0]
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20000900 	.word	0x20000900
 80055f0:	20000d60 	.word	0x20000d60
 80055f4:	20000d74 	.word	0x20000d74
 80055f8:	20000d90 	.word	0x20000d90
 80055fc:	20000da4 	.word	0x20000da4
 8005600:	20000dbc 	.word	0x20000dbc
 8005604:	20000d88 	.word	0x20000d88
 8005608:	20000d8c 	.word	0x20000d8c

0800560c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005612:	e019      	b.n	8005648 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005614:	f000 fd9e 	bl	8006154 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005618:	4b10      	ldr	r3, [pc, #64]	; (800565c <prvCheckTasksWaitingTermination+0x50>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3304      	adds	r3, #4
 8005624:	4618      	mov	r0, r3
 8005626:	f7fe fc27 	bl	8003e78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800562a:	4b0d      	ldr	r3, [pc, #52]	; (8005660 <prvCheckTasksWaitingTermination+0x54>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3b01      	subs	r3, #1
 8005630:	4a0b      	ldr	r2, [pc, #44]	; (8005660 <prvCheckTasksWaitingTermination+0x54>)
 8005632:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005634:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <prvCheckTasksWaitingTermination+0x58>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3b01      	subs	r3, #1
 800563a:	4a0a      	ldr	r2, [pc, #40]	; (8005664 <prvCheckTasksWaitingTermination+0x58>)
 800563c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800563e:	f000 fdb9 	bl	80061b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f810 	bl	8005668 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005648:	4b06      	ldr	r3, [pc, #24]	; (8005664 <prvCheckTasksWaitingTermination+0x58>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e1      	bne.n	8005614 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000da4 	.word	0x20000da4
 8005660:	20000dd0 	.word	0x20000dd0
 8005664:	20000db8 	.word	0x20000db8

08005668 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3354      	adds	r3, #84	; 0x54
 8005674:	4618      	mov	r0, r3
 8005676:	f001 f871 	bl	800675c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005680:	2b00      	cmp	r3, #0
 8005682:	d108      	bne.n	8005696 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005688:	4618      	mov	r0, r3
 800568a:	f000 ff49 	bl	8006520 <vPortFree>
				vPortFree( pxTCB );
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 ff46 	bl	8006520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005694:	e018      	b.n	80056c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800569c:	2b01      	cmp	r3, #1
 800569e:	d103      	bne.n	80056a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 ff3d 	bl	8006520 <vPortFree>
	}
 80056a6:	e00f      	b.n	80056c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d00a      	beq.n	80056c8 <prvDeleteTCB+0x60>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	60fb      	str	r3, [r7, #12]
}
 80056c4:	bf00      	nop
 80056c6:	e7fe      	b.n	80056c6 <prvDeleteTCB+0x5e>
	}
 80056c8:	bf00      	nop
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056d6:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <prvResetNextTaskUnblockTime+0x44>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <prvResetNextTaskUnblockTime+0x14>
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <prvResetNextTaskUnblockTime+0x16>
 80056e4:	2300      	movs	r3, #0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d004      	beq.n	80056f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056ea:	4b0b      	ldr	r3, [pc, #44]	; (8005718 <prvResetNextTaskUnblockTime+0x48>)
 80056ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80056f2:	e008      	b.n	8005706 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80056f4:	4b07      	ldr	r3, [pc, #28]	; (8005714 <prvResetNextTaskUnblockTime+0x44>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	4a05      	ldr	r2, [pc, #20]	; (8005718 <prvResetNextTaskUnblockTime+0x48>)
 8005704:	6013      	str	r3, [r2, #0]
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	20000d88 	.word	0x20000d88
 8005718:	20000df0 	.word	0x20000df0

0800571c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005722:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <xTaskGetSchedulerState+0x34>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d102      	bne.n	8005730 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800572a:	2301      	movs	r3, #1
 800572c:	607b      	str	r3, [r7, #4]
 800572e:	e008      	b.n	8005742 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005730:	4b08      	ldr	r3, [pc, #32]	; (8005754 <xTaskGetSchedulerState+0x38>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005738:	2302      	movs	r3, #2
 800573a:	607b      	str	r3, [r7, #4]
 800573c:	e001      	b.n	8005742 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005742:	687b      	ldr	r3, [r7, #4]
	}
 8005744:	4618      	mov	r0, r3
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	20000ddc 	.word	0x20000ddc
 8005754:	20000df8 	.word	0x20000df8

08005758 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005764:	2300      	movs	r3, #0
 8005766:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d056      	beq.n	800581c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800576e:	4b2e      	ldr	r3, [pc, #184]	; (8005828 <xTaskPriorityDisinherit+0xd0>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	429a      	cmp	r2, r3
 8005776:	d00a      	beq.n	800578e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	60fb      	str	r3, [r7, #12]
}
 800578a:	bf00      	nop
 800578c:	e7fe      	b.n	800578c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10a      	bne.n	80057ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	60bb      	str	r3, [r7, #8]
}
 80057a8:	bf00      	nop
 80057aa:	e7fe      	b.n	80057aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b0:	1e5a      	subs	r2, r3, #1
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057be:	429a      	cmp	r2, r3
 80057c0:	d02c      	beq.n	800581c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d128      	bne.n	800581c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	3304      	adds	r3, #4
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fe fb52 	bl	8003e78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ec:	4b0f      	ldr	r3, [pc, #60]	; (800582c <xTaskPriorityDisinherit+0xd4>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d903      	bls.n	80057fc <xTaskPriorityDisinherit+0xa4>
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	4a0c      	ldr	r2, [pc, #48]	; (800582c <xTaskPriorityDisinherit+0xd4>)
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005800:	4613      	mov	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4a09      	ldr	r2, [pc, #36]	; (8005830 <xTaskPriorityDisinherit+0xd8>)
 800580a:	441a      	add	r2, r3
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	3304      	adds	r3, #4
 8005810:	4619      	mov	r1, r3
 8005812:	4610      	mov	r0, r2
 8005814:	f7fe fad3 	bl	8003dbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005818:	2301      	movs	r3, #1
 800581a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800581c:	697b      	ldr	r3, [r7, #20]
	}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	200008fc 	.word	0x200008fc
 800582c:	20000dd8 	.word	0x20000dd8
 8005830:	20000900 	.word	0x20000900

08005834 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800583e:	4b21      	ldr	r3, [pc, #132]	; (80058c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005844:	4b20      	ldr	r3, [pc, #128]	; (80058c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3304      	adds	r3, #4
 800584a:	4618      	mov	r0, r3
 800584c:	f7fe fb14 	bl	8003e78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005856:	d10a      	bne.n	800586e <prvAddCurrentTaskToDelayedList+0x3a>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d007      	beq.n	800586e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800585e:	4b1a      	ldr	r3, [pc, #104]	; (80058c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3304      	adds	r3, #4
 8005864:	4619      	mov	r1, r3
 8005866:	4819      	ldr	r0, [pc, #100]	; (80058cc <prvAddCurrentTaskToDelayedList+0x98>)
 8005868:	f7fe faa9 	bl	8003dbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800586c:	e026      	b.n	80058bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4413      	add	r3, r2
 8005874:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005876:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	429a      	cmp	r2, r3
 8005884:	d209      	bcs.n	800589a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005886:	4b12      	ldr	r3, [pc, #72]	; (80058d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	4b0f      	ldr	r3, [pc, #60]	; (80058c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3304      	adds	r3, #4
 8005890:	4619      	mov	r1, r3
 8005892:	4610      	mov	r0, r2
 8005894:	f7fe fab7 	bl	8003e06 <vListInsert>
}
 8005898:	e010      	b.n	80058bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800589a:	4b0e      	ldr	r3, [pc, #56]	; (80058d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3304      	adds	r3, #4
 80058a4:	4619      	mov	r1, r3
 80058a6:	4610      	mov	r0, r2
 80058a8:	f7fe faad 	bl	8003e06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058ac:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d202      	bcs.n	80058bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80058b6:	4a08      	ldr	r2, [pc, #32]	; (80058d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	6013      	str	r3, [r2, #0]
}
 80058bc:	bf00      	nop
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	20000dd4 	.word	0x20000dd4
 80058c8:	200008fc 	.word	0x200008fc
 80058cc:	20000dbc 	.word	0x20000dbc
 80058d0:	20000d8c 	.word	0x20000d8c
 80058d4:	20000d88 	.word	0x20000d88
 80058d8:	20000df0 	.word	0x20000df0

080058dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08a      	sub	sp, #40	; 0x28
 80058e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80058e6:	f000 facb 	bl	8005e80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80058ea:	4b1c      	ldr	r3, [pc, #112]	; (800595c <xTimerCreateTimerTask+0x80>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d021      	beq.n	8005936 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80058fa:	1d3a      	adds	r2, r7, #4
 80058fc:	f107 0108 	add.w	r1, r7, #8
 8005900:	f107 030c 	add.w	r3, r7, #12
 8005904:	4618      	mov	r0, r3
 8005906:	f7fe fa13 	bl	8003d30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	9202      	str	r2, [sp, #8]
 8005912:	9301      	str	r3, [sp, #4]
 8005914:	2302      	movs	r3, #2
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	2300      	movs	r3, #0
 800591a:	460a      	mov	r2, r1
 800591c:	4910      	ldr	r1, [pc, #64]	; (8005960 <xTimerCreateTimerTask+0x84>)
 800591e:	4811      	ldr	r0, [pc, #68]	; (8005964 <xTimerCreateTimerTask+0x88>)
 8005920:	f7ff f8b2 	bl	8004a88 <xTaskCreateStatic>
 8005924:	4603      	mov	r3, r0
 8005926:	4a10      	ldr	r2, [pc, #64]	; (8005968 <xTimerCreateTimerTask+0x8c>)
 8005928:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800592a:	4b0f      	ldr	r3, [pc, #60]	; (8005968 <xTimerCreateTimerTask+0x8c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005932:	2301      	movs	r3, #1
 8005934:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	613b      	str	r3, [r7, #16]
}
 800594e:	bf00      	nop
 8005950:	e7fe      	b.n	8005950 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005952:	697b      	ldr	r3, [r7, #20]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	20000e2c 	.word	0x20000e2c
 8005960:	08006ad8 	.word	0x08006ad8
 8005964:	08005a89 	.word	0x08005a89
 8005968:	20000e30 	.word	0x20000e30

0800596c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08a      	sub	sp, #40	; 0x28
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800597a:	2300      	movs	r3, #0
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	623b      	str	r3, [r7, #32]
}
 8005996:	bf00      	nop
 8005998:	e7fe      	b.n	8005998 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800599a:	4b1a      	ldr	r3, [pc, #104]	; (8005a04 <xTimerGenericCommand+0x98>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d02a      	beq.n	80059f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2b05      	cmp	r3, #5
 80059b2:	dc18      	bgt.n	80059e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80059b4:	f7ff feb2 	bl	800571c <xTaskGetSchedulerState>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d109      	bne.n	80059d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80059be:	4b11      	ldr	r3, [pc, #68]	; (8005a04 <xTimerGenericCommand+0x98>)
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	f107 0110 	add.w	r1, r7, #16
 80059c6:	2300      	movs	r3, #0
 80059c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ca:	f7fe fbbf 	bl	800414c <xQueueGenericSend>
 80059ce:	6278      	str	r0, [r7, #36]	; 0x24
 80059d0:	e012      	b.n	80059f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80059d2:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <xTimerGenericCommand+0x98>)
 80059d4:	6818      	ldr	r0, [r3, #0]
 80059d6:	f107 0110 	add.w	r1, r7, #16
 80059da:	2300      	movs	r3, #0
 80059dc:	2200      	movs	r2, #0
 80059de:	f7fe fbb5 	bl	800414c <xQueueGenericSend>
 80059e2:	6278      	str	r0, [r7, #36]	; 0x24
 80059e4:	e008      	b.n	80059f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80059e6:	4b07      	ldr	r3, [pc, #28]	; (8005a04 <xTimerGenericCommand+0x98>)
 80059e8:	6818      	ldr	r0, [r3, #0]
 80059ea:	f107 0110 	add.w	r1, r7, #16
 80059ee:	2300      	movs	r3, #0
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	f7fe fca9 	bl	8004348 <xQueueGenericSendFromISR>
 80059f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3728      	adds	r7, #40	; 0x28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	20000e2c 	.word	0x20000e2c

08005a08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b088      	sub	sp, #32
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a12:	4b1c      	ldr	r3, [pc, #112]	; (8005a84 <prvProcessExpiredTimer+0x7c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fe fa29 	bl	8003e78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d122      	bne.n	8005a74 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	699a      	ldr	r2, [r3, #24]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	18d1      	adds	r1, r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	6978      	ldr	r0, [r7, #20]
 8005a3c:	f000 f8c8 	bl	8005bd0 <prvInsertTimerInActiveList>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d016      	beq.n	8005a74 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a46:	2300      	movs	r3, #0
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	2100      	movs	r1, #0
 8005a50:	6978      	ldr	r0, [r7, #20]
 8005a52:	f7ff ff8b 	bl	800596c <xTimerGenericCommand>
 8005a56:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10a      	bne.n	8005a74 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	60fb      	str	r3, [r7, #12]
}
 8005a70:	bf00      	nop
 8005a72:	e7fe      	b.n	8005a72 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	6978      	ldr	r0, [r7, #20]
 8005a7a:	4798      	blx	r3
}
 8005a7c:	bf00      	nop
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	20000e24 	.word	0x20000e24

08005a88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a90:	f107 0308 	add.w	r3, r7, #8
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 f857 	bl	8005b48 <prvGetNextExpireTime>
 8005a9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f803 	bl	8005aac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005aa6:	f000 f8d5 	bl	8005c54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005aaa:	e7f1      	b.n	8005a90 <prvTimerTask+0x8>

08005aac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ab6:	f7ff fa3b 	bl	8004f30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005aba:	f107 0308 	add.w	r3, r7, #8
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 f866 	bl	8005b90 <prvSampleTimeNow>
 8005ac4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d130      	bne.n	8005b2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10a      	bne.n	8005ae8 <prvProcessTimerOrBlockTask+0x3c>
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d806      	bhi.n	8005ae8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ada:	f7ff fa37 	bl	8004f4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ade:	68f9      	ldr	r1, [r7, #12]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff ff91 	bl	8005a08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005ae6:	e024      	b.n	8005b32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d008      	beq.n	8005b00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005aee:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <prvProcessTimerOrBlockTask+0x90>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bf0c      	ite	eq
 8005af8:	2301      	moveq	r3, #1
 8005afa:	2300      	movne	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b00:	4b0f      	ldr	r3, [pc, #60]	; (8005b40 <prvProcessTimerOrBlockTask+0x94>)
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	f7fe ff87 	bl	8004a20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b12:	f7ff fa1b 	bl	8004f4c <xTaskResumeAll>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10a      	bne.n	8005b32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b1c:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <prvProcessTimerOrBlockTask+0x98>)
 8005b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	f3bf 8f6f 	isb	sy
}
 8005b2c:	e001      	b.n	8005b32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b2e:	f7ff fa0d 	bl	8004f4c <xTaskResumeAll>
}
 8005b32:	bf00      	nop
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20000e28 	.word	0x20000e28
 8005b40:	20000e2c 	.word	0x20000e2c
 8005b44:	e000ed04 	.word	0xe000ed04

08005b48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b50:	4b0e      	ldr	r3, [pc, #56]	; (8005b8c <prvGetNextExpireTime+0x44>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	bf0c      	ite	eq
 8005b5a:	2301      	moveq	r3, #1
 8005b5c:	2300      	movne	r3, #0
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	461a      	mov	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d105      	bne.n	8005b7a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b6e:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <prvGetNextExpireTime+0x44>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	e001      	b.n	8005b7e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	20000e24 	.word	0x20000e24

08005b90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b98:	f7ff fa76 	bl	8005088 <xTaskGetTickCount>
 8005b9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b9e:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <prvSampleTimeNow+0x3c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d205      	bcs.n	8005bb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ba8:	f000 f908 	bl	8005dbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	e002      	b.n	8005bba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005bba:	4a04      	ldr	r2, [pc, #16]	; (8005bcc <prvSampleTimeNow+0x3c>)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000e34 	.word	0x20000e34

08005bd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d812      	bhi.n	8005c1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	1ad2      	subs	r2, r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d302      	bcc.n	8005c0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c04:	2301      	movs	r3, #1
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	e01b      	b.n	8005c42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c0a:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <prvInsertTimerInActiveList+0x7c>)
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3304      	adds	r3, #4
 8005c12:	4619      	mov	r1, r3
 8005c14:	4610      	mov	r0, r2
 8005c16:	f7fe f8f6 	bl	8003e06 <vListInsert>
 8005c1a:	e012      	b.n	8005c42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d206      	bcs.n	8005c32 <prvInsertTimerInActiveList+0x62>
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d302      	bcc.n	8005c32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	e007      	b.n	8005c42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c32:	4b07      	ldr	r3, [pc, #28]	; (8005c50 <prvInsertTimerInActiveList+0x80>)
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	f7fe f8e2 	bl	8003e06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c42:	697b      	ldr	r3, [r7, #20]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20000e28 	.word	0x20000e28
 8005c50:	20000e24 	.word	0x20000e24

08005c54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08e      	sub	sp, #56	; 0x38
 8005c58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c5a:	e09d      	b.n	8005d98 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	da18      	bge.n	8005c94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c62:	1d3b      	adds	r3, r7, #4
 8005c64:	3304      	adds	r3, #4
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10a      	bne.n	8005c84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	61fb      	str	r3, [r7, #28]
}
 8005c80:	bf00      	nop
 8005c82:	e7fe      	b.n	8005c82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c8a:	6850      	ldr	r0, [r2, #4]
 8005c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c8e:	6892      	ldr	r2, [r2, #8]
 8005c90:	4611      	mov	r1, r2
 8005c92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	db7e      	blt.n	8005d98 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca8:	3304      	adds	r3, #4
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe f8e4 	bl	8003e78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff ff6c 	bl	8005b90 <prvSampleTimeNow>
 8005cb8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b09      	cmp	r3, #9
 8005cbe:	d86a      	bhi.n	8005d96 <prvProcessReceivedCommands+0x142>
 8005cc0:	a201      	add	r2, pc, #4	; (adr r2, 8005cc8 <prvProcessReceivedCommands+0x74>)
 8005cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc6:	bf00      	nop
 8005cc8:	08005cf1 	.word	0x08005cf1
 8005ccc:	08005cf1 	.word	0x08005cf1
 8005cd0:	08005cf1 	.word	0x08005cf1
 8005cd4:	08005d99 	.word	0x08005d99
 8005cd8:	08005d4d 	.word	0x08005d4d
 8005cdc:	08005d85 	.word	0x08005d85
 8005ce0:	08005cf1 	.word	0x08005cf1
 8005ce4:	08005cf1 	.word	0x08005cf1
 8005ce8:	08005d99 	.word	0x08005d99
 8005cec:	08005d4d 	.word	0x08005d4d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	18d1      	adds	r1, r2, r3
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cfe:	f7ff ff67 	bl	8005bd0 <prvInsertTimerInActiveList>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d047      	beq.n	8005d98 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d0e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d13f      	bne.n	8005d98 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	441a      	add	r2, r3
 8005d20:	2300      	movs	r3, #0
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	2300      	movs	r3, #0
 8005d26:	2100      	movs	r1, #0
 8005d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d2a:	f7ff fe1f 	bl	800596c <xTimerGenericCommand>
 8005d2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d130      	bne.n	8005d98 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	61bb      	str	r3, [r7, #24]
}
 8005d48:	bf00      	nop
 8005d4a:	e7fe      	b.n	8005d4a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10a      	bne.n	8005d70 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	617b      	str	r3, [r7, #20]
}
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d72:	699a      	ldr	r2, [r3, #24]
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	18d1      	adds	r1, r2, r3
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d7e:	f7ff ff27 	bl	8005bd0 <prvInsertTimerInActiveList>
					break;
 8005d82:	e009      	b.n	8005d98 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d104      	bne.n	8005d98 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d90:	f000 fbc6 	bl	8006520 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d94:	e000      	b.n	8005d98 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8005d96:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d98:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <prvProcessReceivedCommands+0x164>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	1d39      	adds	r1, r7, #4
 8005d9e:	2200      	movs	r2, #0
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fe fb69 	bl	8004478 <xQueueReceive>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f47f af57 	bne.w	8005c5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005dae:	bf00      	nop
 8005db0:	bf00      	nop
 8005db2:	3730      	adds	r7, #48	; 0x30
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20000e2c 	.word	0x20000e2c

08005dbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dc2:	e045      	b.n	8005e50 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dc4:	4b2c      	ldr	r3, [pc, #176]	; (8005e78 <prvSwitchTimerLists+0xbc>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dce:	4b2a      	ldr	r3, [pc, #168]	; (8005e78 <prvSwitchTimerLists+0xbc>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fe f84b 	bl	8003e78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d12e      	bne.n	8005e50 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4413      	add	r3, r2
 8005dfa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d90e      	bls.n	8005e22 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e10:	4b19      	ldr	r3, [pc, #100]	; (8005e78 <prvSwitchTimerLists+0xbc>)
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3304      	adds	r3, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	f7fd fff3 	bl	8003e06 <vListInsert>
 8005e20:	e016      	b.n	8005e50 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e22:	2300      	movs	r3, #0
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	2300      	movs	r3, #0
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f7ff fd9d 	bl	800596c <xTimerGenericCommand>
 8005e32:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10a      	bne.n	8005e50 <prvSwitchTimerLists+0x94>
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	603b      	str	r3, [r7, #0]
}
 8005e4c:	bf00      	nop
 8005e4e:	e7fe      	b.n	8005e4e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e50:	4b09      	ldr	r3, [pc, #36]	; (8005e78 <prvSwitchTimerLists+0xbc>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1b4      	bne.n	8005dc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e5a:	4b07      	ldr	r3, [pc, #28]	; (8005e78 <prvSwitchTimerLists+0xbc>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e60:	4b06      	ldr	r3, [pc, #24]	; (8005e7c <prvSwitchTimerLists+0xc0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a04      	ldr	r2, [pc, #16]	; (8005e78 <prvSwitchTimerLists+0xbc>)
 8005e66:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e68:	4a04      	ldr	r2, [pc, #16]	; (8005e7c <prvSwitchTimerLists+0xc0>)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	6013      	str	r3, [r2, #0]
}
 8005e6e:	bf00      	nop
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000e24 	.word	0x20000e24
 8005e7c:	20000e28 	.word	0x20000e28

08005e80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e86:	f000 f965 	bl	8006154 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e8a:	4b15      	ldr	r3, [pc, #84]	; (8005ee0 <prvCheckForValidListAndQueue+0x60>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d120      	bne.n	8005ed4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e92:	4814      	ldr	r0, [pc, #80]	; (8005ee4 <prvCheckForValidListAndQueue+0x64>)
 8005e94:	f7fd ff66 	bl	8003d64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e98:	4813      	ldr	r0, [pc, #76]	; (8005ee8 <prvCheckForValidListAndQueue+0x68>)
 8005e9a:	f7fd ff63 	bl	8003d64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e9e:	4b13      	ldr	r3, [pc, #76]	; (8005eec <prvCheckForValidListAndQueue+0x6c>)
 8005ea0:	4a10      	ldr	r2, [pc, #64]	; (8005ee4 <prvCheckForValidListAndQueue+0x64>)
 8005ea2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ea4:	4b12      	ldr	r3, [pc, #72]	; (8005ef0 <prvCheckForValidListAndQueue+0x70>)
 8005ea6:	4a10      	ldr	r2, [pc, #64]	; (8005ee8 <prvCheckForValidListAndQueue+0x68>)
 8005ea8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005eaa:	2300      	movs	r3, #0
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	4b11      	ldr	r3, [pc, #68]	; (8005ef4 <prvCheckForValidListAndQueue+0x74>)
 8005eb0:	4a11      	ldr	r2, [pc, #68]	; (8005ef8 <prvCheckForValidListAndQueue+0x78>)
 8005eb2:	2110      	movs	r1, #16
 8005eb4:	200a      	movs	r0, #10
 8005eb6:	f7fe f871 	bl	8003f9c <xQueueGenericCreateStatic>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	4a08      	ldr	r2, [pc, #32]	; (8005ee0 <prvCheckForValidListAndQueue+0x60>)
 8005ebe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ec0:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <prvCheckForValidListAndQueue+0x60>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ec8:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <prvCheckForValidListAndQueue+0x60>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	490b      	ldr	r1, [pc, #44]	; (8005efc <prvCheckForValidListAndQueue+0x7c>)
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fe fd7c 	bl	80049cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ed4:	f000 f96e 	bl	80061b4 <vPortExitCritical>
}
 8005ed8:	bf00      	nop
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000e2c 	.word	0x20000e2c
 8005ee4:	20000dfc 	.word	0x20000dfc
 8005ee8:	20000e10 	.word	0x20000e10
 8005eec:	20000e24 	.word	0x20000e24
 8005ef0:	20000e28 	.word	0x20000e28
 8005ef4:	20000ed8 	.word	0x20000ed8
 8005ef8:	20000e38 	.word	0x20000e38
 8005efc:	08006ae0 	.word	0x08006ae0

08005f00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	3b04      	subs	r3, #4
 8005f10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3b04      	subs	r3, #4
 8005f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f023 0201 	bic.w	r2, r3, #1
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	3b04      	subs	r3, #4
 8005f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f30:	4a0c      	ldr	r2, [pc, #48]	; (8005f64 <pxPortInitialiseStack+0x64>)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3b14      	subs	r3, #20
 8005f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	3b04      	subs	r3, #4
 8005f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f06f 0202 	mvn.w	r2, #2
 8005f4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3b20      	subs	r3, #32
 8005f54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f56:	68fb      	ldr	r3, [r7, #12]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	08005f69 	.word	0x08005f69

08005f68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f72:	4b12      	ldr	r3, [pc, #72]	; (8005fbc <prvTaskExitError+0x54>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f7a:	d00a      	beq.n	8005f92 <prvTaskExitError+0x2a>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	60fb      	str	r3, [r7, #12]
}
 8005f8e:	bf00      	nop
 8005f90:	e7fe      	b.n	8005f90 <prvTaskExitError+0x28>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	60bb      	str	r3, [r7, #8]
}
 8005fa4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fa6:	bf00      	nop
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0fc      	beq.n	8005fa8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fae:	bf00      	nop
 8005fb0:	bf00      	nop
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	2000000c 	.word	0x2000000c

08005fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005fc0:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <pxCurrentTCBConst2>)
 8005fc2:	6819      	ldr	r1, [r3, #0]
 8005fc4:	6808      	ldr	r0, [r1, #0]
 8005fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fca:	f380 8809 	msr	PSP, r0
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f04f 0000 	mov.w	r0, #0
 8005fd6:	f380 8811 	msr	BASEPRI, r0
 8005fda:	4770      	bx	lr
 8005fdc:	f3af 8000 	nop.w

08005fe0 <pxCurrentTCBConst2>:
 8005fe0:	200008fc 	.word	0x200008fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fe4:	bf00      	nop
 8005fe6:	bf00      	nop

08005fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005fe8:	4808      	ldr	r0, [pc, #32]	; (800600c <prvPortStartFirstTask+0x24>)
 8005fea:	6800      	ldr	r0, [r0, #0]
 8005fec:	6800      	ldr	r0, [r0, #0]
 8005fee:	f380 8808 	msr	MSP, r0
 8005ff2:	f04f 0000 	mov.w	r0, #0
 8005ff6:	f380 8814 	msr	CONTROL, r0
 8005ffa:	b662      	cpsie	i
 8005ffc:	b661      	cpsie	f
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	df00      	svc	0
 8006008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800600a:	bf00      	nop
 800600c:	e000ed08 	.word	0xe000ed08

08006010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006016:	4b46      	ldr	r3, [pc, #280]	; (8006130 <xPortStartScheduler+0x120>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a46      	ldr	r2, [pc, #280]	; (8006134 <xPortStartScheduler+0x124>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d10a      	bne.n	8006036 <xPortStartScheduler+0x26>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	613b      	str	r3, [r7, #16]
}
 8006032:	bf00      	nop
 8006034:	e7fe      	b.n	8006034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006036:	4b3e      	ldr	r3, [pc, #248]	; (8006130 <xPortStartScheduler+0x120>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a3f      	ldr	r2, [pc, #252]	; (8006138 <xPortStartScheduler+0x128>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d10a      	bne.n	8006056 <xPortStartScheduler+0x46>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	60fb      	str	r3, [r7, #12]
}
 8006052:	bf00      	nop
 8006054:	e7fe      	b.n	8006054 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006056:	4b39      	ldr	r3, [pc, #228]	; (800613c <xPortStartScheduler+0x12c>)
 8006058:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	b2db      	uxtb	r3, r3
 8006060:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	22ff      	movs	r2, #255	; 0xff
 8006066:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006078:	b2da      	uxtb	r2, r3
 800607a:	4b31      	ldr	r3, [pc, #196]	; (8006140 <xPortStartScheduler+0x130>)
 800607c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800607e:	4b31      	ldr	r3, [pc, #196]	; (8006144 <xPortStartScheduler+0x134>)
 8006080:	2207      	movs	r2, #7
 8006082:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006084:	e009      	b.n	800609a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006086:	4b2f      	ldr	r3, [pc, #188]	; (8006144 <xPortStartScheduler+0x134>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3b01      	subs	r3, #1
 800608c:	4a2d      	ldr	r2, [pc, #180]	; (8006144 <xPortStartScheduler+0x134>)
 800608e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	b2db      	uxtb	r3, r3
 8006098:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800609a:	78fb      	ldrb	r3, [r7, #3]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a2:	2b80      	cmp	r3, #128	; 0x80
 80060a4:	d0ef      	beq.n	8006086 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060a6:	4b27      	ldr	r3, [pc, #156]	; (8006144 <xPortStartScheduler+0x134>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f1c3 0307 	rsb	r3, r3, #7
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d00a      	beq.n	80060c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	60bb      	str	r3, [r7, #8]
}
 80060c4:	bf00      	nop
 80060c6:	e7fe      	b.n	80060c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060c8:	4b1e      	ldr	r3, [pc, #120]	; (8006144 <xPortStartScheduler+0x134>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	021b      	lsls	r3, r3, #8
 80060ce:	4a1d      	ldr	r2, [pc, #116]	; (8006144 <xPortStartScheduler+0x134>)
 80060d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060d2:	4b1c      	ldr	r3, [pc, #112]	; (8006144 <xPortStartScheduler+0x134>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060da:	4a1a      	ldr	r2, [pc, #104]	; (8006144 <xPortStartScheduler+0x134>)
 80060dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060e6:	4b18      	ldr	r3, [pc, #96]	; (8006148 <xPortStartScheduler+0x138>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a17      	ldr	r2, [pc, #92]	; (8006148 <xPortStartScheduler+0x138>)
 80060ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060f2:	4b15      	ldr	r3, [pc, #84]	; (8006148 <xPortStartScheduler+0x138>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a14      	ldr	r2, [pc, #80]	; (8006148 <xPortStartScheduler+0x138>)
 80060f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80060fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060fe:	f000 f8dd 	bl	80062bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006102:	4b12      	ldr	r3, [pc, #72]	; (800614c <xPortStartScheduler+0x13c>)
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006108:	f000 f8fc 	bl	8006304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800610c:	4b10      	ldr	r3, [pc, #64]	; (8006150 <xPortStartScheduler+0x140>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a0f      	ldr	r2, [pc, #60]	; (8006150 <xPortStartScheduler+0x140>)
 8006112:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006116:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006118:	f7ff ff66 	bl	8005fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800611c:	f7ff f882 	bl	8005224 <vTaskSwitchContext>
	prvTaskExitError();
 8006120:	f7ff ff22 	bl	8005f68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	e000ed00 	.word	0xe000ed00
 8006134:	410fc271 	.word	0x410fc271
 8006138:	410fc270 	.word	0x410fc270
 800613c:	e000e400 	.word	0xe000e400
 8006140:	20000f28 	.word	0x20000f28
 8006144:	20000f2c 	.word	0x20000f2c
 8006148:	e000ed20 	.word	0xe000ed20
 800614c:	2000000c 	.word	0x2000000c
 8006150:	e000ef34 	.word	0xe000ef34

08006154 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
	__asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	607b      	str	r3, [r7, #4]
}
 800616c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800616e:	4b0f      	ldr	r3, [pc, #60]	; (80061ac <vPortEnterCritical+0x58>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3301      	adds	r3, #1
 8006174:	4a0d      	ldr	r2, [pc, #52]	; (80061ac <vPortEnterCritical+0x58>)
 8006176:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006178:	4b0c      	ldr	r3, [pc, #48]	; (80061ac <vPortEnterCritical+0x58>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d10f      	bne.n	80061a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006180:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <vPortEnterCritical+0x5c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	603b      	str	r3, [r7, #0]
}
 800619c:	bf00      	nop
 800619e:	e7fe      	b.n	800619e <vPortEnterCritical+0x4a>
	}
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	2000000c 	.word	0x2000000c
 80061b0:	e000ed04 	.word	0xe000ed04

080061b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061ba:	4b12      	ldr	r3, [pc, #72]	; (8006204 <vPortExitCritical+0x50>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10a      	bne.n	80061d8 <vPortExitCritical+0x24>
	__asm volatile
 80061c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	607b      	str	r3, [r7, #4]
}
 80061d4:	bf00      	nop
 80061d6:	e7fe      	b.n	80061d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061d8:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <vPortExitCritical+0x50>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3b01      	subs	r3, #1
 80061de:	4a09      	ldr	r2, [pc, #36]	; (8006204 <vPortExitCritical+0x50>)
 80061e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061e2:	4b08      	ldr	r3, [pc, #32]	; (8006204 <vPortExitCritical+0x50>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d105      	bne.n	80061f6 <vPortExitCritical+0x42>
 80061ea:	2300      	movs	r3, #0
 80061ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	f383 8811 	msr	BASEPRI, r3
}
 80061f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	2000000c 	.word	0x2000000c
	...

08006210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006210:	f3ef 8009 	mrs	r0, PSP
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	4b15      	ldr	r3, [pc, #84]	; (8006270 <pxCurrentTCBConst>)
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	f01e 0f10 	tst.w	lr, #16
 8006220:	bf08      	it	eq
 8006222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800622a:	6010      	str	r0, [r2, #0]
 800622c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006230:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006234:	f380 8811 	msr	BASEPRI, r0
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f7fe fff0 	bl	8005224 <vTaskSwitchContext>
 8006244:	f04f 0000 	mov.w	r0, #0
 8006248:	f380 8811 	msr	BASEPRI, r0
 800624c:	bc09      	pop	{r0, r3}
 800624e:	6819      	ldr	r1, [r3, #0]
 8006250:	6808      	ldr	r0, [r1, #0]
 8006252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006256:	f01e 0f10 	tst.w	lr, #16
 800625a:	bf08      	it	eq
 800625c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006260:	f380 8809 	msr	PSP, r0
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	f3af 8000 	nop.w

08006270 <pxCurrentTCBConst>:
 8006270:	200008fc 	.word	0x200008fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop

08006278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	607b      	str	r3, [r7, #4]
}
 8006290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006292:	f7fe ff09 	bl	80050a8 <xTaskIncrementTick>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800629c:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <SysTick_Handler+0x40>)
 800629e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	2300      	movs	r3, #0
 80062a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	f383 8811 	msr	BASEPRI, r3
}
 80062ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80062b0:	bf00      	nop
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	e000ed04 	.word	0xe000ed04

080062bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062c0:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <vPortSetupTimerInterrupt+0x34>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062c6:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <vPortSetupTimerInterrupt+0x38>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062cc:	4b0a      	ldr	r3, [pc, #40]	; (80062f8 <vPortSetupTimerInterrupt+0x3c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a0a      	ldr	r2, [pc, #40]	; (80062fc <vPortSetupTimerInterrupt+0x40>)
 80062d2:	fba2 2303 	umull	r2, r3, r2, r3
 80062d6:	099b      	lsrs	r3, r3, #6
 80062d8:	4a09      	ldr	r2, [pc, #36]	; (8006300 <vPortSetupTimerInterrupt+0x44>)
 80062da:	3b01      	subs	r3, #1
 80062dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062de:	4b04      	ldr	r3, [pc, #16]	; (80062f0 <vPortSetupTimerInterrupt+0x34>)
 80062e0:	2207      	movs	r2, #7
 80062e2:	601a      	str	r2, [r3, #0]
}
 80062e4:	bf00      	nop
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	e000e010 	.word	0xe000e010
 80062f4:	e000e018 	.word	0xe000e018
 80062f8:	20000000 	.word	0x20000000
 80062fc:	10624dd3 	.word	0x10624dd3
 8006300:	e000e014 	.word	0xe000e014

08006304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006304:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006314 <vPortEnableVFP+0x10>
 8006308:	6801      	ldr	r1, [r0, #0]
 800630a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800630e:	6001      	str	r1, [r0, #0]
 8006310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006312:	bf00      	nop
 8006314:	e000ed88 	.word	0xe000ed88

08006318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800631e:	f3ef 8305 	mrs	r3, IPSR
 8006322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b0f      	cmp	r3, #15
 8006328:	d914      	bls.n	8006354 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800632a:	4a17      	ldr	r2, [pc, #92]	; (8006388 <vPortValidateInterruptPriority+0x70>)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4413      	add	r3, r2
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006334:	4b15      	ldr	r3, [pc, #84]	; (800638c <vPortValidateInterruptPriority+0x74>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	7afa      	ldrb	r2, [r7, #11]
 800633a:	429a      	cmp	r2, r3
 800633c:	d20a      	bcs.n	8006354 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	607b      	str	r3, [r7, #4]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006354:	4b0e      	ldr	r3, [pc, #56]	; (8006390 <vPortValidateInterruptPriority+0x78>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800635c:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <vPortValidateInterruptPriority+0x7c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d90a      	bls.n	800637a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	603b      	str	r3, [r7, #0]
}
 8006376:	bf00      	nop
 8006378:	e7fe      	b.n	8006378 <vPortValidateInterruptPriority+0x60>
	}
 800637a:	bf00      	nop
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	e000e3f0 	.word	0xe000e3f0
 800638c:	20000f28 	.word	0x20000f28
 8006390:	e000ed0c 	.word	0xe000ed0c
 8006394:	20000f2c 	.word	0x20000f2c

08006398 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b08a      	sub	sp, #40	; 0x28
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063a0:	2300      	movs	r3, #0
 80063a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063a4:	f7fe fdc4 	bl	8004f30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063a8:	4b58      	ldr	r3, [pc, #352]	; (800650c <pvPortMalloc+0x174>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063b0:	f000 f910 	bl	80065d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063b4:	4b56      	ldr	r3, [pc, #344]	; (8006510 <pvPortMalloc+0x178>)
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4013      	ands	r3, r2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f040 808e 	bne.w	80064de <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d01d      	beq.n	8006404 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80063c8:	2208      	movs	r2, #8
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4413      	add	r3, r2
 80063ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d014      	beq.n	8006404 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f023 0307 	bic.w	r3, r3, #7
 80063e0:	3308      	adds	r3, #8
 80063e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <pvPortMalloc+0x6c>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	617b      	str	r3, [r7, #20]
}
 8006400:	bf00      	nop
 8006402:	e7fe      	b.n	8006402 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d069      	beq.n	80064de <pvPortMalloc+0x146>
 800640a:	4b42      	ldr	r3, [pc, #264]	; (8006514 <pvPortMalloc+0x17c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	429a      	cmp	r2, r3
 8006412:	d864      	bhi.n	80064de <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006414:	4b40      	ldr	r3, [pc, #256]	; (8006518 <pvPortMalloc+0x180>)
 8006416:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006418:	4b3f      	ldr	r3, [pc, #252]	; (8006518 <pvPortMalloc+0x180>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800641e:	e004      	b.n	800642a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	429a      	cmp	r2, r3
 8006432:	d903      	bls.n	800643c <pvPortMalloc+0xa4>
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1f1      	bne.n	8006420 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800643c:	4b33      	ldr	r3, [pc, #204]	; (800650c <pvPortMalloc+0x174>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006442:	429a      	cmp	r2, r3
 8006444:	d04b      	beq.n	80064de <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2208      	movs	r2, #8
 800644c:	4413      	add	r3, r2
 800644e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	1ad2      	subs	r2, r2, r3
 8006460:	2308      	movs	r3, #8
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	429a      	cmp	r2, r3
 8006466:	d91f      	bls.n	80064a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4413      	add	r3, r2
 800646e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <pvPortMalloc+0xf8>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	613b      	str	r3, [r7, #16]
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	1ad2      	subs	r2, r2, r3
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064a2:	69b8      	ldr	r0, [r7, #24]
 80064a4:	f000 f8f8 	bl	8006698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064a8:	4b1a      	ldr	r3, [pc, #104]	; (8006514 <pvPortMalloc+0x17c>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	4a18      	ldr	r2, [pc, #96]	; (8006514 <pvPortMalloc+0x17c>)
 80064b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064b6:	4b17      	ldr	r3, [pc, #92]	; (8006514 <pvPortMalloc+0x17c>)
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	4b18      	ldr	r3, [pc, #96]	; (800651c <pvPortMalloc+0x184>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d203      	bcs.n	80064ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064c2:	4b14      	ldr	r3, [pc, #80]	; (8006514 <pvPortMalloc+0x17c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a15      	ldr	r2, [pc, #84]	; (800651c <pvPortMalloc+0x184>)
 80064c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	4b10      	ldr	r3, [pc, #64]	; (8006510 <pvPortMalloc+0x178>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	431a      	orrs	r2, r3
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064de:	f7fe fd35 	bl	8004f4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <pvPortMalloc+0x16a>
	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	60fb      	str	r3, [r7, #12]
}
 80064fe:	bf00      	nop
 8006500:	e7fe      	b.n	8006500 <pvPortMalloc+0x168>
	return pvReturn;
 8006502:	69fb      	ldr	r3, [r7, #28]
}
 8006504:	4618      	mov	r0, r3
 8006506:	3728      	adds	r7, #40	; 0x28
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	20001b38 	.word	0x20001b38
 8006510:	20001b44 	.word	0x20001b44
 8006514:	20001b3c 	.word	0x20001b3c
 8006518:	20001b30 	.word	0x20001b30
 800651c:	20001b40 	.word	0x20001b40

08006520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d048      	beq.n	80065c4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006532:	2308      	movs	r3, #8
 8006534:	425b      	negs	r3, r3
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4413      	add	r3, r2
 800653a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	4b21      	ldr	r3, [pc, #132]	; (80065cc <vPortFree+0xac>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4013      	ands	r3, r2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10a      	bne.n	8006564 <vPortFree+0x44>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	60fb      	str	r3, [r7, #12]
}
 8006560:	bf00      	nop
 8006562:	e7fe      	b.n	8006562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00a      	beq.n	8006582 <vPortFree+0x62>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	60bb      	str	r3, [r7, #8]
}
 800657e:	bf00      	nop
 8006580:	e7fe      	b.n	8006580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	4b11      	ldr	r3, [pc, #68]	; (80065cc <vPortFree+0xac>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4013      	ands	r3, r2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d019      	beq.n	80065c4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d115      	bne.n	80065c4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <vPortFree+0xac>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	43db      	mvns	r3, r3
 80065a2:	401a      	ands	r2, r3
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065a8:	f7fe fcc2 	bl	8004f30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <vPortFree+0xb0>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4413      	add	r3, r2
 80065b6:	4a06      	ldr	r2, [pc, #24]	; (80065d0 <vPortFree+0xb0>)
 80065b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065ba:	6938      	ldr	r0, [r7, #16]
 80065bc:	f000 f86c 	bl	8006698 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80065c0:	f7fe fcc4 	bl	8004f4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065c4:	bf00      	nop
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	20001b44 	.word	0x20001b44
 80065d0:	20001b3c 	.word	0x20001b3c

080065d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80065de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065e0:	4b27      	ldr	r3, [pc, #156]	; (8006680 <prvHeapInit+0xac>)
 80065e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00c      	beq.n	8006608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3307      	adds	r3, #7
 80065f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0307 	bic.w	r3, r3, #7
 80065fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	4a1f      	ldr	r2, [pc, #124]	; (8006680 <prvHeapInit+0xac>)
 8006604:	4413      	add	r3, r2
 8006606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800660c:	4a1d      	ldr	r2, [pc, #116]	; (8006684 <prvHeapInit+0xb0>)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006612:	4b1c      	ldr	r3, [pc, #112]	; (8006684 <prvHeapInit+0xb0>)
 8006614:	2200      	movs	r2, #0
 8006616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	4413      	add	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006620:	2208      	movs	r2, #8
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	1a9b      	subs	r3, r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0307 	bic.w	r3, r3, #7
 800662e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4a15      	ldr	r2, [pc, #84]	; (8006688 <prvHeapInit+0xb4>)
 8006634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006636:	4b14      	ldr	r3, [pc, #80]	; (8006688 <prvHeapInit+0xb4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2200      	movs	r2, #0
 800663c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800663e:	4b12      	ldr	r3, [pc, #72]	; (8006688 <prvHeapInit+0xb4>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	1ad2      	subs	r2, r2, r3
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006654:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <prvHeapInit+0xb4>)
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	4a0a      	ldr	r2, [pc, #40]	; (800668c <prvHeapInit+0xb8>)
 8006662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	4a09      	ldr	r2, [pc, #36]	; (8006690 <prvHeapInit+0xbc>)
 800666a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800666c:	4b09      	ldr	r3, [pc, #36]	; (8006694 <prvHeapInit+0xc0>)
 800666e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006672:	601a      	str	r2, [r3, #0]
}
 8006674:	bf00      	nop
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	20000f30 	.word	0x20000f30
 8006684:	20001b30 	.word	0x20001b30
 8006688:	20001b38 	.word	0x20001b38
 800668c:	20001b40 	.word	0x20001b40
 8006690:	20001b3c 	.word	0x20001b3c
 8006694:	20001b44 	.word	0x20001b44

08006698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066a0:	4b28      	ldr	r3, [pc, #160]	; (8006744 <prvInsertBlockIntoFreeList+0xac>)
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	e002      	b.n	80066ac <prvInsertBlockIntoFreeList+0x14>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d8f7      	bhi.n	80066a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	4413      	add	r3, r2
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d108      	bne.n	80066da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	441a      	add	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	441a      	add	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d118      	bne.n	8006720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	4b15      	ldr	r3, [pc, #84]	; (8006748 <prvInsertBlockIntoFreeList+0xb0>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d00d      	beq.n	8006716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	441a      	add	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	e008      	b.n	8006728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006716:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <prvInsertBlockIntoFreeList+0xb0>)
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	e003      	b.n	8006728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	429a      	cmp	r2, r3
 800672e:	d002      	beq.n	8006736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006736:	bf00      	nop
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	20001b30 	.word	0x20001b30
 8006748:	20001b38 	.word	0x20001b38

0800674c <memset>:
 800674c:	4402      	add	r2, r0
 800674e:	4603      	mov	r3, r0
 8006750:	4293      	cmp	r3, r2
 8006752:	d100      	bne.n	8006756 <memset+0xa>
 8006754:	4770      	bx	lr
 8006756:	f803 1b01 	strb.w	r1, [r3], #1
 800675a:	e7f9      	b.n	8006750 <memset+0x4>

0800675c <_reclaim_reent>:
 800675c:	4b29      	ldr	r3, [pc, #164]	; (8006804 <_reclaim_reent+0xa8>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4283      	cmp	r3, r0
 8006762:	b570      	push	{r4, r5, r6, lr}
 8006764:	4604      	mov	r4, r0
 8006766:	d04b      	beq.n	8006800 <_reclaim_reent+0xa4>
 8006768:	69c3      	ldr	r3, [r0, #28]
 800676a:	b143      	cbz	r3, 800677e <_reclaim_reent+0x22>
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d144      	bne.n	80067fc <_reclaim_reent+0xa0>
 8006772:	69e3      	ldr	r3, [r4, #28]
 8006774:	6819      	ldr	r1, [r3, #0]
 8006776:	b111      	cbz	r1, 800677e <_reclaim_reent+0x22>
 8006778:	4620      	mov	r0, r4
 800677a:	f000 f879 	bl	8006870 <_free_r>
 800677e:	6961      	ldr	r1, [r4, #20]
 8006780:	b111      	cbz	r1, 8006788 <_reclaim_reent+0x2c>
 8006782:	4620      	mov	r0, r4
 8006784:	f000 f874 	bl	8006870 <_free_r>
 8006788:	69e1      	ldr	r1, [r4, #28]
 800678a:	b111      	cbz	r1, 8006792 <_reclaim_reent+0x36>
 800678c:	4620      	mov	r0, r4
 800678e:	f000 f86f 	bl	8006870 <_free_r>
 8006792:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006794:	b111      	cbz	r1, 800679c <_reclaim_reent+0x40>
 8006796:	4620      	mov	r0, r4
 8006798:	f000 f86a 	bl	8006870 <_free_r>
 800679c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800679e:	b111      	cbz	r1, 80067a6 <_reclaim_reent+0x4a>
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 f865 	bl	8006870 <_free_r>
 80067a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80067a8:	b111      	cbz	r1, 80067b0 <_reclaim_reent+0x54>
 80067aa:	4620      	mov	r0, r4
 80067ac:	f000 f860 	bl	8006870 <_free_r>
 80067b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80067b2:	b111      	cbz	r1, 80067ba <_reclaim_reent+0x5e>
 80067b4:	4620      	mov	r0, r4
 80067b6:	f000 f85b 	bl	8006870 <_free_r>
 80067ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80067bc:	b111      	cbz	r1, 80067c4 <_reclaim_reent+0x68>
 80067be:	4620      	mov	r0, r4
 80067c0:	f000 f856 	bl	8006870 <_free_r>
 80067c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80067c6:	b111      	cbz	r1, 80067ce <_reclaim_reent+0x72>
 80067c8:	4620      	mov	r0, r4
 80067ca:	f000 f851 	bl	8006870 <_free_r>
 80067ce:	6a23      	ldr	r3, [r4, #32]
 80067d0:	b1b3      	cbz	r3, 8006800 <_reclaim_reent+0xa4>
 80067d2:	4620      	mov	r0, r4
 80067d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80067d8:	4718      	bx	r3
 80067da:	5949      	ldr	r1, [r1, r5]
 80067dc:	b941      	cbnz	r1, 80067f0 <_reclaim_reent+0x94>
 80067de:	3504      	adds	r5, #4
 80067e0:	69e3      	ldr	r3, [r4, #28]
 80067e2:	2d80      	cmp	r5, #128	; 0x80
 80067e4:	68d9      	ldr	r1, [r3, #12]
 80067e6:	d1f8      	bne.n	80067da <_reclaim_reent+0x7e>
 80067e8:	4620      	mov	r0, r4
 80067ea:	f000 f841 	bl	8006870 <_free_r>
 80067ee:	e7c0      	b.n	8006772 <_reclaim_reent+0x16>
 80067f0:	680e      	ldr	r6, [r1, #0]
 80067f2:	4620      	mov	r0, r4
 80067f4:	f000 f83c 	bl	8006870 <_free_r>
 80067f8:	4631      	mov	r1, r6
 80067fa:	e7ef      	b.n	80067dc <_reclaim_reent+0x80>
 80067fc:	2500      	movs	r5, #0
 80067fe:	e7ef      	b.n	80067e0 <_reclaim_reent+0x84>
 8006800:	bd70      	pop	{r4, r5, r6, pc}
 8006802:	bf00      	nop
 8006804:	2000005c 	.word	0x2000005c

08006808 <__libc_init_array>:
 8006808:	b570      	push	{r4, r5, r6, lr}
 800680a:	4d0d      	ldr	r5, [pc, #52]	; (8006840 <__libc_init_array+0x38>)
 800680c:	4c0d      	ldr	r4, [pc, #52]	; (8006844 <__libc_init_array+0x3c>)
 800680e:	1b64      	subs	r4, r4, r5
 8006810:	10a4      	asrs	r4, r4, #2
 8006812:	2600      	movs	r6, #0
 8006814:	42a6      	cmp	r6, r4
 8006816:	d109      	bne.n	800682c <__libc_init_array+0x24>
 8006818:	4d0b      	ldr	r5, [pc, #44]	; (8006848 <__libc_init_array+0x40>)
 800681a:	4c0c      	ldr	r4, [pc, #48]	; (800684c <__libc_init_array+0x44>)
 800681c:	f000 f880 	bl	8006920 <_init>
 8006820:	1b64      	subs	r4, r4, r5
 8006822:	10a4      	asrs	r4, r4, #2
 8006824:	2600      	movs	r6, #0
 8006826:	42a6      	cmp	r6, r4
 8006828:	d105      	bne.n	8006836 <__libc_init_array+0x2e>
 800682a:	bd70      	pop	{r4, r5, r6, pc}
 800682c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006830:	4798      	blx	r3
 8006832:	3601      	adds	r6, #1
 8006834:	e7ee      	b.n	8006814 <__libc_init_array+0xc>
 8006836:	f855 3b04 	ldr.w	r3, [r5], #4
 800683a:	4798      	blx	r3
 800683c:	3601      	adds	r6, #1
 800683e:	e7f2      	b.n	8006826 <__libc_init_array+0x1e>
 8006840:	08006bbc 	.word	0x08006bbc
 8006844:	08006bbc 	.word	0x08006bbc
 8006848:	08006bbc 	.word	0x08006bbc
 800684c:	08006bc0 	.word	0x08006bc0

08006850 <__retarget_lock_acquire_recursive>:
 8006850:	4770      	bx	lr

08006852 <__retarget_lock_release_recursive>:
 8006852:	4770      	bx	lr

08006854 <memcpy>:
 8006854:	440a      	add	r2, r1
 8006856:	4291      	cmp	r1, r2
 8006858:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800685c:	d100      	bne.n	8006860 <memcpy+0xc>
 800685e:	4770      	bx	lr
 8006860:	b510      	push	{r4, lr}
 8006862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800686a:	4291      	cmp	r1, r2
 800686c:	d1f9      	bne.n	8006862 <memcpy+0xe>
 800686e:	bd10      	pop	{r4, pc}

08006870 <_free_r>:
 8006870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006872:	2900      	cmp	r1, #0
 8006874:	d044      	beq.n	8006900 <_free_r+0x90>
 8006876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800687a:	9001      	str	r0, [sp, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	f1a1 0404 	sub.w	r4, r1, #4
 8006882:	bfb8      	it	lt
 8006884:	18e4      	addlt	r4, r4, r3
 8006886:	f000 f83f 	bl	8006908 <__malloc_lock>
 800688a:	4a1e      	ldr	r2, [pc, #120]	; (8006904 <_free_r+0x94>)
 800688c:	9801      	ldr	r0, [sp, #4]
 800688e:	6813      	ldr	r3, [r2, #0]
 8006890:	b933      	cbnz	r3, 80068a0 <_free_r+0x30>
 8006892:	6063      	str	r3, [r4, #4]
 8006894:	6014      	str	r4, [r2, #0]
 8006896:	b003      	add	sp, #12
 8006898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800689c:	f000 b83a 	b.w	8006914 <__malloc_unlock>
 80068a0:	42a3      	cmp	r3, r4
 80068a2:	d908      	bls.n	80068b6 <_free_r+0x46>
 80068a4:	6825      	ldr	r5, [r4, #0]
 80068a6:	1961      	adds	r1, r4, r5
 80068a8:	428b      	cmp	r3, r1
 80068aa:	bf01      	itttt	eq
 80068ac:	6819      	ldreq	r1, [r3, #0]
 80068ae:	685b      	ldreq	r3, [r3, #4]
 80068b0:	1949      	addeq	r1, r1, r5
 80068b2:	6021      	streq	r1, [r4, #0]
 80068b4:	e7ed      	b.n	8006892 <_free_r+0x22>
 80068b6:	461a      	mov	r2, r3
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	b10b      	cbz	r3, 80068c0 <_free_r+0x50>
 80068bc:	42a3      	cmp	r3, r4
 80068be:	d9fa      	bls.n	80068b6 <_free_r+0x46>
 80068c0:	6811      	ldr	r1, [r2, #0]
 80068c2:	1855      	adds	r5, r2, r1
 80068c4:	42a5      	cmp	r5, r4
 80068c6:	d10b      	bne.n	80068e0 <_free_r+0x70>
 80068c8:	6824      	ldr	r4, [r4, #0]
 80068ca:	4421      	add	r1, r4
 80068cc:	1854      	adds	r4, r2, r1
 80068ce:	42a3      	cmp	r3, r4
 80068d0:	6011      	str	r1, [r2, #0]
 80068d2:	d1e0      	bne.n	8006896 <_free_r+0x26>
 80068d4:	681c      	ldr	r4, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	6053      	str	r3, [r2, #4]
 80068da:	440c      	add	r4, r1
 80068dc:	6014      	str	r4, [r2, #0]
 80068de:	e7da      	b.n	8006896 <_free_r+0x26>
 80068e0:	d902      	bls.n	80068e8 <_free_r+0x78>
 80068e2:	230c      	movs	r3, #12
 80068e4:	6003      	str	r3, [r0, #0]
 80068e6:	e7d6      	b.n	8006896 <_free_r+0x26>
 80068e8:	6825      	ldr	r5, [r4, #0]
 80068ea:	1961      	adds	r1, r4, r5
 80068ec:	428b      	cmp	r3, r1
 80068ee:	bf04      	itt	eq
 80068f0:	6819      	ldreq	r1, [r3, #0]
 80068f2:	685b      	ldreq	r3, [r3, #4]
 80068f4:	6063      	str	r3, [r4, #4]
 80068f6:	bf04      	itt	eq
 80068f8:	1949      	addeq	r1, r1, r5
 80068fa:	6021      	streq	r1, [r4, #0]
 80068fc:	6054      	str	r4, [r2, #4]
 80068fe:	e7ca      	b.n	8006896 <_free_r+0x26>
 8006900:	b003      	add	sp, #12
 8006902:	bd30      	pop	{r4, r5, pc}
 8006904:	20001c84 	.word	0x20001c84

08006908 <__malloc_lock>:
 8006908:	4801      	ldr	r0, [pc, #4]	; (8006910 <__malloc_lock+0x8>)
 800690a:	f7ff bfa1 	b.w	8006850 <__retarget_lock_acquire_recursive>
 800690e:	bf00      	nop
 8006910:	20001c80 	.word	0x20001c80

08006914 <__malloc_unlock>:
 8006914:	4801      	ldr	r0, [pc, #4]	; (800691c <__malloc_unlock+0x8>)
 8006916:	f7ff bf9c 	b.w	8006852 <__retarget_lock_release_recursive>
 800691a:	bf00      	nop
 800691c:	20001c80 	.word	0x20001c80

08006920 <_init>:
 8006920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006922:	bf00      	nop
 8006924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006926:	bc08      	pop	{r3}
 8006928:	469e      	mov	lr, r3
 800692a:	4770      	bx	lr

0800692c <_fini>:
 800692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692e:	bf00      	nop
 8006930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006932:	bc08      	pop	{r3}
 8006934:	469e      	mov	lr, r3
 8006936:	4770      	bx	lr
