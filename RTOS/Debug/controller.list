
controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006268  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080063f8  080063f8  000163f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006510  08006510  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006510  08006510  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006510  08006510  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006510  08006510  00016510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006514  08006514  00016514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a4c  20000010  08006528  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a5c  08006528  00021a5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017723  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031b0  00000000  00000000  000377a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  0003a958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f1f  00000000  00000000  0003bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000033c1  00000000  00000000  0003cbcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016641  00000000  00000000  0003ff90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af14f  00000000  00000000  000565d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005170  00000000  00000000  00105720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0010a890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063e0 	.word	0x080063e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080063e0 	.word	0x080063e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e4:	f000 fae4 	bl	80007b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e8:	f000 f842 	bl	8000270 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 f8c0 	bl	8000370 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001f0:	f000 f88e 	bl	8000310 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001f4:	f003 f916 	bl	8003424 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of BT_queue */
  BT_queueHandle = osMessageQueueNew (16, sizeof(command), &BT_queue_attributes);
 80001f8:	4a12      	ldr	r2, [pc, #72]	; (8000244 <main+0x64>)
 80001fa:	2108      	movs	r1, #8
 80001fc:	2010      	movs	r0, #16
 80001fe:	f003 fa83 	bl	8003708 <osMessageQueueNew>
 8000202:	4603      	mov	r3, r0
 8000204:	4a10      	ldr	r2, [pc, #64]	; (8000248 <main+0x68>)
 8000206:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BT_reader */
  BT_readerHandle = osThreadNew(BT_reader_funct, NULL, &BT_reader_attributes);
 8000208:	4a10      	ldr	r2, [pc, #64]	; (800024c <main+0x6c>)
 800020a:	2100      	movs	r1, #0
 800020c:	4810      	ldr	r0, [pc, #64]	; (8000250 <main+0x70>)
 800020e:	f003 f971 	bl	80034f4 <osThreadNew>
 8000212:	4603      	mov	r3, r0
 8000214:	4a0f      	ldr	r2, [pc, #60]	; (8000254 <main+0x74>)
 8000216:	6013      	str	r3, [r2, #0]

  /* creation of MT_controller */
  MT_controllerHandle = osThreadNew(MT_controller_funct, NULL, &MT_controller_attributes);
 8000218:	4a0f      	ldr	r2, [pc, #60]	; (8000258 <main+0x78>)
 800021a:	2100      	movs	r1, #0
 800021c:	480f      	ldr	r0, [pc, #60]	; (800025c <main+0x7c>)
 800021e:	f003 f969 	bl	80034f4 <osThreadNew>
 8000222:	4603      	mov	r3, r0
 8000224:	4a0e      	ldr	r2, [pc, #56]	; (8000260 <main+0x80>)
 8000226:	6013      	str	r3, [r2, #0]

  /* creation of Sensor_Read */
  Sensor_ReadHandle = osThreadNew(Sensor_reader_funct, NULL, &Sensor_Read_attributes);
 8000228:	4a0e      	ldr	r2, [pc, #56]	; (8000264 <main+0x84>)
 800022a:	2100      	movs	r1, #0
 800022c:	480e      	ldr	r0, [pc, #56]	; (8000268 <main+0x88>)
 800022e:	f003 f961 	bl	80034f4 <osThreadNew>
 8000232:	4603      	mov	r3, r0
 8000234:	4a0d      	ldr	r2, [pc, #52]	; (800026c <main+0x8c>)
 8000236:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000238:	f003 f928 	bl	800348c <osKernelStart>
 800023c:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800023e:	4618      	mov	r0, r3
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	080064c0 	.word	0x080064c0
 8000248:	200000c0 	.word	0x200000c0
 800024c:	08006454 	.word	0x08006454
 8000250:	08000435 	.word	0x08000435
 8000254:	200000b4 	.word	0x200000b4
 8000258:	08006478 	.word	0x08006478
 800025c:	080004c1 	.word	0x080004c1
 8000260:	200000b8 	.word	0x200000b8
 8000264:	0800649c 	.word	0x0800649c
 8000268:	080004e9 	.word	0x080004e9
 800026c:	200000bc 	.word	0x200000bc

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b09c      	sub	sp, #112	; 0x70
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800027a:	2228      	movs	r2, #40	; 0x28
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f006 f874 	bl	800636c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000294:	463b      	mov	r3, r7
 8000296:	2234      	movs	r2, #52	; 0x34
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f006 f866 	bl	800636c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a0:	2302      	movs	r3, #2
 80002a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a4:	2301      	movs	r3, #1
 80002a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a8:	2310      	movs	r3, #16
 80002aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ac:	2300      	movs	r3, #0
 80002ae:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fd05 	bl	8000cc4 <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002c0:	f000 f92c 	bl	800051c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c8:	2300      	movs	r3, #0
 80002ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 fd2e 	bl	8001d40 <HAL_RCC_ClockConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002ea:	f000 f917 	bl	800051c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002ee:	2301      	movs	r3, #1
 80002f0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f6:	463b      	mov	r3, r7
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 ff89 	bl	8002210 <HAL_RCCEx_PeriphCLKConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000304:	f000 f90a 	bl	800051c <Error_Handler>
  }
}
 8000308:	bf00      	nop
 800030a:	3770      	adds	r7, #112	; 0x70
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000314:	4b14      	ldr	r3, [pc, #80]	; (8000368 <MX_USART1_UART_Init+0x58>)
 8000316:	4a15      	ldr	r2, [pc, #84]	; (800036c <MX_USART1_UART_Init+0x5c>)
 8000318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <MX_USART1_UART_Init+0x58>)
 800031c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000322:	4b11      	ldr	r3, [pc, #68]	; (8000368 <MX_USART1_UART_Init+0x58>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000328:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <MX_USART1_UART_Init+0x58>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <MX_USART1_UART_Init+0x58>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <MX_USART1_UART_Init+0x58>)
 8000336:	220c      	movs	r2, #12
 8000338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <MX_USART1_UART_Init+0x58>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <MX_USART1_UART_Init+0x58>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <MX_USART1_UART_Init+0x58>)
 8000348:	2200      	movs	r2, #0
 800034a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <MX_USART1_UART_Init+0x58>)
 800034e:	2200      	movs	r2, #0
 8000350:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <MX_USART1_UART_Init+0x58>)
 8000354:	f002 fb78 	bl	8002a48 <HAL_UART_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800035e:	f000 f8dd 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	2000002c 	.word	0x2000002c
 800036c:	40013800 	.word	0x40013800

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000376:	4b15      	ldr	r3, [pc, #84]	; (80003cc <MX_GPIO_Init+0x5c>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a14      	ldr	r2, [pc, #80]	; (80003cc <MX_GPIO_Init+0x5c>)
 800037c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000380:	6153      	str	r3, [r2, #20]
 8000382:	4b12      	ldr	r3, [pc, #72]	; (80003cc <MX_GPIO_Init+0x5c>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038e:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_GPIO_Init+0x5c>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a0e      	ldr	r2, [pc, #56]	; (80003cc <MX_GPIO_Init+0x5c>)
 8000394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_GPIO_Init+0x5c>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003a2:	60bb      	str	r3, [r7, #8]
 80003a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a6:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_GPIO_Init+0x5c>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	4a08      	ldr	r2, [pc, #32]	; (80003cc <MX_GPIO_Init+0x5c>)
 80003ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003b0:	6153      	str	r3, [r2, #20]
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_GPIO_Init+0x5c>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003be:	bf00      	nop
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000

080003d0 <FON_UART_Receive>:

/* USER CODE BEGIN 4 */

int FON_UART_Receive(char *received, uint16_t timeout) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	460b      	mov	r3, r1
 80003da:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status;
    unsigned char receivedChar;
    int index = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
//	unsigned char str[7] ="CHAMOU ";
//    HAL_UART_Transmit(&huart1, str, sizeof(str), 500);

    while (1) {
        status = HAL_UART_Receive(&huart1, &receivedChar, 1, timeout);
 80003e0:	887b      	ldrh	r3, [r7, #2]
 80003e2:	f107 010a 	add.w	r1, r7, #10
 80003e6:	2201      	movs	r2, #1
 80003e8:	4811      	ldr	r0, [pc, #68]	; (8000430 <FON_UART_Receive+0x60>)
 80003ea:	f002 fc05 	bl	8002bf8 <HAL_UART_Receive>
 80003ee:	4603      	mov	r3, r0
 80003f0:	72fb      	strb	r3, [r7, #11]

        if (status == HAL_OK) {
 80003f2:	7afb      	ldrb	r3, [r7, #11]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d112      	bne.n	800041e <FON_UART_Receive+0x4e>
            if (receivedChar == '\n') {
 80003f8:	7abb      	ldrb	r3, [r7, #10]
 80003fa:	2b0a      	cmp	r3, #10
 80003fc:	d106      	bne.n	800040c <FON_UART_Receive+0x3c>
                // Received a newline character, terminate the string and return 1
            	//received[index] = '\n';
            	received[index] = '\0';
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	4413      	add	r3, r2
 8000404:	2200      	movs	r2, #0
 8000406:	701a      	strb	r2, [r3, #0]

                return 1;
 8000408:	2301      	movs	r3, #1
 800040a:	e00c      	b.n	8000426 <FON_UART_Receive+0x56>
            } else {
                // Store the received character in the buffer
                received[index] = receivedChar;
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	4413      	add	r3, r2
 8000412:	7aba      	ldrb	r2, [r7, #10]
 8000414:	701a      	strb	r2, [r3, #0]
                index++;
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	3301      	adds	r3, #1
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	e7e0      	b.n	80003e0 <FON_UART_Receive+0x10>
            }
        } else {
            // Handle error or timeout
            received[0] = '\0'; // Null-terminate the string to indicate no data received
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2200      	movs	r2, #0
 8000422:	701a      	strb	r2, [r3, #0]
            return 0;
 8000424:	2300      	movs	r3, #0
        }
    }
}
 8000426:	4618      	mov	r0, r3
 8000428:	3710      	adds	r7, #16
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	2000002c 	.word	0x2000002c

08000434 <BT_reader_funct>:
/* USER CODE END 4 */

/* USER CODE BEGIN Header_BT_reader_funct */
/* USER CODE END Header_BT_reader_funct */
void BT_reader_funct(void *argument)
{
 8000434:	b590      	push	{r4, r7, lr}
 8000436:	b091      	sub	sp, #68	; 0x44
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	unsigned char str[14] ="\r\nIniciando \r\n";
 800043c:	4b1d      	ldr	r3, [pc, #116]	; (80004b4 <BT_reader_funct+0x80>)
 800043e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000442:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000444:	c407      	stmia	r4!, {r0, r1, r2}
 8000446:	8023      	strh	r3, [r4, #0]
    char receivedData[32];
	command com;

    HAL_UART_Transmit(&huart1, str, sizeof(str), 500);
 8000448:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800044c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000450:	220e      	movs	r2, #14
 8000452:	4819      	ldr	r0, [pc, #100]	; (80004b8 <BT_reader_funct+0x84>)
 8000454:	f002 fb46 	bl	8002ae4 <HAL_UART_Transmit>
//		sprintf(str, "\r\nTemp: %i\r\n",cont);
		//		HAL_UART_Transmit(&huart1, str, sizeof(str), 500);
//		cont++;
    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! COLOCAR SEMAFORO e interrupção
	while (1) {
	        if (FON_UART_Receive(receivedData,500)){
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff ffb5 	bl	80003d0 <FON_UART_Receive>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d01f      	beq.n	80004ac <BT_reader_funct+0x78>
	        	// Replace huart1 with your UART handle
	        	if (strlen(receivedData)==3){
 800046c:	f107 0310 	add.w	r3, r7, #16
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff fead 	bl	80001d0 <strlen>
 8000476:	4603      	mov	r3, r0
 8000478:	2b03      	cmp	r3, #3
 800047a:	d117      	bne.n	80004ac <BT_reader_funct+0x78>
	        		com.button_id 		= receivedData[0] - '0';
 800047c:	7c3b      	ldrb	r3, [r7, #16]
 800047e:	3b30      	subs	r3, #48	; 0x30
 8000480:	60bb      	str	r3, [r7, #8]
					com.button_status  	= 10*(receivedData[1] - '0') + (receivedData[2] - '0');
 8000482:	7c7b      	ldrb	r3, [r7, #17]
 8000484:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000488:	4613      	mov	r3, r2
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	4413      	add	r3, r2
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	461a      	mov	r2, r3
 8000492:	7cbb      	ldrb	r3, [r7, #18]
 8000494:	3b30      	subs	r3, #48	; 0x30
 8000496:	4413      	add	r3, r2
 8000498:	60fb      	str	r3, [r7, #12]
					osMessageQueuePut(BT_queueHandle, &com, 0, 2000);
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <BT_reader_funct+0x88>)
 800049c:	6818      	ldr	r0, [r3, #0]
 800049e:	f107 0108 	add.w	r1, r7, #8
 80004a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80004a6:	2200      	movs	r2, #0
 80004a8:	f003 f9b4 	bl	8003814 <osMessageQueuePut>
	        	}
	        }
	        //osDelay(1000);
	        osThreadYield();
 80004ac:	f003 f8cc 	bl	8003648 <osThreadYield>
	        if (FON_UART_Receive(receivedData,500)){
 80004b0:	e7d2      	b.n	8000458 <BT_reader_funct+0x24>
 80004b2:	bf00      	nop
 80004b4:	0800642c 	.word	0x0800642c
 80004b8:	2000002c 	.word	0x2000002c
 80004bc:	200000c0 	.word	0x200000c0

080004c0 <MT_controller_funct>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MT_controller_funct */
void MT_controller_funct(void *argument)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MT_controller_funct */
  /* Infinite loop */

//le da memoria de longa duracao
	int auth = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
	command com;

	while(1){
		if (osMessageQueueGet(BT_queueHandle, &com, NULL, 2000)== osOK){
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <MT_controller_funct+0x24>)
 80004ce:	6818      	ldr	r0, [r3, #0]
 80004d0:	f107 010c 	add.w	r1, r7, #12
 80004d4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80004d8:	2200      	movs	r2, #0
 80004da:	f003 fa0f 	bl	80038fc <osMessageQueueGet>
			//else if !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!TRATAR TODOS OS OUTROS COMs

		}
		if(auth){}
		//osDelay(1000);
        osThreadYield();
 80004de:	f003 f8b3 	bl	8003648 <osThreadYield>
		if (osMessageQueueGet(BT_queueHandle, &com, NULL, 2000)== osOK){
 80004e2:	e7f3      	b.n	80004cc <MT_controller_funct+0xc>
 80004e4:	200000c0 	.word	0x200000c0

080004e8 <Sensor_reader_funct>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensor_reader_funct */
void Sensor_reader_funct(void *argument)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sensor_reader_funct */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f003 f8db 	bl	80036ac <osDelay>
 80004f6:	e7fb      	b.n	80004f0 <Sensor_reader_funct+0x8>

080004f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d101      	bne.n	800050e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800050a:	f000 f967 	bl	80007dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40001000 	.word	0x40001000

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
	...

0800052c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <HAL_MspInit+0x4c>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a10      	ldr	r2, [pc, #64]	; (8000578 <HAL_MspInit+0x4c>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6193      	str	r3, [r2, #24]
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <HAL_MspInit+0x4c>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <HAL_MspInit+0x4c>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <HAL_MspInit+0x4c>)
 8000550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000554:	61d3      	str	r3, [r2, #28]
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <HAL_MspInit+0x4c>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	210f      	movs	r1, #15
 8000566:	f06f 0001 	mvn.w	r0, #1
 800056a:	f000 fa0f 	bl	800098c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a17      	ldr	r2, [pc, #92]	; (80005f8 <HAL_UART_MspInit+0x7c>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d127      	bne.n	80005ee <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HAL_UART_MspInit+0x80>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	4a16      	ldr	r2, [pc, #88]	; (80005fc <HAL_UART_MspInit+0x80>)
 80005a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a8:	6193      	str	r3, [r2, #24]
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <HAL_UART_MspInit+0x80>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <HAL_UART_MspInit+0x80>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a10      	ldr	r2, [pc, #64]	; (80005fc <HAL_UART_MspInit+0x80>)
 80005bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <HAL_UART_MspInit+0x80>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005ce:	2330      	movs	r3, #48	; 0x30
 80005d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005da:	2303      	movs	r3, #3
 80005dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005de:	2307      	movs	r3, #7
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <HAL_UART_MspInit+0x84>)
 80005ea:	f000 f9f9 	bl	80009e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005ee:	bf00      	nop
 80005f0:	3728      	adds	r7, #40	; 0x28
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40013800 	.word	0x40013800
 80005fc:	40021000 	.word	0x40021000
 8000600:	48000800 	.word	0x48000800

08000604 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08e      	sub	sp, #56	; 0x38
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800060c:	2300      	movs	r3, #0
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000610:	2300      	movs	r3, #0
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <HAL_InitTick+0xe0>)
 8000616:	69db      	ldr	r3, [r3, #28]
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <HAL_InitTick+0xe0>)
 800061a:	f043 0310 	orr.w	r3, r3, #16
 800061e:	61d3      	str	r3, [r2, #28]
 8000620:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <HAL_InitTick+0xe0>)
 8000622:	69db      	ldr	r3, [r3, #28]
 8000624:	f003 0310 	and.w	r3, r3, #16
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800062c:	f107 0210 	add.w	r2, r7, #16
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4611      	mov	r1, r2
 8000636:	4618      	mov	r0, r3
 8000638:	f001 fdb8 	bl	80021ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800063c:	6a3b      	ldr	r3, [r7, #32]
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000642:	2b00      	cmp	r3, #0
 8000644:	d103      	bne.n	800064e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000646:	f001 fd6d 	bl	8002124 <HAL_RCC_GetPCLK1Freq>
 800064a:	6378      	str	r0, [r7, #52]	; 0x34
 800064c:	e004      	b.n	8000658 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800064e:	f001 fd69 	bl	8002124 <HAL_RCC_GetPCLK1Freq>
 8000652:	4603      	mov	r3, r0
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800065a:	4a23      	ldr	r2, [pc, #140]	; (80006e8 <HAL_InitTick+0xe4>)
 800065c:	fba2 2303 	umull	r2, r3, r2, r3
 8000660:	0c9b      	lsrs	r3, r3, #18
 8000662:	3b01      	subs	r3, #1
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <HAL_InitTick+0xe8>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <HAL_InitTick+0xec>)
 800066a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <HAL_InitTick+0xe8>)
 800066e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000672:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000674:	4a1d      	ldr	r2, [pc, #116]	; (80006ec <HAL_InitTick+0xe8>)
 8000676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000678:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <HAL_InitTick+0xe8>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <HAL_InitTick+0xe8>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <HAL_InitTick+0xe8>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800068c:	4817      	ldr	r0, [pc, #92]	; (80006ec <HAL_InitTick+0xe8>)
 800068e:	f001 ff51 	bl	8002534 <HAL_TIM_Base_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000698:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800069c:	2b00      	cmp	r3, #0
 800069e:	d11b      	bne.n	80006d8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80006a0:	4812      	ldr	r0, [pc, #72]	; (80006ec <HAL_InitTick+0xe8>)
 80006a2:	f001 ffa9 	bl	80025f8 <HAL_TIM_Base_Start_IT>
 80006a6:	4603      	mov	r3, r0
 80006a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80006ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d111      	bne.n	80006d8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006b4:	2036      	movs	r0, #54	; 0x36
 80006b6:	f000 f985 	bl	80009c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b0f      	cmp	r3, #15
 80006be:	d808      	bhi.n	80006d2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80006c0:	2200      	movs	r2, #0
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	2036      	movs	r0, #54	; 0x36
 80006c6:	f000 f961 	bl	800098c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <HAL_InitTick+0xf0>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	e002      	b.n	80006d8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
 80006d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3738      	adds	r7, #56	; 0x38
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000
 80006e8:	431bde83 	.word	0x431bde83
 80006ec:	200000c4 	.word	0x200000c4
 80006f0:	40001000 	.word	0x40001000
 80006f4:	20000004 	.word	0x20000004

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <NMI_Handler+0x4>

080006fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <HardFault_Handler+0x4>

08000704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <MemManage_Handler+0x4>

0800070a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <BusFault_Handler+0x4>

08000710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <UsageFault_Handler+0x4>

08000716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <TIM6_DAC_IRQHandler+0x10>)
 800072a:	f001 ffb9 	bl	80026a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200000c4 	.word	0x200000c4

08000738 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <SystemInit+0x20>)
 800073e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000742:	4a05      	ldr	r2, [pc, #20]	; (8000758 <SystemInit+0x20>)
 8000744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800075c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000794 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000760:	f7ff ffea 	bl	8000738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <LoopForever+0x6>)
  ldr r1, =_edata
 8000766:	490d      	ldr	r1, [pc, #52]	; (800079c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000768:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <LoopForever+0xe>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800077c:	4c0a      	ldr	r4, [pc, #40]	; (80007a8 <LoopForever+0x16>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800078a:	f005 fdf7 	bl	800637c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800078e:	f7ff fd27 	bl	80001e0 <main>

08000792 <LoopForever>:

LoopForever:
    b LoopForever
 8000792:	e7fe      	b.n	8000792 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000794:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007a0:	08006518 	.word	0x08006518
  ldr r2, =_sbss
 80007a4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007a8:	20001a5c 	.word	0x20001a5c

080007ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC1_IRQHandler>
	...

080007b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_Init+0x28>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <HAL_Init+0x28>)
 80007ba:	f043 0310 	orr.w	r3, r3, #16
 80007be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c0:	2003      	movs	r0, #3
 80007c2:	f000 f8d8 	bl	8000976 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007c6:	200f      	movs	r0, #15
 80007c8:	f7ff ff1c 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007cc:	f7ff feae 	bl	800052c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40022000 	.word	0x40022000

080007dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_IncTick+0x20>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_IncTick+0x24>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <HAL_IncTick+0x24>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000110 	.word	0x20000110

08000804 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return uwTick;  
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <HAL_GetTick+0x14>)
 800080a:	681b      	ldr	r3, [r3, #0]
}
 800080c:	4618      	mov	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000110 	.word	0x20000110

0800081c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000838:	4013      	ands	r3, r2
 800083a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800084e:	4a04      	ldr	r2, [pc, #16]	; (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	60d3      	str	r3, [r2, #12]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000868:	4b04      	ldr	r3, [pc, #16]	; (800087c <__NVIC_GetPriorityGrouping+0x18>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	f003 0307 	and.w	r3, r3, #7
}
 8000872:	4618      	mov	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	2b00      	cmp	r3, #0
 8000890:	db0b      	blt.n	80008aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f003 021f 	and.w	r2, r3, #31
 8000898:	4907      	ldr	r1, [pc, #28]	; (80008b8 <__NVIC_EnableIRQ+0x38>)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	095b      	lsrs	r3, r3, #5
 80008a0:	2001      	movs	r0, #1
 80008a2:	fa00 f202 	lsl.w	r2, r0, r2
 80008a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000e100 	.word	0xe000e100

080008bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	db0a      	blt.n	80008e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	490c      	ldr	r1, [pc, #48]	; (8000908 <__NVIC_SetPriority+0x4c>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	0112      	lsls	r2, r2, #4
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	440b      	add	r3, r1
 80008e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e4:	e00a      	b.n	80008fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4908      	ldr	r1, [pc, #32]	; (800090c <__NVIC_SetPriority+0x50>)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	3b04      	subs	r3, #4
 80008f4:	0112      	lsls	r2, r2, #4
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	440b      	add	r3, r1
 80008fa:	761a      	strb	r2, [r3, #24]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000e100 	.word	0xe000e100
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000910:	b480      	push	{r7}
 8000912:	b089      	sub	sp, #36	; 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f1c3 0307 	rsb	r3, r3, #7
 800092a:	2b04      	cmp	r3, #4
 800092c:	bf28      	it	cs
 800092e:	2304      	movcs	r3, #4
 8000930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3304      	adds	r3, #4
 8000936:	2b06      	cmp	r3, #6
 8000938:	d902      	bls.n	8000940 <NVIC_EncodePriority+0x30>
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3b03      	subs	r3, #3
 800093e:	e000      	b.n	8000942 <NVIC_EncodePriority+0x32>
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43da      	mvns	r2, r3
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	401a      	ands	r2, r3
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000958:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa01 f303 	lsl.w	r3, r1, r3
 8000962:	43d9      	mvns	r1, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	4313      	orrs	r3, r2
         );
}
 800096a:	4618      	mov	r0, r3
 800096c:	3724      	adds	r7, #36	; 0x24
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ff4c 	bl	800081c <__NVIC_SetPriorityGrouping>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
 8000998:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800099e:	f7ff ff61 	bl	8000864 <__NVIC_GetPriorityGrouping>
 80009a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	68b9      	ldr	r1, [r7, #8]
 80009a8:	6978      	ldr	r0, [r7, #20]
 80009aa:	f7ff ffb1 	bl	8000910 <NVIC_EncodePriority>
 80009ae:	4602      	mov	r2, r0
 80009b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff80 	bl	80008bc <__NVIC_SetPriority>
}
 80009bc:	bf00      	nop
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ff54 	bl	8000880 <__NVIC_EnableIRQ>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ee:	e14e      	b.n	8000c8e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	2101      	movs	r1, #1
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	fa01 f303 	lsl.w	r3, r1, r3
 80009fc:	4013      	ands	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f000 8140 	beq.w	8000c88 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f003 0303 	and.w	r3, r3, #3
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d005      	beq.n	8000a20 <HAL_GPIO_Init+0x40>
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f003 0303 	and.w	r3, r3, #3
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d130      	bne.n	8000a82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	68da      	ldr	r2, [r3, #12]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a56:	2201      	movs	r2, #1
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4013      	ands	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	091b      	lsrs	r3, r3, #4
 8000a6c:	f003 0201 	and.w	r2, r3, #1
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 0303 	and.w	r3, r3, #3
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d017      	beq.n	8000abe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	2203      	movs	r2, #3
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f003 0303 	and.w	r3, r3, #3
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d123      	bne.n	8000b12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	08da      	lsrs	r2, r3, #3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3208      	adds	r2, #8
 8000ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	220f      	movs	r2, #15
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	691a      	ldr	r2, [r3, #16]
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	f003 0307 	and.w	r3, r3, #7
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	08da      	lsrs	r2, r3, #3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3208      	adds	r2, #8
 8000b0c:	6939      	ldr	r1, [r7, #16]
 8000b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43db      	mvns	r3, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 0203 	and.w	r2, r3, #3
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 809a 	beq.w	8000c88 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b54:	4b55      	ldr	r3, [pc, #340]	; (8000cac <HAL_GPIO_Init+0x2cc>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a54      	ldr	r2, [pc, #336]	; (8000cac <HAL_GPIO_Init+0x2cc>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b52      	ldr	r3, [pc, #328]	; (8000cac <HAL_GPIO_Init+0x2cc>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b6c:	4a50      	ldr	r2, [pc, #320]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	089b      	lsrs	r3, r3, #2
 8000b72:	3302      	adds	r3, #2
 8000b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	f003 0303 	and.w	r3, r3, #3
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	220f      	movs	r2, #15
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b96:	d013      	beq.n	8000bc0 <HAL_GPIO_Init+0x1e0>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a46      	ldr	r2, [pc, #280]	; (8000cb4 <HAL_GPIO_Init+0x2d4>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d00d      	beq.n	8000bbc <HAL_GPIO_Init+0x1dc>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a45      	ldr	r2, [pc, #276]	; (8000cb8 <HAL_GPIO_Init+0x2d8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d007      	beq.n	8000bb8 <HAL_GPIO_Init+0x1d8>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a44      	ldr	r2, [pc, #272]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d101      	bne.n	8000bb4 <HAL_GPIO_Init+0x1d4>
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	e006      	b.n	8000bc2 <HAL_GPIO_Init+0x1e2>
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	e004      	b.n	8000bc2 <HAL_GPIO_Init+0x1e2>
 8000bb8:	2302      	movs	r3, #2
 8000bba:	e002      	b.n	8000bc2 <HAL_GPIO_Init+0x1e2>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e000      	b.n	8000bc2 <HAL_GPIO_Init+0x1e2>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	697a      	ldr	r2, [r7, #20]
 8000bc4:	f002 0203 	and.w	r2, r2, #3
 8000bc8:	0092      	lsls	r2, r2, #2
 8000bca:	4093      	lsls	r3, r2
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bd2:	4937      	ldr	r1, [pc, #220]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	3302      	adds	r3, #2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000be0:	4b37      	ldr	r3, [pc, #220]	; (8000cc0 <HAL_GPIO_Init+0x2e0>)
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c04:	4a2e      	ldr	r2, [pc, #184]	; (8000cc0 <HAL_GPIO_Init+0x2e0>)
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c0a:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <HAL_GPIO_Init+0x2e0>)
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c2e:	4a24      	ldr	r2, [pc, #144]	; (8000cc0 <HAL_GPIO_Init+0x2e0>)
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c34:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <HAL_GPIO_Init+0x2e0>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c58:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <HAL_GPIO_Init+0x2e0>)
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_GPIO_Init+0x2e0>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c82:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <HAL_GPIO_Init+0x2e0>)
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	fa22 f303 	lsr.w	r3, r2, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f47f aea9 	bne.w	80009f0 <HAL_GPIO_Init+0x10>
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	bf00      	nop
 8000ca2:	371c      	adds	r7, #28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40010000 	.word	0x40010000
 8000cb4:	48000400 	.word	0x48000400
 8000cb8:	48000800 	.word	0x48000800
 8000cbc:	48000c00 	.word	0x48000c00
 8000cc0:	40010400 	.word	0x40010400

08000cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cd4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f001 b823 	b.w	8001d30 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f000 817d 	beq.w	8000ffa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d00:	4bbc      	ldr	r3, [pc, #752]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 030c 	and.w	r3, r3, #12
 8000d08:	2b04      	cmp	r3, #4
 8000d0a:	d00c      	beq.n	8000d26 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d0c:	4bb9      	ldr	r3, [pc, #740]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 030c 	and.w	r3, r3, #12
 8000d14:	2b08      	cmp	r3, #8
 8000d16:	d15c      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x10e>
 8000d18:	4bb6      	ldr	r3, [pc, #728]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d24:	d155      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x10e>
 8000d26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d2a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d32:	fa93 f3a3 	rbit	r3, r3
 8000d36:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d3a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d3e:	fab3 f383 	clz	r3, r3
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	095b      	lsrs	r3, r3, #5
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d102      	bne.n	8000d58 <HAL_RCC_OscConfig+0x94>
 8000d52:	4ba8      	ldr	r3, [pc, #672]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	e015      	b.n	8000d84 <HAL_RCC_OscConfig+0xc0>
 8000d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d5c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d60:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d64:	fa93 f3a3 	rbit	r3, r3
 8000d68:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d70:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d74:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d78:	fa93 f3a3 	rbit	r3, r3
 8000d7c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d80:	4b9c      	ldr	r3, [pc, #624]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d88:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d8c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d90:	fa92 f2a2 	rbit	r2, r2
 8000d94:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d98:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d9c:	fab2 f282 	clz	r2, r2
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	f042 0220 	orr.w	r2, r2, #32
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	f002 021f 	and.w	r2, r2, #31
 8000dac:	2101      	movs	r1, #1
 8000dae:	fa01 f202 	lsl.w	r2, r1, r2
 8000db2:	4013      	ands	r3, r2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	f000 811f 	beq.w	8000ff8 <HAL_RCC_OscConfig+0x334>
 8000dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f040 8116 	bne.w	8000ff8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	f000 bfaf 	b.w	8001d30 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000de2:	d106      	bne.n	8000df2 <HAL_RCC_OscConfig+0x12e>
 8000de4:	4b83      	ldr	r3, [pc, #524]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a82      	ldr	r2, [pc, #520]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	e036      	b.n	8000e60 <HAL_RCC_OscConfig+0x19c>
 8000df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10c      	bne.n	8000e1c <HAL_RCC_OscConfig+0x158>
 8000e02:	4b7c      	ldr	r3, [pc, #496]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a7b      	ldr	r2, [pc, #492]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	4b79      	ldr	r3, [pc, #484]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a78      	ldr	r2, [pc, #480]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000e14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e021      	b.n	8000e60 <HAL_RCC_OscConfig+0x19c>
 8000e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e2c:	d10c      	bne.n	8000e48 <HAL_RCC_OscConfig+0x184>
 8000e2e:	4b71      	ldr	r3, [pc, #452]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a70      	ldr	r2, [pc, #448]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	4b6e      	ldr	r3, [pc, #440]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a6d      	ldr	r2, [pc, #436]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e00b      	b.n	8000e60 <HAL_RCC_OscConfig+0x19c>
 8000e48:	4b6a      	ldr	r3, [pc, #424]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a69      	ldr	r2, [pc, #420]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b67      	ldr	r3, [pc, #412]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a66      	ldr	r2, [pc, #408]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e60:	4b64      	ldr	r3, [pc, #400]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	f023 020f 	bic.w	r2, r3, #15
 8000e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	495f      	ldr	r1, [pc, #380]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000e76:	4313      	orrs	r3, r2
 8000e78:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d059      	beq.n	8000f3e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8a:	f7ff fcbb 	bl	8000804 <HAL_GetTick>
 8000e8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e92:	e00a      	b.n	8000eaa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e94:	f7ff fcb6 	bl	8000804 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b64      	cmp	r3, #100	; 0x64
 8000ea2:	d902      	bls.n	8000eaa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	f000 bf43 	b.w	8001d30 <HAL_RCC_OscConfig+0x106c>
 8000eaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000eb6:	fa93 f3a3 	rbit	r3, r3
 8000eba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000ebe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec2:	fab3 f383 	clz	r3, r3
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	095b      	lsrs	r3, r3, #5
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d102      	bne.n	8000edc <HAL_RCC_OscConfig+0x218>
 8000ed6:	4b47      	ldr	r3, [pc, #284]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	e015      	b.n	8000f08 <HAL_RCC_OscConfig+0x244>
 8000edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000ee8:	fa93 f3a3 	rbit	r3, r3
 8000eec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ef0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ef8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000efc:	fa93 f3a3 	rbit	r3, r3
 8000f00:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f04:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f0c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f10:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f14:	fa92 f2a2 	rbit	r2, r2
 8000f18:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f1c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f20:	fab2 f282 	clz	r2, r2
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	f042 0220 	orr.w	r2, r2, #32
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	f002 021f 	and.w	r2, r2, #31
 8000f30:	2101      	movs	r1, #1
 8000f32:	fa01 f202 	lsl.w	r2, r1, r2
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0ab      	beq.n	8000e94 <HAL_RCC_OscConfig+0x1d0>
 8000f3c:	e05d      	b.n	8000ffa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3e:	f7ff fc61 	bl	8000804 <HAL_GetTick>
 8000f42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f46:	e00a      	b.n	8000f5e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f48:	f7ff fc5c 	bl	8000804 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b64      	cmp	r3, #100	; 0x64
 8000f56:	d902      	bls.n	8000f5e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	f000 bee9 	b.w	8001d30 <HAL_RCC_OscConfig+0x106c>
 8000f5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f62:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f66:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f6a:	fa93 f3a3 	rbit	r3, r3
 8000f6e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f76:	fab3 f383 	clz	r3, r3
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	095b      	lsrs	r3, r3, #5
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d102      	bne.n	8000f90 <HAL_RCC_OscConfig+0x2cc>
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	e015      	b.n	8000fbc <HAL_RCC_OscConfig+0x2f8>
 8000f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f94:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f98:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f9c:	fa93 f3a3 	rbit	r3, r3
 8000fa0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000fb0:	fa93 f3a3 	rbit	r3, r3
 8000fb4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_RCC_OscConfig+0x330>)
 8000fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fc0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000fc4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fc8:	fa92 f2a2 	rbit	r2, r2
 8000fcc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000fd0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000fd4:	fab2 f282 	clz	r2, r2
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	f042 0220 	orr.w	r2, r2, #32
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	f002 021f 	and.w	r2, r2, #31
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1ab      	bne.n	8000f48 <HAL_RCC_OscConfig+0x284>
 8000ff0:	e003      	b.n	8000ffa <HAL_RCC_OscConfig+0x336>
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ffe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 817d 	beq.w	800130a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001010:	4ba6      	ldr	r3, [pc, #664]	; (80012ac <HAL_RCC_OscConfig+0x5e8>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 030c 	and.w	r3, r3, #12
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00b      	beq.n	8001034 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800101c:	4ba3      	ldr	r3, [pc, #652]	; (80012ac <HAL_RCC_OscConfig+0x5e8>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 030c 	and.w	r3, r3, #12
 8001024:	2b08      	cmp	r3, #8
 8001026:	d172      	bne.n	800110e <HAL_RCC_OscConfig+0x44a>
 8001028:	4ba0      	ldr	r3, [pc, #640]	; (80012ac <HAL_RCC_OscConfig+0x5e8>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d16c      	bne.n	800110e <HAL_RCC_OscConfig+0x44a>
 8001034:	2302      	movs	r3, #2
 8001036:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800103e:	fa93 f3a3 	rbit	r3, r3
 8001042:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001046:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104a:	fab3 f383 	clz	r3, r3
 800104e:	b2db      	uxtb	r3, r3
 8001050:	095b      	lsrs	r3, r3, #5
 8001052:	b2db      	uxtb	r3, r3
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b01      	cmp	r3, #1
 800105c:	d102      	bne.n	8001064 <HAL_RCC_OscConfig+0x3a0>
 800105e:	4b93      	ldr	r3, [pc, #588]	; (80012ac <HAL_RCC_OscConfig+0x5e8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	e013      	b.n	800108c <HAL_RCC_OscConfig+0x3c8>
 8001064:	2302      	movs	r3, #2
 8001066:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001076:	2302      	movs	r3, #2
 8001078:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800107c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001080:	fa93 f3a3 	rbit	r3, r3
 8001084:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001088:	4b88      	ldr	r3, [pc, #544]	; (80012ac <HAL_RCC_OscConfig+0x5e8>)
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	2202      	movs	r2, #2
 800108e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001092:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001096:	fa92 f2a2 	rbit	r2, r2
 800109a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800109e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010a2:	fab2 f282 	clz	r2, r2
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	f042 0220 	orr.w	r2, r2, #32
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	f002 021f 	and.w	r2, r2, #31
 80010b2:	2101      	movs	r1, #1
 80010b4:	fa01 f202 	lsl.w	r2, r1, r2
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00a      	beq.n	80010d4 <HAL_RCC_OscConfig+0x410>
 80010be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d002      	beq.n	80010d4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	f000 be2e 	b.w	8001d30 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d4:	4b75      	ldr	r3, [pc, #468]	; (80012ac <HAL_RCC_OscConfig+0x5e8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	21f8      	movs	r1, #248	; 0xf8
 80010ea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010f2:	fa91 f1a1 	rbit	r1, r1
 80010f6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80010fa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80010fe:	fab1 f181 	clz	r1, r1
 8001102:	b2c9      	uxtb	r1, r1
 8001104:	408b      	lsls	r3, r1
 8001106:	4969      	ldr	r1, [pc, #420]	; (80012ac <HAL_RCC_OscConfig+0x5e8>)
 8001108:	4313      	orrs	r3, r2
 800110a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800110c:	e0fd      	b.n	800130a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800110e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 8088 	beq.w	8001230 <HAL_RCC_OscConfig+0x56c>
 8001120:	2301      	movs	r3, #1
 8001122:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001132:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001140:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	461a      	mov	r2, r3
 8001148:	2301      	movs	r3, #1
 800114a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fb5a 	bl	8000804 <HAL_GetTick>
 8001150:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001154:	e00a      	b.n	800116c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001156:	f7ff fb55 	bl	8000804 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d902      	bls.n	800116c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	f000 bde2 	b.w	8001d30 <HAL_RCC_OscConfig+0x106c>
 800116c:	2302      	movs	r3, #2
 800116e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800117e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	095b      	lsrs	r3, r3, #5
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b01      	cmp	r3, #1
 8001194:	d102      	bne.n	800119c <HAL_RCC_OscConfig+0x4d8>
 8001196:	4b45      	ldr	r3, [pc, #276]	; (80012ac <HAL_RCC_OscConfig+0x5e8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	e013      	b.n	80011c4 <HAL_RCC_OscConfig+0x500>
 800119c:	2302      	movs	r3, #2
 800119e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011ae:	2302      	movs	r3, #2
 80011b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80011b8:	fa93 f3a3 	rbit	r3, r3
 80011bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80011c0:	4b3a      	ldr	r3, [pc, #232]	; (80012ac <HAL_RCC_OscConfig+0x5e8>)
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	2202      	movs	r2, #2
 80011c6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80011ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011ce:	fa92 f2a2 	rbit	r2, r2
 80011d2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80011d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80011da:	fab2 f282 	clz	r2, r2
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	f042 0220 	orr.w	r2, r2, #32
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	f002 021f 	and.w	r2, r2, #31
 80011ea:	2101      	movs	r1, #1
 80011ec:	fa01 f202 	lsl.w	r2, r1, r2
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0af      	beq.n	8001156 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f6:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <HAL_RCC_OscConfig+0x5e8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	21f8      	movs	r1, #248	; 0xf8
 800120c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001210:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001214:	fa91 f1a1 	rbit	r1, r1
 8001218:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800121c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001220:	fab1 f181 	clz	r1, r1
 8001224:	b2c9      	uxtb	r1, r1
 8001226:	408b      	lsls	r3, r1
 8001228:	4920      	ldr	r1, [pc, #128]	; (80012ac <HAL_RCC_OscConfig+0x5e8>)
 800122a:	4313      	orrs	r3, r2
 800122c:	600b      	str	r3, [r1, #0]
 800122e:	e06c      	b.n	800130a <HAL_RCC_OscConfig+0x646>
 8001230:	2301      	movs	r3, #1
 8001232:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001236:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800123a:	fa93 f3a3 	rbit	r3, r3
 800123e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001242:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001246:	fab3 f383 	clz	r3, r3
 800124a:	b2db      	uxtb	r3, r3
 800124c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001250:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	461a      	mov	r2, r3
 8001258:	2300      	movs	r3, #0
 800125a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fad2 	bl	8000804 <HAL_GetTick>
 8001260:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001264:	e00a      	b.n	800127c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001266:	f7ff facd 	bl	8000804 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d902      	bls.n	800127c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	f000 bd5a 	b.w	8001d30 <HAL_RCC_OscConfig+0x106c>
 800127c:	2302      	movs	r3, #2
 800127e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800128e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	fab3 f383 	clz	r3, r3
 8001296:	b2db      	uxtb	r3, r3
 8001298:	095b      	lsrs	r3, r3, #5
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d104      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5ec>
 80012a6:	4b01      	ldr	r3, [pc, #4]	; (80012ac <HAL_RCC_OscConfig+0x5e8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	e015      	b.n	80012d8 <HAL_RCC_OscConfig+0x614>
 80012ac:	40021000 	.word	0x40021000
 80012b0:	2302      	movs	r3, #2
 80012b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012ba:	fa93 f3a3 	rbit	r3, r3
 80012be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012c2:	2302      	movs	r3, #2
 80012c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012cc:	fa93 f3a3 	rbit	r3, r3
 80012d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80012d4:	4bc8      	ldr	r3, [pc, #800]	; (80015f8 <HAL_RCC_OscConfig+0x934>)
 80012d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d8:	2202      	movs	r2, #2
 80012da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80012de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012e2:	fa92 f2a2 	rbit	r2, r2
 80012e6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80012ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012ee:	fab2 f282 	clz	r2, r2
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	f042 0220 	orr.w	r2, r2, #32
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	f002 021f 	and.w	r2, r2, #31
 80012fe:	2101      	movs	r1, #1
 8001300:	fa01 f202 	lsl.w	r2, r1, r2
 8001304:	4013      	ands	r3, r2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1ad      	bne.n	8001266 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800130e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 8110 	beq.w	8001540 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001324:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d079      	beq.n	8001424 <HAL_RCC_OscConfig+0x760>
 8001330:	2301      	movs	r3, #1
 8001332:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001336:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800133a:	fa93 f3a3 	rbit	r3, r3
 800133e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001346:	fab3 f383 	clz	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	461a      	mov	r2, r3
 800134e:	4bab      	ldr	r3, [pc, #684]	; (80015fc <HAL_RCC_OscConfig+0x938>)
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	461a      	mov	r2, r3
 8001356:	2301      	movs	r3, #1
 8001358:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135a:	f7ff fa53 	bl	8000804 <HAL_GetTick>
 800135e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001362:	e00a      	b.n	800137a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001364:	f7ff fa4e 	bl	8000804 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d902      	bls.n	800137a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	f000 bcdb 	b.w	8001d30 <HAL_RCC_OscConfig+0x106c>
 800137a:	2302      	movs	r3, #2
 800137c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001380:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001384:	fa93 f3a3 	rbit	r3, r3
 8001388:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800138c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001390:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001394:	2202      	movs	r2, #2
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800139c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	fa93 f2a3 	rbit	r2, r3
 80013a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013b8:	2202      	movs	r2, #2
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	fa93 f2a3 	rbit	r2, r3
 80013ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d4:	4b88      	ldr	r3, [pc, #544]	; (80015f8 <HAL_RCC_OscConfig+0x934>)
 80013d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013e0:	2102      	movs	r1, #2
 80013e2:	6019      	str	r1, [r3, #0]
 80013e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	fa93 f1a3 	rbit	r1, r3
 80013f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013fa:	6019      	str	r1, [r3, #0]
  return result;
 80013fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001400:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	fab3 f383 	clz	r3, r3
 800140a:	b2db      	uxtb	r3, r3
 800140c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001410:	b2db      	uxtb	r3, r3
 8001412:	f003 031f 	and.w	r3, r3, #31
 8001416:	2101      	movs	r1, #1
 8001418:	fa01 f303 	lsl.w	r3, r1, r3
 800141c:	4013      	ands	r3, r2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0a0      	beq.n	8001364 <HAL_RCC_OscConfig+0x6a0>
 8001422:	e08d      	b.n	8001540 <HAL_RCC_OscConfig+0x87c>
 8001424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001428:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001434:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	fa93 f2a3 	rbit	r2, r3
 800143e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001442:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001446:	601a      	str	r2, [r3, #0]
  return result;
 8001448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001450:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001452:	fab3 f383 	clz	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	4b68      	ldr	r3, [pc, #416]	; (80015fc <HAL_RCC_OscConfig+0x938>)
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	461a      	mov	r2, r3
 8001462:	2300      	movs	r3, #0
 8001464:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001466:	f7ff f9cd 	bl	8000804 <HAL_GetTick>
 800146a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146e:	e00a      	b.n	8001486 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001470:	f7ff f9c8 	bl	8000804 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d902      	bls.n	8001486 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	f000 bc55 	b.w	8001d30 <HAL_RCC_OscConfig+0x106c>
 8001486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800148e:	2202      	movs	r2, #2
 8001490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001496:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	fa93 f2a3 	rbit	r2, r3
 80014a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014b2:	2202      	movs	r2, #2
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	fa93 f2a3 	rbit	r2, r3
 80014c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014d6:	2202      	movs	r2, #2
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	fa93 f2a3 	rbit	r2, r3
 80014e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f2:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <HAL_RCC_OscConfig+0x934>)
 80014f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014fe:	2102      	movs	r1, #2
 8001500:	6019      	str	r1, [r3, #0]
 8001502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001506:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	fa93 f1a3 	rbit	r1, r3
 8001510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001514:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001518:	6019      	str	r1, [r3, #0]
  return result;
 800151a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	fab3 f383 	clz	r3, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f003 031f 	and.w	r3, r3, #31
 8001534:	2101      	movs	r1, #1
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	4013      	ands	r3, r2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d197      	bne.n	8001470 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001544:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 81a1 	beq.w	8001898 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155c:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <HAL_RCC_OscConfig+0x934>)
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d116      	bne.n	8001596 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001568:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <HAL_RCC_OscConfig+0x934>)
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	4a22      	ldr	r2, [pc, #136]	; (80015f8 <HAL_RCC_OscConfig+0x934>)
 800156e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001572:	61d3      	str	r3, [r2, #28]
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_RCC_OscConfig+0x934>)
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800157c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001580:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800158e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001590:	2301      	movs	r3, #1
 8001592:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_RCC_OscConfig+0x93c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d11a      	bne.n	80015d8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_RCC_OscConfig+0x93c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a16      	ldr	r2, [pc, #88]	; (8001600 <HAL_RCC_OscConfig+0x93c>)
 80015a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ae:	f7ff f929 	bl	8000804 <HAL_GetTick>
 80015b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b6:	e009      	b.n	80015cc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b8:	f7ff f924 	bl	8000804 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b64      	cmp	r3, #100	; 0x64
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e3b1      	b.n	8001d30 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_RCC_OscConfig+0x93c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0ef      	beq.n	80015b8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d10d      	bne.n	8001604 <HAL_RCC_OscConfig+0x940>
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <HAL_RCC_OscConfig+0x934>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4a02      	ldr	r2, [pc, #8]	; (80015f8 <HAL_RCC_OscConfig+0x934>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6213      	str	r3, [r2, #32]
 80015f4:	e03c      	b.n	8001670 <HAL_RCC_OscConfig+0x9ac>
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	10908120 	.word	0x10908120
 8001600:	40007000 	.word	0x40007000
 8001604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001608:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d10c      	bne.n	800162e <HAL_RCC_OscConfig+0x96a>
 8001614:	4bc1      	ldr	r3, [pc, #772]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4ac0      	ldr	r2, [pc, #768]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	6213      	str	r3, [r2, #32]
 8001620:	4bbe      	ldr	r3, [pc, #760]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4abd      	ldr	r2, [pc, #756]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 8001626:	f023 0304 	bic.w	r3, r3, #4
 800162a:	6213      	str	r3, [r2, #32]
 800162c:	e020      	b.n	8001670 <HAL_RCC_OscConfig+0x9ac>
 800162e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x994>
 800163e:	4bb7      	ldr	r3, [pc, #732]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4ab6      	ldr	r2, [pc, #728]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	6213      	str	r3, [r2, #32]
 800164a:	4bb4      	ldr	r3, [pc, #720]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4ab3      	ldr	r2, [pc, #716]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6213      	str	r3, [r2, #32]
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0x9ac>
 8001658:	4bb0      	ldr	r3, [pc, #704]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4aaf      	ldr	r2, [pc, #700]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	6213      	str	r3, [r2, #32]
 8001664:	4bad      	ldr	r3, [pc, #692]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4aac      	ldr	r2, [pc, #688]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 800166a:	f023 0304 	bic.w	r3, r3, #4
 800166e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001674:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8081 	beq.w	8001784 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001682:	f7ff f8bf 	bl	8000804 <HAL_GetTick>
 8001686:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168a:	e00b      	b.n	80016a4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168c:	f7ff f8ba 	bl	8000804 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f241 3288 	movw	r2, #5000	; 0x1388
 800169c:	4293      	cmp	r3, r2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e345      	b.n	8001d30 <HAL_RCC_OscConfig+0x106c>
 80016a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016ac:	2202      	movs	r2, #2
 80016ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	fa93 f2a3 	rbit	r2, r3
 80016be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016d0:	2202      	movs	r2, #2
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	fa93 f2a3 	rbit	r2, r3
 80016e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016ea:	601a      	str	r2, [r3, #0]
  return result;
 80016ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f6:	fab3 f383 	clz	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	095b      	lsrs	r3, r3, #5
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d102      	bne.n	8001710 <HAL_RCC_OscConfig+0xa4c>
 800170a:	4b84      	ldr	r3, [pc, #528]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	e013      	b.n	8001738 <HAL_RCC_OscConfig+0xa74>
 8001710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001714:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001718:	2202      	movs	r2, #2
 800171a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001720:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	fa93 f2a3 	rbit	r2, r3
 800172a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	4b79      	ldr	r3, [pc, #484]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800173c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001740:	2102      	movs	r1, #2
 8001742:	6011      	str	r1, [r2, #0]
 8001744:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001748:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	fa92 f1a2 	rbit	r1, r2
 8001752:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001756:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800175a:	6011      	str	r1, [r2, #0]
  return result;
 800175c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001760:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	fab2 f282 	clz	r2, r2
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	f002 021f 	and.w	r2, r2, #31
 8001776:	2101      	movs	r1, #1
 8001778:	fa01 f202 	lsl.w	r2, r1, r2
 800177c:	4013      	ands	r3, r2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d084      	beq.n	800168c <HAL_RCC_OscConfig+0x9c8>
 8001782:	e07f      	b.n	8001884 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001784:	f7ff f83e 	bl	8000804 <HAL_GetTick>
 8001788:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178c:	e00b      	b.n	80017a6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff f839 	bl	8000804 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	; 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e2c4      	b.n	8001d30 <HAL_RCC_OscConfig+0x106c>
 80017a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017ae:	2202      	movs	r2, #2
 80017b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	fa93 f2a3 	rbit	r2, r3
 80017c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017d2:	2202      	movs	r2, #2
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fa93 f2a3 	rbit	r2, r3
 80017e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017ec:	601a      	str	r2, [r3, #0]
  return result;
 80017ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f8:	fab3 f383 	clz	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f043 0302 	orr.w	r3, r3, #2
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d102      	bne.n	8001812 <HAL_RCC_OscConfig+0xb4e>
 800180c:	4b43      	ldr	r3, [pc, #268]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	e013      	b.n	800183a <HAL_RCC_OscConfig+0xb76>
 8001812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001816:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800181a:	2202      	movs	r2, #2
 800181c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001822:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	fa93 f2a3 	rbit	r2, r3
 800182c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001830:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	4b39      	ldr	r3, [pc, #228]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800183e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001842:	2102      	movs	r1, #2
 8001844:	6011      	str	r1, [r2, #0]
 8001846:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800184a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	fa92 f1a2 	rbit	r1, r2
 8001854:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001858:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800185c:	6011      	str	r1, [r2, #0]
  return result;
 800185e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001862:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	fab2 f282 	clz	r2, r2
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	f002 021f 	and.w	r2, r2, #31
 8001878:	2101      	movs	r1, #1
 800187a:	fa01 f202 	lsl.w	r2, r1, r2
 800187e:	4013      	ands	r3, r2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d184      	bne.n	800178e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001884:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001888:	2b01      	cmp	r3, #1
 800188a:	d105      	bne.n	8001898 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	4a22      	ldr	r2, [pc, #136]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 8001892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001896:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 8242 	beq.w	8001d2e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018aa:	4b1c      	ldr	r3, [pc, #112]	; (800191c <HAL_RCC_OscConfig+0xc58>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	f000 8213 	beq.w	8001cde <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	f040 8162 	bne.w	8001b8e <HAL_RCC_OscConfig+0xeca>
 80018ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018dc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	fa93 f2a3 	rbit	r2, r3
 80018e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018ee:	601a      	str	r2, [r3, #0]
  return result;
 80018f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fa:	fab3 f383 	clz	r3, r3
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001904:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	461a      	mov	r2, r3
 800190c:	2300      	movs	r3, #0
 800190e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7fe ff78 	bl	8000804 <HAL_GetTick>
 8001914:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001918:	e00c      	b.n	8001934 <HAL_RCC_OscConfig+0xc70>
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001920:	f7fe ff70 	bl	8000804 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e1fd      	b.n	8001d30 <HAL_RCC_OscConfig+0x106c>
 8001934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001938:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800193c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001946:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	fa93 f2a3 	rbit	r2, r3
 8001950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001954:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001958:	601a      	str	r2, [r3, #0]
  return result;
 800195a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001962:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	b2db      	uxtb	r3, r3
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b01      	cmp	r3, #1
 8001976:	d102      	bne.n	800197e <HAL_RCC_OscConfig+0xcba>
 8001978:	4bb0      	ldr	r3, [pc, #704]	; (8001c3c <HAL_RCC_OscConfig+0xf78>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	e027      	b.n	80019ce <HAL_RCC_OscConfig+0xd0a>
 800197e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001982:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001986:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800198a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	fa93 f2a3 	rbit	r2, r3
 800199a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fa93 f2a3 	rbit	r2, r3
 80019c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	4b9c      	ldr	r3, [pc, #624]	; (8001c3c <HAL_RCC_OscConfig+0xf78>)
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019d2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019da:	6011      	str	r1, [r2, #0]
 80019dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019e0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	fa92 f1a2 	rbit	r1, r2
 80019ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019ee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019f2:	6011      	str	r1, [r2, #0]
  return result;
 80019f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019f8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	fab2 f282 	clz	r2, r2
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	f042 0220 	orr.w	r2, r2, #32
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	f002 021f 	and.w	r2, r2, #31
 8001a0e:	2101      	movs	r1, #1
 8001a10:	fa01 f202 	lsl.w	r2, r1, r2
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d182      	bne.n	8001920 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a1a:	4b88      	ldr	r3, [pc, #544]	; (8001c3c <HAL_RCC_OscConfig+0xf78>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	430b      	orrs	r3, r1
 8001a3c:	497f      	ldr	r1, [pc, #508]	; (8001c3c <HAL_RCC_OscConfig+0xf78>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	604b      	str	r3, [r1, #4]
 8001a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a46:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a54:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	fa93 f2a3 	rbit	r2, r3
 8001a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a62:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a66:	601a      	str	r2, [r3, #0]
  return result;
 8001a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a70:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	461a      	mov	r2, r3
 8001a84:	2301      	movs	r3, #1
 8001a86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7fe febc 	bl	8000804 <HAL_GetTick>
 8001a8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a90:	e009      	b.n	8001aa6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a92:	f7fe feb7 	bl	8000804 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e144      	b.n	8001d30 <HAL_RCC_OscConfig+0x106c>
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001aae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	fa93 f2a3 	rbit	r2, r3
 8001ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001aca:	601a      	str	r2, [r3, #0]
  return result;
 8001acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ad4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	095b      	lsrs	r3, r3, #5
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d102      	bne.n	8001af0 <HAL_RCC_OscConfig+0xe2c>
 8001aea:	4b54      	ldr	r3, [pc, #336]	; (8001c3c <HAL_RCC_OscConfig+0xf78>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	e027      	b.n	8001b40 <HAL_RCC_OscConfig+0xe7c>
 8001af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001af8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001afc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b02:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	fa93 f2a3 	rbit	r2, r3
 8001b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b10:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b28:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	fa93 f2a3 	rbit	r2, r3
 8001b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b36:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <HAL_RCC_OscConfig+0xf78>)
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b44:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b4c:	6011      	str	r1, [r2, #0]
 8001b4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b52:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	fa92 f1a2 	rbit	r1, r2
 8001b5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b60:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b64:	6011      	str	r1, [r2, #0]
  return result;
 8001b66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b6a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	fab2 f282 	clz	r2, r2
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	f042 0220 	orr.w	r2, r2, #32
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	f002 021f 	and.w	r2, r2, #31
 8001b80:	2101      	movs	r1, #1
 8001b82:	fa01 f202 	lsl.w	r2, r1, r2
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d082      	beq.n	8001a92 <HAL_RCC_OscConfig+0xdce>
 8001b8c:	e0cf      	b.n	8001d2e <HAL_RCC_OscConfig+0x106a>
 8001b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b92:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	fa93 f2a3 	rbit	r2, r3
 8001baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bb2:	601a      	str	r2, [r3, #0]
  return result;
 8001bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bbc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	461a      	mov	r2, r3
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7fe fe16 	bl	8000804 <HAL_GetTick>
 8001bd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bdc:	e009      	b.n	8001bf2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bde:	f7fe fe11 	bl	8000804 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e09e      	b.n	8001d30 <HAL_RCC_OscConfig+0x106c>
 8001bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c04:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	fa93 f2a3 	rbit	r2, r3
 8001c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c12:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c16:	601a      	str	r2, [r3, #0]
  return result;
 8001c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	095b      	lsrs	r3, r3, #5
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d104      	bne.n	8001c40 <HAL_RCC_OscConfig+0xf7c>
 8001c36:	4b01      	ldr	r3, [pc, #4]	; (8001c3c <HAL_RCC_OscConfig+0xf78>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	e029      	b.n	8001c90 <HAL_RCC_OscConfig+0xfcc>
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c44:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c52:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	fa93 f2a3 	rbit	r2, r3
 8001c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c60:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c78:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	fa93 f2a3 	rbit	r2, r3
 8001c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c86:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_RCC_OscConfig+0x1078>)
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c94:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c9c:	6011      	str	r1, [r2, #0]
 8001c9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ca2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	fa92 f1a2 	rbit	r1, r2
 8001cac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cb0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cb4:	6011      	str	r1, [r2, #0]
  return result;
 8001cb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	fab2 f282 	clz	r2, r2
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	f042 0220 	orr.w	r2, r2, #32
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	f002 021f 	and.w	r2, r2, #31
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d180      	bne.n	8001bde <HAL_RCC_OscConfig+0xf1a>
 8001cdc:	e027      	b.n	8001d2e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e01e      	b.n	8001d30 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_RCC_OscConfig+0x1078>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cfa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cfe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d10b      	bne.n	8001d2a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000

08001d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b09e      	sub	sp, #120	; 0x78
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e162      	b.n	800201e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d58:	4b90      	ldr	r3, [pc, #576]	; (8001f9c <HAL_RCC_ClockConfig+0x25c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d910      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b8d      	ldr	r3, [pc, #564]	; (8001f9c <HAL_RCC_ClockConfig+0x25c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 0207 	bic.w	r2, r3, #7
 8001d6e:	498b      	ldr	r1, [pc, #556]	; (8001f9c <HAL_RCC_ClockConfig+0x25c>)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b89      	ldr	r3, [pc, #548]	; (8001f9c <HAL_RCC_ClockConfig+0x25c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e14a      	b.n	800201e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d94:	4b82      	ldr	r3, [pc, #520]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	497f      	ldr	r1, [pc, #508]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 80dc 	beq.w	8001f6c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d13c      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xf6>
 8001dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d102      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xa6>
 8001de0:	4b6f      	ldr	r3, [pc, #444]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	e00f      	b.n	8001e06 <HAL_RCC_ClockConfig+0xc6>
 8001de6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	667b      	str	r3, [r7, #100]	; 0x64
 8001df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df8:	663b      	str	r3, [r7, #96]	; 0x60
 8001dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e02:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e0e:	fa92 f2a2 	rbit	r2, r2
 8001e12:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e16:	fab2 f282 	clz	r2, r2
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	f042 0220 	orr.w	r2, r2, #32
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	f002 021f 	and.w	r2, r2, #31
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d17b      	bne.n	8001f2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0f3      	b.n	800201e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d13c      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x178>
 8001e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	095b      	lsrs	r3, r3, #5
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d102      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x128>
 8001e62:	4b4f      	ldr	r3, [pc, #316]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	e00f      	b.n	8001e88 <HAL_RCC_ClockConfig+0x148>
 8001e68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	647b      	str	r3, [r7, #68]	; 0x44
 8001e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8001e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e84:	4b46      	ldr	r3, [pc, #280]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e90:	fa92 f2a2 	rbit	r2, r2
 8001e94:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e98:	fab2 f282 	clz	r2, r2
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	f042 0220 	orr.w	r2, r2, #32
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	f002 021f 	and.w	r2, r2, #31
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d13a      	bne.n	8001f2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0b2      	b.n	800201e <HAL_RCC_ClockConfig+0x2de>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	095b      	lsrs	r3, r3, #5
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d102      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x1a0>
 8001eda:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	e00d      	b.n	8001efc <HAL_RCC_ClockConfig+0x1bc>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
 8001eec:	2302      	movs	r3, #2
 8001eee:	623b      	str	r3, [r7, #32]
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	2202      	movs	r2, #2
 8001efe:	61ba      	str	r2, [r7, #24]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	fa92 f2a2 	rbit	r2, r2
 8001f06:	617a      	str	r2, [r7, #20]
  return result;
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	fab2 f282 	clz	r2, r2
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	f042 0220 	orr.w	r2, r2, #32
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	f002 021f 	and.w	r2, r2, #31
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e079      	b.n	800201e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f023 0203 	bic.w	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	491a      	ldr	r1, [pc, #104]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f3c:	f7fe fc62 	bl	8000804 <HAL_GetTick>
 8001f40:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	e00a      	b.n	8001f5a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f44:	f7fe fc5e 	bl	8000804 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e061      	b.n	800201e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 020c 	and.w	r2, r3, #12
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d1eb      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_RCC_ClockConfig+0x25c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d214      	bcs.n	8001fa4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_RCC_ClockConfig+0x25c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 0207 	bic.w	r2, r3, #7
 8001f82:	4906      	ldr	r1, [pc, #24]	; (8001f9c <HAL_RCC_ClockConfig+0x25c>)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <HAL_RCC_ClockConfig+0x25c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e040      	b.n	800201e <HAL_RCC_ClockConfig+0x2de>
 8001f9c:	40022000 	.word	0x40022000
 8001fa0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_RCC_ClockConfig+0x2e8>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	491a      	ldr	r1, [pc, #104]	; (8002028 <HAL_RCC_ClockConfig+0x2e8>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <HAL_RCC_ClockConfig+0x2e8>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4912      	ldr	r1, [pc, #72]	; (8002028 <HAL_RCC_ClockConfig+0x2e8>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fe2:	f000 f829 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8001fe6:	4601      	mov	r1, r0
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <HAL_RCC_ClockConfig+0x2e8>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff0:	22f0      	movs	r2, #240	; 0xf0
 8001ff2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	fa92 f2a2 	rbit	r2, r2
 8001ffa:	60fa      	str	r2, [r7, #12]
  return result;
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	fab2 f282 	clz	r2, r2
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	40d3      	lsrs	r3, r2
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <HAL_RCC_ClockConfig+0x2ec>)
 8002008:	5cd3      	ldrb	r3, [r2, r3]
 800200a:	fa21 f303 	lsr.w	r3, r1, r3
 800200e:	4a08      	ldr	r2, [pc, #32]	; (8002030 <HAL_RCC_ClockConfig+0x2f0>)
 8002010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_RCC_ClockConfig+0x2f4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe faf4 	bl	8000604 <HAL_InitTick>
  
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3778      	adds	r7, #120	; 0x78
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	080064d8 	.word	0x080064d8
 8002030:	20000000 	.word	0x20000000
 8002034:	20000004 	.word	0x20000004

08002038 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002038:	b480      	push	{r7}
 800203a:	b08b      	sub	sp, #44	; 0x2c
 800203c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002052:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	2b04      	cmp	r3, #4
 8002060:	d002      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0x30>
 8002062:	2b08      	cmp	r3, #8
 8002064:	d003      	beq.n	800206e <HAL_RCC_GetSysClockFreq+0x36>
 8002066:	e03c      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002068:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800206a:	623b      	str	r3, [r7, #32]
      break;
 800206c:	e03c      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002074:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002078:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	fa92 f2a2 	rbit	r2, r2
 8002080:	607a      	str	r2, [r7, #4]
  return result;
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	fab2 f282 	clz	r2, r2
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	40d3      	lsrs	r3, r2
 800208c:	4a1c      	ldr	r2, [pc, #112]	; (8002100 <HAL_RCC_GetSysClockFreq+0xc8>)
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002092:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	220f      	movs	r2, #15
 800209c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	fa92 f2a2 	rbit	r2, r2
 80020a4:	60fa      	str	r2, [r7, #12]
  return result;
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	fab2 f282 	clz	r2, r2
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	40d3      	lsrs	r3, r2
 80020b0:	4a14      	ldr	r2, [pc, #80]	; (8002104 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020b2:	5cd3      	ldrb	r3, [r2, r3]
 80020b4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020c0:	4a0e      	ldr	r2, [pc, #56]	; (80020fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
 80020d0:	e004      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	4a0c      	ldr	r2, [pc, #48]	; (8002108 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	623b      	str	r3, [r7, #32]
      break;
 80020e0:	e002      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80020e4:	623b      	str	r3, [r7, #32]
      break;
 80020e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e8:	6a3b      	ldr	r3, [r7, #32]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	372c      	adds	r7, #44	; 0x2c
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
 80020fc:	007a1200 	.word	0x007a1200
 8002100:	080064f0 	.word	0x080064f0
 8002104:	08006500 	.word	0x08006500
 8002108:	003d0900 	.word	0x003d0900

0800210c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_RCC_GetHCLKFreq+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000000 	.word	0x20000000

08002124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800212a:	f7ff ffef 	bl	800210c <HAL_RCC_GetHCLKFreq>
 800212e:	4601      	mov	r1, r0
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002138:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800213c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	fa92 f2a2 	rbit	r2, r2
 8002144:	603a      	str	r2, [r7, #0]
  return result;
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	fab2 f282 	clz	r2, r2
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	40d3      	lsrs	r3, r2
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	080064e8 	.word	0x080064e8

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800216e:	f7ff ffcd 	bl	800210c <HAL_RCC_GetHCLKFreq>
 8002172:	4601      	mov	r1, r0
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800217c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002180:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	fa92 f2a2 	rbit	r2, r2
 8002188:	603a      	str	r2, [r7, #0]
  return result;
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	fab2 f282 	clz	r2, r2
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	40d3      	lsrs	r3, r2
 8002194:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002196:	5cd3      	ldrb	r3, [r2, r3]
 8002198:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	080064e8 	.word	0x080064e8

080021ac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	220f      	movs	r2, #15
 80021ba:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_RCC_GetClockConfig+0x5c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0203 	and.w	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <HAL_RCC_GetClockConfig+0x5c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_RCC_GetClockConfig+0x5c>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_GetClockConfig+0x5c>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	08db      	lsrs	r3, r3, #3
 80021e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_RCC_GetClockConfig+0x60>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0207 	and.w	r2, r3, #7
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	601a      	str	r2, [r3, #0]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	40022000 	.word	0x40022000

08002210 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b092      	sub	sp, #72	; 0x48
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002220:	2300      	movs	r3, #0
 8002222:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 80d4 	beq.w	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002234:	4b4e      	ldr	r3, [pc, #312]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10e      	bne.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002240:	4b4b      	ldr	r3, [pc, #300]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	4a4a      	ldr	r2, [pc, #296]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224a:	61d3      	str	r3, [r2, #28]
 800224c:	4b48      	ldr	r3, [pc, #288]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002258:	2301      	movs	r3, #1
 800225a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225e:	4b45      	ldr	r3, [pc, #276]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d118      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800226a:	4b42      	ldr	r3, [pc, #264]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a41      	ldr	r2, [pc, #260]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002276:	f7fe fac5 	bl	8000804 <HAL_GetTick>
 800227a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227c:	e008      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227e:	f7fe fac1 	bl	8000804 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b64      	cmp	r3, #100	; 0x64
 800228a:	d901      	bls.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e14b      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002290:	4b38      	ldr	r3, [pc, #224]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800229c:	4b34      	ldr	r3, [pc, #208]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 8084 	beq.w	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d07c      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022bc:	4b2c      	ldr	r3, [pc, #176]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	4b26      	ldr	r3, [pc, #152]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	461a      	mov	r2, r3
 80022e6:	2301      	movs	r3, #1
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	461a      	mov	r2, r3
 800230a:	2300      	movs	r3, #0
 800230c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800230e:	4a18      	ldr	r2, [pc, #96]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002312:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d04b      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7fe fa71 	bl	8000804 <HAL_GetTick>
 8002322:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002324:	e00a      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7fe fa6d 	bl	8000804 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	f241 3288 	movw	r2, #5000	; 0x1388
 8002334:	4293      	cmp	r3, r2
 8002336:	d901      	bls.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e0f5      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800233c:	2302      	movs	r3, #2
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
 8002348:	2302      	movs	r3, #2
 800234a:	623b      	str	r3, [r7, #32]
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	61fb      	str	r3, [r7, #28]
  return result;
 8002354:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d108      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800236a:	4b01      	ldr	r3, [pc, #4]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	e00d      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002370:	40021000 	.word	0x40021000
 8002374:	40007000 	.word	0x40007000
 8002378:	10908100 	.word	0x10908100
 800237c:	2302      	movs	r3, #2
 800237e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	4b69      	ldr	r3, [pc, #420]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	2202      	movs	r2, #2
 800238e:	613a      	str	r2, [r7, #16]
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	fa92 f2a2 	rbit	r2, r2
 8002396:	60fa      	str	r2, [r7, #12]
  return result;
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	fab2 f282 	clz	r2, r2
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	f002 021f 	and.w	r2, r2, #31
 80023aa:	2101      	movs	r1, #1
 80023ac:	fa01 f202 	lsl.w	r2, r1, r2
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0b7      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023b6:	4b5e      	ldr	r3, [pc, #376]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	495b      	ldr	r1, [pc, #364]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d105      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d0:	4b57      	ldr	r3, [pc, #348]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	4a56      	ldr	r2, [pc, #344]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023e8:	4b51      	ldr	r3, [pc, #324]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	f023 0203 	bic.w	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	494e      	ldr	r1, [pc, #312]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0320 	and.w	r3, r3, #32
 8002402:	2b00      	cmp	r3, #0
 8002404:	d008      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002406:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f023 0210 	bic.w	r2, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	4947      	ldr	r1, [pc, #284]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002414:	4313      	orrs	r3, r2
 8002416:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002424:	4b42      	ldr	r3, [pc, #264]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	493f      	ldr	r1, [pc, #252]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243e:	2b00      	cmp	r3, #0
 8002440:	d008      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002442:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f023 0220 	bic.w	r2, r3, #32
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	4938      	ldr	r1, [pc, #224]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002450:	4313      	orrs	r3, r2
 8002452:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002460:	4b33      	ldr	r3, [pc, #204]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	4930      	ldr	r1, [pc, #192]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800246e:	4313      	orrs	r3, r2
 8002470:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800247e:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	4929      	ldr	r1, [pc, #164]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800249c:	4b24      	ldr	r3, [pc, #144]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	4921      	ldr	r1, [pc, #132]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	491a      	ldr	r1, [pc, #104]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	4912      	ldr	r1, [pc, #72]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d008      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002502:	490b      	ldr	r1, [pc, #44]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002504:	4313      	orrs	r3, r2
 8002506:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	4903      	ldr	r1, [pc, #12]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002522:	4313      	orrs	r3, r2
 8002524:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3748      	adds	r7, #72	; 0x48
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000

08002534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e049      	b.n	80025da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f841 	bl	80025e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3304      	adds	r3, #4
 8002570:	4619      	mov	r1, r3
 8002572:	4610      	mov	r0, r2
 8002574:	f000 f9dc 	bl	8002930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b01      	cmp	r3, #1
 800260a:	d001      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e03b      	b.n	8002688 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a19      	ldr	r2, [pc, #100]	; (8002694 <HAL_TIM_Base_Start_IT+0x9c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d009      	beq.n	8002646 <HAL_TIM_Base_Start_IT+0x4e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263a:	d004      	beq.n	8002646 <HAL_TIM_Base_Start_IT+0x4e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a15      	ldr	r2, [pc, #84]	; (8002698 <HAL_TIM_Base_Start_IT+0xa0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d115      	bne.n	8002672 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <HAL_TIM_Base_Start_IT+0xa4>)
 800264e:	4013      	ands	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b06      	cmp	r3, #6
 8002656:	d015      	beq.n	8002684 <HAL_TIM_Base_Start_IT+0x8c>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265e:	d011      	beq.n	8002684 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002670:	e008      	b.n	8002684 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e000      	b.n	8002686 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002684:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	40012c00 	.word	0x40012c00
 8002698:	40014000 	.word	0x40014000
 800269c:	00010007 	.word	0x00010007

080026a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d122      	bne.n	80026fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d11b      	bne.n	80026fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0202 	mvn.w	r2, #2
 80026cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f905 	bl	80028f2 <HAL_TIM_IC_CaptureCallback>
 80026e8:	e005      	b.n	80026f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f8f7 	bl	80028de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f908 	bl	8002906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	2b04      	cmp	r3, #4
 8002708:	d122      	bne.n	8002750 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b04      	cmp	r3, #4
 8002716:	d11b      	bne.n	8002750 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f06f 0204 	mvn.w	r2, #4
 8002720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2202      	movs	r2, #2
 8002726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f8db 	bl	80028f2 <HAL_TIM_IC_CaptureCallback>
 800273c:	e005      	b.n	800274a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f8cd 	bl	80028de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f8de 	bl	8002906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b08      	cmp	r3, #8
 800275c:	d122      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b08      	cmp	r3, #8
 800276a:	d11b      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0208 	mvn.w	r2, #8
 8002774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2204      	movs	r2, #4
 800277a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f8b1 	bl	80028f2 <HAL_TIM_IC_CaptureCallback>
 8002790:	e005      	b.n	800279e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f8a3 	bl	80028de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f8b4 	bl	8002906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b10      	cmp	r3, #16
 80027b0:	d122      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d11b      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0210 	mvn.w	r2, #16
 80027c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2208      	movs	r2, #8
 80027ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f887 	bl	80028f2 <HAL_TIM_IC_CaptureCallback>
 80027e4:	e005      	b.n	80027f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f879 	bl	80028de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f88a 	bl	8002906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b01      	cmp	r3, #1
 8002804:	d10e      	bne.n	8002824 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b01      	cmp	r3, #1
 8002812:	d107      	bne.n	8002824 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0201 	mvn.w	r2, #1
 800281c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7fd fe6a 	bl	80004f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282e:	2b80      	cmp	r3, #128	; 0x80
 8002830:	d10e      	bne.n	8002850 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283c:	2b80      	cmp	r3, #128	; 0x80
 800283e:	d107      	bne.n	8002850 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f8e8 	bl	8002a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800285e:	d10e      	bne.n	800287e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286a:	2b80      	cmp	r3, #128	; 0x80
 800286c:	d107      	bne.n	800287e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f8db 	bl	8002a34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002888:	2b40      	cmp	r3, #64	; 0x40
 800288a:	d10e      	bne.n	80028aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002896:	2b40      	cmp	r3, #64	; 0x40
 8002898:	d107      	bne.n	80028aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f838 	bl	800291a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d10e      	bne.n	80028d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f003 0320 	and.w	r3, r3, #32
 80028c2:	2b20      	cmp	r3, #32
 80028c4:	d107      	bne.n	80028d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f06f 0220 	mvn.w	r2, #32
 80028ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f89b 	bl	8002a0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a2e      	ldr	r2, [pc, #184]	; (80029fc <TIM_Base_SetConfig+0xcc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d003      	beq.n	8002950 <TIM_Base_SetConfig+0x20>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294e:	d108      	bne.n	8002962 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a25      	ldr	r2, [pc, #148]	; (80029fc <TIM_Base_SetConfig+0xcc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00f      	beq.n	800298a <TIM_Base_SetConfig+0x5a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002970:	d00b      	beq.n	800298a <TIM_Base_SetConfig+0x5a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a22      	ldr	r2, [pc, #136]	; (8002a00 <TIM_Base_SetConfig+0xd0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d007      	beq.n	800298a <TIM_Base_SetConfig+0x5a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a21      	ldr	r2, [pc, #132]	; (8002a04 <TIM_Base_SetConfig+0xd4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d003      	beq.n	800298a <TIM_Base_SetConfig+0x5a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a20      	ldr	r2, [pc, #128]	; (8002a08 <TIM_Base_SetConfig+0xd8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d108      	bne.n	800299c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a0e      	ldr	r2, [pc, #56]	; (80029fc <TIM_Base_SetConfig+0xcc>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00b      	beq.n	80029e0 <TIM_Base_SetConfig+0xb0>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <TIM_Base_SetConfig+0xd0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d007      	beq.n	80029e0 <TIM_Base_SetConfig+0xb0>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a0c      	ldr	r2, [pc, #48]	; (8002a04 <TIM_Base_SetConfig+0xd4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d003      	beq.n	80029e0 <TIM_Base_SetConfig+0xb0>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <TIM_Base_SetConfig+0xd8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d103      	bne.n	80029e8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	615a      	str	r2, [r3, #20]
}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40012c00 	.word	0x40012c00
 8002a00:	40014000 	.word	0x40014000
 8002a04:	40014400 	.word	0x40014400
 8002a08:	40014800 	.word	0x40014800

08002a0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e040      	b.n	8002adc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fd fd86 	bl	800057c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2224      	movs	r2, #36	; 0x24
 8002a74:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0201 	bic.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f980 	bl	8002d8c <UART_SetConfig>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e022      	b.n	8002adc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 faaa 	bl	8002ff8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ab2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ac2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 fb31 	bl	800313c <UART_CheckIdleState>
 8002ada:	4603      	mov	r3, r0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08a      	sub	sp, #40	; 0x28
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af8:	2b20      	cmp	r3, #32
 8002afa:	d178      	bne.n	8002bee <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <HAL_UART_Transmit+0x24>
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e071      	b.n	8002bf0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2221      	movs	r2, #33	; 0x21
 8002b18:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b1a:	f7fd fe73 	bl	8000804 <HAL_GetTick>
 8002b1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	88fa      	ldrh	r2, [r7, #6]
 8002b24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	88fa      	ldrh	r2, [r7, #6]
 8002b2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b38:	d108      	bne.n	8002b4c <HAL_UART_Transmit+0x68>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d104      	bne.n	8002b4c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	e003      	b.n	8002b54 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b54:	e030      	b.n	8002bb8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2180      	movs	r1, #128	; 0x80
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fb93 	bl	800328c <UART_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d004      	beq.n	8002b76 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e03c      	b.n	8002bf0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10b      	bne.n	8002b94 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	881a      	ldrh	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b88:	b292      	uxth	r2, r2
 8002b8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	3302      	adds	r3, #2
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	e008      	b.n	8002ba6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	781a      	ldrb	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	b292      	uxth	r2, r2
 8002b9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1c8      	bne.n	8002b56 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2140      	movs	r1, #64	; 0x40
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 fb5c 	bl	800328c <UART_WaitOnFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d004      	beq.n	8002be4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e005      	b.n	8002bf0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e000      	b.n	8002bf0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002bee:	2302      	movs	r3, #2
  }
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3720      	adds	r7, #32
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	; 0x28
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	4613      	mov	r3, r2
 8002c06:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	f040 80b6 	bne.w	8002d80 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_UART_Receive+0x28>
 8002c1a:	88fb      	ldrh	r3, [r7, #6]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0ae      	b.n	8002d82 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2222      	movs	r2, #34	; 0x22
 8002c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c3a:	f7fd fde3 	bl	8000804 <HAL_GetTick>
 8002c3e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	88fa      	ldrh	r2, [r7, #6]
 8002c44:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c58:	d10e      	bne.n	8002c78 <HAL_UART_Receive+0x80>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d105      	bne.n	8002c6e <HAL_UART_Receive+0x76>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002c68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c6c:	e02d      	b.n	8002cca <HAL_UART_Receive+0xd2>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	22ff      	movs	r2, #255	; 0xff
 8002c72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c76:	e028      	b.n	8002cca <HAL_UART_Receive+0xd2>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10d      	bne.n	8002c9c <HAL_UART_Receive+0xa4>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d104      	bne.n	8002c92 <HAL_UART_Receive+0x9a>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	22ff      	movs	r2, #255	; 0xff
 8002c8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c90:	e01b      	b.n	8002cca <HAL_UART_Receive+0xd2>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	227f      	movs	r2, #127	; 0x7f
 8002c96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c9a:	e016      	b.n	8002cca <HAL_UART_Receive+0xd2>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ca4:	d10d      	bne.n	8002cc2 <HAL_UART_Receive+0xca>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d104      	bne.n	8002cb8 <HAL_UART_Receive+0xc0>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	227f      	movs	r2, #127	; 0x7f
 8002cb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002cb6:	e008      	b.n	8002cca <HAL_UART_Receive+0xd2>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	223f      	movs	r2, #63	; 0x3f
 8002cbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002cc0:	e003      	b.n	8002cca <HAL_UART_Receive+0xd2>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002cd0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cda:	d108      	bne.n	8002cee <HAL_UART_Receive+0xf6>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d104      	bne.n	8002cee <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	61bb      	str	r3, [r7, #24]
 8002cec:	e003      	b.n	8002cf6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002cf6:	e037      	b.n	8002d68 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2120      	movs	r1, #32
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 fac2 	bl	800328c <UART_WaitOnFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e033      	b.n	8002d82 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10c      	bne.n	8002d3a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	8a7b      	ldrh	r3, [r7, #18]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	3302      	adds	r3, #2
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	e00d      	b.n	8002d56 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	8a7b      	ldrh	r3, [r7, #18]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	4013      	ands	r3, r2
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	3301      	adds	r3, #1
 8002d54:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1c1      	bne.n	8002cf8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e000      	b.n	8002d82 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
  }
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4b8a      	ldr	r3, [pc, #552]	; (8002fe0 <UART_SetConfig+0x254>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	6979      	ldr	r1, [r7, #20]
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a78      	ldr	r2, [pc, #480]	; (8002fe4 <UART_SetConfig+0x258>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d120      	bne.n	8002e4a <UART_SetConfig+0xbe>
 8002e08:	4b77      	ldr	r3, [pc, #476]	; (8002fe8 <UART_SetConfig+0x25c>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d817      	bhi.n	8002e44 <UART_SetConfig+0xb8>
 8002e14:	a201      	add	r2, pc, #4	; (adr r2, 8002e1c <UART_SetConfig+0x90>)
 8002e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1a:	bf00      	nop
 8002e1c:	08002e2d 	.word	0x08002e2d
 8002e20:	08002e39 	.word	0x08002e39
 8002e24:	08002e3f 	.word	0x08002e3f
 8002e28:	08002e33 	.word	0x08002e33
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	77fb      	strb	r3, [r7, #31]
 8002e30:	e01d      	b.n	8002e6e <UART_SetConfig+0xe2>
 8002e32:	2302      	movs	r3, #2
 8002e34:	77fb      	strb	r3, [r7, #31]
 8002e36:	e01a      	b.n	8002e6e <UART_SetConfig+0xe2>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	77fb      	strb	r3, [r7, #31]
 8002e3c:	e017      	b.n	8002e6e <UART_SetConfig+0xe2>
 8002e3e:	2308      	movs	r3, #8
 8002e40:	77fb      	strb	r3, [r7, #31]
 8002e42:	e014      	b.n	8002e6e <UART_SetConfig+0xe2>
 8002e44:	2310      	movs	r3, #16
 8002e46:	77fb      	strb	r3, [r7, #31]
 8002e48:	e011      	b.n	8002e6e <UART_SetConfig+0xe2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a67      	ldr	r2, [pc, #412]	; (8002fec <UART_SetConfig+0x260>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d102      	bne.n	8002e5a <UART_SetConfig+0xce>
 8002e54:	2300      	movs	r3, #0
 8002e56:	77fb      	strb	r3, [r7, #31]
 8002e58:	e009      	b.n	8002e6e <UART_SetConfig+0xe2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a64      	ldr	r2, [pc, #400]	; (8002ff0 <UART_SetConfig+0x264>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d102      	bne.n	8002e6a <UART_SetConfig+0xde>
 8002e64:	2300      	movs	r3, #0
 8002e66:	77fb      	strb	r3, [r7, #31]
 8002e68:	e001      	b.n	8002e6e <UART_SetConfig+0xe2>
 8002e6a:	2310      	movs	r3, #16
 8002e6c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e76:	d15a      	bne.n	8002f2e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002e78:	7ffb      	ldrb	r3, [r7, #31]
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d827      	bhi.n	8002ece <UART_SetConfig+0x142>
 8002e7e:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <UART_SetConfig+0xf8>)
 8002e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e84:	08002ea9 	.word	0x08002ea9
 8002e88:	08002eb1 	.word	0x08002eb1
 8002e8c:	08002eb9 	.word	0x08002eb9
 8002e90:	08002ecf 	.word	0x08002ecf
 8002e94:	08002ebf 	.word	0x08002ebf
 8002e98:	08002ecf 	.word	0x08002ecf
 8002e9c:	08002ecf 	.word	0x08002ecf
 8002ea0:	08002ecf 	.word	0x08002ecf
 8002ea4:	08002ec7 	.word	0x08002ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ea8:	f7ff f93c 	bl	8002124 <HAL_RCC_GetPCLK1Freq>
 8002eac:	61b8      	str	r0, [r7, #24]
        break;
 8002eae:	e013      	b.n	8002ed8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002eb0:	f7ff f95a 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8002eb4:	61b8      	str	r0, [r7, #24]
        break;
 8002eb6:	e00f      	b.n	8002ed8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eb8:	4b4e      	ldr	r3, [pc, #312]	; (8002ff4 <UART_SetConfig+0x268>)
 8002eba:	61bb      	str	r3, [r7, #24]
        break;
 8002ebc:	e00c      	b.n	8002ed8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ebe:	f7ff f8bb 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8002ec2:	61b8      	str	r0, [r7, #24]
        break;
 8002ec4:	e008      	b.n	8002ed8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eca:	61bb      	str	r3, [r7, #24]
        break;
 8002ecc:	e004      	b.n	8002ed8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	77bb      	strb	r3, [r7, #30]
        break;
 8002ed6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d074      	beq.n	8002fc8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	005a      	lsls	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	085b      	lsrs	r3, r3, #1
 8002ee8:	441a      	add	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b0f      	cmp	r3, #15
 8002ef8:	d916      	bls.n	8002f28 <UART_SetConfig+0x19c>
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f00:	d212      	bcs.n	8002f28 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	f023 030f 	bic.w	r3, r3, #15
 8002f0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	085b      	lsrs	r3, r3, #1
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	89fb      	ldrh	r3, [r7, #14]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	89fa      	ldrh	r2, [r7, #14]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	e04f      	b.n	8002fc8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	77bb      	strb	r3, [r7, #30]
 8002f2c:	e04c      	b.n	8002fc8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f2e:	7ffb      	ldrb	r3, [r7, #31]
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d828      	bhi.n	8002f86 <UART_SetConfig+0x1fa>
 8002f34:	a201      	add	r2, pc, #4	; (adr r2, 8002f3c <UART_SetConfig+0x1b0>)
 8002f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3a:	bf00      	nop
 8002f3c:	08002f61 	.word	0x08002f61
 8002f40:	08002f69 	.word	0x08002f69
 8002f44:	08002f71 	.word	0x08002f71
 8002f48:	08002f87 	.word	0x08002f87
 8002f4c:	08002f77 	.word	0x08002f77
 8002f50:	08002f87 	.word	0x08002f87
 8002f54:	08002f87 	.word	0x08002f87
 8002f58:	08002f87 	.word	0x08002f87
 8002f5c:	08002f7f 	.word	0x08002f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f60:	f7ff f8e0 	bl	8002124 <HAL_RCC_GetPCLK1Freq>
 8002f64:	61b8      	str	r0, [r7, #24]
        break;
 8002f66:	e013      	b.n	8002f90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f68:	f7ff f8fe 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8002f6c:	61b8      	str	r0, [r7, #24]
        break;
 8002f6e:	e00f      	b.n	8002f90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f70:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <UART_SetConfig+0x268>)
 8002f72:	61bb      	str	r3, [r7, #24]
        break;
 8002f74:	e00c      	b.n	8002f90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f76:	f7ff f85f 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8002f7a:	61b8      	str	r0, [r7, #24]
        break;
 8002f7c:	e008      	b.n	8002f90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f82:	61bb      	str	r3, [r7, #24]
        break;
 8002f84:	e004      	b.n	8002f90 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	77bb      	strb	r3, [r7, #30]
        break;
 8002f8e:	bf00      	nop
    }

    if (pclk != 0U)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d018      	beq.n	8002fc8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	085a      	lsrs	r2, r3, #1
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	441a      	add	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2b0f      	cmp	r3, #15
 8002fae:	d909      	bls.n	8002fc4 <UART_SetConfig+0x238>
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb6:	d205      	bcs.n	8002fc4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60da      	str	r2, [r3, #12]
 8002fc2:	e001      	b.n	8002fc8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002fd4:	7fbb      	ldrb	r3, [r7, #30]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3720      	adds	r7, #32
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	efff69f3 	.word	0xefff69f3
 8002fe4:	40013800 	.word	0x40013800
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40004400 	.word	0x40004400
 8002ff0:	40004800 	.word	0x40004800
 8002ff4:	007a1200 	.word	0x007a1200

08002ff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00a      	beq.n	8003022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d01a      	beq.n	800310e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030f6:	d10a      	bne.n	800310e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	605a      	str	r2, [r3, #4]
  }
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b098      	sub	sp, #96	; 0x60
 8003140:	af02      	add	r7, sp, #8
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800314c:	f7fd fb5a 	bl	8000804 <HAL_GetTick>
 8003150:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b08      	cmp	r3, #8
 800315e:	d12e      	bne.n	80031be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003160:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003168:	2200      	movs	r2, #0
 800316a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f88c 	bl	800328c <UART_WaitOnFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d021      	beq.n	80031be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003182:	e853 3f00 	ldrex	r3, [r3]
 8003186:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800318a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800318e:	653b      	str	r3, [r7, #80]	; 0x50
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003198:	647b      	str	r3, [r7, #68]	; 0x44
 800319a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800319e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031a0:	e841 2300 	strex	r3, r2, [r1]
 80031a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e6      	bne.n	800317a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e062      	b.n	8003284 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d149      	bne.n	8003260 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d4:	2200      	movs	r2, #0
 80031d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f856 	bl	800328c <UART_WaitOnFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d03c      	beq.n	8003260 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	e853 3f00 	ldrex	r3, [r3]
 80031f2:	623b      	str	r3, [r7, #32]
   return(result);
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003204:	633b      	str	r3, [r7, #48]	; 0x30
 8003206:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003208:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800320a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800320c:	e841 2300 	strex	r3, r2, [r1]
 8003210:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e6      	bne.n	80031e6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3308      	adds	r3, #8
 800321e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	e853 3f00 	ldrex	r3, [r3]
 8003226:	60fb      	str	r3, [r7, #12]
   return(result);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0301 	bic.w	r3, r3, #1
 800322e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3308      	adds	r3, #8
 8003236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003238:	61fa      	str	r2, [r7, #28]
 800323a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323c:	69b9      	ldr	r1, [r7, #24]
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	e841 2300 	strex	r3, r2, [r1]
 8003244:	617b      	str	r3, [r7, #20]
   return(result);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e5      	bne.n	8003218 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e011      	b.n	8003284 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2220      	movs	r2, #32
 800326a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3758      	adds	r7, #88	; 0x58
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	4613      	mov	r3, r2
 800329a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800329c:	e049      	b.n	8003332 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a4:	d045      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	f7fd faad 	bl	8000804 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d302      	bcc.n	80032bc <UART_WaitOnFlagUntilTimeout+0x30>
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e048      	b.n	8003352 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d031      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d110      	bne.n	80032fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2208      	movs	r2, #8
 80032e2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f838 	bl	800335a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2208      	movs	r2, #8
 80032ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e029      	b.n	8003352 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800330c:	d111      	bne.n	8003332 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003316:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f81e 	bl	800335a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e00f      	b.n	8003352 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4013      	ands	r3, r2
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	429a      	cmp	r2, r3
 8003340:	bf0c      	ite	eq
 8003342:	2301      	moveq	r3, #1
 8003344:	2300      	movne	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	429a      	cmp	r2, r3
 800334e:	d0a6      	beq.n	800329e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800335a:	b480      	push	{r7}
 800335c:	b095      	sub	sp, #84	; 0x54
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336a:	e853 3f00 	ldrex	r3, [r3]
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003372:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003380:	643b      	str	r3, [r7, #64]	; 0x40
 8003382:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003384:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003386:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003388:	e841 2300 	strex	r3, r2, [r1]
 800338c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e6      	bne.n	8003362 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3308      	adds	r3, #8
 800339a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	e853 3f00 	ldrex	r3, [r3]
 80033a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3308      	adds	r3, #8
 80033b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033bc:	e841 2300 	strex	r3, r2, [r1]
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e5      	bne.n	8003394 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d118      	bne.n	8003402 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f023 0310 	bic.w	r3, r3, #16
 80033e4:	647b      	str	r3, [r7, #68]	; 0x44
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ee:	61bb      	str	r3, [r7, #24]
 80033f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	6979      	ldr	r1, [r7, #20]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	613b      	str	r3, [r7, #16]
   return(result);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e6      	bne.n	80033d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003416:	bf00      	nop
 8003418:	3754      	adds	r7, #84	; 0x54
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800342a:	f3ef 8305 	mrs	r3, IPSR
 800342e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003430:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10f      	bne.n	8003456 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003436:	f3ef 8310 	mrs	r3, PRIMASK
 800343a:	607b      	str	r3, [r7, #4]
  return(result);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <osKernelInitialize+0x32>
 8003442:	4b11      	ldr	r3, [pc, #68]	; (8003488 <osKernelInitialize+0x64>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d109      	bne.n	800345e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800344a:	f3ef 8311 	mrs	r3, BASEPRI
 800344e:	603b      	str	r3, [r7, #0]
  return(result);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003456:	f06f 0305 	mvn.w	r3, #5
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	e00c      	b.n	8003478 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <osKernelInitialize+0x64>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d105      	bne.n	8003472 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <osKernelInitialize+0x64>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	e002      	b.n	8003478 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003476:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003478:	68fb      	ldr	r3, [r7, #12]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20000114 	.word	0x20000114

0800348c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003492:	f3ef 8305 	mrs	r3, IPSR
 8003496:	60bb      	str	r3, [r7, #8]
  return(result);
 8003498:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10f      	bne.n	80034be <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349e:	f3ef 8310 	mrs	r3, PRIMASK
 80034a2:	607b      	str	r3, [r7, #4]
  return(result);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <osKernelStart+0x32>
 80034aa:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <osKernelStart+0x64>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d109      	bne.n	80034c6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034b2:	f3ef 8311 	mrs	r3, BASEPRI
 80034b6:	603b      	str	r3, [r7, #0]
  return(result);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80034be:	f06f 0305 	mvn.w	r3, #5
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	e00e      	b.n	80034e4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <osKernelStart+0x64>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d107      	bne.n	80034de <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80034ce:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <osKernelStart+0x64>)
 80034d0:	2202      	movs	r2, #2
 80034d2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80034d4:	f001 fadc 	bl	8004a90 <vTaskStartScheduler>
      stat = osOK;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	e002      	b.n	80034e4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80034de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80034e4:	68fb      	ldr	r3, [r7, #12]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000114 	.word	0x20000114

080034f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b092      	sub	sp, #72	; 0x48
 80034f8:	af04      	add	r7, sp, #16
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003504:	f3ef 8305 	mrs	r3, IPSR
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800350c:	2b00      	cmp	r3, #0
 800350e:	f040 8094 	bne.w	800363a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003512:	f3ef 8310 	mrs	r3, PRIMASK
 8003516:	623b      	str	r3, [r7, #32]
  return(result);
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f040 808d 	bne.w	800363a <osThreadNew+0x146>
 8003520:	4b48      	ldr	r3, [pc, #288]	; (8003644 <osThreadNew+0x150>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b02      	cmp	r3, #2
 8003526:	d106      	bne.n	8003536 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003528:	f3ef 8311 	mrs	r3, BASEPRI
 800352c:	61fb      	str	r3, [r7, #28]
  return(result);
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	f040 8082 	bne.w	800363a <osThreadNew+0x146>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d07e      	beq.n	800363a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003540:	2318      	movs	r3, #24
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003544:	2300      	movs	r3, #0
 8003546:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003548:	f107 031b 	add.w	r3, r7, #27
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800354e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d045      	beq.n	80035e6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <osThreadNew+0x74>
        name = attr->name;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <osThreadNew+0x9a>
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	2b38      	cmp	r3, #56	; 0x38
 8003580:	d805      	bhi.n	800358e <osThreadNew+0x9a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <osThreadNew+0x9e>
        return (NULL);
 800358e:	2300      	movs	r3, #0
 8003590:	e054      	b.n	800363c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	089b      	lsrs	r3, r3, #2
 80035a0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00e      	beq.n	80035c8 <osThreadNew+0xd4>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	2b5b      	cmp	r3, #91	; 0x5b
 80035b0:	d90a      	bls.n	80035c8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d006      	beq.n	80035c8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <osThreadNew+0xd4>
        mem = 1;
 80035c2:	2301      	movs	r3, #1
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035c6:	e010      	b.n	80035ea <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10c      	bne.n	80035ea <osThreadNew+0xf6>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d108      	bne.n	80035ea <osThreadNew+0xf6>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d104      	bne.n	80035ea <osThreadNew+0xf6>
          mem = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e4:	e001      	b.n	80035ea <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d110      	bne.n	8003612 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035f8:	9202      	str	r2, [sp, #8]
 80035fa:	9301      	str	r3, [sp, #4]
 80035fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003604:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f001 f876 	bl	80046f8 <xTaskCreateStatic>
 800360c:	4603      	mov	r3, r0
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	e013      	b.n	800363a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	2b00      	cmp	r3, #0
 8003616:	d110      	bne.n	800363a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361a:	b29a      	uxth	r2, r3
 800361c:	f107 0314 	add.w	r3, r7, #20
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f001 f8c0 	bl	80047b0 <xTaskCreate>
 8003630:	4603      	mov	r3, r0
 8003632:	2b01      	cmp	r3, #1
 8003634:	d001      	beq.n	800363a <osThreadNew+0x146>
          hTask = NULL;
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800363a:	697b      	ldr	r3, [r7, #20]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3738      	adds	r7, #56	; 0x38
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000114 	.word	0x20000114

08003648 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800364e:	f3ef 8305 	mrs	r3, IPSR
 8003652:	60bb      	str	r3, [r7, #8]
  return(result);
 8003654:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10f      	bne.n	800367a <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800365a:	f3ef 8310 	mrs	r3, PRIMASK
 800365e:	607b      	str	r3, [r7, #4]
  return(result);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d109      	bne.n	800367a <osThreadYield+0x32>
 8003666:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <osThreadYield+0x5c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d109      	bne.n	8003682 <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800366e:	f3ef 8311 	mrs	r3, BASEPRI
 8003672:	603b      	str	r3, [r7, #0]
  return(result);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <osThreadYield+0x3a>
    stat = osErrorISR;
 800367a:	f06f 0305 	mvn.w	r3, #5
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	e009      	b.n	8003696 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8003686:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <osThreadYield+0x60>)
 8003688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8003696:	68fb      	ldr	r3, [r7, #12]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	20000114 	.word	0x20000114
 80036a8:	e000ed04 	.word	0xe000ed04

080036ac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036b4:	f3ef 8305 	mrs	r3, IPSR
 80036b8:	613b      	str	r3, [r7, #16]
  return(result);
 80036ba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10f      	bne.n	80036e0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c0:	f3ef 8310 	mrs	r3, PRIMASK
 80036c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <osDelay+0x34>
 80036cc:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <osDelay+0x58>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d109      	bne.n	80036e8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036d4:	f3ef 8311 	mrs	r3, BASEPRI
 80036d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <osDelay+0x3c>
    stat = osErrorISR;
 80036e0:	f06f 0305 	mvn.w	r3, #5
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	e007      	b.n	80036f8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f001 f998 	bl	8004a28 <vTaskDelay>
    }
  }

  return (stat);
 80036f8:	697b      	ldr	r3, [r7, #20]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000114 	.word	0x20000114

08003708 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003708:	b580      	push	{r7, lr}
 800370a:	b08c      	sub	sp, #48	; 0x30
 800370c:	af02      	add	r7, sp, #8
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003714:	2300      	movs	r3, #0
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003718:	f3ef 8305 	mrs	r3, IPSR
 800371c:	61bb      	str	r3, [r7, #24]
  return(result);
 800371e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003720:	2b00      	cmp	r3, #0
 8003722:	d16f      	bne.n	8003804 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003724:	f3ef 8310 	mrs	r3, PRIMASK
 8003728:	617b      	str	r3, [r7, #20]
  return(result);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d169      	bne.n	8003804 <osMessageQueueNew+0xfc>
 8003730:	4b37      	ldr	r3, [pc, #220]	; (8003810 <osMessageQueueNew+0x108>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d105      	bne.n	8003744 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003738:	f3ef 8311 	mrs	r3, BASEPRI
 800373c:	613b      	str	r3, [r7, #16]
  return(result);
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d15f      	bne.n	8003804 <osMessageQueueNew+0xfc>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d05c      	beq.n	8003804 <osMessageQueueNew+0xfc>
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d059      	beq.n	8003804 <osMessageQueueNew+0xfc>
    mem = -1;
 8003750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003754:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d029      	beq.n	80037b0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d012      	beq.n	800378a <osMessageQueueNew+0x82>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b4f      	cmp	r3, #79	; 0x4f
 800376a:	d90e      	bls.n	800378a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	429a      	cmp	r2, r3
 8003782:	d302      	bcc.n	800378a <osMessageQueueNew+0x82>
        mem = 1;
 8003784:	2301      	movs	r3, #1
 8003786:	623b      	str	r3, [r7, #32]
 8003788:	e014      	b.n	80037b4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d110      	bne.n	80037b4 <osMessageQueueNew+0xac>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10c      	bne.n	80037b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d108      	bne.n	80037b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d104      	bne.n	80037b4 <osMessageQueueNew+0xac>
          mem = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	623b      	str	r3, [r7, #32]
 80037ae:	e001      	b.n	80037b4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d10b      	bne.n	80037d2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2100      	movs	r1, #0
 80037c4:	9100      	str	r1, [sp, #0]
 80037c6:	68b9      	ldr	r1, [r7, #8]
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 fa59 	bl	8003c80 <xQueueGenericCreateStatic>
 80037ce:	6278      	str	r0, [r7, #36]	; 0x24
 80037d0:	e008      	b.n	80037e4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d105      	bne.n	80037e4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80037d8:	2200      	movs	r2, #0
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 fac6 	bl	8003d6e <xQueueGenericCreate>
 80037e2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00c      	beq.n	8003804 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <osMessageQueueNew+0xf0>
        name = attr->name;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	e001      	b.n	80037fc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80037fc:	69f9      	ldr	r1, [r7, #28]
 80037fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003800:	f000 ff1c 	bl	800463c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003806:	4618      	mov	r0, r3
 8003808:	3728      	adds	r7, #40	; 0x28
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000114 	.word	0x20000114

08003814 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003814:	b580      	push	{r7, lr}
 8003816:	b08a      	sub	sp, #40	; 0x28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003828:	2300      	movs	r3, #0
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800382c:	f3ef 8305 	mrs	r3, IPSR
 8003830:	61fb      	str	r3, [r7, #28]
  return(result);
 8003832:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10f      	bne.n	8003858 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003838:	f3ef 8310 	mrs	r3, PRIMASK
 800383c:	61bb      	str	r3, [r7, #24]
  return(result);
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d109      	bne.n	8003858 <osMessageQueuePut+0x44>
 8003844:	4b2b      	ldr	r3, [pc, #172]	; (80038f4 <osMessageQueuePut+0xe0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d12e      	bne.n	80038aa <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800384c:	f3ef 8311 	mrs	r3, BASEPRI
 8003850:	617b      	str	r3, [r7, #20]
  return(result);
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d028      	beq.n	80038aa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <osMessageQueuePut+0x56>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <osMessageQueuePut+0x56>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800386a:	f06f 0303 	mvn.w	r3, #3
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003870:	e039      	b.n	80038e6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003876:	f107 0210 	add.w	r2, r7, #16
 800387a:	2300      	movs	r3, #0
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	6a38      	ldr	r0, [r7, #32]
 8003880:	f000 fbd4 	bl	800402c <xQueueGenericSendFromISR>
 8003884:	4603      	mov	r3, r0
 8003886:	2b01      	cmp	r3, #1
 8003888:	d003      	beq.n	8003892 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800388a:	f06f 0302 	mvn.w	r3, #2
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003890:	e029      	b.n	80038e6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d026      	beq.n	80038e6 <osMessageQueuePut+0xd2>
 8003898:	4b17      	ldr	r3, [pc, #92]	; (80038f8 <osMessageQueuePut+0xe4>)
 800389a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80038a8:	e01d      	b.n	80038e6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <osMessageQueuePut+0xa2>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d103      	bne.n	80038be <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80038b6:	f06f 0303 	mvn.w	r3, #3
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
 80038bc:	e014      	b.n	80038e8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80038be:	2300      	movs	r3, #0
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	68b9      	ldr	r1, [r7, #8]
 80038c4:	6a38      	ldr	r0, [r7, #32]
 80038c6:	f000 fab3 	bl	8003e30 <xQueueGenericSend>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d00b      	beq.n	80038e8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80038d6:	f06f 0301 	mvn.w	r3, #1
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
 80038dc:	e004      	b.n	80038e8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80038de:	f06f 0302 	mvn.w	r3, #2
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
 80038e4:	e000      	b.n	80038e8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80038e6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3728      	adds	r7, #40	; 0x28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000114 	.word	0x20000114
 80038f8:	e000ed04 	.word	0xe000ed04

080038fc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08a      	sub	sp, #40	; 0x28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800390e:	2300      	movs	r3, #0
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003912:	f3ef 8305 	mrs	r3, IPSR
 8003916:	61fb      	str	r3, [r7, #28]
  return(result);
 8003918:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10f      	bne.n	800393e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800391e:	f3ef 8310 	mrs	r3, PRIMASK
 8003922:	61bb      	str	r3, [r7, #24]
  return(result);
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <osMessageQueueGet+0x42>
 800392a:	4b2b      	ldr	r3, [pc, #172]	; (80039d8 <osMessageQueueGet+0xdc>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d12e      	bne.n	8003990 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003932:	f3ef 8311 	mrs	r3, BASEPRI
 8003936:	617b      	str	r3, [r7, #20]
  return(result);
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d028      	beq.n	8003990 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <osMessageQueueGet+0x54>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <osMessageQueueGet+0x54>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003950:	f06f 0303 	mvn.w	r3, #3
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003956:	e038      	b.n	80039ca <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003958:	2300      	movs	r3, #0
 800395a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800395c:	f107 0310 	add.w	r3, r7, #16
 8003960:	461a      	mov	r2, r3
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	6a38      	ldr	r0, [r7, #32]
 8003966:	f000 fcd9 	bl	800431c <xQueueReceiveFromISR>
 800396a:	4603      	mov	r3, r0
 800396c:	2b01      	cmp	r3, #1
 800396e:	d003      	beq.n	8003978 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003970:	f06f 0302 	mvn.w	r3, #2
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003976:	e028      	b.n	80039ca <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d025      	beq.n	80039ca <osMessageQueueGet+0xce>
 800397e:	4b17      	ldr	r3, [pc, #92]	; (80039dc <osMessageQueueGet+0xe0>)
 8003980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800398e:	e01c      	b.n	80039ca <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <osMessageQueueGet+0xa0>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d103      	bne.n	80039a4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800399c:	f06f 0303 	mvn.w	r3, #3
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
 80039a2:	e013      	b.n	80039cc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	6a38      	ldr	r0, [r7, #32]
 80039aa:	f000 fbd7 	bl	800415c <xQueueReceive>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d00b      	beq.n	80039cc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80039ba:	f06f 0301 	mvn.w	r3, #1
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
 80039c0:	e004      	b.n	80039cc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80039c2:	f06f 0302 	mvn.w	r3, #2
 80039c6:	627b      	str	r3, [r7, #36]	; 0x24
 80039c8:	e000      	b.n	80039cc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80039ca:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3728      	adds	r7, #40	; 0x28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000114 	.word	0x20000114
 80039dc:	e000ed04 	.word	0xe000ed04

080039e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4a07      	ldr	r2, [pc, #28]	; (8003a0c <vApplicationGetIdleTaskMemory+0x2c>)
 80039f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	4a06      	ldr	r2, [pc, #24]	; (8003a10 <vApplicationGetIdleTaskMemory+0x30>)
 80039f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2280      	movs	r2, #128	; 0x80
 80039fc:	601a      	str	r2, [r3, #0]
}
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000118 	.word	0x20000118
 8003a10:	20000174 	.word	0x20000174

08003a14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4a07      	ldr	r2, [pc, #28]	; (8003a40 <vApplicationGetTimerTaskMemory+0x2c>)
 8003a24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	4a06      	ldr	r2, [pc, #24]	; (8003a44 <vApplicationGetTimerTaskMemory+0x30>)
 8003a2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a32:	601a      	str	r2, [r3, #0]
}
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	20000374 	.word	0x20000374
 8003a44:	200003d0 	.word	0x200003d0

08003a48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f103 0208 	add.w	r2, r3, #8
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f103 0208 	add.w	r2, r3, #8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f103 0208 	add.w	r2, r3, #8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	601a      	str	r2, [r3, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aea:	b480      	push	{r7}
 8003aec:	b085      	sub	sp, #20
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b00:	d103      	bne.n	8003b0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	e00c      	b.n	8003b24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3308      	adds	r3, #8
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	e002      	b.n	8003b18 <vListInsert+0x2e>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d2f6      	bcs.n	8003b12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	601a      	str	r2, [r3, #0]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6892      	ldr	r2, [r2, #8]
 8003b72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6852      	ldr	r2, [r2, #4]
 8003b7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d103      	bne.n	8003b90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	1e5a      	subs	r2, r3, #1
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003bda:	f002 f8cb 	bl	8005d74 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be6:	68f9      	ldr	r1, [r7, #12]
 8003be8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003bea:	fb01 f303 	mul.w	r3, r1, r3
 8003bee:	441a      	add	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	68f9      	ldr	r1, [r7, #12]
 8003c0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	441a      	add	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	22ff      	movs	r2, #255	; 0xff
 8003c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	22ff      	movs	r2, #255	; 0xff
 8003c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d114      	bne.n	8003c5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01a      	beq.n	8003c6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3310      	adds	r3, #16
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 f9b5 	bl	8004fac <xTaskRemoveFromEventList>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d012      	beq.n	8003c6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <xQueueGenericReset+0xcc>)
 8003c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	e009      	b.n	8003c6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3310      	adds	r3, #16
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff fef2 	bl	8003a48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3324      	adds	r3, #36	; 0x24
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff feed 	bl	8003a48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c6e:	f002 f8b1 	bl	8005dd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c72:	2301      	movs	r3, #1
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	e000ed04 	.word	0xe000ed04

08003c80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08e      	sub	sp, #56	; 0x38
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ca6:	bf00      	nop
 8003ca8:	e7fe      	b.n	8003ca8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003cc2:	bf00      	nop
 8003cc4:	e7fe      	b.n	8003cc4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <xQueueGenericCreateStatic+0x52>
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <xQueueGenericCreateStatic+0x56>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <xQueueGenericCreateStatic+0x58>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	623b      	str	r3, [r7, #32]
}
 8003cee:	bf00      	nop
 8003cf0:	e7fe      	b.n	8003cf0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <xQueueGenericCreateStatic+0x7e>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <xQueueGenericCreateStatic+0x82>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <xQueueGenericCreateStatic+0x84>
 8003d02:	2300      	movs	r3, #0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10a      	bne.n	8003d1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	61fb      	str	r3, [r7, #28]
}
 8003d1a:	bf00      	nop
 8003d1c:	e7fe      	b.n	8003d1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d1e:	2350      	movs	r3, #80	; 0x50
 8003d20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b50      	cmp	r3, #80	; 0x50
 8003d26:	d00a      	beq.n	8003d3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2c:	f383 8811 	msr	BASEPRI, r3
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	61bb      	str	r3, [r7, #24]
}
 8003d3a:	bf00      	nop
 8003d3c:	e7fe      	b.n	8003d3c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d50:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f843 	bl	8003dea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3730      	adds	r7, #48	; 0x30
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b08a      	sub	sp, #40	; 0x28
 8003d72:	af02      	add	r7, sp, #8
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	613b      	str	r3, [r7, #16]
}
 8003d94:	bf00      	nop
 8003d96:	e7fe      	b.n	8003d96 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	e004      	b.n	8003dae <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	fb02 f303 	mul.w	r3, r2, r3
 8003dac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3350      	adds	r3, #80	; 0x50
 8003db2:	4618      	mov	r0, r3
 8003db4:	f002 f900 	bl	8005fb8 <pvPortMalloc>
 8003db8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00f      	beq.n	8003de0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	3350      	adds	r3, #80	; 0x50
 8003dc4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dce:	79fa      	ldrb	r2, [r7, #7]
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f805 	bl	8003dea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003de0:	69bb      	ldr	r3, [r7, #24]
	}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3720      	adds	r7, #32
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d103      	bne.n	8003e06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	e002      	b.n	8003e0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e18:	2101      	movs	r1, #1
 8003e1a:	69b8      	ldr	r0, [r7, #24]
 8003e1c:	f7ff fec8 	bl	8003bb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e28:	bf00      	nop
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08e      	sub	sp, #56	; 0x38
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <xQueueGenericSend+0x32>
	__asm volatile
 8003e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e5e:	bf00      	nop
 8003e60:	e7fe      	b.n	8003e60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d103      	bne.n	8003e70 <xQueueGenericSend+0x40>
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <xQueueGenericSend+0x44>
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <xQueueGenericSend+0x46>
 8003e74:	2300      	movs	r3, #0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <xQueueGenericSend+0x60>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e8c:	bf00      	nop
 8003e8e:	e7fe      	b.n	8003e8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d103      	bne.n	8003e9e <xQueueGenericSend+0x6e>
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <xQueueGenericSend+0x72>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <xQueueGenericSend+0x74>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10a      	bne.n	8003ebe <xQueueGenericSend+0x8e>
	__asm volatile
 8003ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	623b      	str	r3, [r7, #32]
}
 8003eba:	bf00      	nop
 8003ebc:	e7fe      	b.n	8003ebc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ebe:	f001 fa39 	bl	8005334 <xTaskGetSchedulerState>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <xQueueGenericSend+0x9e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <xQueueGenericSend+0xa2>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <xQueueGenericSend+0xa4>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10a      	bne.n	8003eee <xQueueGenericSend+0xbe>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	61fb      	str	r3, [r7, #28]
}
 8003eea:	bf00      	nop
 8003eec:	e7fe      	b.n	8003eec <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003eee:	f001 ff41 	bl	8005d74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <xQueueGenericSend+0xd4>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d129      	bne.n	8003f58 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f0a:	f000 fa87 	bl	800441c <prvCopyDataToQueue>
 8003f0e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d010      	beq.n	8003f3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	3324      	adds	r3, #36	; 0x24
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f001 f845 	bl	8004fac <xTaskRemoveFromEventList>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d013      	beq.n	8003f50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f28:	4b3f      	ldr	r3, [pc, #252]	; (8004028 <xQueueGenericSend+0x1f8>)
 8003f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	e00a      	b.n	8003f50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d007      	beq.n	8003f50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f40:	4b39      	ldr	r3, [pc, #228]	; (8004028 <xQueueGenericSend+0x1f8>)
 8003f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f50:	f001 ff40 	bl	8005dd4 <vPortExitCritical>
				return pdPASS;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e063      	b.n	8004020 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d103      	bne.n	8003f66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f5e:	f001 ff39 	bl	8005dd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e05c      	b.n	8004020 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d106      	bne.n	8003f7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f6c:	f107 0314 	add.w	r3, r7, #20
 8003f70:	4618      	mov	r0, r3
 8003f72:	f001 f87f 	bl	8005074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f76:	2301      	movs	r3, #1
 8003f78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f7a:	f001 ff2b 	bl	8005dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f7e:	f000 fded 	bl	8004b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f82:	f001 fef7 	bl	8005d74 <vPortEnterCritical>
 8003f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f8c:	b25b      	sxtb	r3, r3
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f92:	d103      	bne.n	8003f9c <xQueueGenericSend+0x16c>
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fa2:	b25b      	sxtb	r3, r3
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fa8:	d103      	bne.n	8003fb2 <xQueueGenericSend+0x182>
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fb2:	f001 ff0f 	bl	8005dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fb6:	1d3a      	adds	r2, r7, #4
 8003fb8:	f107 0314 	add.w	r3, r7, #20
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 f86e 	bl	80050a0 <xTaskCheckForTimeOut>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d124      	bne.n	8004014 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003fca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fcc:	f000 fb1e 	bl	800460c <prvIsQueueFull>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d018      	beq.n	8004008 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	3310      	adds	r3, #16
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	4611      	mov	r1, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 ff94 	bl	8004f0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fe6:	f000 faa9 	bl	800453c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003fea:	f000 fdc5 	bl	8004b78 <xTaskResumeAll>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f47f af7c 	bne.w	8003eee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <xQueueGenericSend+0x1f8>)
 8003ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	e772      	b.n	8003eee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800400a:	f000 fa97 	bl	800453c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800400e:	f000 fdb3 	bl	8004b78 <xTaskResumeAll>
 8004012:	e76c      	b.n	8003eee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004016:	f000 fa91 	bl	800453c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800401a:	f000 fdad 	bl	8004b78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800401e:	2300      	movs	r3, #0
		}
	}
}
 8004020:	4618      	mov	r0, r3
 8004022:	3738      	adds	r7, #56	; 0x38
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	e000ed04 	.word	0xe000ed04

0800402c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08e      	sub	sp, #56	; 0x38
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004056:	bf00      	nop
 8004058:	e7fe      	b.n	8004058 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <xQueueGenericSendFromISR+0x3c>
 8004060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <xQueueGenericSendFromISR+0x40>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <xQueueGenericSendFromISR+0x42>
 800406c:	2300      	movs	r3, #0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	623b      	str	r3, [r7, #32]
}
 8004084:	bf00      	nop
 8004086:	e7fe      	b.n	8004086 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d103      	bne.n	8004096 <xQueueGenericSendFromISR+0x6a>
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <xQueueGenericSendFromISR+0x6e>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <xQueueGenericSendFromISR+0x70>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	61fb      	str	r3, [r7, #28]
}
 80040b2:	bf00      	nop
 80040b4:	e7fe      	b.n	80040b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040b6:	f001 ff3f 	bl	8005f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80040ba:	f3ef 8211 	mrs	r2, BASEPRI
 80040be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	61ba      	str	r2, [r7, #24]
 80040d0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80040d2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040de:	429a      	cmp	r2, r3
 80040e0:	d302      	bcc.n	80040e8 <xQueueGenericSendFromISR+0xbc>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d12c      	bne.n	8004142 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040f8:	f000 f990 	bl	800441c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80040fc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004104:	d112      	bne.n	800412c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	2b00      	cmp	r3, #0
 800410c:	d016      	beq.n	800413c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	3324      	adds	r3, #36	; 0x24
 8004112:	4618      	mov	r0, r3
 8004114:	f000 ff4a 	bl	8004fac <xTaskRemoveFromEventList>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00e      	beq.n	800413c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00b      	beq.n	800413c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	e007      	b.n	800413c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800412c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004130:	3301      	adds	r3, #1
 8004132:	b2db      	uxtb	r3, r3
 8004134:	b25a      	sxtb	r2, r3
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800413c:	2301      	movs	r3, #1
 800413e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004140:	e001      	b.n	8004146 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004142:	2300      	movs	r3, #0
 8004144:	637b      	str	r3, [r7, #52]	; 0x34
 8004146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004148:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004150:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004154:	4618      	mov	r0, r3
 8004156:	3738      	adds	r7, #56	; 0x38
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08c      	sub	sp, #48	; 0x30
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004168:	2300      	movs	r3, #0
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <xQueueReceive+0x30>
	__asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	623b      	str	r3, [r7, #32]
}
 8004188:	bf00      	nop
 800418a:	e7fe      	b.n	800418a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <xQueueReceive+0x3e>
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <xQueueReceive+0x42>
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <xQueueReceive+0x44>
 800419e:	2300      	movs	r3, #0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <xQueueReceive+0x5e>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	61fb      	str	r3, [r7, #28]
}
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041ba:	f001 f8bb 	bl	8005334 <xTaskGetSchedulerState>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d102      	bne.n	80041ca <xQueueReceive+0x6e>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <xQueueReceive+0x72>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <xQueueReceive+0x74>
 80041ce:	2300      	movs	r3, #0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <xQueueReceive+0x8e>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	61bb      	str	r3, [r7, #24]
}
 80041e6:	bf00      	nop
 80041e8:	e7fe      	b.n	80041e8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80041ea:	f001 fdc3 	bl	8005d74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d01f      	beq.n	800423a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041fe:	f000 f977 	bl	80044f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	1e5a      	subs	r2, r3, #1
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800420a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00f      	beq.n	8004232 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004214:	3310      	adds	r3, #16
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fec8 	bl	8004fac <xTaskRemoveFromEventList>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004222:	4b3d      	ldr	r3, [pc, #244]	; (8004318 <xQueueReceive+0x1bc>)
 8004224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004232:	f001 fdcf 	bl	8005dd4 <vPortExitCritical>
				return pdPASS;
 8004236:	2301      	movs	r3, #1
 8004238:	e069      	b.n	800430e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d103      	bne.n	8004248 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004240:	f001 fdc8 	bl	8005dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004244:	2300      	movs	r3, #0
 8004246:	e062      	b.n	800430e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800424e:	f107 0310 	add.w	r3, r7, #16
 8004252:	4618      	mov	r0, r3
 8004254:	f000 ff0e 	bl	8005074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004258:	2301      	movs	r3, #1
 800425a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800425c:	f001 fdba 	bl	8005dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004260:	f000 fc7c 	bl	8004b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004264:	f001 fd86 	bl	8005d74 <vPortEnterCritical>
 8004268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800426e:	b25b      	sxtb	r3, r3
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004274:	d103      	bne.n	800427e <xQueueReceive+0x122>
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004284:	b25b      	sxtb	r3, r3
 8004286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800428a:	d103      	bne.n	8004294 <xQueueReceive+0x138>
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004294:	f001 fd9e 	bl	8005dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004298:	1d3a      	adds	r2, r7, #4
 800429a:	f107 0310 	add.w	r3, r7, #16
 800429e:	4611      	mov	r1, r2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fefd 	bl	80050a0 <xTaskCheckForTimeOut>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d123      	bne.n	80042f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ae:	f000 f997 	bl	80045e0 <prvIsQueueEmpty>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d017      	beq.n	80042e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	3324      	adds	r3, #36	; 0x24
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	4611      	mov	r1, r2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fe23 	bl	8004f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042c8:	f000 f938 	bl	800453c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042cc:	f000 fc54 	bl	8004b78 <xTaskResumeAll>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d189      	bne.n	80041ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80042d6:	4b10      	ldr	r3, [pc, #64]	; (8004318 <xQueueReceive+0x1bc>)
 80042d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	e780      	b.n	80041ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80042e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ea:	f000 f927 	bl	800453c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042ee:	f000 fc43 	bl	8004b78 <xTaskResumeAll>
 80042f2:	e77a      	b.n	80041ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80042f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042f6:	f000 f921 	bl	800453c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042fa:	f000 fc3d 	bl	8004b78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004300:	f000 f96e 	bl	80045e0 <prvIsQueueEmpty>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	f43f af6f 	beq.w	80041ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800430c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800430e:	4618      	mov	r0, r3
 8004310:	3730      	adds	r7, #48	; 0x30
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	e000ed04 	.word	0xe000ed04

0800431c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08e      	sub	sp, #56	; 0x38
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	623b      	str	r3, [r7, #32]
}
 8004344:	bf00      	nop
 8004346:	e7fe      	b.n	8004346 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d103      	bne.n	8004356 <xQueueReceiveFromISR+0x3a>
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <xQueueReceiveFromISR+0x3e>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <xQueueReceiveFromISR+0x40>
 800435a:	2300      	movs	r3, #0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10a      	bne.n	8004376 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	61fb      	str	r3, [r7, #28]
}
 8004372:	bf00      	nop
 8004374:	e7fe      	b.n	8004374 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004376:	f001 fddf 	bl	8005f38 <vPortValidateInterruptPriority>
	__asm volatile
 800437a:	f3ef 8211 	mrs	r2, BASEPRI
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	61ba      	str	r2, [r7, #24]
 8004390:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004392:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004394:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d02f      	beq.n	8004402 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043b0:	f000 f89e 	bl	80044f0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	1e5a      	subs	r2, r3, #1
 80043b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80043bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043c4:	d112      	bne.n	80043ec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d016      	beq.n	80043fc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d0:	3310      	adds	r3, #16
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fdea 	bl	8004fac <xTaskRemoveFromEventList>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00e      	beq.n	80043fc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00b      	beq.n	80043fc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e007      	b.n	80043fc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80043ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043f0:	3301      	adds	r3, #1
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	b25a      	sxtb	r2, r3
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80043fc:	2301      	movs	r3, #1
 80043fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004400:	e001      	b.n	8004406 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004402:	2300      	movs	r3, #0
 8004404:	637b      	str	r3, [r7, #52]	; 0x34
 8004406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004408:	613b      	str	r3, [r7, #16]
	__asm volatile
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f383 8811 	msr	BASEPRI, r3
}
 8004410:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004414:	4618      	mov	r0, r3
 8004416:	3738      	adds	r7, #56	; 0x38
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10d      	bne.n	8004456 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d14d      	bne.n	80044de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	4618      	mov	r0, r3
 8004448:	f000 ff92 	bl	8005370 <xTaskPriorityDisinherit>
 800444c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	605a      	str	r2, [r3, #4]
 8004454:	e043      	b.n	80044de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d119      	bne.n	8004490 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6898      	ldr	r0, [r3, #8]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	461a      	mov	r2, r3
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	f001 ffac 	bl	80063c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	441a      	add	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	429a      	cmp	r2, r3
 8004484:	d32b      	bcc.n	80044de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	609a      	str	r2, [r3, #8]
 800448e:	e026      	b.n	80044de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	68d8      	ldr	r0, [r3, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	461a      	mov	r2, r3
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	f001 ff92 	bl	80063c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	425b      	negs	r3, r3
 80044aa:	441a      	add	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d207      	bcs.n	80044cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	425b      	negs	r3, r3
 80044c6:	441a      	add	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d105      	bne.n	80044de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	3b01      	subs	r3, #1
 80044dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80044e6:	697b      	ldr	r3, [r7, #20]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d018      	beq.n	8004534 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	441a      	add	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	429a      	cmp	r2, r3
 800451a:	d303      	bcc.n	8004524 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68d9      	ldr	r1, [r3, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	461a      	mov	r2, r3
 800452e:	6838      	ldr	r0, [r7, #0]
 8004530:	f001 ff48 	bl	80063c4 <memcpy>
	}
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004544:	f001 fc16 	bl	8005d74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800454e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004550:	e011      	b.n	8004576 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	2b00      	cmp	r3, #0
 8004558:	d012      	beq.n	8004580 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3324      	adds	r3, #36	; 0x24
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fd24 	bl	8004fac <xTaskRemoveFromEventList>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800456a:	f000 fdfb 	bl	8005164 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	3b01      	subs	r3, #1
 8004572:	b2db      	uxtb	r3, r3
 8004574:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800457a:	2b00      	cmp	r3, #0
 800457c:	dce9      	bgt.n	8004552 <prvUnlockQueue+0x16>
 800457e:	e000      	b.n	8004582 <prvUnlockQueue+0x46>
					break;
 8004580:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	22ff      	movs	r2, #255	; 0xff
 8004586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800458a:	f001 fc23 	bl	8005dd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800458e:	f001 fbf1 	bl	8005d74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004598:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800459a:	e011      	b.n	80045c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d012      	beq.n	80045ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3310      	adds	r3, #16
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fcff 	bl	8004fac <xTaskRemoveFromEventList>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80045b4:	f000 fdd6 	bl	8005164 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045b8:	7bbb      	ldrb	r3, [r7, #14]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	dce9      	bgt.n	800459c <prvUnlockQueue+0x60>
 80045c8:	e000      	b.n	80045cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	22ff      	movs	r2, #255	; 0xff
 80045d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80045d4:	f001 fbfe 	bl	8005dd4 <vPortExitCritical>
}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045e8:	f001 fbc4 	bl	8005d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045f4:	2301      	movs	r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	e001      	b.n	80045fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045fe:	f001 fbe9 	bl	8005dd4 <vPortExitCritical>

	return xReturn;
 8004602:	68fb      	ldr	r3, [r7, #12]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004614:	f001 fbae 	bl	8005d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004620:	429a      	cmp	r2, r3
 8004622:	d102      	bne.n	800462a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004624:	2301      	movs	r3, #1
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	e001      	b.n	800462e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800462e:	f001 fbd1 	bl	8005dd4 <vPortExitCritical>

	return xReturn;
 8004632:	68fb      	ldr	r3, [r7, #12]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	e014      	b.n	8004676 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800464c:	4a0f      	ldr	r2, [pc, #60]	; (800468c <vQueueAddToRegistry+0x50>)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10b      	bne.n	8004670 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004658:	490c      	ldr	r1, [pc, #48]	; (800468c <vQueueAddToRegistry+0x50>)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004662:	4a0a      	ldr	r2, [pc, #40]	; (800468c <vQueueAddToRegistry+0x50>)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4413      	add	r3, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800466e:	e006      	b.n	800467e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3301      	adds	r3, #1
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b07      	cmp	r3, #7
 800467a:	d9e7      	bls.n	800464c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800467c:	bf00      	nop
 800467e:	bf00      	nop
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	200007d0 	.word	0x200007d0

08004690 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80046a0:	f001 fb68 	bl	8005d74 <vPortEnterCritical>
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046aa:	b25b      	sxtb	r3, r3
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046b0:	d103      	bne.n	80046ba <vQueueWaitForMessageRestricted+0x2a>
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046c0:	b25b      	sxtb	r3, r3
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046c6:	d103      	bne.n	80046d0 <vQueueWaitForMessageRestricted+0x40>
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046d0:	f001 fb80 	bl	8005dd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d106      	bne.n	80046ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	3324      	adds	r3, #36	; 0x24
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fc35 	bl	8004f54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80046ea:	6978      	ldr	r0, [r7, #20]
 80046ec:	f7ff ff26 	bl	800453c <prvUnlockQueue>
	}
 80046f0:	bf00      	nop
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08e      	sub	sp, #56	; 0x38
 80046fc:	af04      	add	r7, sp, #16
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <xTaskCreateStatic+0x2a>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	623b      	str	r3, [r7, #32]
}
 800471e:	bf00      	nop
 8004720:	e7fe      	b.n	8004720 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10a      	bne.n	800473e <xTaskCreateStatic+0x46>
	__asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	61fb      	str	r3, [r7, #28]
}
 800473a:	bf00      	nop
 800473c:	e7fe      	b.n	800473c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800473e:	235c      	movs	r3, #92	; 0x5c
 8004740:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	2b5c      	cmp	r3, #92	; 0x5c
 8004746:	d00a      	beq.n	800475e <xTaskCreateStatic+0x66>
	__asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	61bb      	str	r3, [r7, #24]
}
 800475a:	bf00      	nop
 800475c:	e7fe      	b.n	800475c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800475e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01e      	beq.n	80047a2 <xTaskCreateStatic+0xaa>
 8004764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01b      	beq.n	80047a2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800476a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004772:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800477c:	2300      	movs	r3, #0
 800477e:	9303      	str	r3, [sp, #12]
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	9302      	str	r3, [sp, #8]
 8004784:	f107 0314 	add.w	r3, r7, #20
 8004788:	9301      	str	r3, [sp, #4]
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f850 	bl	800483a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800479a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800479c:	f000 f8d4 	bl	8004948 <prvAddNewTaskToReadyList>
 80047a0:	e001      	b.n	80047a6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047a6:	697b      	ldr	r3, [r7, #20]
	}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3728      	adds	r7, #40	; 0x28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08c      	sub	sp, #48	; 0x30
 80047b4:	af04      	add	r7, sp, #16
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	4613      	mov	r3, r2
 80047be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f001 fbf7 	bl	8005fb8 <pvPortMalloc>
 80047ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00e      	beq.n	80047f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80047d2:	205c      	movs	r0, #92	; 0x5c
 80047d4:	f001 fbf0 	bl	8005fb8 <pvPortMalloc>
 80047d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	631a      	str	r2, [r3, #48]	; 0x30
 80047e6:	e005      	b.n	80047f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047e8:	6978      	ldr	r0, [r7, #20]
 80047ea:	f001 fca9 	bl	8006140 <vPortFree>
 80047ee:	e001      	b.n	80047f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d017      	beq.n	800482a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	2300      	movs	r3, #0
 8004806:	9303      	str	r3, [sp, #12]
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	9302      	str	r3, [sp, #8]
 800480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f80e 	bl	800483a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800481e:	69f8      	ldr	r0, [r7, #28]
 8004820:	f000 f892 	bl	8004948 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004824:	2301      	movs	r3, #1
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	e002      	b.n	8004830 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800482a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800482e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004830:	69bb      	ldr	r3, [r7, #24]
	}
 8004832:	4618      	mov	r0, r3
 8004834:	3720      	adds	r7, #32
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b088      	sub	sp, #32
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	607a      	str	r2, [r7, #4]
 8004846:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	461a      	mov	r2, r3
 8004852:	21a5      	movs	r1, #165	; 0xa5
 8004854:	f001 fd8a 	bl	800636c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004862:	3b01      	subs	r3, #1
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f023 0307 	bic.w	r3, r3, #7
 8004870:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <prvInitialiseNewTask+0x58>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	617b      	str	r3, [r7, #20]
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
 8004896:	e012      	b.n	80048be <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4413      	add	r3, r2
 800489e:	7819      	ldrb	r1, [r3, #0]
 80048a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	4413      	add	r3, r2
 80048a6:	3334      	adds	r3, #52	; 0x34
 80048a8:	460a      	mov	r2, r1
 80048aa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	4413      	add	r3, r2
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d006      	beq.n	80048c6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	3301      	adds	r3, #1
 80048bc:	61fb      	str	r3, [r7, #28]
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	2b0f      	cmp	r3, #15
 80048c2:	d9e9      	bls.n	8004898 <prvInitialiseNewTask+0x5e>
 80048c4:	e000      	b.n	80048c8 <prvInitialiseNewTask+0x8e>
		{
			break;
 80048c6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	2b37      	cmp	r3, #55	; 0x37
 80048d4:	d901      	bls.n	80048da <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048d6:	2337      	movs	r3, #55	; 0x37
 80048d8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048e4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80048e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e8:	2200      	movs	r2, #0
 80048ea:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	3304      	adds	r3, #4
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff f8c9 	bl	8003a88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f8:	3318      	adds	r3, #24
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff f8c4 	bl	8003a88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004904:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004914:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	2200      	movs	r2, #0
 800491a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	68f9      	ldr	r1, [r7, #12]
 8004928:	69b8      	ldr	r0, [r7, #24]
 800492a:	f001 f8f5 	bl	8005b18 <pxPortInitialiseStack>
 800492e:	4602      	mov	r2, r0
 8004930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004932:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800493a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800493e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004940:	bf00      	nop
 8004942:	3720      	adds	r7, #32
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004950:	f001 fa10 	bl	8005d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004954:	4b2d      	ldr	r3, [pc, #180]	; (8004a0c <prvAddNewTaskToReadyList+0xc4>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3301      	adds	r3, #1
 800495a:	4a2c      	ldr	r2, [pc, #176]	; (8004a0c <prvAddNewTaskToReadyList+0xc4>)
 800495c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800495e:	4b2c      	ldr	r3, [pc, #176]	; (8004a10 <prvAddNewTaskToReadyList+0xc8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d109      	bne.n	800497a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004966:	4a2a      	ldr	r2, [pc, #168]	; (8004a10 <prvAddNewTaskToReadyList+0xc8>)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800496c:	4b27      	ldr	r3, [pc, #156]	; (8004a0c <prvAddNewTaskToReadyList+0xc4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d110      	bne.n	8004996 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004974:	f000 fc1a 	bl	80051ac <prvInitialiseTaskLists>
 8004978:	e00d      	b.n	8004996 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800497a:	4b26      	ldr	r3, [pc, #152]	; (8004a14 <prvAddNewTaskToReadyList+0xcc>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d109      	bne.n	8004996 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004982:	4b23      	ldr	r3, [pc, #140]	; (8004a10 <prvAddNewTaskToReadyList+0xc8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	429a      	cmp	r2, r3
 800498e:	d802      	bhi.n	8004996 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004990:	4a1f      	ldr	r2, [pc, #124]	; (8004a10 <prvAddNewTaskToReadyList+0xc8>)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004996:	4b20      	ldr	r3, [pc, #128]	; (8004a18 <prvAddNewTaskToReadyList+0xd0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3301      	adds	r3, #1
 800499c:	4a1e      	ldr	r2, [pc, #120]	; (8004a18 <prvAddNewTaskToReadyList+0xd0>)
 800499e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049a0:	4b1d      	ldr	r3, [pc, #116]	; (8004a18 <prvAddNewTaskToReadyList+0xd0>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ac:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <prvAddNewTaskToReadyList+0xd4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d903      	bls.n	80049bc <prvAddNewTaskToReadyList+0x74>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	4a18      	ldr	r2, [pc, #96]	; (8004a1c <prvAddNewTaskToReadyList+0xd4>)
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4a15      	ldr	r2, [pc, #84]	; (8004a20 <prvAddNewTaskToReadyList+0xd8>)
 80049ca:	441a      	add	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3304      	adds	r3, #4
 80049d0:	4619      	mov	r1, r3
 80049d2:	4610      	mov	r0, r2
 80049d4:	f7ff f865 	bl	8003aa2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049d8:	f001 f9fc 	bl	8005dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049dc:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <prvAddNewTaskToReadyList+0xcc>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00e      	beq.n	8004a02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049e4:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <prvAddNewTaskToReadyList+0xc8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d207      	bcs.n	8004a02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80049f2:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <prvAddNewTaskToReadyList+0xdc>)
 80049f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000ce4 	.word	0x20000ce4
 8004a10:	20000810 	.word	0x20000810
 8004a14:	20000cf0 	.word	0x20000cf0
 8004a18:	20000d00 	.word	0x20000d00
 8004a1c:	20000cec 	.word	0x20000cec
 8004a20:	20000814 	.word	0x20000814
 8004a24:	e000ed04 	.word	0xe000ed04

08004a28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d017      	beq.n	8004a6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a3a:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <vTaskDelay+0x60>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <vTaskDelay+0x30>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	60bb      	str	r3, [r7, #8]
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a58:	f000 f880 	bl	8004b5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fcf4 	bl	800544c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a64:	f000 f888 	bl	8004b78 <xTaskResumeAll>
 8004a68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d107      	bne.n	8004a80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004a70:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <vTaskDelay+0x64>)
 8004a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	20000d0c 	.word	0x20000d0c
 8004a8c:	e000ed04 	.word	0xe000ed04

08004a90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	; 0x28
 8004a94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a9e:	463a      	mov	r2, r7
 8004aa0:	1d39      	adds	r1, r7, #4
 8004aa2:	f107 0308 	add.w	r3, r7, #8
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fe ff9a 	bl	80039e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004aac:	6839      	ldr	r1, [r7, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	9202      	str	r2, [sp, #8]
 8004ab4:	9301      	str	r3, [sp, #4]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	2300      	movs	r3, #0
 8004abc:	460a      	mov	r2, r1
 8004abe:	4921      	ldr	r1, [pc, #132]	; (8004b44 <vTaskStartScheduler+0xb4>)
 8004ac0:	4821      	ldr	r0, [pc, #132]	; (8004b48 <vTaskStartScheduler+0xb8>)
 8004ac2:	f7ff fe19 	bl	80046f8 <xTaskCreateStatic>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	4a20      	ldr	r2, [pc, #128]	; (8004b4c <vTaskStartScheduler+0xbc>)
 8004aca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004acc:	4b1f      	ldr	r3, [pc, #124]	; (8004b4c <vTaskStartScheduler+0xbc>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	e001      	b.n	8004ade <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d102      	bne.n	8004aea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ae4:	f000 fd06 	bl	80054f4 <xTimerCreateTimerTask>
 8004ae8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d116      	bne.n	8004b1e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	613b      	str	r3, [r7, #16]
}
 8004b02:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b04:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <vTaskStartScheduler+0xc0>)
 8004b06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b0c:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <vTaskStartScheduler+0xc4>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004b12:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <vTaskStartScheduler+0xc8>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b18:	f001 f88a 	bl	8005c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b1c:	e00e      	b.n	8004b3c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b24:	d10a      	bne.n	8004b3c <vTaskStartScheduler+0xac>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	60fb      	str	r3, [r7, #12]
}
 8004b38:	bf00      	nop
 8004b3a:	e7fe      	b.n	8004b3a <vTaskStartScheduler+0xaa>
}
 8004b3c:	bf00      	nop
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	0800643c 	.word	0x0800643c
 8004b48:	0800517d 	.word	0x0800517d
 8004b4c:	20000d08 	.word	0x20000d08
 8004b50:	20000d04 	.word	0x20000d04
 8004b54:	20000cf0 	.word	0x20000cf0
 8004b58:	20000ce8 	.word	0x20000ce8

08004b5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004b60:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <vTaskSuspendAll+0x18>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3301      	adds	r3, #1
 8004b66:	4a03      	ldr	r2, [pc, #12]	; (8004b74 <vTaskSuspendAll+0x18>)
 8004b68:	6013      	str	r3, [r2, #0]
}
 8004b6a:	bf00      	nop
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	20000d0c 	.word	0x20000d0c

08004b78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b86:	4b42      	ldr	r3, [pc, #264]	; (8004c90 <xTaskResumeAll+0x118>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	603b      	str	r3, [r7, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	e7fe      	b.n	8004ba2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ba4:	f001 f8e6 	bl	8005d74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ba8:	4b39      	ldr	r3, [pc, #228]	; (8004c90 <xTaskResumeAll+0x118>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	4a38      	ldr	r2, [pc, #224]	; (8004c90 <xTaskResumeAll+0x118>)
 8004bb0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bb2:	4b37      	ldr	r3, [pc, #220]	; (8004c90 <xTaskResumeAll+0x118>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d162      	bne.n	8004c80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004bba:	4b36      	ldr	r3, [pc, #216]	; (8004c94 <xTaskResumeAll+0x11c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d05e      	beq.n	8004c80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bc2:	e02f      	b.n	8004c24 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004bc4:	4b34      	ldr	r3, [pc, #208]	; (8004c98 <xTaskResumeAll+0x120>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	3318      	adds	r3, #24
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fe ffc3 	bl	8003b5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe ffbe 	bl	8003b5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be4:	4b2d      	ldr	r3, [pc, #180]	; (8004c9c <xTaskResumeAll+0x124>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d903      	bls.n	8004bf4 <xTaskResumeAll+0x7c>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	4a2a      	ldr	r2, [pc, #168]	; (8004c9c <xTaskResumeAll+0x124>)
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4a27      	ldr	r2, [pc, #156]	; (8004ca0 <xTaskResumeAll+0x128>)
 8004c02:	441a      	add	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f7fe ff49 	bl	8003aa2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c14:	4b23      	ldr	r3, [pc, #140]	; (8004ca4 <xTaskResumeAll+0x12c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d302      	bcc.n	8004c24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004c1e:	4b22      	ldr	r3, [pc, #136]	; (8004ca8 <xTaskResumeAll+0x130>)
 8004c20:	2201      	movs	r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c24:	4b1c      	ldr	r3, [pc, #112]	; (8004c98 <xTaskResumeAll+0x120>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1cb      	bne.n	8004bc4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c32:	f000 fb59 	bl	80052e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004c36:	4b1d      	ldr	r3, [pc, #116]	; (8004cac <xTaskResumeAll+0x134>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d010      	beq.n	8004c64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c42:	f000 f847 	bl	8004cd4 <xTaskIncrementTick>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004c4c:	4b16      	ldr	r3, [pc, #88]	; (8004ca8 <xTaskResumeAll+0x130>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f1      	bne.n	8004c42 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004c5e:	4b13      	ldr	r3, [pc, #76]	; (8004cac <xTaskResumeAll+0x134>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c64:	4b10      	ldr	r3, [pc, #64]	; (8004ca8 <xTaskResumeAll+0x130>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d009      	beq.n	8004c80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c70:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <xTaskResumeAll+0x138>)
 8004c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c80:	f001 f8a8 	bl	8005dd4 <vPortExitCritical>

	return xAlreadyYielded;
 8004c84:	68bb      	ldr	r3, [r7, #8]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000d0c 	.word	0x20000d0c
 8004c94:	20000ce4 	.word	0x20000ce4
 8004c98:	20000ca4 	.word	0x20000ca4
 8004c9c:	20000cec 	.word	0x20000cec
 8004ca0:	20000814 	.word	0x20000814
 8004ca4:	20000810 	.word	0x20000810
 8004ca8:	20000cf8 	.word	0x20000cf8
 8004cac:	20000cf4 	.word	0x20000cf4
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004cba:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <xTaskGetTickCount+0x1c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004cc0:	687b      	ldr	r3, [r7, #4]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	20000ce8 	.word	0x20000ce8

08004cd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cde:	4b51      	ldr	r3, [pc, #324]	; (8004e24 <xTaskIncrementTick+0x150>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f040 808e 	bne.w	8004e04 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ce8:	4b4f      	ldr	r3, [pc, #316]	; (8004e28 <xTaskIncrementTick+0x154>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3301      	adds	r3, #1
 8004cee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cf0:	4a4d      	ldr	r2, [pc, #308]	; (8004e28 <xTaskIncrementTick+0x154>)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d120      	bne.n	8004d3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004cfc:	4b4b      	ldr	r3, [pc, #300]	; (8004e2c <xTaskIncrementTick+0x158>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <xTaskIncrementTick+0x48>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	603b      	str	r3, [r7, #0]
}
 8004d18:	bf00      	nop
 8004d1a:	e7fe      	b.n	8004d1a <xTaskIncrementTick+0x46>
 8004d1c:	4b43      	ldr	r3, [pc, #268]	; (8004e2c <xTaskIncrementTick+0x158>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	4b43      	ldr	r3, [pc, #268]	; (8004e30 <xTaskIncrementTick+0x15c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a41      	ldr	r2, [pc, #260]	; (8004e2c <xTaskIncrementTick+0x158>)
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	4a41      	ldr	r2, [pc, #260]	; (8004e30 <xTaskIncrementTick+0x15c>)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4b40      	ldr	r3, [pc, #256]	; (8004e34 <xTaskIncrementTick+0x160>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3301      	adds	r3, #1
 8004d36:	4a3f      	ldr	r2, [pc, #252]	; (8004e34 <xTaskIncrementTick+0x160>)
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	f000 fad5 	bl	80052e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d3e:	4b3e      	ldr	r3, [pc, #248]	; (8004e38 <xTaskIncrementTick+0x164>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d34e      	bcc.n	8004de6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d48:	4b38      	ldr	r3, [pc, #224]	; (8004e2c <xTaskIncrementTick+0x158>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <xTaskIncrementTick+0x82>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e000      	b.n	8004d58 <xTaskIncrementTick+0x84>
 8004d56:	2300      	movs	r3, #0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d004      	beq.n	8004d66 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d5c:	4b36      	ldr	r3, [pc, #216]	; (8004e38 <xTaskIncrementTick+0x164>)
 8004d5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d62:	601a      	str	r2, [r3, #0]
					break;
 8004d64:	e03f      	b.n	8004de6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d66:	4b31      	ldr	r3, [pc, #196]	; (8004e2c <xTaskIncrementTick+0x158>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d203      	bcs.n	8004d86 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d7e:	4a2e      	ldr	r2, [pc, #184]	; (8004e38 <xTaskIncrementTick+0x164>)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6013      	str	r3, [r2, #0]
						break;
 8004d84:	e02f      	b.n	8004de6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fe fee6 	bl	8003b5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d004      	beq.n	8004da2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	3318      	adds	r3, #24
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fe fedd 	bl	8003b5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da6:	4b25      	ldr	r3, [pc, #148]	; (8004e3c <xTaskIncrementTick+0x168>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d903      	bls.n	8004db6 <xTaskIncrementTick+0xe2>
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db2:	4a22      	ldr	r2, [pc, #136]	; (8004e3c <xTaskIncrementTick+0x168>)
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <xTaskIncrementTick+0x16c>)
 8004dc4:	441a      	add	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4610      	mov	r0, r2
 8004dce:	f7fe fe68 	bl	8003aa2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd6:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <xTaskIncrementTick+0x170>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d3b3      	bcc.n	8004d48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004de0:	2301      	movs	r3, #1
 8004de2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004de4:	e7b0      	b.n	8004d48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004de6:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <xTaskIncrementTick+0x170>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dec:	4914      	ldr	r1, [pc, #80]	; (8004e40 <xTaskIncrementTick+0x16c>)
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d907      	bls.n	8004e0e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	e004      	b.n	8004e0e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004e04:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <xTaskIncrementTick+0x174>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	4a0f      	ldr	r2, [pc, #60]	; (8004e48 <xTaskIncrementTick+0x174>)
 8004e0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004e0e:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <xTaskIncrementTick+0x178>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004e16:	2301      	movs	r3, #1
 8004e18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004e1a:	697b      	ldr	r3, [r7, #20]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	20000d0c 	.word	0x20000d0c
 8004e28:	20000ce8 	.word	0x20000ce8
 8004e2c:	20000c9c 	.word	0x20000c9c
 8004e30:	20000ca0 	.word	0x20000ca0
 8004e34:	20000cfc 	.word	0x20000cfc
 8004e38:	20000d04 	.word	0x20000d04
 8004e3c:	20000cec 	.word	0x20000cec
 8004e40:	20000814 	.word	0x20000814
 8004e44:	20000810 	.word	0x20000810
 8004e48:	20000cf4 	.word	0x20000cf4
 8004e4c:	20000cf8 	.word	0x20000cf8

08004e50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e56:	4b28      	ldr	r3, [pc, #160]	; (8004ef8 <vTaskSwitchContext+0xa8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e5e:	4b27      	ldr	r3, [pc, #156]	; (8004efc <vTaskSwitchContext+0xac>)
 8004e60:	2201      	movs	r2, #1
 8004e62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e64:	e041      	b.n	8004eea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004e66:	4b25      	ldr	r3, [pc, #148]	; (8004efc <vTaskSwitchContext+0xac>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e6c:	4b24      	ldr	r3, [pc, #144]	; (8004f00 <vTaskSwitchContext+0xb0>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	e010      	b.n	8004e96 <vTaskSwitchContext+0x46>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <vTaskSwitchContext+0x40>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	607b      	str	r3, [r7, #4]
}
 8004e8c:	bf00      	nop
 8004e8e:	e7fe      	b.n	8004e8e <vTaskSwitchContext+0x3e>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	491b      	ldr	r1, [pc, #108]	; (8004f04 <vTaskSwitchContext+0xb4>)
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0e4      	beq.n	8004e74 <vTaskSwitchContext+0x24>
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4a13      	ldr	r2, [pc, #76]	; (8004f04 <vTaskSwitchContext+0xb4>)
 8004eb6:	4413      	add	r3, r2
 8004eb8:	60bb      	str	r3, [r7, #8]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	605a      	str	r2, [r3, #4]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	3308      	adds	r3, #8
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d104      	bne.n	8004eda <vTaskSwitchContext+0x8a>
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	605a      	str	r2, [r3, #4]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4a09      	ldr	r2, [pc, #36]	; (8004f08 <vTaskSwitchContext+0xb8>)
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	4a06      	ldr	r2, [pc, #24]	; (8004f00 <vTaskSwitchContext+0xb0>)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6013      	str	r3, [r2, #0]
}
 8004eea:	bf00      	nop
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	20000d0c 	.word	0x20000d0c
 8004efc:	20000cf8 	.word	0x20000cf8
 8004f00:	20000cec 	.word	0x20000cec
 8004f04:	20000814 	.word	0x20000814
 8004f08:	20000810 	.word	0x20000810

08004f0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10a      	bne.n	8004f32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f20:	f383 8811 	msr	BASEPRI, r3
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	60fb      	str	r3, [r7, #12]
}
 8004f2e:	bf00      	nop
 8004f30:	e7fe      	b.n	8004f30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f32:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <vTaskPlaceOnEventList+0x44>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3318      	adds	r3, #24
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fe fdd5 	bl	8003aea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f40:	2101      	movs	r1, #1
 8004f42:	6838      	ldr	r0, [r7, #0]
 8004f44:	f000 fa82 	bl	800544c <prvAddCurrentTaskToDelayedList>
}
 8004f48:	bf00      	nop
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20000810 	.word	0x20000810

08004f54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	617b      	str	r3, [r7, #20]
}
 8004f78:	bf00      	nop
 8004f7a:	e7fe      	b.n	8004f7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f7c:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3318      	adds	r3, #24
 8004f82:	4619      	mov	r1, r3
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f7fe fd8c 	bl	8003aa2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	68b8      	ldr	r0, [r7, #8]
 8004f9a:	f000 fa57 	bl	800544c <prvAddCurrentTaskToDelayedList>
	}
 8004f9e:	bf00      	nop
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20000810 	.word	0x20000810

08004fac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10a      	bne.n	8004fd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	60fb      	str	r3, [r7, #12]
}
 8004fd4:	bf00      	nop
 8004fd6:	e7fe      	b.n	8004fd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	3318      	adds	r3, #24
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fe fdbd 	bl	8003b5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fe2:	4b1e      	ldr	r3, [pc, #120]	; (800505c <xTaskRemoveFromEventList+0xb0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d11d      	bne.n	8005026 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	3304      	adds	r3, #4
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fe fdb4 	bl	8003b5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff8:	4b19      	ldr	r3, [pc, #100]	; (8005060 <xTaskRemoveFromEventList+0xb4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d903      	bls.n	8005008 <xTaskRemoveFromEventList+0x5c>
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	4a16      	ldr	r2, [pc, #88]	; (8005060 <xTaskRemoveFromEventList+0xb4>)
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4a13      	ldr	r2, [pc, #76]	; (8005064 <xTaskRemoveFromEventList+0xb8>)
 8005016:	441a      	add	r2, r3
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	3304      	adds	r3, #4
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f7fe fd3f 	bl	8003aa2 <vListInsertEnd>
 8005024:	e005      	b.n	8005032 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	3318      	adds	r3, #24
 800502a:	4619      	mov	r1, r3
 800502c:	480e      	ldr	r0, [pc, #56]	; (8005068 <xTaskRemoveFromEventList+0xbc>)
 800502e:	f7fe fd38 	bl	8003aa2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005036:	4b0d      	ldr	r3, [pc, #52]	; (800506c <xTaskRemoveFromEventList+0xc0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	429a      	cmp	r2, r3
 800503e:	d905      	bls.n	800504c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005040:	2301      	movs	r3, #1
 8005042:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005044:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <xTaskRemoveFromEventList+0xc4>)
 8005046:	2201      	movs	r2, #1
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	e001      	b.n	8005050 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005050:	697b      	ldr	r3, [r7, #20]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000d0c 	.word	0x20000d0c
 8005060:	20000cec 	.word	0x20000cec
 8005064:	20000814 	.word	0x20000814
 8005068:	20000ca4 	.word	0x20000ca4
 800506c:	20000810 	.word	0x20000810
 8005070:	20000cf8 	.word	0x20000cf8

08005074 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800507c:	4b06      	ldr	r3, [pc, #24]	; (8005098 <vTaskInternalSetTimeOutState+0x24>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005084:	4b05      	ldr	r3, [pc, #20]	; (800509c <vTaskInternalSetTimeOutState+0x28>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	605a      	str	r2, [r3, #4]
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	20000cfc 	.word	0x20000cfc
 800509c:	20000ce8 	.word	0x20000ce8

080050a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	613b      	str	r3, [r7, #16]
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10a      	bne.n	80050e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	60fb      	str	r3, [r7, #12]
}
 80050de:	bf00      	nop
 80050e0:	e7fe      	b.n	80050e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80050e2:	f000 fe47 	bl	8005d74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80050e6:	4b1d      	ldr	r3, [pc, #116]	; (800515c <xTaskCheckForTimeOut+0xbc>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050fe:	d102      	bne.n	8005106 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005100:	2300      	movs	r3, #0
 8005102:	61fb      	str	r3, [r7, #28]
 8005104:	e023      	b.n	800514e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	4b15      	ldr	r3, [pc, #84]	; (8005160 <xTaskCheckForTimeOut+0xc0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d007      	beq.n	8005122 <xTaskCheckForTimeOut+0x82>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	429a      	cmp	r2, r3
 800511a:	d302      	bcc.n	8005122 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800511c:	2301      	movs	r3, #1
 800511e:	61fb      	str	r3, [r7, #28]
 8005120:	e015      	b.n	800514e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	429a      	cmp	r2, r3
 800512a:	d20b      	bcs.n	8005144 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	1ad2      	subs	r2, r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff ff9b 	bl	8005074 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800513e:	2300      	movs	r3, #0
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	e004      	b.n	800514e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800514a:	2301      	movs	r3, #1
 800514c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800514e:	f000 fe41 	bl	8005dd4 <vPortExitCritical>

	return xReturn;
 8005152:	69fb      	ldr	r3, [r7, #28]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3720      	adds	r7, #32
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	20000ce8 	.word	0x20000ce8
 8005160:	20000cfc 	.word	0x20000cfc

08005164 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005168:	4b03      	ldr	r3, [pc, #12]	; (8005178 <vTaskMissedYield+0x14>)
 800516a:	2201      	movs	r2, #1
 800516c:	601a      	str	r2, [r3, #0]
}
 800516e:	bf00      	nop
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	20000cf8 	.word	0x20000cf8

0800517c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005184:	f000 f852 	bl	800522c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005188:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <prvIdleTask+0x28>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d9f9      	bls.n	8005184 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005190:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <prvIdleTask+0x2c>)
 8005192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051a0:	e7f0      	b.n	8005184 <prvIdleTask+0x8>
 80051a2:	bf00      	nop
 80051a4:	20000814 	.word	0x20000814
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051b2:	2300      	movs	r3, #0
 80051b4:	607b      	str	r3, [r7, #4]
 80051b6:	e00c      	b.n	80051d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4a12      	ldr	r2, [pc, #72]	; (800520c <prvInitialiseTaskLists+0x60>)
 80051c4:	4413      	add	r3, r2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe fc3e 	bl	8003a48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3301      	adds	r3, #1
 80051d0:	607b      	str	r3, [r7, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b37      	cmp	r3, #55	; 0x37
 80051d6:	d9ef      	bls.n	80051b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051d8:	480d      	ldr	r0, [pc, #52]	; (8005210 <prvInitialiseTaskLists+0x64>)
 80051da:	f7fe fc35 	bl	8003a48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051de:	480d      	ldr	r0, [pc, #52]	; (8005214 <prvInitialiseTaskLists+0x68>)
 80051e0:	f7fe fc32 	bl	8003a48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051e4:	480c      	ldr	r0, [pc, #48]	; (8005218 <prvInitialiseTaskLists+0x6c>)
 80051e6:	f7fe fc2f 	bl	8003a48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80051ea:	480c      	ldr	r0, [pc, #48]	; (800521c <prvInitialiseTaskLists+0x70>)
 80051ec:	f7fe fc2c 	bl	8003a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80051f0:	480b      	ldr	r0, [pc, #44]	; (8005220 <prvInitialiseTaskLists+0x74>)
 80051f2:	f7fe fc29 	bl	8003a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80051f6:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <prvInitialiseTaskLists+0x78>)
 80051f8:	4a05      	ldr	r2, [pc, #20]	; (8005210 <prvInitialiseTaskLists+0x64>)
 80051fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051fc:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <prvInitialiseTaskLists+0x7c>)
 80051fe:	4a05      	ldr	r2, [pc, #20]	; (8005214 <prvInitialiseTaskLists+0x68>)
 8005200:	601a      	str	r2, [r3, #0]
}
 8005202:	bf00      	nop
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20000814 	.word	0x20000814
 8005210:	20000c74 	.word	0x20000c74
 8005214:	20000c88 	.word	0x20000c88
 8005218:	20000ca4 	.word	0x20000ca4
 800521c:	20000cb8 	.word	0x20000cb8
 8005220:	20000cd0 	.word	0x20000cd0
 8005224:	20000c9c 	.word	0x20000c9c
 8005228:	20000ca0 	.word	0x20000ca0

0800522c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005232:	e019      	b.n	8005268 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005234:	f000 fd9e 	bl	8005d74 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005238:	4b10      	ldr	r3, [pc, #64]	; (800527c <prvCheckTasksWaitingTermination+0x50>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3304      	adds	r3, #4
 8005244:	4618      	mov	r0, r3
 8005246:	f7fe fc89 	bl	8003b5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800524a:	4b0d      	ldr	r3, [pc, #52]	; (8005280 <prvCheckTasksWaitingTermination+0x54>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3b01      	subs	r3, #1
 8005250:	4a0b      	ldr	r2, [pc, #44]	; (8005280 <prvCheckTasksWaitingTermination+0x54>)
 8005252:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005254:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <prvCheckTasksWaitingTermination+0x58>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3b01      	subs	r3, #1
 800525a:	4a0a      	ldr	r2, [pc, #40]	; (8005284 <prvCheckTasksWaitingTermination+0x58>)
 800525c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800525e:	f000 fdb9 	bl	8005dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f810 	bl	8005288 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005268:	4b06      	ldr	r3, [pc, #24]	; (8005284 <prvCheckTasksWaitingTermination+0x58>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e1      	bne.n	8005234 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005270:	bf00      	nop
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000cb8 	.word	0x20000cb8
 8005280:	20000ce4 	.word	0x20000ce4
 8005284:	20000ccc 	.word	0x20000ccc

08005288 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005296:	2b00      	cmp	r3, #0
 8005298:	d108      	bne.n	80052ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 ff4e 	bl	8006140 <vPortFree>
				vPortFree( pxTCB );
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 ff4b 	bl	8006140 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052aa:	e018      	b.n	80052de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d103      	bne.n	80052be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 ff42 	bl	8006140 <vPortFree>
	}
 80052bc:	e00f      	b.n	80052de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d00a      	beq.n	80052de <prvDeleteTCB+0x56>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	60fb      	str	r3, [r7, #12]
}
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <prvDeleteTCB+0x54>
	}
 80052de:	bf00      	nop
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052ee:	4b0f      	ldr	r3, [pc, #60]	; (800532c <prvResetNextTaskUnblockTime+0x44>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <prvResetNextTaskUnblockTime+0x14>
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <prvResetNextTaskUnblockTime+0x16>
 80052fc:	2300      	movs	r3, #0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d004      	beq.n	800530c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005302:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <prvResetNextTaskUnblockTime+0x48>)
 8005304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005308:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800530a:	e008      	b.n	800531e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800530c:	4b07      	ldr	r3, [pc, #28]	; (800532c <prvResetNextTaskUnblockTime+0x44>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	4a05      	ldr	r2, [pc, #20]	; (8005330 <prvResetNextTaskUnblockTime+0x48>)
 800531c:	6013      	str	r3, [r2, #0]
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20000c9c 	.word	0x20000c9c
 8005330:	20000d04 	.word	0x20000d04

08005334 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800533a:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <xTaskGetSchedulerState+0x34>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d102      	bne.n	8005348 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005342:	2301      	movs	r3, #1
 8005344:	607b      	str	r3, [r7, #4]
 8005346:	e008      	b.n	800535a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005348:	4b08      	ldr	r3, [pc, #32]	; (800536c <xTaskGetSchedulerState+0x38>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d102      	bne.n	8005356 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005350:	2302      	movs	r3, #2
 8005352:	607b      	str	r3, [r7, #4]
 8005354:	e001      	b.n	800535a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005356:	2300      	movs	r3, #0
 8005358:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800535a:	687b      	ldr	r3, [r7, #4]
	}
 800535c:	4618      	mov	r0, r3
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	20000cf0 	.word	0x20000cf0
 800536c:	20000d0c 	.word	0x20000d0c

08005370 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800537c:	2300      	movs	r3, #0
 800537e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d056      	beq.n	8005434 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005386:	4b2e      	ldr	r3, [pc, #184]	; (8005440 <xTaskPriorityDisinherit+0xd0>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	429a      	cmp	r2, r3
 800538e:	d00a      	beq.n	80053a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	60fb      	str	r3, [r7, #12]
}
 80053a2:	bf00      	nop
 80053a4:	e7fe      	b.n	80053a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	60bb      	str	r3, [r7, #8]
}
 80053c0:	bf00      	nop
 80053c2:	e7fe      	b.n	80053c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c8:	1e5a      	subs	r2, r3, #1
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d02c      	beq.n	8005434 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d128      	bne.n	8005434 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	3304      	adds	r3, #4
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fe fbb8 	bl	8003b5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005404:	4b0f      	ldr	r3, [pc, #60]	; (8005444 <xTaskPriorityDisinherit+0xd4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d903      	bls.n	8005414 <xTaskPriorityDisinherit+0xa4>
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	4a0c      	ldr	r2, [pc, #48]	; (8005444 <xTaskPriorityDisinherit+0xd4>)
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4a09      	ldr	r2, [pc, #36]	; (8005448 <xTaskPriorityDisinherit+0xd8>)
 8005422:	441a      	add	r2, r3
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	3304      	adds	r3, #4
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f7fe fb39 	bl	8003aa2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005430:	2301      	movs	r3, #1
 8005432:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005434:	697b      	ldr	r3, [r7, #20]
	}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20000810 	.word	0x20000810
 8005444:	20000cec 	.word	0x20000cec
 8005448:	20000814 	.word	0x20000814

0800544c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005456:	4b21      	ldr	r3, [pc, #132]	; (80054dc <prvAddCurrentTaskToDelayedList+0x90>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800545c:	4b20      	ldr	r3, [pc, #128]	; (80054e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3304      	adds	r3, #4
 8005462:	4618      	mov	r0, r3
 8005464:	f7fe fb7a 	bl	8003b5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800546e:	d10a      	bne.n	8005486 <prvAddCurrentTaskToDelayedList+0x3a>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005476:	4b1a      	ldr	r3, [pc, #104]	; (80054e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3304      	adds	r3, #4
 800547c:	4619      	mov	r1, r3
 800547e:	4819      	ldr	r0, [pc, #100]	; (80054e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005480:	f7fe fb0f 	bl	8003aa2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005484:	e026      	b.n	80054d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4413      	add	r3, r2
 800548c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800548e:	4b14      	ldr	r3, [pc, #80]	; (80054e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	429a      	cmp	r2, r3
 800549c:	d209      	bcs.n	80054b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800549e:	4b12      	ldr	r3, [pc, #72]	; (80054e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	4b0f      	ldr	r3, [pc, #60]	; (80054e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4619      	mov	r1, r3
 80054aa:	4610      	mov	r0, r2
 80054ac:	f7fe fb1d 	bl	8003aea <vListInsert>
}
 80054b0:	e010      	b.n	80054d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054b2:	4b0e      	ldr	r3, [pc, #56]	; (80054ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	4b0a      	ldr	r3, [pc, #40]	; (80054e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3304      	adds	r3, #4
 80054bc:	4619      	mov	r1, r3
 80054be:	4610      	mov	r0, r2
 80054c0:	f7fe fb13 	bl	8003aea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054c4:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d202      	bcs.n	80054d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80054ce:	4a08      	ldr	r2, [pc, #32]	; (80054f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	6013      	str	r3, [r2, #0]
}
 80054d4:	bf00      	nop
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000ce8 	.word	0x20000ce8
 80054e0:	20000810 	.word	0x20000810
 80054e4:	20000cd0 	.word	0x20000cd0
 80054e8:	20000ca0 	.word	0x20000ca0
 80054ec:	20000c9c 	.word	0x20000c9c
 80054f0:	20000d04 	.word	0x20000d04

080054f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08a      	sub	sp, #40	; 0x28
 80054f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80054fe:	f000 facb 	bl	8005a98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005502:	4b1c      	ldr	r3, [pc, #112]	; (8005574 <xTimerCreateTimerTask+0x80>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d021      	beq.n	800554e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800550e:	2300      	movs	r3, #0
 8005510:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005512:	1d3a      	adds	r2, r7, #4
 8005514:	f107 0108 	add.w	r1, r7, #8
 8005518:	f107 030c 	add.w	r3, r7, #12
 800551c:	4618      	mov	r0, r3
 800551e:	f7fe fa79 	bl	8003a14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	9202      	str	r2, [sp, #8]
 800552a:	9301      	str	r3, [sp, #4]
 800552c:	2302      	movs	r3, #2
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	2300      	movs	r3, #0
 8005532:	460a      	mov	r2, r1
 8005534:	4910      	ldr	r1, [pc, #64]	; (8005578 <xTimerCreateTimerTask+0x84>)
 8005536:	4811      	ldr	r0, [pc, #68]	; (800557c <xTimerCreateTimerTask+0x88>)
 8005538:	f7ff f8de 	bl	80046f8 <xTaskCreateStatic>
 800553c:	4603      	mov	r3, r0
 800553e:	4a10      	ldr	r2, [pc, #64]	; (8005580 <xTimerCreateTimerTask+0x8c>)
 8005540:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005542:	4b0f      	ldr	r3, [pc, #60]	; (8005580 <xTimerCreateTimerTask+0x8c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800554a:	2301      	movs	r3, #1
 800554c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	613b      	str	r3, [r7, #16]
}
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800556a:	697b      	ldr	r3, [r7, #20]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3718      	adds	r7, #24
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	20000d40 	.word	0x20000d40
 8005578:	08006444 	.word	0x08006444
 800557c:	080056a1 	.word	0x080056a1
 8005580:	20000d44 	.word	0x20000d44

08005584 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b08a      	sub	sp, #40	; 0x28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005592:	2300      	movs	r3, #0
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10a      	bne.n	80055b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	623b      	str	r3, [r7, #32]
}
 80055ae:	bf00      	nop
 80055b0:	e7fe      	b.n	80055b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80055b2:	4b1a      	ldr	r3, [pc, #104]	; (800561c <xTimerGenericCommand+0x98>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d02a      	beq.n	8005610 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b05      	cmp	r3, #5
 80055ca:	dc18      	bgt.n	80055fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80055cc:	f7ff feb2 	bl	8005334 <xTaskGetSchedulerState>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d109      	bne.n	80055ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80055d6:	4b11      	ldr	r3, [pc, #68]	; (800561c <xTimerGenericCommand+0x98>)
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	f107 0110 	add.w	r1, r7, #16
 80055de:	2300      	movs	r3, #0
 80055e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e2:	f7fe fc25 	bl	8003e30 <xQueueGenericSend>
 80055e6:	6278      	str	r0, [r7, #36]	; 0x24
 80055e8:	e012      	b.n	8005610 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80055ea:	4b0c      	ldr	r3, [pc, #48]	; (800561c <xTimerGenericCommand+0x98>)
 80055ec:	6818      	ldr	r0, [r3, #0]
 80055ee:	f107 0110 	add.w	r1, r7, #16
 80055f2:	2300      	movs	r3, #0
 80055f4:	2200      	movs	r2, #0
 80055f6:	f7fe fc1b 	bl	8003e30 <xQueueGenericSend>
 80055fa:	6278      	str	r0, [r7, #36]	; 0x24
 80055fc:	e008      	b.n	8005610 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055fe:	4b07      	ldr	r3, [pc, #28]	; (800561c <xTimerGenericCommand+0x98>)
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	f107 0110 	add.w	r1, r7, #16
 8005606:	2300      	movs	r3, #0
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	f7fe fd0f 	bl	800402c <xQueueGenericSendFromISR>
 800560e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005612:	4618      	mov	r0, r3
 8005614:	3728      	adds	r7, #40	; 0x28
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	20000d40 	.word	0x20000d40

08005620 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af02      	add	r7, sp, #8
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800562a:	4b1c      	ldr	r3, [pc, #112]	; (800569c <prvProcessExpiredTimer+0x7c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	3304      	adds	r3, #4
 8005638:	4618      	mov	r0, r3
 800563a:	f7fe fa8f 	bl	8003b5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d122      	bne.n	800568c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	18d1      	adds	r1, r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	6978      	ldr	r0, [r7, #20]
 8005654:	f000 f8c8 	bl	80057e8 <prvInsertTimerInActiveList>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d016      	beq.n	800568c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800565e:	2300      	movs	r3, #0
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	2300      	movs	r3, #0
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	2100      	movs	r1, #0
 8005668:	6978      	ldr	r0, [r7, #20]
 800566a:	f7ff ff8b 	bl	8005584 <xTimerGenericCommand>
 800566e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10a      	bne.n	800568c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	60fb      	str	r3, [r7, #12]
}
 8005688:	bf00      	nop
 800568a:	e7fe      	b.n	800568a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	6978      	ldr	r0, [r7, #20]
 8005692:	4798      	blx	r3
}
 8005694:	bf00      	nop
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	20000d38 	.word	0x20000d38

080056a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056a8:	f107 0308 	add.w	r3, r7, #8
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 f857 	bl	8005760 <prvGetNextExpireTime>
 80056b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	4619      	mov	r1, r3
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 f803 	bl	80056c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80056be:	f000 f8d5 	bl	800586c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056c2:	e7f1      	b.n	80056a8 <prvTimerTask+0x8>

080056c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80056ce:	f7ff fa45 	bl	8004b5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056d2:	f107 0308 	add.w	r3, r7, #8
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 f866 	bl	80057a8 <prvSampleTimeNow>
 80056dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d130      	bne.n	8005746 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <prvProcessTimerOrBlockTask+0x3c>
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d806      	bhi.n	8005700 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80056f2:	f7ff fa41 	bl	8004b78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80056f6:	68f9      	ldr	r1, [r7, #12]
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff ff91 	bl	8005620 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80056fe:	e024      	b.n	800574a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d008      	beq.n	8005718 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005706:	4b13      	ldr	r3, [pc, #76]	; (8005754 <prvProcessTimerOrBlockTask+0x90>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	bf0c      	ite	eq
 8005710:	2301      	moveq	r3, #1
 8005712:	2300      	movne	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005718:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <prvProcessTimerOrBlockTask+0x94>)
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	4619      	mov	r1, r3
 8005726:	f7fe ffb3 	bl	8004690 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800572a:	f7ff fa25 	bl	8004b78 <xTaskResumeAll>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005734:	4b09      	ldr	r3, [pc, #36]	; (800575c <prvProcessTimerOrBlockTask+0x98>)
 8005736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	f3bf 8f6f 	isb	sy
}
 8005744:	e001      	b.n	800574a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005746:	f7ff fa17 	bl	8004b78 <xTaskResumeAll>
}
 800574a:	bf00      	nop
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000d3c 	.word	0x20000d3c
 8005758:	20000d40 	.word	0x20000d40
 800575c:	e000ed04 	.word	0xe000ed04

08005760 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005768:	4b0e      	ldr	r3, [pc, #56]	; (80057a4 <prvGetNextExpireTime+0x44>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	bf0c      	ite	eq
 8005772:	2301      	moveq	r3, #1
 8005774:	2300      	movne	r3, #0
 8005776:	b2db      	uxtb	r3, r3
 8005778:	461a      	mov	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d105      	bne.n	8005792 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005786:	4b07      	ldr	r3, [pc, #28]	; (80057a4 <prvGetNextExpireTime+0x44>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	e001      	b.n	8005796 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005796:	68fb      	ldr	r3, [r7, #12]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	20000d38 	.word	0x20000d38

080057a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80057b0:	f7ff fa80 	bl	8004cb4 <xTaskGetTickCount>
 80057b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80057b6:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <prvSampleTimeNow+0x3c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d205      	bcs.n	80057cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80057c0:	f000 f908 	bl	80059d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	e002      	b.n	80057d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80057d2:	4a04      	ldr	r2, [pc, #16]	; (80057e4 <prvSampleTimeNow+0x3c>)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80057d8:	68fb      	ldr	r3, [r7, #12]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000d48 	.word	0x20000d48

080057e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	429a      	cmp	r2, r3
 800580c:	d812      	bhi.n	8005834 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	1ad2      	subs	r2, r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	429a      	cmp	r2, r3
 800581a:	d302      	bcc.n	8005822 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800581c:	2301      	movs	r3, #1
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	e01b      	b.n	800585a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005822:	4b10      	ldr	r3, [pc, #64]	; (8005864 <prvInsertTimerInActiveList+0x7c>)
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3304      	adds	r3, #4
 800582a:	4619      	mov	r1, r3
 800582c:	4610      	mov	r0, r2
 800582e:	f7fe f95c 	bl	8003aea <vListInsert>
 8005832:	e012      	b.n	800585a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d206      	bcs.n	800584a <prvInsertTimerInActiveList+0x62>
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d302      	bcc.n	800584a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005844:	2301      	movs	r3, #1
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	e007      	b.n	800585a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800584a:	4b07      	ldr	r3, [pc, #28]	; (8005868 <prvInsertTimerInActiveList+0x80>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3304      	adds	r3, #4
 8005852:	4619      	mov	r1, r3
 8005854:	4610      	mov	r0, r2
 8005856:	f7fe f948 	bl	8003aea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800585a:	697b      	ldr	r3, [r7, #20]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20000d3c 	.word	0x20000d3c
 8005868:	20000d38 	.word	0x20000d38

0800586c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08e      	sub	sp, #56	; 0x38
 8005870:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005872:	e09d      	b.n	80059b0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	da18      	bge.n	80058ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800587a:	1d3b      	adds	r3, r7, #4
 800587c:	3304      	adds	r3, #4
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	61fb      	str	r3, [r7, #28]
}
 8005898:	bf00      	nop
 800589a:	e7fe      	b.n	800589a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a2:	6850      	ldr	r0, [r2, #4]
 80058a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a6:	6892      	ldr	r2, [r2, #8]
 80058a8:	4611      	mov	r1, r2
 80058aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	db7e      	blt.n	80059b0 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80058b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d004      	beq.n	80058c8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	3304      	adds	r3, #4
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fe f94a 	bl	8003b5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058c8:	463b      	mov	r3, r7
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7ff ff6c 	bl	80057a8 <prvSampleTimeNow>
 80058d0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b09      	cmp	r3, #9
 80058d6:	d86a      	bhi.n	80059ae <prvProcessReceivedCommands+0x142>
 80058d8:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <prvProcessReceivedCommands+0x74>)
 80058da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058de:	bf00      	nop
 80058e0:	08005909 	.word	0x08005909
 80058e4:	08005909 	.word	0x08005909
 80058e8:	08005909 	.word	0x08005909
 80058ec:	080059b1 	.word	0x080059b1
 80058f0:	08005965 	.word	0x08005965
 80058f4:	0800599d 	.word	0x0800599d
 80058f8:	08005909 	.word	0x08005909
 80058fc:	08005909 	.word	0x08005909
 8005900:	080059b1 	.word	0x080059b1
 8005904:	08005965 	.word	0x08005965
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	18d1      	adds	r1, r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005916:	f7ff ff67 	bl	80057e8 <prvInsertTimerInActiveList>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d047      	beq.n	80059b0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005926:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d13f      	bne.n	80059b0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	441a      	add	r2, r3
 8005938:	2300      	movs	r3, #0
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	2300      	movs	r3, #0
 800593e:	2100      	movs	r1, #0
 8005940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005942:	f7ff fe1f 	bl	8005584 <xTimerGenericCommand>
 8005946:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d130      	bne.n	80059b0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	61bb      	str	r3, [r7, #24]
}
 8005960:	bf00      	nop
 8005962:	e7fe      	b.n	8005962 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005968:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10a      	bne.n	8005988 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	617b      	str	r3, [r7, #20]
}
 8005984:	bf00      	nop
 8005986:	e7fe      	b.n	8005986 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	699a      	ldr	r2, [r3, #24]
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	18d1      	adds	r1, r2, r3
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005996:	f7ff ff27 	bl	80057e8 <prvInsertTimerInActiveList>
					break;
 800599a:	e009      	b.n	80059b0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d104      	bne.n	80059b0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80059a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059a8:	f000 fbca 	bl	8006140 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059ac:	e000      	b.n	80059b0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80059ae:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059b0:	4b07      	ldr	r3, [pc, #28]	; (80059d0 <prvProcessReceivedCommands+0x164>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	1d39      	adds	r1, r7, #4
 80059b6:	2200      	movs	r2, #0
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fe fbcf 	bl	800415c <xQueueReceive>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f47f af57 	bne.w	8005874 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80059c6:	bf00      	nop
 80059c8:	bf00      	nop
 80059ca:	3730      	adds	r7, #48	; 0x30
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20000d40 	.word	0x20000d40

080059d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059da:	e045      	b.n	8005a68 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059dc:	4b2c      	ldr	r3, [pc, #176]	; (8005a90 <prvSwitchTimerLists+0xbc>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059e6:	4b2a      	ldr	r3, [pc, #168]	; (8005a90 <prvSwitchTimerLists+0xbc>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3304      	adds	r3, #4
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fe f8b1 	bl	8003b5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d12e      	bne.n	8005a68 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	4413      	add	r3, r2
 8005a12:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d90e      	bls.n	8005a3a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a28:	4b19      	ldr	r3, [pc, #100]	; (8005a90 <prvSwitchTimerLists+0xbc>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	3304      	adds	r3, #4
 8005a30:	4619      	mov	r1, r3
 8005a32:	4610      	mov	r0, r2
 8005a34:	f7fe f859 	bl	8003aea <vListInsert>
 8005a38:	e016      	b.n	8005a68 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	2300      	movs	r3, #0
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	2100      	movs	r1, #0
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7ff fd9d 	bl	8005584 <xTimerGenericCommand>
 8005a4a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10a      	bne.n	8005a68 <prvSwitchTimerLists+0x94>
	__asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	603b      	str	r3, [r7, #0]
}
 8005a64:	bf00      	nop
 8005a66:	e7fe      	b.n	8005a66 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a68:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <prvSwitchTimerLists+0xbc>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1b4      	bne.n	80059dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a72:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <prvSwitchTimerLists+0xbc>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a78:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <prvSwitchTimerLists+0xc0>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a04      	ldr	r2, [pc, #16]	; (8005a90 <prvSwitchTimerLists+0xbc>)
 8005a7e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a80:	4a04      	ldr	r2, [pc, #16]	; (8005a94 <prvSwitchTimerLists+0xc0>)
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	6013      	str	r3, [r2, #0]
}
 8005a86:	bf00      	nop
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20000d38 	.word	0x20000d38
 8005a94:	20000d3c 	.word	0x20000d3c

08005a98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a9e:	f000 f969 	bl	8005d74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005aa2:	4b15      	ldr	r3, [pc, #84]	; (8005af8 <prvCheckForValidListAndQueue+0x60>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d120      	bne.n	8005aec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005aaa:	4814      	ldr	r0, [pc, #80]	; (8005afc <prvCheckForValidListAndQueue+0x64>)
 8005aac:	f7fd ffcc 	bl	8003a48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ab0:	4813      	ldr	r0, [pc, #76]	; (8005b00 <prvCheckForValidListAndQueue+0x68>)
 8005ab2:	f7fd ffc9 	bl	8003a48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ab6:	4b13      	ldr	r3, [pc, #76]	; (8005b04 <prvCheckForValidListAndQueue+0x6c>)
 8005ab8:	4a10      	ldr	r2, [pc, #64]	; (8005afc <prvCheckForValidListAndQueue+0x64>)
 8005aba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005abc:	4b12      	ldr	r3, [pc, #72]	; (8005b08 <prvCheckForValidListAndQueue+0x70>)
 8005abe:	4a10      	ldr	r2, [pc, #64]	; (8005b00 <prvCheckForValidListAndQueue+0x68>)
 8005ac0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	4b11      	ldr	r3, [pc, #68]	; (8005b0c <prvCheckForValidListAndQueue+0x74>)
 8005ac8:	4a11      	ldr	r2, [pc, #68]	; (8005b10 <prvCheckForValidListAndQueue+0x78>)
 8005aca:	2110      	movs	r1, #16
 8005acc:	200a      	movs	r0, #10
 8005ace:	f7fe f8d7 	bl	8003c80 <xQueueGenericCreateStatic>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	4a08      	ldr	r2, [pc, #32]	; (8005af8 <prvCheckForValidListAndQueue+0x60>)
 8005ad6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ad8:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <prvCheckForValidListAndQueue+0x60>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d005      	beq.n	8005aec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ae0:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <prvCheckForValidListAndQueue+0x60>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	490b      	ldr	r1, [pc, #44]	; (8005b14 <prvCheckForValidListAndQueue+0x7c>)
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fe fda8 	bl	800463c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005aec:	f000 f972 	bl	8005dd4 <vPortExitCritical>
}
 8005af0:	bf00      	nop
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000d40 	.word	0x20000d40
 8005afc:	20000d10 	.word	0x20000d10
 8005b00:	20000d24 	.word	0x20000d24
 8005b04:	20000d38 	.word	0x20000d38
 8005b08:	20000d3c 	.word	0x20000d3c
 8005b0c:	20000dec 	.word	0x20000dec
 8005b10:	20000d4c 	.word	0x20000d4c
 8005b14:	0800644c 	.word	0x0800644c

08005b18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3b04      	subs	r3, #4
 8005b28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3b04      	subs	r3, #4
 8005b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f023 0201 	bic.w	r2, r3, #1
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3b04      	subs	r3, #4
 8005b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b48:	4a0c      	ldr	r2, [pc, #48]	; (8005b7c <pxPortInitialiseStack+0x64>)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3b14      	subs	r3, #20
 8005b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3b04      	subs	r3, #4
 8005b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f06f 0202 	mvn.w	r2, #2
 8005b66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3b20      	subs	r3, #32
 8005b6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	08005b81 	.word	0x08005b81

08005b80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b8a:	4b12      	ldr	r3, [pc, #72]	; (8005bd4 <prvTaskExitError+0x54>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b92:	d00a      	beq.n	8005baa <prvTaskExitError+0x2a>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	60fb      	str	r3, [r7, #12]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <prvTaskExitError+0x28>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	60bb      	str	r3, [r7, #8]
}
 8005bbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bbe:	bf00      	nop
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0fc      	beq.n	8005bc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bc6:	bf00      	nop
 8005bc8:	bf00      	nop
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	2000000c 	.word	0x2000000c
	...

08005be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005be0:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <pxCurrentTCBConst2>)
 8005be2:	6819      	ldr	r1, [r3, #0]
 8005be4:	6808      	ldr	r0, [r1, #0]
 8005be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bea:	f380 8809 	msr	PSP, r0
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f04f 0000 	mov.w	r0, #0
 8005bf6:	f380 8811 	msr	BASEPRI, r0
 8005bfa:	4770      	bx	lr
 8005bfc:	f3af 8000 	nop.w

08005c00 <pxCurrentTCBConst2>:
 8005c00:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop

08005c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c08:	4808      	ldr	r0, [pc, #32]	; (8005c2c <prvPortStartFirstTask+0x24>)
 8005c0a:	6800      	ldr	r0, [r0, #0]
 8005c0c:	6800      	ldr	r0, [r0, #0]
 8005c0e:	f380 8808 	msr	MSP, r0
 8005c12:	f04f 0000 	mov.w	r0, #0
 8005c16:	f380 8814 	msr	CONTROL, r0
 8005c1a:	b662      	cpsie	i
 8005c1c:	b661      	cpsie	f
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	df00      	svc	0
 8005c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c2a:	bf00      	nop
 8005c2c:	e000ed08 	.word	0xe000ed08

08005c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c36:	4b46      	ldr	r3, [pc, #280]	; (8005d50 <xPortStartScheduler+0x120>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a46      	ldr	r2, [pc, #280]	; (8005d54 <xPortStartScheduler+0x124>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d10a      	bne.n	8005c56 <xPortStartScheduler+0x26>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	613b      	str	r3, [r7, #16]
}
 8005c52:	bf00      	nop
 8005c54:	e7fe      	b.n	8005c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c56:	4b3e      	ldr	r3, [pc, #248]	; (8005d50 <xPortStartScheduler+0x120>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a3f      	ldr	r2, [pc, #252]	; (8005d58 <xPortStartScheduler+0x128>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d10a      	bne.n	8005c76 <xPortStartScheduler+0x46>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	60fb      	str	r3, [r7, #12]
}
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c76:	4b39      	ldr	r3, [pc, #228]	; (8005d5c <xPortStartScheduler+0x12c>)
 8005c78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	22ff      	movs	r2, #255	; 0xff
 8005c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	4b31      	ldr	r3, [pc, #196]	; (8005d60 <xPortStartScheduler+0x130>)
 8005c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c9e:	4b31      	ldr	r3, [pc, #196]	; (8005d64 <xPortStartScheduler+0x134>)
 8005ca0:	2207      	movs	r2, #7
 8005ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ca4:	e009      	b.n	8005cba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ca6:	4b2f      	ldr	r3, [pc, #188]	; (8005d64 <xPortStartScheduler+0x134>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	4a2d      	ldr	r2, [pc, #180]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc2:	2b80      	cmp	r3, #128	; 0x80
 8005cc4:	d0ef      	beq.n	8005ca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cc6:	4b27      	ldr	r3, [pc, #156]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f1c3 0307 	rsb	r3, r3, #7
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d00a      	beq.n	8005ce8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	60bb      	str	r3, [r7, #8]
}
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ce8:	4b1e      	ldr	r3, [pc, #120]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	4a1d      	ldr	r2, [pc, #116]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005cf2:	4b1c      	ldr	r3, [pc, #112]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cfa:	4a1a      	ldr	r2, [pc, #104]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d06:	4b18      	ldr	r3, [pc, #96]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a17      	ldr	r2, [pc, #92]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d12:	4b15      	ldr	r3, [pc, #84]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a14      	ldr	r2, [pc, #80]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d1e:	f000 f8dd 	bl	8005edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d22:	4b12      	ldr	r3, [pc, #72]	; (8005d6c <xPortStartScheduler+0x13c>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d28:	f000 f8fc 	bl	8005f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d2c:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <xPortStartScheduler+0x140>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a0f      	ldr	r2, [pc, #60]	; (8005d70 <xPortStartScheduler+0x140>)
 8005d32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d38:	f7ff ff66 	bl	8005c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d3c:	f7ff f888 	bl	8004e50 <vTaskSwitchContext>
	prvTaskExitError();
 8005d40:	f7ff ff1e 	bl	8005b80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	e000ed00 	.word	0xe000ed00
 8005d54:	410fc271 	.word	0x410fc271
 8005d58:	410fc270 	.word	0x410fc270
 8005d5c:	e000e400 	.word	0xe000e400
 8005d60:	20000e3c 	.word	0x20000e3c
 8005d64:	20000e40 	.word	0x20000e40
 8005d68:	e000ed20 	.word	0xe000ed20
 8005d6c:	2000000c 	.word	0x2000000c
 8005d70:	e000ef34 	.word	0xe000ef34

08005d74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	607b      	str	r3, [r7, #4]
}
 8005d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d8e:	4b0f      	ldr	r3, [pc, #60]	; (8005dcc <vPortEnterCritical+0x58>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3301      	adds	r3, #1
 8005d94:	4a0d      	ldr	r2, [pc, #52]	; (8005dcc <vPortEnterCritical+0x58>)
 8005d96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <vPortEnterCritical+0x58>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d10f      	bne.n	8005dc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005da0:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <vPortEnterCritical+0x5c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	603b      	str	r3, [r7, #0]
}
 8005dbc:	bf00      	nop
 8005dbe:	e7fe      	b.n	8005dbe <vPortEnterCritical+0x4a>
	}
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	2000000c 	.word	0x2000000c
 8005dd0:	e000ed04 	.word	0xe000ed04

08005dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005dda:	4b12      	ldr	r3, [pc, #72]	; (8005e24 <vPortExitCritical+0x50>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <vPortExitCritical+0x24>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	607b      	str	r3, [r7, #4]
}
 8005df4:	bf00      	nop
 8005df6:	e7fe      	b.n	8005df6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005df8:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <vPortExitCritical+0x50>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <vPortExitCritical+0x50>)
 8005e00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e02:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <vPortExitCritical+0x50>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d105      	bne.n	8005e16 <vPortExitCritical+0x42>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	f383 8811 	msr	BASEPRI, r3
}
 8005e14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	2000000c 	.word	0x2000000c
	...

08005e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e30:	f3ef 8009 	mrs	r0, PSP
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	4b15      	ldr	r3, [pc, #84]	; (8005e90 <pxCurrentTCBConst>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	f01e 0f10 	tst.w	lr, #16
 8005e40:	bf08      	it	eq
 8005e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4a:	6010      	str	r0, [r2, #0]
 8005e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e54:	f380 8811 	msr	BASEPRI, r0
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f7fe fff6 	bl	8004e50 <vTaskSwitchContext>
 8005e64:	f04f 0000 	mov.w	r0, #0
 8005e68:	f380 8811 	msr	BASEPRI, r0
 8005e6c:	bc09      	pop	{r0, r3}
 8005e6e:	6819      	ldr	r1, [r3, #0]
 8005e70:	6808      	ldr	r0, [r1, #0]
 8005e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e76:	f01e 0f10 	tst.w	lr, #16
 8005e7a:	bf08      	it	eq
 8005e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e80:	f380 8809 	msr	PSP, r0
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	f3af 8000 	nop.w

08005e90 <pxCurrentTCBConst>:
 8005e90:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop

08005e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	607b      	str	r3, [r7, #4]
}
 8005eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005eb2:	f7fe ff0f 	bl	8004cd4 <xTaskIncrementTick>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ebc:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <SysTick_Handler+0x40>)
 8005ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	f383 8811 	msr	BASEPRI, r3
}
 8005ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	e000ed04 	.word	0xe000ed04

08005edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <vPortSetupTimerInterrupt+0x34>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ee6:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <vPortSetupTimerInterrupt+0x38>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005eec:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <vPortSetupTimerInterrupt+0x3c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a0a      	ldr	r2, [pc, #40]	; (8005f1c <vPortSetupTimerInterrupt+0x40>)
 8005ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef6:	099b      	lsrs	r3, r3, #6
 8005ef8:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <vPortSetupTimerInterrupt+0x44>)
 8005efa:	3b01      	subs	r3, #1
 8005efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005efe:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <vPortSetupTimerInterrupt+0x34>)
 8005f00:	2207      	movs	r2, #7
 8005f02:	601a      	str	r2, [r3, #0]
}
 8005f04:	bf00      	nop
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	e000e010 	.word	0xe000e010
 8005f14:	e000e018 	.word	0xe000e018
 8005f18:	20000000 	.word	0x20000000
 8005f1c:	10624dd3 	.word	0x10624dd3
 8005f20:	e000e014 	.word	0xe000e014

08005f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f34 <vPortEnableVFP+0x10>
 8005f28:	6801      	ldr	r1, [r0, #0]
 8005f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f2e:	6001      	str	r1, [r0, #0]
 8005f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f32:	bf00      	nop
 8005f34:	e000ed88 	.word	0xe000ed88

08005f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f3e:	f3ef 8305 	mrs	r3, IPSR
 8005f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b0f      	cmp	r3, #15
 8005f48:	d914      	bls.n	8005f74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f4a:	4a17      	ldr	r2, [pc, #92]	; (8005fa8 <vPortValidateInterruptPriority+0x70>)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f54:	4b15      	ldr	r3, [pc, #84]	; (8005fac <vPortValidateInterruptPriority+0x74>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	7afa      	ldrb	r2, [r7, #11]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d20a      	bcs.n	8005f74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	607b      	str	r3, [r7, #4]
}
 8005f70:	bf00      	nop
 8005f72:	e7fe      	b.n	8005f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f74:	4b0e      	ldr	r3, [pc, #56]	; (8005fb0 <vPortValidateInterruptPriority+0x78>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f7c:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <vPortValidateInterruptPriority+0x7c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d90a      	bls.n	8005f9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	603b      	str	r3, [r7, #0]
}
 8005f96:	bf00      	nop
 8005f98:	e7fe      	b.n	8005f98 <vPortValidateInterruptPriority+0x60>
	}
 8005f9a:	bf00      	nop
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	e000e3f0 	.word	0xe000e3f0
 8005fac:	20000e3c 	.word	0x20000e3c
 8005fb0:	e000ed0c 	.word	0xe000ed0c
 8005fb4:	20000e40 	.word	0x20000e40

08005fb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	; 0x28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fc4:	f7fe fdca 	bl	8004b5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fc8:	4b58      	ldr	r3, [pc, #352]	; (800612c <pvPortMalloc+0x174>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fd0:	f000 f910 	bl	80061f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fd4:	4b56      	ldr	r3, [pc, #344]	; (8006130 <pvPortMalloc+0x178>)
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f040 808e 	bne.w	80060fe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01d      	beq.n	8006024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005fe8:	2208      	movs	r2, #8
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4413      	add	r3, r2
 8005fee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d014      	beq.n	8006024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f023 0307 	bic.w	r3, r3, #7
 8006000:	3308      	adds	r3, #8
 8006002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <pvPortMalloc+0x6c>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	617b      	str	r3, [r7, #20]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d069      	beq.n	80060fe <pvPortMalloc+0x146>
 800602a:	4b42      	ldr	r3, [pc, #264]	; (8006134 <pvPortMalloc+0x17c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	429a      	cmp	r2, r3
 8006032:	d864      	bhi.n	80060fe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006034:	4b40      	ldr	r3, [pc, #256]	; (8006138 <pvPortMalloc+0x180>)
 8006036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006038:	4b3f      	ldr	r3, [pc, #252]	; (8006138 <pvPortMalloc+0x180>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800603e:	e004      	b.n	800604a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	429a      	cmp	r2, r3
 8006052:	d903      	bls.n	800605c <pvPortMalloc+0xa4>
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1f1      	bne.n	8006040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800605c:	4b33      	ldr	r3, [pc, #204]	; (800612c <pvPortMalloc+0x174>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006062:	429a      	cmp	r2, r3
 8006064:	d04b      	beq.n	80060fe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2208      	movs	r2, #8
 800606c:	4413      	add	r3, r2
 800606e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	1ad2      	subs	r2, r2, r3
 8006080:	2308      	movs	r3, #8
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	429a      	cmp	r2, r3
 8006086:	d91f      	bls.n	80060c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4413      	add	r3, r2
 800608e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <pvPortMalloc+0xf8>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	613b      	str	r3, [r7, #16]
}
 80060ac:	bf00      	nop
 80060ae:	e7fe      	b.n	80060ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	1ad2      	subs	r2, r2, r3
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060c2:	69b8      	ldr	r0, [r7, #24]
 80060c4:	f000 f8f8 	bl	80062b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060c8:	4b1a      	ldr	r3, [pc, #104]	; (8006134 <pvPortMalloc+0x17c>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	4a18      	ldr	r2, [pc, #96]	; (8006134 <pvPortMalloc+0x17c>)
 80060d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060d6:	4b17      	ldr	r3, [pc, #92]	; (8006134 <pvPortMalloc+0x17c>)
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	4b18      	ldr	r3, [pc, #96]	; (800613c <pvPortMalloc+0x184>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d203      	bcs.n	80060ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060e2:	4b14      	ldr	r3, [pc, #80]	; (8006134 <pvPortMalloc+0x17c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a15      	ldr	r2, [pc, #84]	; (800613c <pvPortMalloc+0x184>)
 80060e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	4b10      	ldr	r3, [pc, #64]	; (8006130 <pvPortMalloc+0x178>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060fe:	f7fe fd3b 	bl	8004b78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <pvPortMalloc+0x16a>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	60fb      	str	r3, [r7, #12]
}
 800611e:	bf00      	nop
 8006120:	e7fe      	b.n	8006120 <pvPortMalloc+0x168>
	return pvReturn;
 8006122:	69fb      	ldr	r3, [r7, #28]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3728      	adds	r7, #40	; 0x28
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20001a4c 	.word	0x20001a4c
 8006130:	20001a58 	.word	0x20001a58
 8006134:	20001a50 	.word	0x20001a50
 8006138:	20001a44 	.word	0x20001a44
 800613c:	20001a54 	.word	0x20001a54

08006140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d048      	beq.n	80061e4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006152:	2308      	movs	r3, #8
 8006154:	425b      	negs	r3, r3
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	4413      	add	r3, r2
 800615a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	4b21      	ldr	r3, [pc, #132]	; (80061ec <vPortFree+0xac>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4013      	ands	r3, r2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10a      	bne.n	8006184 <vPortFree+0x44>
	__asm volatile
 800616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	60fb      	str	r3, [r7, #12]
}
 8006180:	bf00      	nop
 8006182:	e7fe      	b.n	8006182 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <vPortFree+0x62>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	60bb      	str	r3, [r7, #8]
}
 800619e:	bf00      	nop
 80061a0:	e7fe      	b.n	80061a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	4b11      	ldr	r3, [pc, #68]	; (80061ec <vPortFree+0xac>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4013      	ands	r3, r2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d019      	beq.n	80061e4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d115      	bne.n	80061e4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	4b0b      	ldr	r3, [pc, #44]	; (80061ec <vPortFree+0xac>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	43db      	mvns	r3, r3
 80061c2:	401a      	ands	r2, r3
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061c8:	f7fe fcc8 	bl	8004b5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <vPortFree+0xb0>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4413      	add	r3, r2
 80061d6:	4a06      	ldr	r2, [pc, #24]	; (80061f0 <vPortFree+0xb0>)
 80061d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061da:	6938      	ldr	r0, [r7, #16]
 80061dc:	f000 f86c 	bl	80062b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80061e0:	f7fe fcca 	bl	8004b78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061e4:	bf00      	nop
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20001a58 	.word	0x20001a58
 80061f0:	20001a50 	.word	0x20001a50

080061f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80061fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006200:	4b27      	ldr	r3, [pc, #156]	; (80062a0 <prvHeapInit+0xac>)
 8006202:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00c      	beq.n	8006228 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3307      	adds	r3, #7
 8006212:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0307 	bic.w	r3, r3, #7
 800621a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	4a1f      	ldr	r2, [pc, #124]	; (80062a0 <prvHeapInit+0xac>)
 8006224:	4413      	add	r3, r2
 8006226:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800622c:	4a1d      	ldr	r2, [pc, #116]	; (80062a4 <prvHeapInit+0xb0>)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006232:	4b1c      	ldr	r3, [pc, #112]	; (80062a4 <prvHeapInit+0xb0>)
 8006234:	2200      	movs	r2, #0
 8006236:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	4413      	add	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006240:	2208      	movs	r2, #8
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	1a9b      	subs	r3, r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0307 	bic.w	r3, r3, #7
 800624e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4a15      	ldr	r2, [pc, #84]	; (80062a8 <prvHeapInit+0xb4>)
 8006254:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006256:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <prvHeapInit+0xb4>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2200      	movs	r2, #0
 800625c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800625e:	4b12      	ldr	r3, [pc, #72]	; (80062a8 <prvHeapInit+0xb4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	1ad2      	subs	r2, r2, r3
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006274:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <prvHeapInit+0xb4>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	4a0a      	ldr	r2, [pc, #40]	; (80062ac <prvHeapInit+0xb8>)
 8006282:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	4a09      	ldr	r2, [pc, #36]	; (80062b0 <prvHeapInit+0xbc>)
 800628a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800628c:	4b09      	ldr	r3, [pc, #36]	; (80062b4 <prvHeapInit+0xc0>)
 800628e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006292:	601a      	str	r2, [r3, #0]
}
 8006294:	bf00      	nop
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	20000e44 	.word	0x20000e44
 80062a4:	20001a44 	.word	0x20001a44
 80062a8:	20001a4c 	.word	0x20001a4c
 80062ac:	20001a54 	.word	0x20001a54
 80062b0:	20001a50 	.word	0x20001a50
 80062b4:	20001a58 	.word	0x20001a58

080062b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062c0:	4b28      	ldr	r3, [pc, #160]	; (8006364 <prvInsertBlockIntoFreeList+0xac>)
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	e002      	b.n	80062cc <prvInsertBlockIntoFreeList+0x14>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d8f7      	bhi.n	80062c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	4413      	add	r3, r2
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d108      	bne.n	80062fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	441a      	add	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	441a      	add	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d118      	bne.n	8006340 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4b15      	ldr	r3, [pc, #84]	; (8006368 <prvInsertBlockIntoFreeList+0xb0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d00d      	beq.n	8006336 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	441a      	add	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	e008      	b.n	8006348 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006336:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <prvInsertBlockIntoFreeList+0xb0>)
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	e003      	b.n	8006348 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	429a      	cmp	r2, r3
 800634e:	d002      	beq.n	8006356 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006356:	bf00      	nop
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	20001a44 	.word	0x20001a44
 8006368:	20001a4c 	.word	0x20001a4c

0800636c <memset>:
 800636c:	4402      	add	r2, r0
 800636e:	4603      	mov	r3, r0
 8006370:	4293      	cmp	r3, r2
 8006372:	d100      	bne.n	8006376 <memset+0xa>
 8006374:	4770      	bx	lr
 8006376:	f803 1b01 	strb.w	r1, [r3], #1
 800637a:	e7f9      	b.n	8006370 <memset+0x4>

0800637c <__libc_init_array>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	4d0d      	ldr	r5, [pc, #52]	; (80063b4 <__libc_init_array+0x38>)
 8006380:	4c0d      	ldr	r4, [pc, #52]	; (80063b8 <__libc_init_array+0x3c>)
 8006382:	1b64      	subs	r4, r4, r5
 8006384:	10a4      	asrs	r4, r4, #2
 8006386:	2600      	movs	r6, #0
 8006388:	42a6      	cmp	r6, r4
 800638a:	d109      	bne.n	80063a0 <__libc_init_array+0x24>
 800638c:	4d0b      	ldr	r5, [pc, #44]	; (80063bc <__libc_init_array+0x40>)
 800638e:	4c0c      	ldr	r4, [pc, #48]	; (80063c0 <__libc_init_array+0x44>)
 8006390:	f000 f826 	bl	80063e0 <_init>
 8006394:	1b64      	subs	r4, r4, r5
 8006396:	10a4      	asrs	r4, r4, #2
 8006398:	2600      	movs	r6, #0
 800639a:	42a6      	cmp	r6, r4
 800639c:	d105      	bne.n	80063aa <__libc_init_array+0x2e>
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a4:	4798      	blx	r3
 80063a6:	3601      	adds	r6, #1
 80063a8:	e7ee      	b.n	8006388 <__libc_init_array+0xc>
 80063aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ae:	4798      	blx	r3
 80063b0:	3601      	adds	r6, #1
 80063b2:	e7f2      	b.n	800639a <__libc_init_array+0x1e>
 80063b4:	08006510 	.word	0x08006510
 80063b8:	08006510 	.word	0x08006510
 80063bc:	08006510 	.word	0x08006510
 80063c0:	08006514 	.word	0x08006514

080063c4 <memcpy>:
 80063c4:	440a      	add	r2, r1
 80063c6:	4291      	cmp	r1, r2
 80063c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80063cc:	d100      	bne.n	80063d0 <memcpy+0xc>
 80063ce:	4770      	bx	lr
 80063d0:	b510      	push	{r4, lr}
 80063d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063da:	4291      	cmp	r1, r2
 80063dc:	d1f9      	bne.n	80063d2 <memcpy+0xe>
 80063de:	bd10      	pop	{r4, pc}

080063e0 <_init>:
 80063e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e2:	bf00      	nop
 80063e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e6:	bc08      	pop	{r3}
 80063e8:	469e      	mov	lr, r3
 80063ea:	4770      	bx	lr

080063ec <_fini>:
 80063ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ee:	bf00      	nop
 80063f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063f2:	bc08      	pop	{r3}
 80063f4:	469e      	mov	lr, r3
 80063f6:	4770      	bx	lr
