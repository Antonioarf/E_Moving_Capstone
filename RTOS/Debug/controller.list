
controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08006ef8  08006ef8  00016ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007194  08007194  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08007194  08007194  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007194  08007194  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007194  08007194  00017194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007198  08007198  00017198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800719c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c74  20000060  080071fc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cd4  080071fc  00021cd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019684  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032d5  00000000  00000000  00039757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  0003ca30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f4e  00000000  00000000  0003ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000329a  00000000  00000000  0003ed0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016a09  00000000  00000000  00041fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000afbf0  00000000  00000000  000589b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005544  00000000  00000000  001085a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0010dae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ee0 	.word	0x08006ee0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006ee0 	.word	0x08006ee0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <osStatusToString>:
	ITM_SendChar(msg);
	ITM_SendChar('\n');

}

char* osStatusToString(osStatus_t status) {
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
    switch (status) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	3305      	adds	r3, #5
 80001ec:	2b05      	cmp	r3, #5
 80001ee:	d81b      	bhi.n	8000228 <osStatusToString+0x48>
 80001f0:	a201      	add	r2, pc, #4	; (adr r2, 80001f8 <osStatusToString+0x18>)
 80001f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f6:	bf00      	nop
 80001f8:	08000225 	.word	0x08000225
 80001fc:	08000221 	.word	0x08000221
 8000200:	0800021d 	.word	0x0800021d
 8000204:	08000219 	.word	0x08000219
 8000208:	08000215 	.word	0x08000215
 800020c:	08000211 	.word	0x08000211
        case osOK:
            return "OK: Operation completed successfully\r\n";
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <osStatusToString+0x58>)
 8000212:	e00a      	b.n	800022a <osStatusToString+0x4a>
        case osError:
            return "osError: Unspecified error\r\n";
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <osStatusToString+0x5c>)
 8000216:	e008      	b.n	800022a <osStatusToString+0x4a>
        case osErrorTimeout:
            return "Timeout: osErrorTimeout:  Operation timed out\r\n";
 8000218:	4b09      	ldr	r3, [pc, #36]	; (8000240 <osStatusToString+0x60>)
 800021a:	e006      	b.n	800022a <osStatusToString+0x4a>
        case osErrorResource:
            return "Resource: osErrorResource: Resource not available\r\n";
 800021c:	4b09      	ldr	r3, [pc, #36]	; (8000244 <osStatusToString+0x64>)
 800021e:	e004      	b.n	800022a <osStatusToString+0x4a>
        case osErrorParameter:
            return "Parameter: osErrorParameter: Parameter error\r\n";
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <osStatusToString+0x68>)
 8000222:	e002      	b.n	800022a <osStatusToString+0x4a>
        case osErrorNoMemory:
            return "NoMemory: osErrorNoMemory: System is out of memory\r\n";
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <osStatusToString+0x6c>)
 8000226:	e000      	b.n	800022a <osStatusToString+0x4a>
        default:
            return "Unknown osStatus_t\r\n";
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <osStatusToString+0x70>)
    }
}
 800022a:	4618      	mov	r0, r3
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	08006ef8 	.word	0x08006ef8
 800023c:	08006f20 	.word	0x08006f20
 8000240:	08006f40 	.word	0x08006f40
 8000244:	08006f70 	.word	0x08006f70
 8000248:	08006fa4 	.word	0x08006fa4
 800024c:	08006fd4 	.word	0x08006fd4
 8000250:	0800700c 	.word	0x0800700c

08000254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000258:	f000 fcd4 	bl	8000c04 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025c:	f000 f850 	bl	8000300 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000260:	f000 f930 	bl	80004c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000264:	f000 f8fe 	bl	8000464 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000268:	f000 f8a4 	bl	80003b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800026c:	f003 fd14 	bl	8003c98 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Input_queue */
  Input_queueHandle = osMessageQueueNew (16, sizeof(command), &Input_queue_attributes);
 8000270:	4a16      	ldr	r2, [pc, #88]	; (80002cc <main+0x78>)
 8000272:	210c      	movs	r1, #12
 8000274:	2010      	movs	r0, #16
 8000276:	f003 fe81 	bl	8003f7c <osMessageQueueNew>
 800027a:	4603      	mov	r3, r0
 800027c:	4a14      	ldr	r2, [pc, #80]	; (80002d0 <main+0x7c>)
 800027e:	6013      	str	r3, [r2, #0]

  /* creation of BT_send */
  BT_sendHandle = osMessageQueueNew (16, sizeof(char*), &BT_send_attributes);
 8000280:	4a14      	ldr	r2, [pc, #80]	; (80002d4 <main+0x80>)
 8000282:	2104      	movs	r1, #4
 8000284:	2010      	movs	r0, #16
 8000286:	f003 fe79 	bl	8003f7c <osMessageQueueNew>
 800028a:	4603      	mov	r3, r0
 800028c:	4a12      	ldr	r2, [pc, #72]	; (80002d8 <main+0x84>)
 800028e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BT_reader */
  BT_readerHandle = osThreadNew(BT_reader_funct, NULL, &BT_reader_attributes);
 8000290:	4a12      	ldr	r2, [pc, #72]	; (80002dc <main+0x88>)
 8000292:	2100      	movs	r1, #0
 8000294:	4812      	ldr	r0, [pc, #72]	; (80002e0 <main+0x8c>)
 8000296:	f003 fd67 	bl	8003d68 <osThreadNew>
 800029a:	4603      	mov	r3, r0
 800029c:	4a11      	ldr	r2, [pc, #68]	; (80002e4 <main+0x90>)
 800029e:	6013      	str	r3, [r2, #0]

  /* creation of MT_controller */
  MT_controllerHandle = osThreadNew(MT_controller_funct, NULL, &MT_controller_attributes);
 80002a0:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <main+0x94>)
 80002a2:	2100      	movs	r1, #0
 80002a4:	4811      	ldr	r0, [pc, #68]	; (80002ec <main+0x98>)
 80002a6:	f003 fd5f 	bl	8003d68 <osThreadNew>
 80002aa:	4603      	mov	r3, r0
 80002ac:	4a10      	ldr	r2, [pc, #64]	; (80002f0 <main+0x9c>)
 80002ae:	6013      	str	r3, [r2, #0]

  /* creation of Sensor_Read */
  Sensor_ReadHandle = osThreadNew(Sensor_reader_funct, NULL, &Sensor_Read_attributes);
 80002b0:	4a10      	ldr	r2, [pc, #64]	; (80002f4 <main+0xa0>)
 80002b2:	2100      	movs	r1, #0
 80002b4:	4810      	ldr	r0, [pc, #64]	; (80002f8 <main+0xa4>)
 80002b6:	f003 fd57 	bl	8003d68 <osThreadNew>
 80002ba:	4603      	mov	r3, r0
 80002bc:	4a0f      	ldr	r2, [pc, #60]	; (80002fc <main+0xa8>)
 80002be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002c0:	f003 fd1e 	bl	8003d00 <osKernelStart>
 80002c4:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	0800712c 	.word	0x0800712c
 80002d0:	2000015c 	.word	0x2000015c
 80002d4:	08007144 	.word	0x08007144
 80002d8:	20000160 	.word	0x20000160
 80002dc:	080070c0 	.word	0x080070c0
 80002e0:	080006bd 	.word	0x080006bd
 80002e4:	20000150 	.word	0x20000150
 80002e8:	080070e4 	.word	0x080070e4
 80002ec:	08000791 	.word	0x08000791
 80002f0:	20000154 	.word	0x20000154
 80002f4:	08007108 	.word	0x08007108
 80002f8:	08000851 	.word	0x08000851
 80002fc:	20000158 	.word	0x20000158

08000300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b09c      	sub	sp, #112	; 0x70
 8000304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000306:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800030a:	2228      	movs	r2, #40	; 0x28
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f006 fcfc 	bl	8006d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000314:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000324:	463b      	mov	r3, r7
 8000326:	2234      	movs	r2, #52	; 0x34
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f006 fcee 	bl	8006d0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000330:	2301      	movs	r3, #1
 8000332:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000338:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033e:	2301      	movs	r3, #1
 8000340:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000342:	2302      	movs	r3, #2
 8000344:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800034a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800034c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000350:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000352:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000356:	4618      	mov	r0, r3
 8000358:	f000 ff0e 	bl	8001178 <HAL_RCC_OscConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000362:	f000 fa9d 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000366:	230f      	movs	r3, #15
 8000368:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036a:	2302      	movs	r3, #2
 800036c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000376:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800037c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000380:	2102      	movs	r1, #2
 8000382:	4618      	mov	r0, r3
 8000384:	f001 ff36 	bl	80021f4 <HAL_RCC_ClockConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800038e:	f000 fa87 	bl	80008a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000392:	2301      	movs	r3, #1
 8000394:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000396:	2300      	movs	r3, #0
 8000398:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800039a:	463b      	mov	r3, r7
 800039c:	4618      	mov	r0, r3
 800039e:	f002 f991 	bl	80026c4 <HAL_RCCEx_PeriphCLKConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0xac>
  {
    Error_Handler();
 80003a8:	f000 fa7a 	bl	80008a0 <Error_Handler>
  }
}
 80003ac:	bf00      	nop
 80003ae:	3770      	adds	r7, #112	; 0x70
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b08c      	sub	sp, #48	; 0x30
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80003ba:	f107 030c 	add.w	r3, r7, #12
 80003be:	2224      	movs	r2, #36	; 0x24
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f006 fca2 	bl	8006d0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c8:	463b      	mov	r3, r7
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003d2:	4b23      	ldr	r3, [pc, #140]	; (8000460 <MX_TIM2_Init+0xac>)
 80003d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003da:	4b21      	ldr	r3, [pc, #132]	; (8000460 <MX_TIM2_Init+0xac>)
 80003dc:	2200      	movs	r2, #0
 80003de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e0:	4b1f      	ldr	r3, [pc, #124]	; (8000460 <MX_TIM2_Init+0xac>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80003e6:	4b1e      	ldr	r3, [pc, #120]	; (8000460 <MX_TIM2_Init+0xac>)
 80003e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ee:	4b1c      	ldr	r3, [pc, #112]	; (8000460 <MX_TIM2_Init+0xac>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003f4:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <MX_TIM2_Init+0xac>)
 80003f6:	2280      	movs	r2, #128	; 0x80
 80003f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80003fa:	2301      	movs	r3, #1
 80003fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80003fe:	2302      	movs	r3, #2
 8000400:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000402:	2301      	movs	r3, #1
 8000404:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800040e:	2302      	movs	r3, #2
 8000410:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000412:	2301      	movs	r3, #1
 8000414:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800041e:	f107 030c 	add.w	r3, r7, #12
 8000422:	4619      	mov	r1, r3
 8000424:	480e      	ldr	r0, [pc, #56]	; (8000460 <MX_TIM2_Init+0xac>)
 8000426:	f002 fb95 	bl	8002b54 <HAL_TIM_Encoder_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000430:	f000 fa36 	bl	80008a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000434:	2300      	movs	r3, #0
 8000436:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000438:	2300      	movs	r3, #0
 800043a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800043c:	463b      	mov	r3, r7
 800043e:	4619      	mov	r1, r3
 8000440:	4807      	ldr	r0, [pc, #28]	; (8000460 <MX_TIM2_Init+0xac>)
 8000442:	f002 feb7 	bl	80031b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800044c:	f000 fa28 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_1);
 8000450:	2100      	movs	r1, #0
 8000452:	4803      	ldr	r0, [pc, #12]	; (8000460 <MX_TIM2_Init+0xac>)
 8000454:	f002 fc24 	bl	8002ca0 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000458:	bf00      	nop
 800045a:	3730      	adds	r7, #48	; 0x30
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	2000007c 	.word	0x2000007c

08000464 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000468:	4b14      	ldr	r3, [pc, #80]	; (80004bc <MX_USART1_UART_Init+0x58>)
 800046a:	4a15      	ldr	r2, [pc, #84]	; (80004c0 <MX_USART1_UART_Init+0x5c>)
 800046c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800046e:	4b13      	ldr	r3, [pc, #76]	; (80004bc <MX_USART1_UART_Init+0x58>)
 8000470:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000474:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <MX_USART1_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800047c:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <MX_USART1_UART_Init+0x58>)
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <MX_USART1_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <MX_USART1_UART_Init+0x58>)
 800048a:	220c      	movs	r2, #12
 800048c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <MX_USART1_UART_Init+0x58>)
 8000490:	2200      	movs	r2, #0
 8000492:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <MX_USART1_UART_Init+0x58>)
 8000496:	2200      	movs	r2, #0
 8000498:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <MX_USART1_UART_Init+0x58>)
 800049c:	2200      	movs	r2, #0
 800049e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <MX_USART1_UART_Init+0x58>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004a6:	4805      	ldr	r0, [pc, #20]	; (80004bc <MX_USART1_UART_Init+0x58>)
 80004a8:	f002 ff08 	bl	80032bc <HAL_UART_Init>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004b2:	f000 f9f5 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	200000c8 	.word	0x200000c8
 80004c0:	40013800 	.word	0x40013800

080004c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004da:	4b2c      	ldr	r3, [pc, #176]	; (800058c <MX_GPIO_Init+0xc8>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a2b      	ldr	r2, [pc, #172]	; (800058c <MX_GPIO_Init+0xc8>)
 80004e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b29      	ldr	r3, [pc, #164]	; (800058c <MX_GPIO_Init+0xc8>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b26      	ldr	r3, [pc, #152]	; (800058c <MX_GPIO_Init+0xc8>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a25      	ldr	r2, [pc, #148]	; (800058c <MX_GPIO_Init+0xc8>)
 80004f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004fc:	6153      	str	r3, [r2, #20]
 80004fe:	4b23      	ldr	r3, [pc, #140]	; (800058c <MX_GPIO_Init+0xc8>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	4b20      	ldr	r3, [pc, #128]	; (800058c <MX_GPIO_Init+0xc8>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a1f      	ldr	r2, [pc, #124]	; (800058c <MX_GPIO_Init+0xc8>)
 8000510:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000514:	6153      	str	r3, [r2, #20]
 8000516:	4b1d      	ldr	r3, [pc, #116]	; (800058c <MX_GPIO_Init+0xc8>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	4b1a      	ldr	r3, [pc, #104]	; (800058c <MX_GPIO_Init+0xc8>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a19      	ldr	r2, [pc, #100]	; (800058c <MX_GPIO_Init+0xc8>)
 8000528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800052c:	6153      	str	r3, [r2, #20]
 800052e:	4b17      	ldr	r3, [pc, #92]	; (800058c <MX_GPIO_Init+0xc8>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BREAK_1_Pin */
  GPIO_InitStruct.Pin = BREAK_1_Pin;
 800053a:	2320      	movs	r3, #32
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800053e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000544:	2301      	movs	r3, #1
 8000546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BREAK_1_GPIO_Port, &GPIO_InitStruct);
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	4619      	mov	r1, r3
 800054e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000552:	f000 fc6f 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BREAK_2_Pin */
  GPIO_InitStruct.Pin = BREAK_2_Pin;
 8000556:	2340      	movs	r3, #64	; 0x40
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800055a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800055e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BREAK_2_GPIO_Port, &GPIO_InitStruct);
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	4619      	mov	r1, r3
 800056a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056e:	f000 fc61 	bl	8000e34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2105      	movs	r1, #5
 8000576:	2017      	movs	r0, #23
 8000578:	f000 fc32 	bl	8000de0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800057c:	2017      	movs	r0, #23
 800057e:	f000 fc4b 	bl	8000e18 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000582:	bf00      	nop
 8000584:	3728      	adds	r7, #40	; 0x28
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000

08000590 <FON_UART_Receive>:





int FON_UART_Receive(char *received, uint16_t timeout,UART_HandleTypeDef *huartX) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	460b      	mov	r3, r1
 800059a:	607a      	str	r2, [r7, #4]
 800059c:	817b      	strh	r3, [r7, #10]
    HAL_StatusTypeDef status;
    unsigned char receivedChar;
    int index = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]

    while (1) {
        status = HAL_UART_Receive(huartX, &receivedChar, 1, timeout);
 80005a2:	897b      	ldrh	r3, [r7, #10]
 80005a4:	f107 0112 	add.w	r1, r7, #18
 80005a8:	2201      	movs	r2, #1
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f002 ff5e 	bl	800346c <HAL_UART_Receive>
 80005b0:	4603      	mov	r3, r0
 80005b2:	74fb      	strb	r3, [r7, #19]

        if (status == HAL_OK) {
 80005b4:	7cfb      	ldrb	r3, [r7, #19]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d112      	bne.n	80005e0 <FON_UART_Receive+0x50>
            if (receivedChar == '\n') {
 80005ba:	7cbb      	ldrb	r3, [r7, #18]
 80005bc:	2b0a      	cmp	r3, #10
 80005be:	d106      	bne.n	80005ce <FON_UART_Receive+0x3e>
            	received[index] = '\0';
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	4413      	add	r3, r2
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]

                return 1;
 80005ca:	2301      	movs	r3, #1
 80005cc:	e00c      	b.n	80005e8 <FON_UART_Receive+0x58>
            } else {
                received[index] = receivedChar;
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	4413      	add	r3, r2
 80005d4:	7cba      	ldrb	r2, [r7, #18]
 80005d6:	701a      	strb	r2, [r3, #0]
                index++;
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	3301      	adds	r3, #1
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	e7e0      	b.n	80005a2 <FON_UART_Receive+0x12>
            }
        } else {
            received[0] = '\0';
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
            return 0;
 80005e6:	2300      	movs	r3, #0
        }
    }
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	80fb      	strh	r3, [r7, #6]
	command com;

	if (GPIO_Pin == BREAK_1_Pin ) {
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	2b20      	cmp	r3, #32
 80005fe:	d129      	bne.n	8000654 <HAL_GPIO_EXTI_Callback+0x64>
		com.button_id 		= 1;
 8000600:	2301      	movs	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
		if (HAL_GPIO_ReadPin(BREAK_1_GPIO_Port, GPIO_Pin) == GPIO_PIN_SET) {
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	4619      	mov	r1, r3
 8000608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060c:	f000 fd84 	bl	8001118 <HAL_GPIO_ReadPin>
 8000610:	4603      	mov	r3, r0
 8000612:	2b01      	cmp	r3, #1
 8000614:	d102      	bne.n	800061c <HAL_GPIO_EXTI_Callback+0x2c>
			// Your code for rising edge -> apertou
			com.button_status  	= 0;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	e001      	b.n	8000620 <HAL_GPIO_EXTI_Callback+0x30>
		} else {
			// Your code for falling edge -> soltou
			com.button_status  	= 1;
 800061c:	2301      	movs	r3, #1
 800061e:	61bb      	str	r3, [r7, #24]
		}

		osStatus_t status 	=  osMessageQueuePut(Input_queueHandle, &com, 0, 0);
 8000620:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000622:	6818      	ldr	r0, [r3, #0]
 8000624:	f107 0114 	add.w	r1, r7, #20
 8000628:	2300      	movs	r3, #0
 800062a:	2200      	movs	r2, #0
 800062c:	f003 fd2c 	bl	8004088 <osMessageQueuePut>
 8000630:	6238      	str	r0, [r7, #32]
		if (status != osOK){
 8000632:	6a3b      	ldr	r3, [r7, #32]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d039      	beq.n	80006ac <HAL_GPIO_EXTI_Callback+0xbc>
			char* str = osStatusToString(status);
 8000638:	6a38      	ldr	r0, [r7, #32]
 800063a:	f7ff fdd1 	bl	80001e0 <osStatusToString>
 800063e:	4603      	mov	r3, r0
 8000640:	613b      	str	r3, [r7, #16]
			osMessageQueuePut(BT_sendHandle, &str, 0, 0);
 8000642:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000644:	6818      	ldr	r0, [r3, #0]
 8000646:	f107 0110 	add.w	r1, r7, #16
 800064a:	2300      	movs	r3, #0
 800064c:	2200      	movs	r2, #0
 800064e:	f003 fd1b 	bl	8004088 <osMessageQueuePut>
		if (status != osOK){
			char* str = osStatusToString(status);
			osMessageQueuePut(BT_sendHandle, &str, 0, 0);
		}
	}
}
 8000652:	e02b      	b.n	80006ac <HAL_GPIO_EXTI_Callback+0xbc>
	else if (GPIO_Pin == BREAK_2_Pin ) {
 8000654:	88fb      	ldrh	r3, [r7, #6]
 8000656:	2b40      	cmp	r3, #64	; 0x40
 8000658:	d128      	bne.n	80006ac <HAL_GPIO_EXTI_Callback+0xbc>
		com.button_id 		= 1;
 800065a:	2301      	movs	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
		if (HAL_GPIO_ReadPin(BREAK_2_GPIO_Port, GPIO_Pin) == GPIO_PIN_SET) {
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	4619      	mov	r1, r3
 8000662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000666:	f000 fd57 	bl	8001118 <HAL_GPIO_ReadPin>
 800066a:	4603      	mov	r3, r0
 800066c:	2b01      	cmp	r3, #1
 800066e:	d102      	bne.n	8000676 <HAL_GPIO_EXTI_Callback+0x86>
			com.button_status  	= 0;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
 8000674:	e001      	b.n	800067a <HAL_GPIO_EXTI_Callback+0x8a>
			com.button_status  	= 1;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
		osStatus_t status 	=  osMessageQueuePut(Input_queueHandle, &com, 0, 0);
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <HAL_GPIO_EXTI_Callback+0xc4>)
 800067c:	6818      	ldr	r0, [r3, #0]
 800067e:	f107 0114 	add.w	r1, r7, #20
 8000682:	2300      	movs	r3, #0
 8000684:	2200      	movs	r2, #0
 8000686:	f003 fcff 	bl	8004088 <osMessageQueuePut>
 800068a:	6278      	str	r0, [r7, #36]	; 0x24
		if (status != osOK){
 800068c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068e:	2b00      	cmp	r3, #0
 8000690:	d00c      	beq.n	80006ac <HAL_GPIO_EXTI_Callback+0xbc>
			char* str = osStatusToString(status);
 8000692:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000694:	f7ff fda4 	bl	80001e0 <osStatusToString>
 8000698:	4603      	mov	r3, r0
 800069a:	60fb      	str	r3, [r7, #12]
			osMessageQueuePut(BT_sendHandle, &str, 0, 0);
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800069e:	6818      	ldr	r0, [r3, #0]
 80006a0:	f107 010c 	add.w	r1, r7, #12
 80006a4:	2300      	movs	r3, #0
 80006a6:	2200      	movs	r2, #0
 80006a8:	f003 fcee 	bl	8004088 <osMessageQueuePut>
}
 80006ac:	bf00      	nop
 80006ae:	3728      	adds	r7, #40	; 0x28
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000015c 	.word	0x2000015c
 80006b8:	20000160 	.word	0x20000160

080006bc <BT_reader_funct>:



/* USER CODE END Header_BT_reader_funct */
void BT_reader_funct(void *argument)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b093      	sub	sp, #76	; 0x4c
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	unsigned char str[14] ="\r\nIniciando \r\n";
 80006c4:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <BT_reader_funct+0xc4>)
 80006c6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80006ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006cc:	c407      	stmia	r4!, {r0, r1, r2}
 80006ce:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, str, sizeof(str), 500);
 80006d0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80006d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006d8:	220e      	movs	r2, #14
 80006da:	482a      	ldr	r0, [pc, #168]	; (8000784 <BT_reader_funct+0xc8>)
 80006dc:	f002 fe3c 	bl	8003358 <HAL_UART_Transmit>
    char receivedData[32];
	command com;


	while (1) {
	        if (FON_UART_Receive(receivedData,500, &huart1)){
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4a27      	ldr	r2, [pc, #156]	; (8000784 <BT_reader_funct+0xc8>)
 80006e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff50 	bl	8000590 <FON_UART_Receive>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d01f      	beq.n	8000736 <BT_reader_funct+0x7a>
	        	if (strlen(receivedData)==3){
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fd68 	bl	80001d0 <strlen>
 8000700:	4603      	mov	r3, r0
 8000702:	2b03      	cmp	r3, #3
 8000704:	d117      	bne.n	8000736 <BT_reader_funct+0x7a>
	        		com.button_id 		= receivedData[0] - '0';
 8000706:	7d3b      	ldrb	r3, [r7, #20]
 8000708:	3b30      	subs	r3, #48	; 0x30
 800070a:	60bb      	str	r3, [r7, #8]
					com.button_status  	= 10*(receivedData[1] - '0') + (receivedData[2] - '0');
 800070c:	7d7b      	ldrb	r3, [r7, #21]
 800070e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000712:	4613      	mov	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	461a      	mov	r2, r3
 800071c:	7dbb      	ldrb	r3, [r7, #22]
 800071e:	3b30      	subs	r3, #48	; 0x30
 8000720:	4413      	add	r3, r2
 8000722:	60fb      	str	r3, [r7, #12]
					osMessageQueuePut(Input_queueHandle, &com, 0, 2000);
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <BT_reader_funct+0xcc>)
 8000726:	6818      	ldr	r0, [r3, #0]
 8000728:	f107 0108 	add.w	r1, r7, #8
 800072c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000730:	2200      	movs	r2, #0
 8000732:	f003 fca9 	bl	8004088 <osMessageQueuePut>
	        	}
	        }

	        while (1){
	        	if (osMessageQueueGet(BT_sendHandle, &res, NULL, 250) == osOK) {
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <BT_reader_funct+0xd0>)
 8000738:	6818      	ldr	r0, [r3, #0]
 800073a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800073e:	23fa      	movs	r3, #250	; 0xfa
 8000740:	2200      	movs	r2, #0
 8000742:	f003 fd15 	bl	8004170 <osMessageQueueGet>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d10c      	bne.n	8000766 <BT_reader_funct+0xaa>
	        	    HAL_UART_Transmit(&huart1, res, strlen(res), 1000);
 800074c:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800074e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fd3d 	bl	80001d0 <strlen>
 8000756:	4603      	mov	r3, r0
 8000758:	b29a      	uxth	r2, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	4621      	mov	r1, r4
 8000760:	4808      	ldr	r0, [pc, #32]	; (8000784 <BT_reader_funct+0xc8>)
 8000762:	f002 fdf9 	bl	8003358 <HAL_UART_Transmit>
	        	}
	        	if (osMessageQueueGetCount(BT_sendHandle)==0){
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <BT_reader_funct+0xd0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f003 fd72 	bl	8004254 <osMessageQueueGetCount>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d000      	beq.n	8000778 <BT_reader_funct+0xbc>
	        	if (osMessageQueueGet(BT_sendHandle, &res, NULL, 250) == osOK) {
 8000776:	e7de      	b.n	8000736 <BT_reader_funct+0x7a>
	        		break;
 8000778:	bf00      	nop
	        	}

	        }

	        //osDelay(1000);
	        osThreadYield();
 800077a:	f003 fb9f 	bl	8003ebc <osThreadYield>
	        if (FON_UART_Receive(receivedData,500, &huart1)){
 800077e:	e7af      	b.n	80006e0 <BT_reader_funct+0x24>
 8000780:	08007060 	.word	0x08007060
 8000784:	200000c8 	.word	0x200000c8
 8000788:	2000015c 	.word	0x2000015c
 800078c:	20000160 	.word	0x20000160

08000790 <MT_controller_funct>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MT_controller_funct */
void MT_controller_funct(void *argument)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MT_controller_funct */
  /* Infinite loop */

	int auth = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
	command com;
	//int speed=0; // max = 255

	while(1){
		if (osMessageQueueGet(Input_queueHandle, &com, NULL, 2000)== osOK){
 800079c:	4b26      	ldr	r3, [pc, #152]	; (8000838 <MT_controller_funct+0xa8>)
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	f107 0118 	add.w	r1, r7, #24
 80007a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007a8:	2200      	movs	r2, #0
 80007aa:	f003 fce1 	bl	8004170 <osMessageQueueGet>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d13e      	bne.n	8000832 <MT_controller_funct+0xa2>
			if(com.button_id==9){
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	2b09      	cmp	r3, #9
 80007b8:	d11c      	bne.n	80007f4 <MT_controller_funct+0x64>
				auth = com.button_status;
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
				if (auth){
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d00b      	beq.n	80007dc <MT_controller_funct+0x4c>
					char* str = "ABRIU\n";
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MT_controller_funct+0xac>)
 80007c6:	617b      	str	r3, [r7, #20]
				    osMessageQueuePut(BT_sendHandle, &str, 0, 2000);
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MT_controller_funct+0xb0>)
 80007ca:	6818      	ldr	r0, [r3, #0]
 80007cc:	f107 0114 	add.w	r1, r7, #20
 80007d0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007d4:	2200      	movs	r2, #0
 80007d6:	f003 fc57 	bl	8004088 <osMessageQueuePut>
 80007da:	e02a      	b.n	8000832 <MT_controller_funct+0xa2>
				}
				else{
					char* str = "FECHOU\n";
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MT_controller_funct+0xb4>)
 80007de:	613b      	str	r3, [r7, #16]
				    osMessageQueuePut(BT_sendHandle, &str, 0, 2000);
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MT_controller_funct+0xb0>)
 80007e2:	6818      	ldr	r0, [r3, #0]
 80007e4:	f107 0110 	add.w	r1, r7, #16
 80007e8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007ec:	2200      	movs	r2, #0
 80007ee:	f003 fc4b 	bl	8004088 <osMessageQueuePut>
 80007f2:	e01e      	b.n	8000832 <MT_controller_funct+0xa2>
					}
				}
			else if(com.button_id==1){
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d11b      	bne.n	8000832 <MT_controller_funct+0xa2>
				auth = com.button_status;
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
				if (auth){
 80007fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000800:	2b00      	cmp	r3, #0
 8000802:	d00b      	beq.n	800081c <MT_controller_funct+0x8c>
					char* str = "SOLTOU\n";
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MT_controller_funct+0xb8>)
 8000806:	60fb      	str	r3, [r7, #12]
				    osMessageQueuePut(BT_sendHandle, &str, 0, 2000);
 8000808:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <MT_controller_funct+0xb0>)
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	f107 010c 	add.w	r1, r7, #12
 8000810:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000814:	2200      	movs	r2, #0
 8000816:	f003 fc37 	bl	8004088 <osMessageQueuePut>
 800081a:	e00a      	b.n	8000832 <MT_controller_funct+0xa2>
				}
				else{
					char* str = "FREIOU\n";
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MT_controller_funct+0xbc>)
 800081e:	60bb      	str	r3, [r7, #8]
				    osMessageQueuePut(BT_sendHandle, &str, 0, 2000);
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <MT_controller_funct+0xb0>)
 8000822:	6818      	ldr	r0, [r3, #0]
 8000824:	f107 0108 	add.w	r1, r7, #8
 8000828:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800082c:	2200      	movs	r2, #0
 800082e:	f003 fc2b 	bl	8004088 <osMessageQueuePut>
				}

		}
		if(auth){}
		//osDelay(1000);
        osThreadYield();
 8000832:	f003 fb43 	bl	8003ebc <osThreadYield>
		if (osMessageQueueGet(Input_queueHandle, &com, NULL, 2000)== osOK){
 8000836:	e7b1      	b.n	800079c <MT_controller_funct+0xc>
 8000838:	2000015c 	.word	0x2000015c
 800083c:	08007070 	.word	0x08007070
 8000840:	20000160 	.word	0x20000160
 8000844:	08007078 	.word	0x08007078
 8000848:	08007080 	.word	0x08007080
 800084c:	08007088 	.word	0x08007088

08000850 <Sensor_reader_funct>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensor_reader_funct */
void Sensor_reader_funct(void *argument)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sensor_reader_funct */
  /* Infinite loop */
	int cnt, oi;
	uint32_t counter;
	while(1){
        cnt	  = TIM2->CNT;
 8000858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800085c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085e:	617b      	str	r3, [r7, #20]
        counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <Sensor_reader_funct+0x28>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000866:	613b      	str	r3, [r7, #16]
        oi = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
		osDelay(1000);
 800086c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000870:	f003 fb56 	bl	8003f20 <osDelay>
        cnt	  = TIM2->CNT;
 8000874:	e7f0      	b.n	8000858 <Sensor_reader_funct+0x8>
 8000876:	bf00      	nop
 8000878:	2000007c 	.word	0x2000007c

0800087c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d101      	bne.n	8000892 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800088e:	f000 f9cf 	bl	8000c30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40001000 	.word	0x40001000

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	char* str = "ERROR_HANDLER CALLED";
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <Error_Handler+0x20>)
 80008a8:	607b      	str	r3, [r7, #4]
	osMessageQueuePut(BT_sendHandle, &str, 0, 0);
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <Error_Handler+0x24>)
 80008ac:	6818      	ldr	r0, [r3, #0]
 80008ae:	1d39      	adds	r1, r7, #4
 80008b0:	2300      	movs	r3, #0
 80008b2:	2200      	movs	r2, #0
 80008b4:	f003 fbe8 	bl	8004088 <osMessageQueuePut>
  /* USER CODE END Error_Handler_Debug */
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	08007090 	.word	0x08007090
 80008c4:	20000160 	.word	0x20000160

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_MspInit+0x4c>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	4a10      	ldr	r2, [pc, #64]	; (8000914 <HAL_MspInit+0x4c>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6193      	str	r3, [r2, #24]
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <HAL_MspInit+0x4c>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <HAL_MspInit+0x4c>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <HAL_MspInit+0x4c>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	61d3      	str	r3, [r2, #28]
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_MspInit+0x4c>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	210f      	movs	r1, #15
 8000902:	f06f 0001 	mvn.w	r0, #1
 8000906:	f000 fa6b 	bl	8000de0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000938:	d130      	bne.n	800099c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <HAL_TIM_Encoder_MspInit+0x8c>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	4a19      	ldr	r2, [pc, #100]	; (80009a4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	61d3      	str	r3, [r2, #28]
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095c:	6153      	str	r3, [r2, #20]
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800096a:	2303      	movs	r3, #3
 800096c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800097a:	2301      	movs	r3, #1
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000988:	f000 fa54 	bl	8000e34 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2105      	movs	r1, #5
 8000990:	201c      	movs	r0, #28
 8000992:	f000 fa25 	bl	8000de0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000996:	201c      	movs	r0, #28
 8000998:	f000 fa3e 	bl	8000e18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800099c:	bf00      	nop
 800099e:	3728      	adds	r7, #40	; 0x28
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0x7c>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d127      	bne.n	8000a1a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_UART_MspInit+0x80>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <HAL_UART_MspInit+0x80>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d4:	6193      	str	r3, [r2, #24]
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_UART_MspInit+0x80>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_UART_MspInit+0x80>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <HAL_UART_MspInit+0x80>)
 80009e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009ec:	6153      	str	r3, [r2, #20]
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_UART_MspInit+0x80>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009fa:	2330      	movs	r3, #48	; 0x30
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_UART_MspInit+0x84>)
 8000a16:	f000 fa0d 	bl	8000e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	; 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40013800 	.word	0x40013800
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	48000800 	.word	0x48000800

08000a30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	; 0x38
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a40:	4b33      	ldr	r3, [pc, #204]	; (8000b10 <HAL_InitTick+0xe0>)
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	4a32      	ldr	r2, [pc, #200]	; (8000b10 <HAL_InitTick+0xe0>)
 8000a46:	f043 0310 	orr.w	r3, r3, #16
 8000a4a:	61d3      	str	r3, [r2, #28]
 8000a4c:	4b30      	ldr	r3, [pc, #192]	; (8000b10 <HAL_InitTick+0xe0>)
 8000a4e:	69db      	ldr	r3, [r3, #28]
 8000a50:	f003 0310 	and.w	r3, r3, #16
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a58:	f107 0210 	add.w	r2, r7, #16
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4611      	mov	r1, r2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 fdfc 	bl	8002660 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a68:	6a3b      	ldr	r3, [r7, #32]
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d103      	bne.n	8000a7a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a72:	f001 fdb1 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8000a76:	6378      	str	r0, [r7, #52]	; 0x34
 8000a78:	e004      	b.n	8000a84 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a7a:	f001 fdad 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <HAL_InitTick+0xe4>)
 8000a88:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8c:	0c9b      	lsrs	r3, r3, #18
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <HAL_InitTick+0xe8>)
 8000a94:	4a21      	ldr	r2, [pc, #132]	; (8000b1c <HAL_InitTick+0xec>)
 8000a96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <HAL_InitTick+0xe8>)
 8000a9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <HAL_InitTick+0xe8>)
 8000aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <HAL_InitTick+0xe8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <HAL_InitTick+0xe8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <HAL_InitTick+0xe8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ab8:	4817      	ldr	r0, [pc, #92]	; (8000b18 <HAL_InitTick+0xe8>)
 8000aba:	f001 ff95 	bl	80029e8 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ac4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d11b      	bne.n	8000b04 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000acc:	4812      	ldr	r0, [pc, #72]	; (8000b18 <HAL_InitTick+0xe8>)
 8000ace:	f001 ffed 	bl	8002aac <HAL_TIM_Base_Start_IT>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d111      	bne.n	8000b04 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ae0:	2036      	movs	r0, #54	; 0x36
 8000ae2:	f000 f999 	bl	8000e18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d808      	bhi.n	8000afe <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	2036      	movs	r0, #54	; 0x36
 8000af2:	f000 f975 	bl	8000de0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <HAL_InitTick+0xf0>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	e002      	b.n	8000b04 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3738      	adds	r7, #56	; 0x38
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40021000 	.word	0x40021000
 8000b14:	431bde83 	.word	0x431bde83
 8000b18:	20000164 	.word	0x20000164
 8000b1c:	40001000 	.word	0x40001000
 8000b20:	20000004 	.word	0x20000004

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler+0x4>

08000b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BREAK_1_Pin);
 8000b54:	2020      	movs	r0, #32
 8000b56:	f000 faf7 	bl	8001148 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BREAK_2_Pin);
 8000b5a:	2040      	movs	r0, #64	; 0x40
 8000b5c:	f000 faf4 	bl	8001148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <TIM2_IRQHandler+0x10>)
 8000b6a:	f002 f947 	bl	8002dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000007c 	.word	0x2000007c

08000b78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <TIM6_DAC_IRQHandler+0x10>)
 8000b7e:	f002 f93d 	bl	8002dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000164 	.word	0x20000164

08000b8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb4:	f7ff ffea 	bl	8000b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490d      	ldr	r1, [pc, #52]	; (8000bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0a      	ldr	r4, [pc, #40]	; (8000bfc <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bde:	f006 f8f3 	bl	8006dc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be2:	f7ff fb37 	bl	8000254 <main>

08000be6 <LoopForever>:

LoopForever:
    b LoopForever
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000be8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bf4:	0800719c 	.word	0x0800719c
  ldr r2, =_sbss
 8000bf8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bfc:	20001cd4 	.word	0x20001cd4

08000c00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_Init+0x28>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_Init+0x28>)
 8000c0e:	f043 0310 	orr.w	r3, r3, #16
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f8d8 	bl	8000dca <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f7ff ff08 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fe52 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40022000 	.word	0x40022000

08000c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008
 8000c54:	200001b0 	.word	0x200001b0

08000c58 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	200001b0 	.word	0x200001b0

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	; (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ff4c 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df2:	f7ff ff61 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000df6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	6978      	ldr	r0, [r7, #20]
 8000dfe:	f7ff ffb1 	bl	8000d64 <NVIC_EncodePriority>
 8000e02:	4602      	mov	r2, r0
 8000e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff80 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e10:	bf00      	nop
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff54 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e42:	e14e      	b.n	80010e2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	2101      	movs	r1, #1
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e50:	4013      	ands	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 8140 	beq.w	80010dc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d005      	beq.n	8000e74 <HAL_GPIO_Init+0x40>
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d130      	bne.n	8000ed6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eaa:	2201      	movs	r2, #1
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	f003 0201 	and.w	r2, r3, #1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d017      	beq.n	8000f12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	2203      	movs	r2, #3
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d123      	bne.n	8000f66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	08da      	lsrs	r2, r3, #3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3208      	adds	r2, #8
 8000f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	220f      	movs	r2, #15
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	691a      	ldr	r2, [r3, #16]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	08da      	lsrs	r2, r3, #3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3208      	adds	r2, #8
 8000f60:	6939      	ldr	r1, [r7, #16]
 8000f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	2203      	movs	r2, #3
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0203 	and.w	r2, r3, #3
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 809a 	beq.w	80010dc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa8:	4b55      	ldr	r3, [pc, #340]	; (8001100 <HAL_GPIO_Init+0x2cc>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a54      	ldr	r2, [pc, #336]	; (8001100 <HAL_GPIO_Init+0x2cc>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b52      	ldr	r3, [pc, #328]	; (8001100 <HAL_GPIO_Init+0x2cc>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fc0:	4a50      	ldr	r2, [pc, #320]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fea:	d013      	beq.n	8001014 <HAL_GPIO_Init+0x1e0>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a46      	ldr	r2, [pc, #280]	; (8001108 <HAL_GPIO_Init+0x2d4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d00d      	beq.n	8001010 <HAL_GPIO_Init+0x1dc>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a45      	ldr	r2, [pc, #276]	; (800110c <HAL_GPIO_Init+0x2d8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d007      	beq.n	800100c <HAL_GPIO_Init+0x1d8>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a44      	ldr	r2, [pc, #272]	; (8001110 <HAL_GPIO_Init+0x2dc>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d101      	bne.n	8001008 <HAL_GPIO_Init+0x1d4>
 8001004:	2303      	movs	r3, #3
 8001006:	e006      	b.n	8001016 <HAL_GPIO_Init+0x1e2>
 8001008:	2305      	movs	r3, #5
 800100a:	e004      	b.n	8001016 <HAL_GPIO_Init+0x1e2>
 800100c:	2302      	movs	r3, #2
 800100e:	e002      	b.n	8001016 <HAL_GPIO_Init+0x1e2>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <HAL_GPIO_Init+0x1e2>
 8001014:	2300      	movs	r3, #0
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	f002 0203 	and.w	r2, r2, #3
 800101c:	0092      	lsls	r2, r2, #2
 800101e:	4093      	lsls	r3, r2
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001026:	4937      	ldr	r1, [pc, #220]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001034:	4b37      	ldr	r3, [pc, #220]	; (8001114 <HAL_GPIO_Init+0x2e0>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	43db      	mvns	r3, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001058:	4a2e      	ldr	r2, [pc, #184]	; (8001114 <HAL_GPIO_Init+0x2e0>)
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800105e:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <HAL_GPIO_Init+0x2e0>)
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	43db      	mvns	r3, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001082:	4a24      	ldr	r2, [pc, #144]	; (8001114 <HAL_GPIO_Init+0x2e0>)
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <HAL_GPIO_Init+0x2e0>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	43db      	mvns	r3, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010ac:	4a19      	ldr	r2, [pc, #100]	; (8001114 <HAL_GPIO_Init+0x2e0>)
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_GPIO_Init+0x2e0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010d6:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <HAL_GPIO_Init+0x2e0>)
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	3301      	adds	r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f47f aea9 	bne.w	8000e44 <HAL_GPIO_Init+0x10>
  }
}
 80010f2:	bf00      	nop
 80010f4:	bf00      	nop
 80010f6:	371c      	adds	r7, #28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	40021000 	.word	0x40021000
 8001104:	40010000 	.word	0x40010000
 8001108:	48000400 	.word	0x48000400
 800110c:	48000800 	.word	0x48000800
 8001110:	48000c00 	.word	0x48000c00
 8001114:	40010400 	.word	0x40010400

08001118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	4013      	ands	r3, r2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e001      	b.n	800113a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001154:	695a      	ldr	r2, [r3, #20]
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	4013      	ands	r3, r2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fa42 	bl	80005f0 <HAL_GPIO_EXTI_Callback>
  }
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40010400 	.word	0x40010400

08001178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800117e:	af00      	add	r7, sp, #0
 8001180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001184:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001188:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800118a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800118e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	f001 b823 	b.w	80021e4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 817d 	beq.w	80014ae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011b4:	4bbc      	ldr	r3, [pc, #752]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 030c 	and.w	r3, r3, #12
 80011bc:	2b04      	cmp	r3, #4
 80011be:	d00c      	beq.n	80011da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011c0:	4bb9      	ldr	r3, [pc, #740]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 030c 	and.w	r3, r3, #12
 80011c8:	2b08      	cmp	r3, #8
 80011ca:	d15c      	bne.n	8001286 <HAL_RCC_OscConfig+0x10e>
 80011cc:	4bb6      	ldr	r3, [pc, #728]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d8:	d155      	bne.n	8001286 <HAL_RCC_OscConfig+0x10e>
 80011da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80011e6:	fa93 f3a3 	rbit	r3, r3
 80011ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f2:	fab3 f383 	clz	r3, r3
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	095b      	lsrs	r3, r3, #5
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b01      	cmp	r3, #1
 8001204:	d102      	bne.n	800120c <HAL_RCC_OscConfig+0x94>
 8001206:	4ba8      	ldr	r3, [pc, #672]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	e015      	b.n	8001238 <HAL_RCC_OscConfig+0xc0>
 800120c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001210:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001214:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001218:	fa93 f3a3 	rbit	r3, r3
 800121c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001224:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001228:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800122c:	fa93 f3a3 	rbit	r3, r3
 8001230:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001234:	4b9c      	ldr	r3, [pc, #624]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800123c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001240:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001244:	fa92 f2a2 	rbit	r2, r2
 8001248:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800124c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001250:	fab2 f282 	clz	r2, r2
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	f042 0220 	orr.w	r2, r2, #32
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	f002 021f 	and.w	r2, r2, #31
 8001260:	2101      	movs	r1, #1
 8001262:	fa01 f202 	lsl.w	r2, r1, r2
 8001266:	4013      	ands	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 811f 	beq.w	80014ac <HAL_RCC_OscConfig+0x334>
 800126e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001272:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f040 8116 	bne.w	80014ac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	f000 bfaf 	b.w	80021e4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800128a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001296:	d106      	bne.n	80012a6 <HAL_RCC_OscConfig+0x12e>
 8001298:	4b83      	ldr	r3, [pc, #524]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a82      	ldr	r2, [pc, #520]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 800129e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	e036      	b.n	8001314 <HAL_RCC_OscConfig+0x19c>
 80012a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x158>
 80012b6:	4b7c      	ldr	r3, [pc, #496]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a7b      	ldr	r2, [pc, #492]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 80012bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b79      	ldr	r3, [pc, #484]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a78      	ldr	r2, [pc, #480]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 80012c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e021      	b.n	8001314 <HAL_RCC_OscConfig+0x19c>
 80012d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012e0:	d10c      	bne.n	80012fc <HAL_RCC_OscConfig+0x184>
 80012e2:	4b71      	ldr	r3, [pc, #452]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a70      	ldr	r2, [pc, #448]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 80012e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4b6e      	ldr	r3, [pc, #440]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a6d      	ldr	r2, [pc, #436]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e00b      	b.n	8001314 <HAL_RCC_OscConfig+0x19c>
 80012fc:	4b6a      	ldr	r3, [pc, #424]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a69      	ldr	r2, [pc, #420]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 8001302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b67      	ldr	r3, [pc, #412]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a66      	ldr	r2, [pc, #408]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 800130e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001312:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001314:	4b64      	ldr	r3, [pc, #400]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	f023 020f 	bic.w	r2, r3, #15
 800131c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001320:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	495f      	ldr	r1, [pc, #380]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 800132a:	4313      	orrs	r3, r2
 800132c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800132e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d059      	beq.n	80013f2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133e:	f7ff fc8b 	bl	8000c58 <HAL_GetTick>
 8001342:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	e00a      	b.n	800135e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fc86 	bl	8000c58 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b64      	cmp	r3, #100	; 0x64
 8001356:	d902      	bls.n	800135e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	f000 bf43 	b.w	80021e4 <HAL_RCC_OscConfig+0x106c>
 800135e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001362:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001366:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800136a:	fa93 f3a3 	rbit	r3, r3
 800136e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001372:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	fab3 f383 	clz	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	095b      	lsrs	r3, r3, #5
 800137e:	b2db      	uxtb	r3, r3
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b01      	cmp	r3, #1
 8001388:	d102      	bne.n	8001390 <HAL_RCC_OscConfig+0x218>
 800138a:	4b47      	ldr	r3, [pc, #284]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	e015      	b.n	80013bc <HAL_RCC_OscConfig+0x244>
 8001390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001394:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001398:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800139c:	fa93 f3a3 	rbit	r3, r3
 80013a0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80013a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80013ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80013b0:	fa93 f3a3 	rbit	r3, r3
 80013b4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80013b8:	4b3b      	ldr	r3, [pc, #236]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013c0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80013c4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80013c8:	fa92 f2a2 	rbit	r2, r2
 80013cc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80013d0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80013d4:	fab2 f282 	clz	r2, r2
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	f042 0220 	orr.w	r2, r2, #32
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	f002 021f 	and.w	r2, r2, #31
 80013e4:	2101      	movs	r1, #1
 80013e6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ea:	4013      	ands	r3, r2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0ab      	beq.n	8001348 <HAL_RCC_OscConfig+0x1d0>
 80013f0:	e05d      	b.n	80014ae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f2:	f7ff fc31 	bl	8000c58 <HAL_GetTick>
 80013f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fa:	e00a      	b.n	8001412 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff fc2c 	bl	8000c58 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b64      	cmp	r3, #100	; 0x64
 800140a:	d902      	bls.n	8001412 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	f000 bee9 	b.w	80021e4 <HAL_RCC_OscConfig+0x106c>
 8001412:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001416:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800141e:	fa93 f3a3 	rbit	r3, r3
 8001422:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001426:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142a:	fab3 f383 	clz	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	095b      	lsrs	r3, r3, #5
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b01      	cmp	r3, #1
 800143c:	d102      	bne.n	8001444 <HAL_RCC_OscConfig+0x2cc>
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	e015      	b.n	8001470 <HAL_RCC_OscConfig+0x2f8>
 8001444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001448:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001450:	fa93 f3a3 	rbit	r3, r3
 8001454:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800145c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001460:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <HAL_RCC_OscConfig+0x330>)
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001474:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001478:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800147c:	fa92 f2a2 	rbit	r2, r2
 8001480:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001484:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001488:	fab2 f282 	clz	r2, r2
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	f042 0220 	orr.w	r2, r2, #32
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	f002 021f 	and.w	r2, r2, #31
 8001498:	2101      	movs	r1, #1
 800149a:	fa01 f202 	lsl.w	r2, r1, r2
 800149e:	4013      	ands	r3, r2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1ab      	bne.n	80013fc <HAL_RCC_OscConfig+0x284>
 80014a4:	e003      	b.n	80014ae <HAL_RCC_OscConfig+0x336>
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 817d 	beq.w	80017be <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014c4:	4ba6      	ldr	r3, [pc, #664]	; (8001760 <HAL_RCC_OscConfig+0x5e8>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00b      	beq.n	80014e8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014d0:	4ba3      	ldr	r3, [pc, #652]	; (8001760 <HAL_RCC_OscConfig+0x5e8>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d172      	bne.n	80015c2 <HAL_RCC_OscConfig+0x44a>
 80014dc:	4ba0      	ldr	r3, [pc, #640]	; (8001760 <HAL_RCC_OscConfig+0x5e8>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d16c      	bne.n	80015c2 <HAL_RCC_OscConfig+0x44a>
 80014e8:	2302      	movs	r3, #2
 80014ea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80014f2:	fa93 f3a3 	rbit	r3, r3
 80014f6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80014fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fe:	fab3 f383 	clz	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	095b      	lsrs	r3, r3, #5
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b01      	cmp	r3, #1
 8001510:	d102      	bne.n	8001518 <HAL_RCC_OscConfig+0x3a0>
 8001512:	4b93      	ldr	r3, [pc, #588]	; (8001760 <HAL_RCC_OscConfig+0x5e8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	e013      	b.n	8001540 <HAL_RCC_OscConfig+0x3c8>
 8001518:	2302      	movs	r3, #2
 800151a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800152a:	2302      	movs	r3, #2
 800152c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001530:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001534:	fa93 f3a3 	rbit	r3, r3
 8001538:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800153c:	4b88      	ldr	r3, [pc, #544]	; (8001760 <HAL_RCC_OscConfig+0x5e8>)
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	2202      	movs	r2, #2
 8001542:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001546:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800154a:	fa92 f2a2 	rbit	r2, r2
 800154e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001552:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001556:	fab2 f282 	clz	r2, r2
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	f042 0220 	orr.w	r2, r2, #32
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	f002 021f 	and.w	r2, r2, #31
 8001566:	2101      	movs	r1, #1
 8001568:	fa01 f202 	lsl.w	r2, r1, r2
 800156c:	4013      	ands	r3, r2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00a      	beq.n	8001588 <HAL_RCC_OscConfig+0x410>
 8001572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001576:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d002      	beq.n	8001588 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	f000 be2e 	b.w	80021e4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001588:	4b75      	ldr	r3, [pc, #468]	; (8001760 <HAL_RCC_OscConfig+0x5e8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001594:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	21f8      	movs	r1, #248	; 0xf8
 800159e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80015a6:	fa91 f1a1 	rbit	r1, r1
 80015aa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80015ae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80015b2:	fab1 f181 	clz	r1, r1
 80015b6:	b2c9      	uxtb	r1, r1
 80015b8:	408b      	lsls	r3, r1
 80015ba:	4969      	ldr	r1, [pc, #420]	; (8001760 <HAL_RCC_OscConfig+0x5e8>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c0:	e0fd      	b.n	80017be <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 8088 	beq.w	80016e4 <HAL_RCC_OscConfig+0x56c>
 80015d4:	2301      	movs	r3, #1
 80015d6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80015de:	fa93 f3a3 	rbit	r3, r3
 80015e2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80015e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ea:	fab3 f383 	clz	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	461a      	mov	r2, r3
 80015fc:	2301      	movs	r3, #1
 80015fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fb2a 	bl	8000c58 <HAL_GetTick>
 8001604:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001608:	e00a      	b.n	8001620 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800160a:	f7ff fb25 	bl	8000c58 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d902      	bls.n	8001620 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	f000 bde2 	b.w	80021e4 <HAL_RCC_OscConfig+0x106c>
 8001620:	2302      	movs	r3, #2
 8001622:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001626:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800162a:	fa93 f3a3 	rbit	r3, r3
 800162e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001632:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001636:	fab3 f383 	clz	r3, r3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	095b      	lsrs	r3, r3, #5
 800163e:	b2db      	uxtb	r3, r3
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b01      	cmp	r3, #1
 8001648:	d102      	bne.n	8001650 <HAL_RCC_OscConfig+0x4d8>
 800164a:	4b45      	ldr	r3, [pc, #276]	; (8001760 <HAL_RCC_OscConfig+0x5e8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	e013      	b.n	8001678 <HAL_RCC_OscConfig+0x500>
 8001650:	2302      	movs	r3, #2
 8001652:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001656:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800165a:	fa93 f3a3 	rbit	r3, r3
 800165e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001662:	2302      	movs	r3, #2
 8001664:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001668:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800166c:	fa93 f3a3 	rbit	r3, r3
 8001670:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001674:	4b3a      	ldr	r3, [pc, #232]	; (8001760 <HAL_RCC_OscConfig+0x5e8>)
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	2202      	movs	r2, #2
 800167a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800167e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001682:	fa92 f2a2 	rbit	r2, r2
 8001686:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800168a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800168e:	fab2 f282 	clz	r2, r2
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	f042 0220 	orr.w	r2, r2, #32
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	f002 021f 	and.w	r2, r2, #31
 800169e:	2101      	movs	r1, #1
 80016a0:	fa01 f202 	lsl.w	r2, r1, r2
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0af      	beq.n	800160a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016aa:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <HAL_RCC_OscConfig+0x5e8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	21f8      	movs	r1, #248	; 0xf8
 80016c0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80016c8:	fa91 f1a1 	rbit	r1, r1
 80016cc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80016d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80016d4:	fab1 f181 	clz	r1, r1
 80016d8:	b2c9      	uxtb	r1, r1
 80016da:	408b      	lsls	r3, r1
 80016dc:	4920      	ldr	r1, [pc, #128]	; (8001760 <HAL_RCC_OscConfig+0x5e8>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]
 80016e2:	e06c      	b.n	80017be <HAL_RCC_OscConfig+0x646>
 80016e4:	2301      	movs	r3, #1
 80016e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80016ee:	fa93 f3a3 	rbit	r3, r3
 80016f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80016f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fa:	fab3 f383 	clz	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001704:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	461a      	mov	r2, r3
 800170c:	2300      	movs	r3, #0
 800170e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff faa2 	bl	8000c58 <HAL_GetTick>
 8001714:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001718:	e00a      	b.n	8001730 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800171a:	f7ff fa9d 	bl	8000c58 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d902      	bls.n	8001730 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	f000 bd5a 	b.w	80021e4 <HAL_RCC_OscConfig+0x106c>
 8001730:	2302      	movs	r3, #2
 8001732:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001736:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800173a:	fa93 f3a3 	rbit	r3, r3
 800173e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	095b      	lsrs	r3, r3, #5
 800174e:	b2db      	uxtb	r3, r3
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b01      	cmp	r3, #1
 8001758:	d104      	bne.n	8001764 <HAL_RCC_OscConfig+0x5ec>
 800175a:	4b01      	ldr	r3, [pc, #4]	; (8001760 <HAL_RCC_OscConfig+0x5e8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	e015      	b.n	800178c <HAL_RCC_OscConfig+0x614>
 8001760:	40021000 	.word	0x40021000
 8001764:	2302      	movs	r3, #2
 8001766:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800176e:	fa93 f3a3 	rbit	r3, r3
 8001772:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001776:	2302      	movs	r3, #2
 8001778:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800177c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001780:	fa93 f3a3 	rbit	r3, r3
 8001784:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001788:	4bc8      	ldr	r3, [pc, #800]	; (8001aac <HAL_RCC_OscConfig+0x934>)
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	2202      	movs	r2, #2
 800178e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001792:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001796:	fa92 f2a2 	rbit	r2, r2
 800179a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800179e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80017a2:	fab2 f282 	clz	r2, r2
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	f042 0220 	orr.w	r2, r2, #32
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	f002 021f 	and.w	r2, r2, #31
 80017b2:	2101      	movs	r1, #1
 80017b4:	fa01 f202 	lsl.w	r2, r1, r2
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1ad      	bne.n	800171a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 8110 	beq.w	80019f4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d079      	beq.n	80018d8 <HAL_RCC_OscConfig+0x760>
 80017e4:	2301      	movs	r3, #1
 80017e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017ee:	fa93 f3a3 	rbit	r3, r3
 80017f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80017f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017fa:	fab3 f383 	clz	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	4bab      	ldr	r3, [pc, #684]	; (8001ab0 <HAL_RCC_OscConfig+0x938>)
 8001804:	4413      	add	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	461a      	mov	r2, r3
 800180a:	2301      	movs	r3, #1
 800180c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180e:	f7ff fa23 	bl	8000c58 <HAL_GetTick>
 8001812:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001816:	e00a      	b.n	800182e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001818:	f7ff fa1e 	bl	8000c58 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d902      	bls.n	800182e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	f000 bcdb 	b.w	80021e4 <HAL_RCC_OscConfig+0x106c>
 800182e:	2302      	movs	r3, #2
 8001830:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001838:	fa93 f3a3 	rbit	r3, r3
 800183c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001844:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001848:	2202      	movs	r2, #2
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001850:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	fa93 f2a3 	rbit	r2, r3
 800185a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800186c:	2202      	movs	r2, #2
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	fa93 f2a3 	rbit	r2, r3
 800187e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001882:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001886:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001888:	4b88      	ldr	r3, [pc, #544]	; (8001aac <HAL_RCC_OscConfig+0x934>)
 800188a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001890:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001894:	2102      	movs	r1, #2
 8001896:	6019      	str	r1, [r3, #0]
 8001898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	fa93 f1a3 	rbit	r1, r3
 80018a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018ae:	6019      	str	r1, [r3, #0]
  return result;
 80018b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	2101      	movs	r1, #1
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0a0      	beq.n	8001818 <HAL_RCC_OscConfig+0x6a0>
 80018d6:	e08d      	b.n	80019f4 <HAL_RCC_OscConfig+0x87c>
 80018d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80018e0:	2201      	movs	r2, #1
 80018e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	fa93 f2a3 	rbit	r2, r3
 80018f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018fa:	601a      	str	r2, [r3, #0]
  return result;
 80018fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001900:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001904:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001906:	fab3 f383 	clz	r3, r3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	4b68      	ldr	r3, [pc, #416]	; (8001ab0 <HAL_RCC_OscConfig+0x938>)
 8001910:	4413      	add	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	461a      	mov	r2, r3
 8001916:	2300      	movs	r3, #0
 8001918:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191a:	f7ff f99d 	bl	8000c58 <HAL_GetTick>
 800191e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001922:	e00a      	b.n	800193a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff f998 	bl	8000c58 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d902      	bls.n	800193a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	f000 bc55 	b.w	80021e4 <HAL_RCC_OscConfig+0x106c>
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001942:	2202      	movs	r2, #2
 8001944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	fa93 f2a3 	rbit	r2, r3
 8001954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001958:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001962:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001966:	2202      	movs	r2, #2
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	fa93 f2a3 	rbit	r2, r3
 8001978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800198a:	2202      	movs	r2, #2
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	fa93 f2a3 	rbit	r2, r3
 800199c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a6:	4b41      	ldr	r3, [pc, #260]	; (8001aac <HAL_RCC_OscConfig+0x934>)
 80019a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80019b2:	2102      	movs	r1, #2
 80019b4:	6019      	str	r1, [r3, #0]
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	fa93 f1a3 	rbit	r1, r3
 80019c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80019cc:	6019      	str	r1, [r3, #0]
  return result;
 80019ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f003 031f 	and.w	r3, r3, #31
 80019e8:	2101      	movs	r1, #1
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d197      	bne.n	8001924 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 81a1 	beq.w	8001d4c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a10:	4b26      	ldr	r3, [pc, #152]	; (8001aac <HAL_RCC_OscConfig+0x934>)
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d116      	bne.n	8001a4a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <HAL_RCC_OscConfig+0x934>)
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	4a22      	ldr	r2, [pc, #136]	; (8001aac <HAL_RCC_OscConfig+0x934>)
 8001a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a26:	61d3      	str	r3, [r2, #28]
 8001a28:	4b20      	ldr	r3, [pc, #128]	; (8001aac <HAL_RCC_OscConfig+0x934>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a34:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001a42:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a44:	2301      	movs	r3, #1
 8001a46:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <HAL_RCC_OscConfig+0x93c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d11a      	bne.n	8001a8c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_RCC_OscConfig+0x93c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a16      	ldr	r2, [pc, #88]	; (8001ab4 <HAL_RCC_OscConfig+0x93c>)
 8001a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a62:	f7ff f8f9 	bl	8000c58 <HAL_GetTick>
 8001a66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6a:	e009      	b.n	8001a80 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6c:	f7ff f8f4 	bl	8000c58 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b64      	cmp	r3, #100	; 0x64
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e3b1      	b.n	80021e4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <HAL_RCC_OscConfig+0x93c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ef      	beq.n	8001a6c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d10d      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x940>
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <HAL_RCC_OscConfig+0x934>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4a02      	ldr	r2, [pc, #8]	; (8001aac <HAL_RCC_OscConfig+0x934>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6213      	str	r3, [r2, #32]
 8001aa8:	e03c      	b.n	8001b24 <HAL_RCC_OscConfig+0x9ac>
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	10908120 	.word	0x10908120
 8001ab4:	40007000 	.word	0x40007000
 8001ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10c      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x96a>
 8001ac8:	4bc1      	ldr	r3, [pc, #772]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4ac0      	ldr	r2, [pc, #768]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001ace:	f023 0301 	bic.w	r3, r3, #1
 8001ad2:	6213      	str	r3, [r2, #32]
 8001ad4:	4bbe      	ldr	r3, [pc, #760]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	4abd      	ldr	r2, [pc, #756]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001ada:	f023 0304 	bic.w	r3, r3, #4
 8001ade:	6213      	str	r3, [r2, #32]
 8001ae0:	e020      	b.n	8001b24 <HAL_RCC_OscConfig+0x9ac>
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b05      	cmp	r3, #5
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x994>
 8001af2:	4bb7      	ldr	r3, [pc, #732]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	4ab6      	ldr	r2, [pc, #728]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	6213      	str	r3, [r2, #32]
 8001afe:	4bb4      	ldr	r3, [pc, #720]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	4ab3      	ldr	r2, [pc, #716]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6213      	str	r3, [r2, #32]
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0x9ac>
 8001b0c:	4bb0      	ldr	r3, [pc, #704]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	4aaf      	ldr	r2, [pc, #700]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	6213      	str	r3, [r2, #32]
 8001b18:	4bad      	ldr	r3, [pc, #692]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	4aac      	ldr	r2, [pc, #688]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001b1e:	f023 0304 	bic.w	r3, r3, #4
 8001b22:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 8081 	beq.w	8001c38 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b36:	f7ff f88f 	bl	8000c58 <HAL_GetTick>
 8001b3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7ff f88a 	bl	8000c58 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e345      	b.n	80021e4 <HAL_RCC_OscConfig+0x106c>
 8001b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b60:	2202      	movs	r2, #2
 8001b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b68:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	fa93 f2a3 	rbit	r2, r3
 8001b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b76:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b80:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001b84:	2202      	movs	r2, #2
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	fa93 f2a3 	rbit	r2, r3
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b9e:	601a      	str	r2, [r3, #0]
  return result;
 8001ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ba8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	095b      	lsrs	r3, r3, #5
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d102      	bne.n	8001bc4 <HAL_RCC_OscConfig+0xa4c>
 8001bbe:	4b84      	ldr	r3, [pc, #528]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	e013      	b.n	8001bec <HAL_RCC_OscConfig+0xa74>
 8001bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001bcc:	2202      	movs	r2, #2
 8001bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	4b79      	ldr	r3, [pc, #484]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bf0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001bf4:	2102      	movs	r1, #2
 8001bf6:	6011      	str	r1, [r2, #0]
 8001bf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bfc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	fa92 f1a2 	rbit	r1, r2
 8001c06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c0a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001c0e:	6011      	str	r1, [r2, #0]
  return result;
 8001c10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c14:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	fab2 f282 	clz	r2, r2
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	f002 021f 	and.w	r2, r2, #31
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d084      	beq.n	8001b40 <HAL_RCC_OscConfig+0x9c8>
 8001c36:	e07f      	b.n	8001d38 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c38:	f7ff f80e 	bl	8000c58 <HAL_GetTick>
 8001c3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c40:	e00b      	b.n	8001c5a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c42:	f7ff f809 	bl	8000c58 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e2c4      	b.n	80021e4 <HAL_RCC_OscConfig+0x106c>
 8001c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001c62:	2202      	movs	r2, #2
 8001c64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	fa93 f2a3 	rbit	r2, r3
 8001c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c78:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c82:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c86:	2202      	movs	r2, #2
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	fa93 f2a3 	rbit	r2, r3
 8001c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ca0:	601a      	str	r2, [r3, #0]
  return result;
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001caa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f043 0302 	orr.w	r3, r3, #2
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d102      	bne.n	8001cc6 <HAL_RCC_OscConfig+0xb4e>
 8001cc0:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	e013      	b.n	8001cee <HAL_RCC_OscConfig+0xb76>
 8001cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001cce:	2202      	movs	r2, #2
 8001cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	fa93 f2a3 	rbit	r2, r3
 8001ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cf2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	6011      	str	r1, [r2, #0]
 8001cfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cfe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	fa92 f1a2 	rbit	r1, r2
 8001d08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d0c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d10:	6011      	str	r1, [r2, #0]
  return result;
 8001d12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d16:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	fab2 f282 	clz	r2, r2
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	f002 021f 	and.w	r2, r2, #31
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d184      	bne.n	8001c42 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d38:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d105      	bne.n	8001d4c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d40:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	4a22      	ldr	r2, [pc, #136]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 8242 	beq.w	80021e2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <HAL_RCC_OscConfig+0xc58>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	f000 8213 	beq.w	8002192 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	f040 8162 	bne.w	8002042 <HAL_RCC_OscConfig+0xeca>
 8001d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d82:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001d86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d90:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	fa93 f2a3 	rbit	r2, r3
 8001d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001da2:	601a      	str	r2, [r3, #0]
  return result;
 8001da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001dac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001db8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7fe ff48 	bl	8000c58 <HAL_GetTick>
 8001dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dcc:	e00c      	b.n	8001de8 <HAL_RCC_OscConfig+0xc70>
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7fe ff40 	bl	8000c58 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e1fd      	b.n	80021e4 <HAL_RCC_OscConfig+0x106c>
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001df0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	fa93 f2a3 	rbit	r2, r3
 8001e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e08:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e0c:	601a      	str	r2, [r3, #0]
  return result;
 8001e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e12:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e16:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d102      	bne.n	8001e32 <HAL_RCC_OscConfig+0xcba>
 8001e2c:	4bb0      	ldr	r3, [pc, #704]	; (80020f0 <HAL_RCC_OscConfig+0xf78>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	e027      	b.n	8001e82 <HAL_RCC_OscConfig+0xd0a>
 8001e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e36:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e44:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	fa93 f2a3 	rbit	r2, r3
 8001e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e52:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001e60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	fa93 f2a3 	rbit	r2, r3
 8001e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e78:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	4b9c      	ldr	r3, [pc, #624]	; (80020f0 <HAL_RCC_OscConfig+0xf78>)
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e86:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001e8a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e8e:	6011      	str	r1, [r2, #0]
 8001e90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e94:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	fa92 f1a2 	rbit	r1, r2
 8001e9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ea2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ea6:	6011      	str	r1, [r2, #0]
  return result;
 8001ea8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	fab2 f282 	clz	r2, r2
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f042 0220 	orr.w	r2, r2, #32
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	f002 021f 	and.w	r2, r2, #31
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d182      	bne.n	8001dd4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ece:	4b88      	ldr	r3, [pc, #544]	; (80020f0 <HAL_RCC_OscConfig+0xf78>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	497f      	ldr	r1, [pc, #508]	; (80020f0 <HAL_RCC_OscConfig+0xf78>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
 8001ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001efe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f08:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	fa93 f2a3 	rbit	r2, r3
 8001f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f16:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f1a:	601a      	str	r2, [r3, #0]
  return result;
 8001f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f20:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f24:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	461a      	mov	r2, r3
 8001f38:	2301      	movs	r3, #1
 8001f3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7fe fe8c 	bl	8000c58 <HAL_GetTick>
 8001f40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f44:	e009      	b.n	8001f5a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f46:	f7fe fe87 	bl	8000c58 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e144      	b.n	80021e4 <HAL_RCC_OscConfig+0x106c>
 8001f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	fa93 f2a3 	rbit	r2, r3
 8001f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f7e:	601a      	str	r2, [r3, #0]
  return result;
 8001f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f84:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f8a:	fab3 f383 	clz	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	095b      	lsrs	r3, r3, #5
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d102      	bne.n	8001fa4 <HAL_RCC_OscConfig+0xe2c>
 8001f9e:	4b54      	ldr	r3, [pc, #336]	; (80020f0 <HAL_RCC_OscConfig+0xf78>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	e027      	b.n	8001ff4 <HAL_RCC_OscConfig+0xe7c>
 8001fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001fac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	fa93 f2a3 	rbit	r2, r3
 8001fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001fd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fdc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	fa93 f2a3 	rbit	r2, r3
 8001fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	4b3f      	ldr	r3, [pc, #252]	; (80020f0 <HAL_RCC_OscConfig+0xf78>)
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ff8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ffc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002000:	6011      	str	r1, [r2, #0]
 8002002:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002006:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	fa92 f1a2 	rbit	r1, r2
 8002010:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002014:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002018:	6011      	str	r1, [r2, #0]
  return result;
 800201a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800201e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	fab2 f282 	clz	r2, r2
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	f042 0220 	orr.w	r2, r2, #32
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	f002 021f 	and.w	r2, r2, #31
 8002034:	2101      	movs	r1, #1
 8002036:	fa01 f202 	lsl.w	r2, r1, r2
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d082      	beq.n	8001f46 <HAL_RCC_OscConfig+0xdce>
 8002040:	e0cf      	b.n	80021e2 <HAL_RCC_OscConfig+0x106a>
 8002042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002046:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800204a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800204e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002054:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	fa93 f2a3 	rbit	r2, r3
 800205e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002062:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002066:	601a      	str	r2, [r3, #0]
  return result;
 8002068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002070:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800207c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	461a      	mov	r2, r3
 8002084:	2300      	movs	r3, #0
 8002086:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002088:	f7fe fde6 	bl	8000c58 <HAL_GetTick>
 800208c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002090:	e009      	b.n	80020a6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002092:	f7fe fde1 	bl	8000c58 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e09e      	b.n	80021e4 <HAL_RCC_OscConfig+0x106c>
 80020a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020aa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80020ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	fa93 f2a3 	rbit	r2, r3
 80020c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80020ca:	601a      	str	r2, [r3, #0]
  return result;
 80020cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80020d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	095b      	lsrs	r3, r3, #5
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d104      	bne.n	80020f4 <HAL_RCC_OscConfig+0xf7c>
 80020ea:	4b01      	ldr	r3, [pc, #4]	; (80020f0 <HAL_RCC_OscConfig+0xf78>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	e029      	b.n	8002144 <HAL_RCC_OscConfig+0xfcc>
 80020f0:	40021000 	.word	0x40021000
 80020f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002106:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	fa93 f2a3 	rbit	r2, r3
 8002110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002114:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002122:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	fa93 f2a3 	rbit	r2, r3
 8002136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <HAL_RCC_OscConfig+0x1078>)
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002148:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800214c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002150:	6011      	str	r1, [r2, #0]
 8002152:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002156:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	fa92 f1a2 	rbit	r1, r2
 8002160:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002164:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002168:	6011      	str	r1, [r2, #0]
  return result;
 800216a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800216e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	fab2 f282 	clz	r2, r2
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	f042 0220 	orr.w	r2, r2, #32
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	f002 021f 	and.w	r2, r2, #31
 8002184:	2101      	movs	r1, #1
 8002186:	fa01 f202 	lsl.w	r2, r1, r2
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d180      	bne.n	8002092 <HAL_RCC_OscConfig+0xf1a>
 8002190:	e027      	b.n	80021e2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002196:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e01e      	b.n	80021e4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_RCC_OscConfig+0x1078>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80021b2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d10b      	bne.n	80021de <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80021c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80021ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021da:	429a      	cmp	r2, r3
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000

080021f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b09e      	sub	sp, #120	; 0x78
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e162      	b.n	80024d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b90      	ldr	r3, [pc, #576]	; (8002450 <HAL_RCC_ClockConfig+0x25c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d910      	bls.n	800223c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b8d      	ldr	r3, [pc, #564]	; (8002450 <HAL_RCC_ClockConfig+0x25c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	498b      	ldr	r1, [pc, #556]	; (8002450 <HAL_RCC_ClockConfig+0x25c>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b89      	ldr	r3, [pc, #548]	; (8002450 <HAL_RCC_ClockConfig+0x25c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e14a      	b.n	80024d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002248:	4b82      	ldr	r3, [pc, #520]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	497f      	ldr	r1, [pc, #508]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80dc 	beq.w	8002420 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d13c      	bne.n	80022ea <HAL_RCC_ClockConfig+0xf6>
 8002270:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002274:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800227e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d102      	bne.n	800229a <HAL_RCC_ClockConfig+0xa6>
 8002294:	4b6f      	ldr	r3, [pc, #444]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	e00f      	b.n	80022ba <HAL_RCC_ClockConfig+0xc6>
 800229a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800229e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	667b      	str	r3, [r7, #100]	; 0x64
 80022a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ac:	663b      	str	r3, [r7, #96]	; 0x60
 80022ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022b6:	4b67      	ldr	r3, [pc, #412]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022be:	65ba      	str	r2, [r7, #88]	; 0x58
 80022c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022c2:	fa92 f2a2 	rbit	r2, r2
 80022c6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80022c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022ca:	fab2 f282 	clz	r2, r2
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	f042 0220 	orr.w	r2, r2, #32
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	f002 021f 	and.w	r2, r2, #31
 80022da:	2101      	movs	r1, #1
 80022dc:	fa01 f202 	lsl.w	r2, r1, r2
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d17b      	bne.n	80023de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e0f3      	b.n	80024d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d13c      	bne.n	800236c <HAL_RCC_ClockConfig+0x178>
 80022f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022fa:	fa93 f3a3 	rbit	r3, r3
 80022fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b01      	cmp	r3, #1
 8002314:	d102      	bne.n	800231c <HAL_RCC_ClockConfig+0x128>
 8002316:	4b4f      	ldr	r3, [pc, #316]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	e00f      	b.n	800233c <HAL_RCC_ClockConfig+0x148>
 800231c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002320:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	647b      	str	r3, [r7, #68]	; 0x44
 800232a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800232e:	643b      	str	r3, [r7, #64]	; 0x40
 8002330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002338:	4b46      	ldr	r3, [pc, #280]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002340:	63ba      	str	r2, [r7, #56]	; 0x38
 8002342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002344:	fa92 f2a2 	rbit	r2, r2
 8002348:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800234a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800234c:	fab2 f282 	clz	r2, r2
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f042 0220 	orr.w	r2, r2, #32
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	f002 021f 	and.w	r2, r2, #31
 800235c:	2101      	movs	r1, #1
 800235e:	fa01 f202 	lsl.w	r2, r1, r2
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d13a      	bne.n	80023de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0b2      	b.n	80024d2 <HAL_RCC_ClockConfig+0x2de>
 800236c:	2302      	movs	r3, #2
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	095b      	lsrs	r3, r3, #5
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b01      	cmp	r3, #1
 800238c:	d102      	bne.n	8002394 <HAL_RCC_ClockConfig+0x1a0>
 800238e:	4b31      	ldr	r3, [pc, #196]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	e00d      	b.n	80023b0 <HAL_RCC_ClockConfig+0x1bc>
 8002394:	2302      	movs	r3, #2
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
 80023a0:	2302      	movs	r3, #2
 80023a2:	623b      	str	r3, [r7, #32]
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	4b29      	ldr	r3, [pc, #164]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	2202      	movs	r2, #2
 80023b2:	61ba      	str	r2, [r7, #24]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	fa92 f2a2 	rbit	r2, r2
 80023ba:	617a      	str	r2, [r7, #20]
  return result;
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	fab2 f282 	clz	r2, r2
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	f042 0220 	orr.w	r2, r2, #32
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	f002 021f 	and.w	r2, r2, #31
 80023ce:	2101      	movs	r1, #1
 80023d0:	fa01 f202 	lsl.w	r2, r1, r2
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e079      	b.n	80024d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f023 0203 	bic.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	491a      	ldr	r1, [pc, #104]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7fe fc32 	bl	8000c58 <HAL_GetTick>
 80023f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7fe fc2e 	bl	8000c58 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e061      	b.n	80024d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 020c 	and.w	r2, r3, #12
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1eb      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCC_ClockConfig+0x25c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d214      	bcs.n	8002458 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_RCC_ClockConfig+0x25c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 0207 	bic.w	r2, r3, #7
 8002436:	4906      	ldr	r1, [pc, #24]	; (8002450 <HAL_RCC_ClockConfig+0x25c>)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	4b04      	ldr	r3, [pc, #16]	; (8002450 <HAL_RCC_ClockConfig+0x25c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d005      	beq.n	8002458 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e040      	b.n	80024d2 <HAL_RCC_ClockConfig+0x2de>
 8002450:	40022000 	.word	0x40022000
 8002454:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002464:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_RCC_ClockConfig+0x2e8>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	491a      	ldr	r1, [pc, #104]	; (80024dc <HAL_RCC_ClockConfig+0x2e8>)
 8002472:	4313      	orrs	r3, r2
 8002474:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002482:	4b16      	ldr	r3, [pc, #88]	; (80024dc <HAL_RCC_ClockConfig+0x2e8>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4912      	ldr	r1, [pc, #72]	; (80024dc <HAL_RCC_ClockConfig+0x2e8>)
 8002492:	4313      	orrs	r3, r2
 8002494:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002496:	f000 f829 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 800249a:	4601      	mov	r1, r0
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <HAL_RCC_ClockConfig+0x2e8>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024a4:	22f0      	movs	r2, #240	; 0xf0
 80024a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	fa92 f2a2 	rbit	r2, r2
 80024ae:	60fa      	str	r2, [r7, #12]
  return result;
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	fab2 f282 	clz	r2, r2
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	40d3      	lsrs	r3, r2
 80024ba:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <HAL_RCC_ClockConfig+0x2ec>)
 80024bc:	5cd3      	ldrb	r3, [r2, r3]
 80024be:	fa21 f303 	lsr.w	r3, r1, r3
 80024c2:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <HAL_RCC_ClockConfig+0x2f0>)
 80024c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_RCC_ClockConfig+0x2f4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe fab0 	bl	8000a30 <HAL_InitTick>
  
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3778      	adds	r7, #120	; 0x78
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000
 80024e0:	0800715c 	.word	0x0800715c
 80024e4:	20000000 	.word	0x20000000
 80024e8:	20000004 	.word	0x20000004

080024ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b08b      	sub	sp, #44	; 0x2c
 80024f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	2300      	movs	r3, #0
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002506:	4b29      	ldr	r3, [pc, #164]	; (80025ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b04      	cmp	r3, #4
 8002514:	d002      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x30>
 8002516:	2b08      	cmp	r3, #8
 8002518:	d003      	beq.n	8002522 <HAL_RCC_GetSysClockFreq+0x36>
 800251a:	e03c      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800251e:	623b      	str	r3, [r7, #32]
      break;
 8002520:	e03c      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002528:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800252c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	fa92 f2a2 	rbit	r2, r2
 8002534:	607a      	str	r2, [r7, #4]
  return result;
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	fab2 f282 	clz	r2, r2
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	40d3      	lsrs	r3, r2
 8002540:	4a1c      	ldr	r2, [pc, #112]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002542:	5cd3      	ldrb	r3, [r2, r3]
 8002544:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	220f      	movs	r2, #15
 8002550:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	fa92 f2a2 	rbit	r2, r2
 8002558:	60fa      	str	r2, [r7, #12]
  return result;
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	fab2 f282 	clz	r2, r2
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	40d3      	lsrs	r3, r2
 8002564:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002566:	5cd3      	ldrb	r3, [r2, r3]
 8002568:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002574:	4a0e      	ldr	r2, [pc, #56]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	fbb2 f2f3 	udiv	r2, r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
 8002584:	e004      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	4a0c      	ldr	r2, [pc, #48]	; (80025bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800258a:	fb02 f303 	mul.w	r3, r2, r3
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	623b      	str	r3, [r7, #32]
      break;
 8002594:	e002      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002598:	623b      	str	r3, [r7, #32]
      break;
 800259a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800259c:	6a3b      	ldr	r3, [r7, #32]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	372c      	adds	r7, #44	; 0x2c
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	007a1200 	.word	0x007a1200
 80025b4:	08007174 	.word	0x08007174
 80025b8:	08007184 	.word	0x08007184
 80025bc:	003d0900 	.word	0x003d0900

080025c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c4:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000000 	.word	0x20000000

080025d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80025de:	f7ff ffef 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 80025e2:	4601      	mov	r1, r0
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	fa92 f2a2 	rbit	r2, r2
 80025f8:	603a      	str	r2, [r7, #0]
  return result;
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	fab2 f282 	clz	r2, r2
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	40d3      	lsrs	r3, r2
 8002604:	4a04      	ldr	r2, [pc, #16]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000
 8002618:	0800716c 	.word	0x0800716c

0800261c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002622:	f7ff ffcd 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 8002626:	4601      	mov	r1, r0
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002630:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002634:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	fa92 f2a2 	rbit	r2, r2
 800263c:	603a      	str	r2, [r7, #0]
  return result;
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	fab2 f282 	clz	r2, r2
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	40d3      	lsrs	r3, r2
 8002648:	4a04      	ldr	r2, [pc, #16]	; (800265c <HAL_RCC_GetPCLK2Freq+0x40>)
 800264a:	5cd3      	ldrb	r3, [r2, r3]
 800264c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40021000 	.word	0x40021000
 800265c:	0800716c 	.word	0x0800716c

08002660 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	220f      	movs	r2, #15
 800266e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_RCC_GetClockConfig+0x5c>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0203 	and.w	r2, r3, #3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <HAL_RCC_GetClockConfig+0x5c>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <HAL_RCC_GetClockConfig+0x5c>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <HAL_RCC_GetClockConfig+0x5c>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	08db      	lsrs	r3, r3, #3
 800269a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80026a2:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <HAL_RCC_GetClockConfig+0x60>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0207 	and.w	r2, r3, #7
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	601a      	str	r2, [r3, #0]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40022000 	.word	0x40022000

080026c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b092      	sub	sp, #72	; 0x48
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80d4 	beq.w	8002890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026e8:	4b4e      	ldr	r3, [pc, #312]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10e      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f4:	4b4b      	ldr	r3, [pc, #300]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	4a4a      	ldr	r2, [pc, #296]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fe:	61d3      	str	r3, [r2, #28]
 8002700:	4b48      	ldr	r3, [pc, #288]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800270c:	2301      	movs	r3, #1
 800270e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002712:	4b45      	ldr	r3, [pc, #276]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d118      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800271e:	4b42      	ldr	r3, [pc, #264]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a41      	ldr	r2, [pc, #260]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002728:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272a:	f7fe fa95 	bl	8000c58 <HAL_GetTick>
 800272e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	e008      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002732:	f7fe fa91 	bl	8000c58 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b64      	cmp	r3, #100	; 0x64
 800273e:	d901      	bls.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e14b      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	4b38      	ldr	r3, [pc, #224]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002750:	4b34      	ldr	r3, [pc, #208]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002758:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800275a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 8084 	beq.w	800286a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800276a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800276c:	429a      	cmp	r2, r3
 800276e:	d07c      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002770:	4b2c      	ldr	r3, [pc, #176]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800277a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800277e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	4b26      	ldr	r3, [pc, #152]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	461a      	mov	r2, r3
 800279a:	2301      	movs	r3, #1
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	461a      	mov	r2, r3
 80027be:	2300      	movs	r3, #0
 80027c0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027c2:	4a18      	ldr	r2, [pc, #96]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d04b      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d2:	f7fe fa41 	bl	8000c58 <HAL_GetTick>
 80027d6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d8:	e00a      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7fe fa3d 	bl	8000c58 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e0f5      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x318>
 80027f0:	2302      	movs	r3, #2
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
 80027fc:	2302      	movs	r3, #2
 80027fe:	623b      	str	r3, [r7, #32]
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	61fb      	str	r3, [r7, #28]
  return result;
 8002808:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	095b      	lsrs	r3, r3, #5
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d108      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800281e:	4b01      	ldr	r3, [pc, #4]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	e00d      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002824:	40021000 	.word	0x40021000
 8002828:	40007000 	.word	0x40007000
 800282c:	10908100 	.word	0x10908100
 8002830:	2302      	movs	r3, #2
 8002832:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	4b69      	ldr	r3, [pc, #420]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	2202      	movs	r2, #2
 8002842:	613a      	str	r2, [r7, #16]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	fa92 f2a2 	rbit	r2, r2
 800284a:	60fa      	str	r2, [r7, #12]
  return result;
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	fab2 f282 	clz	r2, r2
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	f002 021f 	and.w	r2, r2, #31
 800285e:	2101      	movs	r1, #1
 8002860:	fa01 f202 	lsl.w	r2, r1, r2
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0b7      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800286a:	4b5e      	ldr	r3, [pc, #376]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	495b      	ldr	r1, [pc, #364]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002878:	4313      	orrs	r3, r2
 800287a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800287c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002880:	2b01      	cmp	r3, #1
 8002882:	d105      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002884:	4b57      	ldr	r3, [pc, #348]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	4a56      	ldr	r2, [pc, #344]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800288a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800289c:	4b51      	ldr	r3, [pc, #324]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	f023 0203 	bic.w	r2, r3, #3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	494e      	ldr	r1, [pc, #312]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ba:	4b4a      	ldr	r3, [pc, #296]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f023 0210 	bic.w	r2, r3, #16
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	4947      	ldr	r1, [pc, #284]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80028d8:	4b42      	ldr	r3, [pc, #264]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	493f      	ldr	r1, [pc, #252]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028f6:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	f023 0220 	bic.w	r2, r3, #32
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	4938      	ldr	r1, [pc, #224]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002904:	4313      	orrs	r3, r2
 8002906:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002914:	4b33      	ldr	r3, [pc, #204]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	4930      	ldr	r1, [pc, #192]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002922:	4313      	orrs	r3, r2
 8002924:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002932:	4b2c      	ldr	r3, [pc, #176]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	4929      	ldr	r1, [pc, #164]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002950:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	4921      	ldr	r1, [pc, #132]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800295e:	4313      	orrs	r3, r2
 8002960:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d008      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800296e:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	491a      	ldr	r1, [pc, #104]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800297c:	4313      	orrs	r3, r2
 800297e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800298c:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	4912      	ldr	r1, [pc, #72]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800299a:	4313      	orrs	r3, r2
 800299c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d008      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b6:	490b      	ldr	r1, [pc, #44]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	4903      	ldr	r1, [pc, #12]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3748      	adds	r7, #72	; 0x48
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000

080029e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e049      	b.n	8002a8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f841 	bl	8002a96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3304      	adds	r3, #4
 8002a24:	4619      	mov	r1, r3
 8002a26:	4610      	mov	r0, r2
 8002a28:	f000 fb30 	bl	800308c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d001      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e03b      	b.n	8002b3c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d009      	beq.n	8002afa <HAL_TIM_Base_Start_IT+0x4e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aee:	d004      	beq.n	8002afa <HAL_TIM_Base_Start_IT+0x4e>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <HAL_TIM_Base_Start_IT+0xa0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d115      	bne.n	8002b26 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <HAL_TIM_Base_Start_IT+0xa4>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b06      	cmp	r3, #6
 8002b0a:	d015      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x8c>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b12:	d011      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b24:	e008      	b.n	8002b38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0201 	orr.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	e000      	b.n	8002b3a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40012c00 	.word	0x40012c00
 8002b4c:	40014000 	.word	0x40014000
 8002b50:	00010007 	.word	0x00010007

08002b54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e097      	b.n	8002c98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d106      	bne.n	8002b82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7fd fecb 	bl	8000918 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2202      	movs	r2, #2
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002b98:	f023 0307 	bic.w	r3, r3, #7
 8002b9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4610      	mov	r0, r2
 8002baa:	f000 fa6f 	bl	800308c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd6:	f023 0303 	bic.w	r3, r3, #3
 8002bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	4313      	orrs	r3, r2
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002bf4:	f023 030c 	bic.w	r3, r3, #12
 8002bf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	4313      	orrs	r3, r2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	011a      	lsls	r2, r3, #4
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	031b      	lsls	r3, r3, #12
 8002c24:	4313      	orrs	r3, r2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002c32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002c3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	4313      	orrs	r3, r2
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cb0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cb8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cc8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d110      	bne.n	8002cf2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d102      	bne.n	8002cdc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cd6:	7b7b      	ldrb	r3, [r7, #13]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d001      	beq.n	8002ce0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e089      	b.n	8002df4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf0:	e031      	b.n	8002d56 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d110      	bne.n	8002d1a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cf8:	7bbb      	ldrb	r3, [r7, #14]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d102      	bne.n	8002d04 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cfe:	7b3b      	ldrb	r3, [r7, #12]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d001      	beq.n	8002d08 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e075      	b.n	8002df4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d18:	e01d      	b.n	8002d56 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d108      	bne.n	8002d32 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d20:	7bbb      	ldrb	r3, [r7, #14]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d105      	bne.n	8002d32 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d26:	7b7b      	ldrb	r3, [r7, #13]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d102      	bne.n	8002d32 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d2c:	7b3b      	ldrb	r3, [r7, #12]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d001      	beq.n	8002d36 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e05e      	b.n	8002df4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2202      	movs	r2, #2
 8002d42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2202      	movs	r2, #2
 8002d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_TIM_Encoder_Start_IT+0xc4>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d010      	beq.n	8002d84 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002d62:	e01f      	b.n	8002da4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 f9fb 	bl	8003168 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 0202 	orr.w	r2, r2, #2
 8002d80:	60da      	str	r2, [r3, #12]
      break;
 8002d82:	e02e      	b.n	8002de2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	2104      	movs	r1, #4
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 f9eb 	bl	8003168 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0204 	orr.w	r2, r2, #4
 8002da0:	60da      	str	r2, [r3, #12]
      break;
 8002da2:	e01e      	b.n	8002de2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2201      	movs	r2, #1
 8002daa:	2100      	movs	r1, #0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 f9db 	bl	8003168 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2201      	movs	r2, #1
 8002db8:	2104      	movs	r1, #4
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f9d4 	bl	8003168 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0202 	orr.w	r2, r2, #2
 8002dce:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0204 	orr.w	r2, r2, #4
 8002dde:	60da      	str	r2, [r3, #12]
      break;
 8002de0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0201 	orr.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d122      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d11b      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0202 	mvn.w	r2, #2
 8002e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f905 	bl	800304e <HAL_TIM_IC_CaptureCallback>
 8002e44:	e005      	b.n	8002e52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f8f7 	bl	800303a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f908 	bl	8003062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d122      	bne.n	8002eac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d11b      	bne.n	8002eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0204 	mvn.w	r2, #4
 8002e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f8db 	bl	800304e <HAL_TIM_IC_CaptureCallback>
 8002e98:	e005      	b.n	8002ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f8cd 	bl	800303a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f8de 	bl	8003062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d122      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d11b      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0208 	mvn.w	r2, #8
 8002ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f8b1 	bl	800304e <HAL_TIM_IC_CaptureCallback>
 8002eec:	e005      	b.n	8002efa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f8a3 	bl	800303a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f8b4 	bl	8003062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d122      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d11b      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0210 	mvn.w	r2, #16
 8002f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2208      	movs	r2, #8
 8002f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f887 	bl	800304e <HAL_TIM_IC_CaptureCallback>
 8002f40:	e005      	b.n	8002f4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f879 	bl	800303a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f88a 	bl	8003062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d10e      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d107      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0201 	mvn.w	r2, #1
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fd fc7e 	bl	800087c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b80      	cmp	r3, #128	; 0x80
 8002f8c:	d10e      	bne.n	8002fac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f98:	2b80      	cmp	r3, #128	; 0x80
 8002f9a:	d107      	bne.n	8002fac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f974 	bl	8003294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fba:	d10e      	bne.n	8002fda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc6:	2b80      	cmp	r3, #128	; 0x80
 8002fc8:	d107      	bne.n	8002fda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f967 	bl	80032a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d10e      	bne.n	8003006 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d107      	bne.n	8003006 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f838 	bl	8003076 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b20      	cmp	r3, #32
 8003012:	d10e      	bne.n	8003032 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b20      	cmp	r3, #32
 8003020:	d107      	bne.n	8003032 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f06f 0220 	mvn.w	r2, #32
 800302a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f927 	bl	8003280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a2e      	ldr	r2, [pc, #184]	; (8003158 <TIM_Base_SetConfig+0xcc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d003      	beq.n	80030ac <TIM_Base_SetConfig+0x20>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030aa:	d108      	bne.n	80030be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a25      	ldr	r2, [pc, #148]	; (8003158 <TIM_Base_SetConfig+0xcc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00f      	beq.n	80030e6 <TIM_Base_SetConfig+0x5a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030cc:	d00b      	beq.n	80030e6 <TIM_Base_SetConfig+0x5a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a22      	ldr	r2, [pc, #136]	; (800315c <TIM_Base_SetConfig+0xd0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d007      	beq.n	80030e6 <TIM_Base_SetConfig+0x5a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a21      	ldr	r2, [pc, #132]	; (8003160 <TIM_Base_SetConfig+0xd4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d003      	beq.n	80030e6 <TIM_Base_SetConfig+0x5a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a20      	ldr	r2, [pc, #128]	; (8003164 <TIM_Base_SetConfig+0xd8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d108      	bne.n	80030f8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a0e      	ldr	r2, [pc, #56]	; (8003158 <TIM_Base_SetConfig+0xcc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00b      	beq.n	800313c <TIM_Base_SetConfig+0xb0>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a0d      	ldr	r2, [pc, #52]	; (800315c <TIM_Base_SetConfig+0xd0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d007      	beq.n	800313c <TIM_Base_SetConfig+0xb0>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a0c      	ldr	r2, [pc, #48]	; (8003160 <TIM_Base_SetConfig+0xd4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d003      	beq.n	800313c <TIM_Base_SetConfig+0xb0>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a0b      	ldr	r2, [pc, #44]	; (8003164 <TIM_Base_SetConfig+0xd8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d103      	bne.n	8003144 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	615a      	str	r2, [r3, #20]
}
 800314a:	bf00      	nop
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40012c00 	.word	0x40012c00
 800315c:	40014000 	.word	0x40014000
 8003160:	40014400 	.word	0x40014400
 8003164:	40014800 	.word	0x40014800

08003168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 031f 	and.w	r3, r3, #31
 800317a:	2201      	movs	r2, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a1a      	ldr	r2, [r3, #32]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	43db      	mvns	r3, r3
 800318a:	401a      	ands	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a1a      	ldr	r2, [r3, #32]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	621a      	str	r2, [r3, #32]
}
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e04f      	b.n	800326c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a21      	ldr	r2, [pc, #132]	; (8003278 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d108      	bne.n	8003208 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a14      	ldr	r2, [pc, #80]	; (8003278 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d009      	beq.n	8003240 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003234:	d004      	beq.n	8003240 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a10      	ldr	r2, [pc, #64]	; (800327c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d10c      	bne.n	800325a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003246:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	4313      	orrs	r3, r2
 8003250:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40012c00 	.word	0x40012c00
 800327c:	40014000 	.word	0x40014000

08003280 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e040      	b.n	8003350 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fd fb62 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2224      	movs	r2, #36	; 0x24
 80032e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f980 	bl	8003600 <UART_SetConfig>
 8003300:	4603      	mov	r3, r0
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e022      	b.n	8003350 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 faaa 	bl	800386c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fb31 	bl	80039b0 <UART_CheckIdleState>
 800334e:	4603      	mov	r3, r0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08a      	sub	sp, #40	; 0x28
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800336c:	2b20      	cmp	r3, #32
 800336e:	d178      	bne.n	8003462 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_UART_Transmit+0x24>
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e071      	b.n	8003464 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2221      	movs	r2, #33	; 0x21
 800338c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800338e:	f7fd fc63 	bl	8000c58 <HAL_GetTick>
 8003392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	88fa      	ldrh	r2, [r7, #6]
 8003398:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	88fa      	ldrh	r2, [r7, #6]
 80033a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ac:	d108      	bne.n	80033c0 <HAL_UART_Transmit+0x68>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d104      	bne.n	80033c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	e003      	b.n	80033c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033c8:	e030      	b.n	800342c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2200      	movs	r2, #0
 80033d2:	2180      	movs	r1, #128	; 0x80
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 fb93 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d004      	beq.n	80033ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e03c      	b.n	8003464 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10b      	bne.n	8003408 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	881a      	ldrh	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033fc:	b292      	uxth	r2, r2
 80033fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	3302      	adds	r3, #2
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	e008      	b.n	800341a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	781a      	ldrb	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	b292      	uxth	r2, r2
 8003412:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	3301      	adds	r3, #1
 8003418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003420:	b29b      	uxth	r3, r3
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003432:	b29b      	uxth	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1c8      	bne.n	80033ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2200      	movs	r2, #0
 8003440:	2140      	movs	r1, #64	; 0x40
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fb5c 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d004      	beq.n	8003458 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e005      	b.n	8003464 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e000      	b.n	8003464 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003462:	2302      	movs	r3, #2
  }
}
 8003464:	4618      	mov	r0, r3
 8003466:	3720      	adds	r7, #32
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	; 0x28
 8003470:	af02      	add	r7, sp, #8
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	4613      	mov	r3, r2
 800347a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003482:	2b20      	cmp	r3, #32
 8003484:	f040 80b6 	bne.w	80035f4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_UART_Receive+0x28>
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0ae      	b.n	80035f6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2222      	movs	r2, #34	; 0x22
 80034a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ae:	f7fd fbd3 	bl	8000c58 <HAL_GetTick>
 80034b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	88fa      	ldrh	r2, [r7, #6]
 80034b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	88fa      	ldrh	r2, [r7, #6]
 80034c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034cc:	d10e      	bne.n	80034ec <HAL_UART_Receive+0x80>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d105      	bne.n	80034e2 <HAL_UART_Receive+0x76>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80034dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034e0:	e02d      	b.n	800353e <HAL_UART_Receive+0xd2>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	22ff      	movs	r2, #255	; 0xff
 80034e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034ea:	e028      	b.n	800353e <HAL_UART_Receive+0xd2>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10d      	bne.n	8003510 <HAL_UART_Receive+0xa4>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d104      	bne.n	8003506 <HAL_UART_Receive+0x9a>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	22ff      	movs	r2, #255	; 0xff
 8003500:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003504:	e01b      	b.n	800353e <HAL_UART_Receive+0xd2>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	227f      	movs	r2, #127	; 0x7f
 800350a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800350e:	e016      	b.n	800353e <HAL_UART_Receive+0xd2>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003518:	d10d      	bne.n	8003536 <HAL_UART_Receive+0xca>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d104      	bne.n	800352c <HAL_UART_Receive+0xc0>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	227f      	movs	r2, #127	; 0x7f
 8003526:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800352a:	e008      	b.n	800353e <HAL_UART_Receive+0xd2>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	223f      	movs	r2, #63	; 0x3f
 8003530:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003534:	e003      	b.n	800353e <HAL_UART_Receive+0xd2>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003544:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354e:	d108      	bne.n	8003562 <HAL_UART_Receive+0xf6>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d104      	bne.n	8003562 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003558:	2300      	movs	r3, #0
 800355a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	61bb      	str	r3, [r7, #24]
 8003560:	e003      	b.n	800356a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800356a:	e037      	b.n	80035dc <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2200      	movs	r2, #0
 8003574:	2120      	movs	r1, #32
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fac2 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2220      	movs	r2, #32
 8003586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e033      	b.n	80035f6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10c      	bne.n	80035ae <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800359a:	b29a      	uxth	r2, r3
 800359c:	8a7b      	ldrh	r3, [r7, #18]
 800359e:	4013      	ands	r3, r2
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	3302      	adds	r3, #2
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	e00d      	b.n	80035ca <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	8a7b      	ldrh	r3, [r7, #18]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	4013      	ands	r3, r2
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	3301      	adds	r3, #1
 80035c8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1c1      	bne.n	800356c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e000      	b.n	80035f6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
  }
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b8a      	ldr	r3, [pc, #552]	; (8003854 <UART_SetConfig+0x254>)
 800362c:	4013      	ands	r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	6979      	ldr	r1, [r7, #20]
 8003634:	430b      	orrs	r3, r1
 8003636:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	430a      	orrs	r2, r1
 8003670:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a78      	ldr	r2, [pc, #480]	; (8003858 <UART_SetConfig+0x258>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d120      	bne.n	80036be <UART_SetConfig+0xbe>
 800367c:	4b77      	ldr	r3, [pc, #476]	; (800385c <UART_SetConfig+0x25c>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	2b03      	cmp	r3, #3
 8003686:	d817      	bhi.n	80036b8 <UART_SetConfig+0xb8>
 8003688:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <UART_SetConfig+0x90>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036a1 	.word	0x080036a1
 8003694:	080036ad 	.word	0x080036ad
 8003698:	080036b3 	.word	0x080036b3
 800369c:	080036a7 	.word	0x080036a7
 80036a0:	2300      	movs	r3, #0
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e01d      	b.n	80036e2 <UART_SetConfig+0xe2>
 80036a6:	2302      	movs	r3, #2
 80036a8:	77fb      	strb	r3, [r7, #31]
 80036aa:	e01a      	b.n	80036e2 <UART_SetConfig+0xe2>
 80036ac:	2304      	movs	r3, #4
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e017      	b.n	80036e2 <UART_SetConfig+0xe2>
 80036b2:	2308      	movs	r3, #8
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e014      	b.n	80036e2 <UART_SetConfig+0xe2>
 80036b8:	2310      	movs	r3, #16
 80036ba:	77fb      	strb	r3, [r7, #31]
 80036bc:	e011      	b.n	80036e2 <UART_SetConfig+0xe2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a67      	ldr	r2, [pc, #412]	; (8003860 <UART_SetConfig+0x260>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d102      	bne.n	80036ce <UART_SetConfig+0xce>
 80036c8:	2300      	movs	r3, #0
 80036ca:	77fb      	strb	r3, [r7, #31]
 80036cc:	e009      	b.n	80036e2 <UART_SetConfig+0xe2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a64      	ldr	r2, [pc, #400]	; (8003864 <UART_SetConfig+0x264>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d102      	bne.n	80036de <UART_SetConfig+0xde>
 80036d8:	2300      	movs	r3, #0
 80036da:	77fb      	strb	r3, [r7, #31]
 80036dc:	e001      	b.n	80036e2 <UART_SetConfig+0xe2>
 80036de:	2310      	movs	r3, #16
 80036e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ea:	d15a      	bne.n	80037a2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80036ec:	7ffb      	ldrb	r3, [r7, #31]
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d827      	bhi.n	8003742 <UART_SetConfig+0x142>
 80036f2:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <UART_SetConfig+0xf8>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	0800371d 	.word	0x0800371d
 80036fc:	08003725 	.word	0x08003725
 8003700:	0800372d 	.word	0x0800372d
 8003704:	08003743 	.word	0x08003743
 8003708:	08003733 	.word	0x08003733
 800370c:	08003743 	.word	0x08003743
 8003710:	08003743 	.word	0x08003743
 8003714:	08003743 	.word	0x08003743
 8003718:	0800373b 	.word	0x0800373b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800371c:	f7fe ff5c 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8003720:	61b8      	str	r0, [r7, #24]
        break;
 8003722:	e013      	b.n	800374c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003724:	f7fe ff7a 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 8003728:	61b8      	str	r0, [r7, #24]
        break;
 800372a:	e00f      	b.n	800374c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800372c:	4b4e      	ldr	r3, [pc, #312]	; (8003868 <UART_SetConfig+0x268>)
 800372e:	61bb      	str	r3, [r7, #24]
        break;
 8003730:	e00c      	b.n	800374c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003732:	f7fe fedb 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 8003736:	61b8      	str	r0, [r7, #24]
        break;
 8003738:	e008      	b.n	800374c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800373a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800373e:	61bb      	str	r3, [r7, #24]
        break;
 8003740:	e004      	b.n	800374c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	77bb      	strb	r3, [r7, #30]
        break;
 800374a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d074      	beq.n	800383c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	005a      	lsls	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	085b      	lsrs	r3, r3, #1
 800375c:	441a      	add	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	fbb2 f3f3 	udiv	r3, r2, r3
 8003766:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b0f      	cmp	r3, #15
 800376c:	d916      	bls.n	800379c <UART_SetConfig+0x19c>
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003774:	d212      	bcs.n	800379c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	b29b      	uxth	r3, r3
 800377a:	f023 030f 	bic.w	r3, r3, #15
 800377e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	085b      	lsrs	r3, r3, #1
 8003784:	b29b      	uxth	r3, r3
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	b29a      	uxth	r2, r3
 800378c:	89fb      	ldrh	r3, [r7, #14]
 800378e:	4313      	orrs	r3, r2
 8003790:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	89fa      	ldrh	r2, [r7, #14]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	e04f      	b.n	800383c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	77bb      	strb	r3, [r7, #30]
 80037a0:	e04c      	b.n	800383c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037a2:	7ffb      	ldrb	r3, [r7, #31]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d828      	bhi.n	80037fa <UART_SetConfig+0x1fa>
 80037a8:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <UART_SetConfig+0x1b0>)
 80037aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ae:	bf00      	nop
 80037b0:	080037d5 	.word	0x080037d5
 80037b4:	080037dd 	.word	0x080037dd
 80037b8:	080037e5 	.word	0x080037e5
 80037bc:	080037fb 	.word	0x080037fb
 80037c0:	080037eb 	.word	0x080037eb
 80037c4:	080037fb 	.word	0x080037fb
 80037c8:	080037fb 	.word	0x080037fb
 80037cc:	080037fb 	.word	0x080037fb
 80037d0:	080037f3 	.word	0x080037f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d4:	f7fe ff00 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 80037d8:	61b8      	str	r0, [r7, #24]
        break;
 80037da:	e013      	b.n	8003804 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037dc:	f7fe ff1e 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 80037e0:	61b8      	str	r0, [r7, #24]
        break;
 80037e2:	e00f      	b.n	8003804 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037e4:	4b20      	ldr	r3, [pc, #128]	; (8003868 <UART_SetConfig+0x268>)
 80037e6:	61bb      	str	r3, [r7, #24]
        break;
 80037e8:	e00c      	b.n	8003804 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ea:	f7fe fe7f 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 80037ee:	61b8      	str	r0, [r7, #24]
        break;
 80037f0:	e008      	b.n	8003804 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037f6:	61bb      	str	r3, [r7, #24]
        break;
 80037f8:	e004      	b.n	8003804 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	77bb      	strb	r3, [r7, #30]
        break;
 8003802:	bf00      	nop
    }

    if (pclk != 0U)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d018      	beq.n	800383c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	085a      	lsrs	r2, r3, #1
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	441a      	add	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	fbb2 f3f3 	udiv	r3, r2, r3
 800381c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	2b0f      	cmp	r3, #15
 8003822:	d909      	bls.n	8003838 <UART_SetConfig+0x238>
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382a:	d205      	bcs.n	8003838 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	b29a      	uxth	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	e001      	b.n	800383c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003848:	7fbb      	ldrb	r3, [r7, #30]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	efff69f3 	.word	0xefff69f3
 8003858:	40013800 	.word	0x40013800
 800385c:	40021000 	.word	0x40021000
 8003860:	40004400 	.word	0x40004400
 8003864:	40004800 	.word	0x40004800
 8003868:	007a1200 	.word	0x007a1200

0800386c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01a      	beq.n	8003982 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800396a:	d10a      	bne.n	8003982 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	605a      	str	r2, [r3, #4]
  }
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b098      	sub	sp, #96	; 0x60
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039c0:	f7fd f94a 	bl	8000c58 <HAL_GetTick>
 80039c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d12e      	bne.n	8003a32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039dc:	2200      	movs	r2, #0
 80039de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f88c 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d021      	beq.n	8003a32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f6:	e853 3f00 	ldrex	r3, [r3]
 80039fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a02:	653b      	str	r3, [r7, #80]	; 0x50
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a0e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a14:	e841 2300 	strex	r3, r2, [r1]
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e6      	bne.n	80039ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e062      	b.n	8003af8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d149      	bne.n	8003ad4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f856 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d03c      	beq.n	8003ad4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	e853 3f00 	ldrex	r3, [r3]
 8003a66:	623b      	str	r3, [r7, #32]
   return(result);
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a78:	633b      	str	r3, [r7, #48]	; 0x30
 8003a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e6      	bne.n	8003a5a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3308      	adds	r3, #8
 8003a92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	e853 3f00 	ldrex	r3, [r3]
 8003a9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3308      	adds	r3, #8
 8003aaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aac:	61fa      	str	r2, [r7, #28]
 8003aae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab0:	69b9      	ldr	r1, [r7, #24]
 8003ab2:	69fa      	ldr	r2, [r7, #28]
 8003ab4:	e841 2300 	strex	r3, r2, [r1]
 8003ab8:	617b      	str	r3, [r7, #20]
   return(result);
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e5      	bne.n	8003a8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e011      	b.n	8003af8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3758      	adds	r7, #88	; 0x58
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b10:	e049      	b.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b18:	d045      	beq.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1a:	f7fd f89d 	bl	8000c58 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d302      	bcc.n	8003b30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e048      	b.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d031      	beq.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d110      	bne.n	8003b72 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2208      	movs	r2, #8
 8003b56:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f838 	bl	8003bce <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2208      	movs	r2, #8
 8003b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e029      	b.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b80:	d111      	bne.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f81e 	bl	8003bce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e00f      	b.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69da      	ldr	r2, [r3, #28]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d0a6      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b095      	sub	sp, #84	; 0x54
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf4:	643b      	str	r3, [r7, #64]	; 0x40
 8003bf6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e6      	bne.n	8003bd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	e853 3f00 	ldrex	r3, [r3]
 8003c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3308      	adds	r3, #8
 8003c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c30:	e841 2300 	strex	r3, r2, [r1]
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e5      	bne.n	8003c08 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d118      	bne.n	8003c76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f023 0310 	bic.w	r3, r3, #16
 8003c58:	647b      	str	r3, [r7, #68]	; 0x44
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6979      	ldr	r1, [r7, #20]
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e6      	bne.n	8003c44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c8a:	bf00      	nop
 8003c8c:	3754      	adds	r7, #84	; 0x54
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c9e:	f3ef 8305 	mrs	r3, IPSR
 8003ca2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10f      	bne.n	8003cca <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003caa:	f3ef 8310 	mrs	r3, PRIMASK
 8003cae:	607b      	str	r3, [r7, #4]
  return(result);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <osKernelInitialize+0x32>
 8003cb6:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <osKernelInitialize+0x64>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d109      	bne.n	8003cd2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cbe:	f3ef 8311 	mrs	r3, BASEPRI
 8003cc2:	603b      	str	r3, [r7, #0]
  return(result);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003cca:	f06f 0305 	mvn.w	r3, #5
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	e00c      	b.n	8003cec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <osKernelInitialize+0x64>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d105      	bne.n	8003ce6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003cda:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <osKernelInitialize+0x64>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	e002      	b.n	8003cec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003cec:	68fb      	ldr	r3, [r7, #12]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	200001b4 	.word	0x200001b4

08003d00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d06:	f3ef 8305 	mrs	r3, IPSR
 8003d0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10f      	bne.n	8003d32 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d12:	f3ef 8310 	mrs	r3, PRIMASK
 8003d16:	607b      	str	r3, [r7, #4]
  return(result);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <osKernelStart+0x32>
 8003d1e:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <osKernelStart+0x64>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d109      	bne.n	8003d3a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d26:	f3ef 8311 	mrs	r3, BASEPRI
 8003d2a:	603b      	str	r3, [r7, #0]
  return(result);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003d32:	f06f 0305 	mvn.w	r3, #5
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	e00e      	b.n	8003d58 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <osKernelStart+0x64>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d107      	bne.n	8003d52 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003d42:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <osKernelStart+0x64>)
 8003d44:	2202      	movs	r2, #2
 8003d46:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003d48:	f001 fb60 	bl	800540c <vTaskStartScheduler>
      stat = osOK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	e002      	b.n	8003d58 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d58:	68fb      	ldr	r3, [r7, #12]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	200001b4 	.word	0x200001b4

08003d68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b092      	sub	sp, #72	; 0x48
 8003d6c:	af04      	add	r7, sp, #16
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d78:	f3ef 8305 	mrs	r3, IPSR
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f040 8094 	bne.w	8003eae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d86:	f3ef 8310 	mrs	r3, PRIMASK
 8003d8a:	623b      	str	r3, [r7, #32]
  return(result);
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f040 808d 	bne.w	8003eae <osThreadNew+0x146>
 8003d94:	4b48      	ldr	r3, [pc, #288]	; (8003eb8 <osThreadNew+0x150>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d106      	bne.n	8003daa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d9c:	f3ef 8311 	mrs	r3, BASEPRI
 8003da0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f040 8082 	bne.w	8003eae <osThreadNew+0x146>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d07e      	beq.n	8003eae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003db4:	2318      	movs	r3, #24
 8003db6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003db8:	2300      	movs	r3, #0
 8003dba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003dbc:	f107 031b 	add.w	r3, r7, #27
 8003dc0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003dc6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d045      	beq.n	8003e5a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <osThreadNew+0x74>
        name = attr->name;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <osThreadNew+0x9a>
 8003df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df2:	2b38      	cmp	r3, #56	; 0x38
 8003df4:	d805      	bhi.n	8003e02 <osThreadNew+0x9a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <osThreadNew+0x9e>
        return (NULL);
 8003e02:	2300      	movs	r3, #0
 8003e04:	e054      	b.n	8003eb0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	089b      	lsrs	r3, r3, #2
 8003e14:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00e      	beq.n	8003e3c <osThreadNew+0xd4>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	2ba7      	cmp	r3, #167	; 0xa7
 8003e24:	d90a      	bls.n	8003e3c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d006      	beq.n	8003e3c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <osThreadNew+0xd4>
        mem = 1;
 8003e36:	2301      	movs	r3, #1
 8003e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e3a:	e010      	b.n	8003e5e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10c      	bne.n	8003e5e <osThreadNew+0xf6>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d108      	bne.n	8003e5e <osThreadNew+0xf6>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d104      	bne.n	8003e5e <osThreadNew+0xf6>
          mem = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e58:	e001      	b.n	8003e5e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d110      	bne.n	8003e86 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e6c:	9202      	str	r2, [sp, #8]
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f001 f8e2 	bl	8005044 <xTaskCreateStatic>
 8003e80:	4603      	mov	r3, r0
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	e013      	b.n	8003eae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d110      	bne.n	8003eae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	f107 0314 	add.w	r3, r7, #20
 8003e94:	9301      	str	r3, [sp, #4]
 8003e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f001 f92c 	bl	80050fc <xTaskCreate>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d001      	beq.n	8003eae <osThreadNew+0x146>
          hTask = NULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003eae:	697b      	ldr	r3, [r7, #20]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3738      	adds	r7, #56	; 0x38
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	200001b4 	.word	0x200001b4

08003ebc <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ec2:	f3ef 8305 	mrs	r3, IPSR
 8003ec6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10f      	bne.n	8003eee <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ece:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed2:	607b      	str	r3, [r7, #4]
  return(result);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <osThreadYield+0x32>
 8003eda:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <osThreadYield+0x5c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d109      	bne.n	8003ef6 <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ee6:	603b      	str	r3, [r7, #0]
  return(result);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <osThreadYield+0x3a>
    stat = osErrorISR;
 8003eee:	f06f 0305 	mvn.w	r3, #5
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	e009      	b.n	8003f0a <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8003efa:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <osThreadYield+0x60>)
 8003efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	200001b4 	.word	0x200001b4
 8003f1c:	e000ed04 	.word	0xe000ed04

08003f20 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f28:	f3ef 8305 	mrs	r3, IPSR
 8003f2c:	613b      	str	r3, [r7, #16]
  return(result);
 8003f2e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10f      	bne.n	8003f54 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f34:	f3ef 8310 	mrs	r3, PRIMASK
 8003f38:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d109      	bne.n	8003f54 <osDelay+0x34>
 8003f40:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <osDelay+0x58>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d109      	bne.n	8003f5c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f48:	f3ef 8311 	mrs	r3, BASEPRI
 8003f4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <osDelay+0x3c>
    stat = osErrorISR;
 8003f54:	f06f 0305 	mvn.w	r3, #5
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e007      	b.n	8003f6c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f001 fa1c 	bl	80053a4 <vTaskDelay>
    }
  }

  return (stat);
 8003f6c:	697b      	ldr	r3, [r7, #20]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	200001b4 	.word	0x200001b4

08003f7c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08c      	sub	sp, #48	; 0x30
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f8c:	f3ef 8305 	mrs	r3, IPSR
 8003f90:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f92:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d16f      	bne.n	8004078 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f98:	f3ef 8310 	mrs	r3, PRIMASK
 8003f9c:	617b      	str	r3, [r7, #20]
  return(result);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d169      	bne.n	8004078 <osMessageQueueNew+0xfc>
 8003fa4:	4b37      	ldr	r3, [pc, #220]	; (8004084 <osMessageQueueNew+0x108>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d105      	bne.n	8003fb8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fac:	f3ef 8311 	mrs	r3, BASEPRI
 8003fb0:	613b      	str	r3, [r7, #16]
  return(result);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d15f      	bne.n	8004078 <osMessageQueueNew+0xfc>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d05c      	beq.n	8004078 <osMessageQueueNew+0xfc>
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d059      	beq.n	8004078 <osMessageQueueNew+0xfc>
    mem = -1;
 8003fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fc8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d029      	beq.n	8004024 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d012      	beq.n	8003ffe <osMessageQueueNew+0x82>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2b4f      	cmp	r3, #79	; 0x4f
 8003fde:	d90e      	bls.n	8003ffe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d302      	bcc.n	8003ffe <osMessageQueueNew+0x82>
        mem = 1;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	623b      	str	r3, [r7, #32]
 8003ffc:	e014      	b.n	8004028 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d110      	bne.n	8004028 <osMessageQueueNew+0xac>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10c      	bne.n	8004028 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004012:	2b00      	cmp	r3, #0
 8004014:	d108      	bne.n	8004028 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d104      	bne.n	8004028 <osMessageQueueNew+0xac>
          mem = 0;
 800401e:	2300      	movs	r3, #0
 8004020:	623b      	str	r3, [r7, #32]
 8004022:	e001      	b.n	8004028 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d10b      	bne.n	8004046 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2100      	movs	r1, #0
 8004038:	9100      	str	r1, [sp, #0]
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 fa8b 	bl	8004558 <xQueueGenericCreateStatic>
 8004042:	6278      	str	r0, [r7, #36]	; 0x24
 8004044:	e008      	b.n	8004058 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d105      	bne.n	8004058 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800404c:	2200      	movs	r2, #0
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 faf8 	bl	8004646 <xQueueGenericCreate>
 8004056:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00c      	beq.n	8004078 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <osMessageQueueNew+0xf0>
        name = attr->name;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	e001      	b.n	8004070 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800406c:	2300      	movs	r3, #0
 800406e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004070:	69f9      	ldr	r1, [r7, #28]
 8004072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004074:	f000 ff88 	bl	8004f88 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800407a:	4618      	mov	r0, r3
 800407c:	3728      	adds	r7, #40	; 0x28
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	200001b4 	.word	0x200001b4

08004088 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004088:	b580      	push	{r7, lr}
 800408a:	b08a      	sub	sp, #40	; 0x28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	4613      	mov	r3, r2
 8004096:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800409c:	2300      	movs	r3, #0
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040a0:	f3ef 8305 	mrs	r3, IPSR
 80040a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80040a6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10f      	bne.n	80040cc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ac:	f3ef 8310 	mrs	r3, PRIMASK
 80040b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d109      	bne.n	80040cc <osMessageQueuePut+0x44>
 80040b8:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <osMessageQueuePut+0xe0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d12e      	bne.n	800411e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040c0:	f3ef 8311 	mrs	r3, BASEPRI
 80040c4:	617b      	str	r3, [r7, #20]
  return(result);
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d028      	beq.n	800411e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d005      	beq.n	80040de <osMessageQueuePut+0x56>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <osMessageQueuePut+0x56>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80040de:	f06f 0303 	mvn.w	r3, #3
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80040e4:	e039      	b.n	800415a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80040ea:	f107 0210 	add.w	r2, r7, #16
 80040ee:	2300      	movs	r3, #0
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	6a38      	ldr	r0, [r7, #32]
 80040f4:	f000 fc06 	bl	8004904 <xQueueGenericSendFromISR>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d003      	beq.n	8004106 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80040fe:	f06f 0302 	mvn.w	r3, #2
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004104:	e029      	b.n	800415a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d026      	beq.n	800415a <osMessageQueuePut+0xd2>
 800410c:	4b17      	ldr	r3, [pc, #92]	; (800416c <osMessageQueuePut+0xe4>)
 800410e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800411c:	e01d      	b.n	800415a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <osMessageQueuePut+0xa2>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d103      	bne.n	8004132 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800412a:	f06f 0303 	mvn.w	r3, #3
 800412e:	627b      	str	r3, [r7, #36]	; 0x24
 8004130:	e014      	b.n	800415c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004132:	2300      	movs	r3, #0
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	68b9      	ldr	r1, [r7, #8]
 8004138:	6a38      	ldr	r0, [r7, #32]
 800413a:	f000 fae5 	bl	8004708 <xQueueGenericSend>
 800413e:	4603      	mov	r3, r0
 8004140:	2b01      	cmp	r3, #1
 8004142:	d00b      	beq.n	800415c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800414a:	f06f 0301 	mvn.w	r3, #1
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
 8004150:	e004      	b.n	800415c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004152:	f06f 0302 	mvn.w	r3, #2
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
 8004158:	e000      	b.n	800415c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800415a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800415e:	4618      	mov	r0, r3
 8004160:	3728      	adds	r7, #40	; 0x28
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	200001b4 	.word	0x200001b4
 800416c:	e000ed04 	.word	0xe000ed04

08004170 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	; 0x28
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004182:	2300      	movs	r3, #0
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004186:	f3ef 8305 	mrs	r3, IPSR
 800418a:	61fb      	str	r3, [r7, #28]
  return(result);
 800418c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10f      	bne.n	80041b2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004192:	f3ef 8310 	mrs	r3, PRIMASK
 8004196:	61bb      	str	r3, [r7, #24]
  return(result);
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <osMessageQueueGet+0x42>
 800419e:	4b2b      	ldr	r3, [pc, #172]	; (800424c <osMessageQueueGet+0xdc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d12e      	bne.n	8004204 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041a6:	f3ef 8311 	mrs	r3, BASEPRI
 80041aa:	617b      	str	r3, [r7, #20]
  return(result);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d028      	beq.n	8004204 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <osMessageQueueGet+0x54>
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <osMessageQueueGet+0x54>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80041c4:	f06f 0303 	mvn.w	r3, #3
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80041ca:	e038      	b.n	800423e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80041d0:	f107 0310 	add.w	r3, r7, #16
 80041d4:	461a      	mov	r2, r3
 80041d6:	68b9      	ldr	r1, [r7, #8]
 80041d8:	6a38      	ldr	r0, [r7, #32]
 80041da:	f000 fd0b 	bl	8004bf4 <xQueueReceiveFromISR>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d003      	beq.n	80041ec <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80041e4:	f06f 0302 	mvn.w	r3, #2
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80041ea:	e028      	b.n	800423e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d025      	beq.n	800423e <osMessageQueueGet+0xce>
 80041f2:	4b17      	ldr	r3, [pc, #92]	; (8004250 <osMessageQueueGet+0xe0>)
 80041f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004202:	e01c      	b.n	800423e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <osMessageQueueGet+0xa0>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d103      	bne.n	8004218 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004210:	f06f 0303 	mvn.w	r3, #3
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
 8004216:	e013      	b.n	8004240 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	6a38      	ldr	r0, [r7, #32]
 800421e:	f000 fc09 	bl	8004a34 <xQueueReceive>
 8004222:	4603      	mov	r3, r0
 8004224:	2b01      	cmp	r3, #1
 8004226:	d00b      	beq.n	8004240 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800422e:	f06f 0301 	mvn.w	r3, #1
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
 8004234:	e004      	b.n	8004240 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004236:	f06f 0302 	mvn.w	r3, #2
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
 800423c:	e000      	b.n	8004240 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800423e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004242:	4618      	mov	r0, r3
 8004244:	3728      	adds	r7, #40	; 0x28
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	200001b4 	.word	0x200001b4
 8004250:	e000ed04 	.word	0xe000ed04

08004254 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <osMessageQueueGetCount+0x18>
    count = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
 800426a:	e01e      	b.n	80042aa <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800426c:	f3ef 8305 	mrs	r3, IPSR
 8004270:	617b      	str	r3, [r7, #20]
  return(result);
 8004272:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10f      	bne.n	8004298 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004278:	f3ef 8310 	mrs	r3, PRIMASK
 800427c:	613b      	str	r3, [r7, #16]
  return(result);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d109      	bne.n	8004298 <osMessageQueueGetCount+0x44>
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <osMessageQueueGetCount+0x60>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d10a      	bne.n	80042a2 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800428c:	f3ef 8311 	mrs	r3, BASEPRI
 8004290:	60fb      	str	r3, [r7, #12]
  return(result);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d004      	beq.n	80042a2 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8004298:	69b8      	ldr	r0, [r7, #24]
 800429a:	f000 fd49 	bl	8004d30 <uxQueueMessagesWaitingFromISR>
 800429e:	61f8      	str	r0, [r7, #28]
 80042a0:	e003      	b.n	80042aa <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80042a2:	69b8      	ldr	r0, [r7, #24]
 80042a4:	f000 fd26 	bl	8004cf4 <uxQueueMessagesWaiting>
 80042a8:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80042aa:	69fb      	ldr	r3, [r7, #28]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3720      	adds	r7, #32
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	200001b4 	.word	0x200001b4

080042b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a07      	ldr	r2, [pc, #28]	; (80042e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80042c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	4a06      	ldr	r2, [pc, #24]	; (80042e8 <vApplicationGetIdleTaskMemory+0x30>)
 80042ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2280      	movs	r2, #128	; 0x80
 80042d4:	601a      	str	r2, [r3, #0]
}
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	200001b8 	.word	0x200001b8
 80042e8:	20000260 	.word	0x20000260

080042ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4a07      	ldr	r2, [pc, #28]	; (8004318 <vApplicationGetTimerTaskMemory+0x2c>)
 80042fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4a06      	ldr	r2, [pc, #24]	; (800431c <vApplicationGetTimerTaskMemory+0x30>)
 8004302:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800430a:	601a      	str	r2, [r3, #0]
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	20000460 	.word	0x20000460
 800431c:	20000508 	.word	0x20000508

08004320 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f103 0208 	add.w	r2, r3, #8
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004338:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f103 0208 	add.w	r2, r3, #8
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f103 0208 	add.w	r2, r3, #8
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800437a:	b480      	push	{r7}
 800437c:	b085      	sub	sp, #20
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	601a      	str	r2, [r3, #0]
}
 80043b6:	bf00      	nop
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043d8:	d103      	bne.n	80043e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	e00c      	b.n	80043fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3308      	adds	r3, #8
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	e002      	b.n	80043f0 <vListInsert+0x2e>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d2f6      	bcs.n	80043ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	601a      	str	r2, [r3, #0]
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6892      	ldr	r2, [r2, #8]
 800444a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6852      	ldr	r2, [r2, #4]
 8004454:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	429a      	cmp	r2, r3
 800445e:	d103      	bne.n	8004468 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	1e5a      	subs	r2, r3, #1
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80044ae:	bf00      	nop
 80044b0:	e7fe      	b.n	80044b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80044b2:	f002 f92f 	bl	8006714 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044c2:	fb01 f303 	mul.w	r3, r1, r3
 80044c6:	441a      	add	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	3b01      	subs	r3, #1
 80044e4:	68f9      	ldr	r1, [r7, #12]
 80044e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	441a      	add	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	22ff      	movs	r2, #255	; 0xff
 80044f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	22ff      	movs	r2, #255	; 0xff
 80044fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d114      	bne.n	8004532 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01a      	beq.n	8004546 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3310      	adds	r3, #16
 8004514:	4618      	mov	r0, r3
 8004516:	f001 fa17 	bl	8005948 <xTaskRemoveFromEventList>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d012      	beq.n	8004546 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004520:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <xQueueGenericReset+0xcc>)
 8004522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	e009      	b.n	8004546 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3310      	adds	r3, #16
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff fef2 	bl	8004320 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3324      	adds	r3, #36	; 0x24
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff feed 	bl	8004320 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004546:	f002 f915 	bl	8006774 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800454a:	2301      	movs	r3, #1
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	e000ed04 	.word	0xe000ed04

08004558 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08e      	sub	sp, #56	; 0x38
 800455c:	af02      	add	r7, sp, #8
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10a      	bne.n	800459e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
}
 800459a:	bf00      	nop
 800459c:	e7fe      	b.n	800459c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <xQueueGenericCreateStatic+0x52>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <xQueueGenericCreateStatic+0x56>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <xQueueGenericCreateStatic+0x58>
 80045ae:	2300      	movs	r3, #0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	623b      	str	r3, [r7, #32]
}
 80045c6:	bf00      	nop
 80045c8:	e7fe      	b.n	80045c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d102      	bne.n	80045d6 <xQueueGenericCreateStatic+0x7e>
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <xQueueGenericCreateStatic+0x82>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <xQueueGenericCreateStatic+0x84>
 80045da:	2300      	movs	r3, #0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10a      	bne.n	80045f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	61fb      	str	r3, [r7, #28]
}
 80045f2:	bf00      	nop
 80045f4:	e7fe      	b.n	80045f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045f6:	2350      	movs	r3, #80	; 0x50
 80045f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b50      	cmp	r3, #80	; 0x50
 80045fe:	d00a      	beq.n	8004616 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	61bb      	str	r3, [r7, #24]
}
 8004612:	bf00      	nop
 8004614:	e7fe      	b.n	8004614 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00d      	beq.n	800463c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004628:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f843 	bl	80046c2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800463e:	4618      	mov	r0, r3
 8004640:	3730      	adds	r7, #48	; 0x30
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004646:	b580      	push	{r7, lr}
 8004648:	b08a      	sub	sp, #40	; 0x28
 800464a:	af02      	add	r7, sp, #8
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	4613      	mov	r3, r2
 8004652:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10a      	bne.n	8004670 <xQueueGenericCreate+0x2a>
	__asm volatile
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	613b      	str	r3, [r7, #16]
}
 800466c:	bf00      	nop
 800466e:	e7fe      	b.n	800466e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d102      	bne.n	800467c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	e004      	b.n	8004686 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	fb02 f303 	mul.w	r3, r2, r3
 8004684:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	3350      	adds	r3, #80	; 0x50
 800468a:	4618      	mov	r0, r3
 800468c:	f002 f964 	bl	8006958 <pvPortMalloc>
 8004690:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00f      	beq.n	80046b8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	3350      	adds	r3, #80	; 0x50
 800469c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046a6:	79fa      	ldrb	r2, [r7, #7]
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	4613      	mov	r3, r2
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f805 	bl	80046c2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80046b8:	69bb      	ldr	r3, [r7, #24]
	}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d103      	bne.n	80046de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	e002      	b.n	80046e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046f0:	2101      	movs	r1, #1
 80046f2:	69b8      	ldr	r0, [r7, #24]
 80046f4:	f7ff fec8 	bl	8004488 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	78fa      	ldrb	r2, [r7, #3]
 80046fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08e      	sub	sp, #56	; 0x38
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004716:	2300      	movs	r3, #0
 8004718:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10a      	bne.n	800473a <xQueueGenericSend+0x32>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004736:	bf00      	nop
 8004738:	e7fe      	b.n	8004738 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d103      	bne.n	8004748 <xQueueGenericSend+0x40>
 8004740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <xQueueGenericSend+0x44>
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <xQueueGenericSend+0x46>
 800474c:	2300      	movs	r3, #0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10a      	bne.n	8004768 <xQueueGenericSend+0x60>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d103      	bne.n	8004776 <xQueueGenericSend+0x6e>
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <xQueueGenericSend+0x72>
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <xQueueGenericSend+0x74>
 800477a:	2300      	movs	r3, #0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <xQueueGenericSend+0x8e>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	623b      	str	r3, [r7, #32]
}
 8004792:	bf00      	nop
 8004794:	e7fe      	b.n	8004794 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004796:	f001 fa9f 	bl	8005cd8 <xTaskGetSchedulerState>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d102      	bne.n	80047a6 <xQueueGenericSend+0x9e>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <xQueueGenericSend+0xa2>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <xQueueGenericSend+0xa4>
 80047aa:	2300      	movs	r3, #0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10a      	bne.n	80047c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	61fb      	str	r3, [r7, #28]
}
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047c6:	f001 ffa5 	bl	8006714 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d302      	bcc.n	80047dc <xQueueGenericSend+0xd4>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d129      	bne.n	8004830 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047e2:	f000 fac1 	bl	8004d68 <prvCopyDataToQueue>
 80047e6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d010      	beq.n	8004812 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	3324      	adds	r3, #36	; 0x24
 80047f4:	4618      	mov	r0, r3
 80047f6:	f001 f8a7 	bl	8005948 <xTaskRemoveFromEventList>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d013      	beq.n	8004828 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004800:	4b3f      	ldr	r3, [pc, #252]	; (8004900 <xQueueGenericSend+0x1f8>)
 8004802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	e00a      	b.n	8004828 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004818:	4b39      	ldr	r3, [pc, #228]	; (8004900 <xQueueGenericSend+0x1f8>)
 800481a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004828:	f001 ffa4 	bl	8006774 <vPortExitCritical>
				return pdPASS;
 800482c:	2301      	movs	r3, #1
 800482e:	e063      	b.n	80048f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d103      	bne.n	800483e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004836:	f001 ff9d 	bl	8006774 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800483a:	2300      	movs	r3, #0
 800483c:	e05c      	b.n	80048f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800483e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004840:	2b00      	cmp	r3, #0
 8004842:	d106      	bne.n	8004852 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004844:	f107 0314 	add.w	r3, r7, #20
 8004848:	4618      	mov	r0, r3
 800484a:	f001 f8e1 	bl	8005a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800484e:	2301      	movs	r3, #1
 8004850:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004852:	f001 ff8f 	bl	8006774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004856:	f000 fe49 	bl	80054ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800485a:	f001 ff5b 	bl	8006714 <vPortEnterCritical>
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004864:	b25b      	sxtb	r3, r3
 8004866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800486a:	d103      	bne.n	8004874 <xQueueGenericSend+0x16c>
 800486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800487a:	b25b      	sxtb	r3, r3
 800487c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004880:	d103      	bne.n	800488a <xQueueGenericSend+0x182>
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800488a:	f001 ff73 	bl	8006774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800488e:	1d3a      	adds	r2, r7, #4
 8004890:	f107 0314 	add.w	r3, r7, #20
 8004894:	4611      	mov	r1, r2
 8004896:	4618      	mov	r0, r3
 8004898:	f001 f8d0 	bl	8005a3c <xTaskCheckForTimeOut>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d124      	bne.n	80048ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80048a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048a4:	f000 fb58 	bl	8004f58 <prvIsQueueFull>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d018      	beq.n	80048e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	3310      	adds	r3, #16
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fff6 	bl	80058a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048be:	f000 fae3 	bl	8004e88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048c2:	f000 fe21 	bl	8005508 <xTaskResumeAll>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f47f af7c 	bne.w	80047c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80048ce:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <xQueueGenericSend+0x1f8>)
 80048d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	e772      	b.n	80047c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048e2:	f000 fad1 	bl	8004e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048e6:	f000 fe0f 	bl	8005508 <xTaskResumeAll>
 80048ea:	e76c      	b.n	80047c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048ee:	f000 facb 	bl	8004e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048f2:	f000 fe09 	bl	8005508 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048f6:	2300      	movs	r3, #0
		}
	}
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3738      	adds	r7, #56	; 0x38
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	e000ed04 	.word	0xe000ed04

08004904 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08e      	sub	sp, #56	; 0x38
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d103      	bne.n	8004940 <xQueueGenericSendFromISR+0x3c>
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <xQueueGenericSendFromISR+0x40>
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <xQueueGenericSendFromISR+0x42>
 8004944:	2300      	movs	r3, #0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10a      	bne.n	8004960 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	623b      	str	r3, [r7, #32]
}
 800495c:	bf00      	nop
 800495e:	e7fe      	b.n	800495e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b02      	cmp	r3, #2
 8004964:	d103      	bne.n	800496e <xQueueGenericSendFromISR+0x6a>
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <xQueueGenericSendFromISR+0x6e>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <xQueueGenericSendFromISR+0x70>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10a      	bne.n	800498e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	61fb      	str	r3, [r7, #28]
}
 800498a:	bf00      	nop
 800498c:	e7fe      	b.n	800498c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800498e:	f001 ffa3 	bl	80068d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004992:	f3ef 8211 	mrs	r2, BASEPRI
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	61ba      	str	r2, [r7, #24]
 80049a8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80049aa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d302      	bcc.n	80049c0 <xQueueGenericSendFromISR+0xbc>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d12c      	bne.n	8004a1a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	68b9      	ldr	r1, [r7, #8]
 80049ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049d0:	f000 f9ca 	bl	8004d68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049dc:	d112      	bne.n	8004a04 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	3324      	adds	r3, #36	; 0x24
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 ffac 	bl	8005948 <xTaskRemoveFromEventList>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00e      	beq.n	8004a14 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00b      	beq.n	8004a14 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	e007      	b.n	8004a14 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a08:	3301      	adds	r3, #1
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	b25a      	sxtb	r2, r3
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a14:	2301      	movs	r3, #1
 8004a16:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004a18:	e001      	b.n	8004a1e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a20:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3738      	adds	r7, #56	; 0x38
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08c      	sub	sp, #48	; 0x30
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a40:	2300      	movs	r3, #0
 8004a42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10a      	bne.n	8004a64 <xQueueReceive+0x30>
	__asm volatile
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	623b      	str	r3, [r7, #32]
}
 8004a60:	bf00      	nop
 8004a62:	e7fe      	b.n	8004a62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d103      	bne.n	8004a72 <xQueueReceive+0x3e>
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <xQueueReceive+0x42>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <xQueueReceive+0x44>
 8004a76:	2300      	movs	r3, #0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <xQueueReceive+0x5e>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	61fb      	str	r3, [r7, #28]
}
 8004a8e:	bf00      	nop
 8004a90:	e7fe      	b.n	8004a90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a92:	f001 f921 	bl	8005cd8 <xTaskGetSchedulerState>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d102      	bne.n	8004aa2 <xQueueReceive+0x6e>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <xQueueReceive+0x72>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <xQueueReceive+0x74>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <xQueueReceive+0x8e>
	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	61bb      	str	r3, [r7, #24]
}
 8004abe:	bf00      	nop
 8004ac0:	e7fe      	b.n	8004ac0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ac2:	f001 fe27 	bl	8006714 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d01f      	beq.n	8004b12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ad6:	f000 f9b1 	bl	8004e3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	1e5a      	subs	r2, r3, #1
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00f      	beq.n	8004b0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	3310      	adds	r3, #16
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 ff2a 	bl	8005948 <xTaskRemoveFromEventList>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004afa:	4b3d      	ldr	r3, [pc, #244]	; (8004bf0 <xQueueReceive+0x1bc>)
 8004afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b0a:	f001 fe33 	bl	8006774 <vPortExitCritical>
				return pdPASS;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e069      	b.n	8004be6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d103      	bne.n	8004b20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b18:	f001 fe2c 	bl	8006774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	e062      	b.n	8004be6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b26:	f107 0310 	add.w	r3, r7, #16
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 ff70 	bl	8005a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b30:	2301      	movs	r3, #1
 8004b32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b34:	f001 fe1e 	bl	8006774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b38:	f000 fcd8 	bl	80054ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b3c:	f001 fdea 	bl	8006714 <vPortEnterCritical>
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b46:	b25b      	sxtb	r3, r3
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b4c:	d103      	bne.n	8004b56 <xQueueReceive+0x122>
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b5c:	b25b      	sxtb	r3, r3
 8004b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b62:	d103      	bne.n	8004b6c <xQueueReceive+0x138>
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b6c:	f001 fe02 	bl	8006774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b70:	1d3a      	adds	r2, r7, #4
 8004b72:	f107 0310 	add.w	r3, r7, #16
 8004b76:	4611      	mov	r1, r2
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 ff5f 	bl	8005a3c <xTaskCheckForTimeOut>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d123      	bne.n	8004bcc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b86:	f000 f9d1 	bl	8004f2c <prvIsQueueEmpty>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d017      	beq.n	8004bc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	3324      	adds	r3, #36	; 0x24
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	4611      	mov	r1, r2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 fe85 	bl	80058a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ba0:	f000 f972 	bl	8004e88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ba4:	f000 fcb0 	bl	8005508 <xTaskResumeAll>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d189      	bne.n	8004ac2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004bae:	4b10      	ldr	r3, [pc, #64]	; (8004bf0 <xQueueReceive+0x1bc>)
 8004bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	e780      	b.n	8004ac2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bc2:	f000 f961 	bl	8004e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bc6:	f000 fc9f 	bl	8005508 <xTaskResumeAll>
 8004bca:	e77a      	b.n	8004ac2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bce:	f000 f95b 	bl	8004e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bd2:	f000 fc99 	bl	8005508 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bd8:	f000 f9a8 	bl	8004f2c <prvIsQueueEmpty>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f43f af6f 	beq.w	8004ac2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004be4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3730      	adds	r7, #48	; 0x30
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	e000ed04 	.word	0xe000ed04

08004bf4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08e      	sub	sp, #56	; 0x38
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10a      	bne.n	8004c20 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	623b      	str	r3, [r7, #32]
}
 8004c1c:	bf00      	nop
 8004c1e:	e7fe      	b.n	8004c1e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d103      	bne.n	8004c2e <xQueueReceiveFromISR+0x3a>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <xQueueReceiveFromISR+0x3e>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <xQueueReceiveFromISR+0x40>
 8004c32:	2300      	movs	r3, #0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	61fb      	str	r3, [r7, #28]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c4e:	f001 fe43 	bl	80068d8 <vPortValidateInterruptPriority>
	__asm volatile
 8004c52:	f3ef 8211 	mrs	r2, BASEPRI
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	61ba      	str	r2, [r7, #24]
 8004c68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004c6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d02f      	beq.n	8004cda <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c88:	f000 f8d8 	bl	8004e3c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	1e5a      	subs	r2, r3, #1
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004c94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c9c:	d112      	bne.n	8004cc4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d016      	beq.n	8004cd4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	3310      	adds	r3, #16
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fe4c 	bl	8005948 <xTaskRemoveFromEventList>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00e      	beq.n	8004cd4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00b      	beq.n	8004cd4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	e007      	b.n	8004cd4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cc8:	3301      	adds	r3, #1
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	b25a      	sxtb	r2, r3
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd8:	e001      	b.n	8004cde <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f383 8811 	msr	BASEPRI, r3
}
 8004ce8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3738      	adds	r7, #56	; 0x38
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10a      	bne.n	8004d18 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	60bb      	str	r3, [r7, #8]
}
 8004d14:	bf00      	nop
 8004d16:	e7fe      	b.n	8004d16 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8004d18:	f001 fcfc 	bl	8006714 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004d22:	f001 fd27 	bl	8006774 <vPortExitCritical>

	return uxReturn;
 8004d26:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	60bb      	str	r3, [r7, #8]
}
 8004d50:	bf00      	nop
 8004d52:	e7fe      	b.n	8004d52 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10d      	bne.n	8004da2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d14d      	bne.n	8004e2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 ffbe 	bl	8005d14 <xTaskPriorityDisinherit>
 8004d98:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	605a      	str	r2, [r3, #4]
 8004da0:	e043      	b.n	8004e2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d119      	bne.n	8004ddc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6898      	ldr	r0, [r3, #8]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	461a      	mov	r2, r3
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	f002 f82e 	bl	8006e14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	441a      	add	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d32b      	bcc.n	8004e2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	609a      	str	r2, [r3, #8]
 8004dda:	e026      	b.n	8004e2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	68d8      	ldr	r0, [r3, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	461a      	mov	r2, r3
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	f002 f814 	bl	8006e14 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	425b      	negs	r3, r3
 8004df6:	441a      	add	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d207      	bcs.n	8004e18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e10:	425b      	negs	r3, r3
 8004e12:	441a      	add	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d105      	bne.n	8004e2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e32:	697b      	ldr	r3, [r7, #20]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d018      	beq.n	8004e80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	441a      	add	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d303      	bcc.n	8004e70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68d9      	ldr	r1, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	461a      	mov	r2, r3
 8004e7a:	6838      	ldr	r0, [r7, #0]
 8004e7c:	f001 ffca 	bl	8006e14 <memcpy>
	}
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e90:	f001 fc40 	bl	8006714 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e9c:	e011      	b.n	8004ec2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d012      	beq.n	8004ecc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3324      	adds	r3, #36	; 0x24
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fd4c 	bl	8005948 <xTaskRemoveFromEventList>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004eb6:	f000 fe23 	bl	8005b00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	dce9      	bgt.n	8004e9e <prvUnlockQueue+0x16>
 8004eca:	e000      	b.n	8004ece <prvUnlockQueue+0x46>
					break;
 8004ecc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	22ff      	movs	r2, #255	; 0xff
 8004ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ed6:	f001 fc4d 	bl	8006774 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004eda:	f001 fc1b 	bl	8006714 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ee4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ee6:	e011      	b.n	8004f0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d012      	beq.n	8004f16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3310      	adds	r3, #16
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 fd27 	bl	8005948 <xTaskRemoveFromEventList>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f00:	f000 fdfe 	bl	8005b00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f04:	7bbb      	ldrb	r3, [r7, #14]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	dce9      	bgt.n	8004ee8 <prvUnlockQueue+0x60>
 8004f14:	e000      	b.n	8004f18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	22ff      	movs	r2, #255	; 0xff
 8004f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f20:	f001 fc28 	bl	8006774 <vPortExitCritical>
}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f34:	f001 fbee 	bl	8006714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d102      	bne.n	8004f46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f40:	2301      	movs	r3, #1
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e001      	b.n	8004f4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f4a:	f001 fc13 	bl	8006774 <vPortExitCritical>

	return xReturn;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f60:	f001 fbd8 	bl	8006714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d102      	bne.n	8004f76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f70:	2301      	movs	r3, #1
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e001      	b.n	8004f7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f7a:	f001 fbfb 	bl	8006774 <vPortExitCritical>

	return xReturn;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f92:	2300      	movs	r3, #0
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	e014      	b.n	8004fc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f98:	4a0f      	ldr	r2, [pc, #60]	; (8004fd8 <vQueueAddToRegistry+0x50>)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10b      	bne.n	8004fbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fa4:	490c      	ldr	r1, [pc, #48]	; (8004fd8 <vQueueAddToRegistry+0x50>)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fae:	4a0a      	ldr	r2, [pc, #40]	; (8004fd8 <vQueueAddToRegistry+0x50>)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fba:	e006      	b.n	8004fca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b07      	cmp	r3, #7
 8004fc6:	d9e7      	bls.n	8004f98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	20000908 	.word	0x20000908

08004fdc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004fec:	f001 fb92 	bl	8006714 <vPortEnterCritical>
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ff6:	b25b      	sxtb	r3, r3
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ffc:	d103      	bne.n	8005006 <vQueueWaitForMessageRestricted+0x2a>
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800500c:	b25b      	sxtb	r3, r3
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005012:	d103      	bne.n	800501c <vQueueWaitForMessageRestricted+0x40>
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800501c:	f001 fbaa 	bl	8006774 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	2b00      	cmp	r3, #0
 8005026:	d106      	bne.n	8005036 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	3324      	adds	r3, #36	; 0x24
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fc5d 	bl	80058f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005036:	6978      	ldr	r0, [r7, #20]
 8005038:	f7ff ff26 	bl	8004e88 <prvUnlockQueue>
	}
 800503c:	bf00      	nop
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08e      	sub	sp, #56	; 0x38
 8005048:	af04      	add	r7, sp, #16
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10a      	bne.n	800506e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	623b      	str	r3, [r7, #32]
}
 800506a:	bf00      	nop
 800506c:	e7fe      	b.n	800506c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800506e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10a      	bne.n	800508a <xTaskCreateStatic+0x46>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	61fb      	str	r3, [r7, #28]
}
 8005086:	bf00      	nop
 8005088:	e7fe      	b.n	8005088 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800508a:	23a8      	movs	r3, #168	; 0xa8
 800508c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	2ba8      	cmp	r3, #168	; 0xa8
 8005092:	d00a      	beq.n	80050aa <xTaskCreateStatic+0x66>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	61bb      	str	r3, [r7, #24]
}
 80050a6:	bf00      	nop
 80050a8:	e7fe      	b.n	80050a8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01e      	beq.n	80050ee <xTaskCreateStatic+0xaa>
 80050b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d01b      	beq.n	80050ee <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050be:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050c8:	2300      	movs	r3, #0
 80050ca:	9303      	str	r3, [sp, #12]
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	9302      	str	r3, [sp, #8]
 80050d0:	f107 0314 	add.w	r3, r7, #20
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f851 	bl	8005188 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050e8:	f000 f8ec 	bl	80052c4 <prvAddNewTaskToReadyList>
 80050ec:	e001      	b.n	80050f2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050f2:	697b      	ldr	r3, [r7, #20]
	}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3728      	adds	r7, #40	; 0x28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08c      	sub	sp, #48	; 0x30
 8005100:	af04      	add	r7, sp, #16
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	603b      	str	r3, [r7, #0]
 8005108:	4613      	mov	r3, r2
 800510a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800510c:	88fb      	ldrh	r3, [r7, #6]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4618      	mov	r0, r3
 8005112:	f001 fc21 	bl	8006958 <pvPortMalloc>
 8005116:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00e      	beq.n	800513c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800511e:	20a8      	movs	r0, #168	; 0xa8
 8005120:	f001 fc1a 	bl	8006958 <pvPortMalloc>
 8005124:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	631a      	str	r2, [r3, #48]	; 0x30
 8005132:	e005      	b.n	8005140 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005134:	6978      	ldr	r0, [r7, #20]
 8005136:	f001 fcd3 	bl	8006ae0 <vPortFree>
 800513a:	e001      	b.n	8005140 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800513c:	2300      	movs	r3, #0
 800513e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d017      	beq.n	8005176 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800514e:	88fa      	ldrh	r2, [r7, #6]
 8005150:	2300      	movs	r3, #0
 8005152:	9303      	str	r3, [sp, #12]
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	9302      	str	r3, [sp, #8]
 8005158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515a:	9301      	str	r3, [sp, #4]
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f80f 	bl	8005188 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800516a:	69f8      	ldr	r0, [r7, #28]
 800516c:	f000 f8aa 	bl	80052c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005170:	2301      	movs	r3, #1
 8005172:	61bb      	str	r3, [r7, #24]
 8005174:	e002      	b.n	800517c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800517a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800517c:	69bb      	ldr	r3, [r7, #24]
	}
 800517e:	4618      	mov	r0, r3
 8005180:	3720      	adds	r7, #32
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
	...

08005188 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	461a      	mov	r2, r3
 80051a0:	21a5      	movs	r1, #165	; 0xa5
 80051a2:	f001 fdb3 	bl	8006d0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051b0:	3b01      	subs	r3, #1
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f023 0307 	bic.w	r3, r3, #7
 80051be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	617b      	str	r3, [r7, #20]
}
 80051dc:	bf00      	nop
 80051de:	e7fe      	b.n	80051de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051e0:	2300      	movs	r3, #0
 80051e2:	61fb      	str	r3, [r7, #28]
 80051e4:	e012      	b.n	800520c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	4413      	add	r3, r2
 80051ec:	7819      	ldrb	r1, [r3, #0]
 80051ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	4413      	add	r3, r2
 80051f4:	3334      	adds	r3, #52	; 0x34
 80051f6:	460a      	mov	r2, r1
 80051f8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	4413      	add	r3, r2
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d006      	beq.n	8005214 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	3301      	adds	r3, #1
 800520a:	61fb      	str	r3, [r7, #28]
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	2b0f      	cmp	r3, #15
 8005210:	d9e9      	bls.n	80051e6 <prvInitialiseNewTask+0x5e>
 8005212:	e000      	b.n	8005216 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005214:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	2b37      	cmp	r3, #55	; 0x37
 8005222:	d901      	bls.n	8005228 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005224:	2337      	movs	r3, #55	; 0x37
 8005226:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800522c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005232:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	2200      	movs	r2, #0
 8005238:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	3304      	adds	r3, #4
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff f88e 	bl	8004360 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005246:	3318      	adds	r3, #24
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff f889 	bl	8004360 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005252:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005262:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	2200      	movs	r2, #0
 8005268:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	2200      	movs	r2, #0
 8005270:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005276:	3354      	adds	r3, #84	; 0x54
 8005278:	224c      	movs	r2, #76	; 0x4c
 800527a:	2100      	movs	r1, #0
 800527c:	4618      	mov	r0, r3
 800527e:	f001 fd45 	bl	8006d0c <memset>
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	4a0c      	ldr	r2, [pc, #48]	; (80052b8 <prvInitialiseNewTask+0x130>)
 8005286:	659a      	str	r2, [r3, #88]	; 0x58
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	4a0c      	ldr	r2, [pc, #48]	; (80052bc <prvInitialiseNewTask+0x134>)
 800528c:	65da      	str	r2, [r3, #92]	; 0x5c
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	4a0b      	ldr	r2, [pc, #44]	; (80052c0 <prvInitialiseNewTask+0x138>)
 8005292:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	68f9      	ldr	r1, [r7, #12]
 8005298:	69b8      	ldr	r0, [r7, #24]
 800529a:	f001 f90f 	bl	80064bc <pxPortInitialiseStack>
 800529e:	4602      	mov	r2, r0
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80052a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052b0:	bf00      	nop
 80052b2:	3720      	adds	r7, #32
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20001b94 	.word	0x20001b94
 80052bc:	20001bfc 	.word	0x20001bfc
 80052c0:	20001c64 	.word	0x20001c64

080052c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052cc:	f001 fa22 	bl	8006714 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052d0:	4b2d      	ldr	r3, [pc, #180]	; (8005388 <prvAddNewTaskToReadyList+0xc4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3301      	adds	r3, #1
 80052d6:	4a2c      	ldr	r2, [pc, #176]	; (8005388 <prvAddNewTaskToReadyList+0xc4>)
 80052d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052da:	4b2c      	ldr	r3, [pc, #176]	; (800538c <prvAddNewTaskToReadyList+0xc8>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052e2:	4a2a      	ldr	r2, [pc, #168]	; (800538c <prvAddNewTaskToReadyList+0xc8>)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052e8:	4b27      	ldr	r3, [pc, #156]	; (8005388 <prvAddNewTaskToReadyList+0xc4>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d110      	bne.n	8005312 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052f0:	f000 fc2a 	bl	8005b48 <prvInitialiseTaskLists>
 80052f4:	e00d      	b.n	8005312 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052f6:	4b26      	ldr	r3, [pc, #152]	; (8005390 <prvAddNewTaskToReadyList+0xcc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d109      	bne.n	8005312 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052fe:	4b23      	ldr	r3, [pc, #140]	; (800538c <prvAddNewTaskToReadyList+0xc8>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	429a      	cmp	r2, r3
 800530a:	d802      	bhi.n	8005312 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800530c:	4a1f      	ldr	r2, [pc, #124]	; (800538c <prvAddNewTaskToReadyList+0xc8>)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005312:	4b20      	ldr	r3, [pc, #128]	; (8005394 <prvAddNewTaskToReadyList+0xd0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3301      	adds	r3, #1
 8005318:	4a1e      	ldr	r2, [pc, #120]	; (8005394 <prvAddNewTaskToReadyList+0xd0>)
 800531a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800531c:	4b1d      	ldr	r3, [pc, #116]	; (8005394 <prvAddNewTaskToReadyList+0xd0>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005328:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <prvAddNewTaskToReadyList+0xd4>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d903      	bls.n	8005338 <prvAddNewTaskToReadyList+0x74>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	4a18      	ldr	r2, [pc, #96]	; (8005398 <prvAddNewTaskToReadyList+0xd4>)
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533c:	4613      	mov	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4a15      	ldr	r2, [pc, #84]	; (800539c <prvAddNewTaskToReadyList+0xd8>)
 8005346:	441a      	add	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3304      	adds	r3, #4
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f7ff f813 	bl	800437a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005354:	f001 fa0e 	bl	8006774 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005358:	4b0d      	ldr	r3, [pc, #52]	; (8005390 <prvAddNewTaskToReadyList+0xcc>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00e      	beq.n	800537e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005360:	4b0a      	ldr	r3, [pc, #40]	; (800538c <prvAddNewTaskToReadyList+0xc8>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	429a      	cmp	r2, r3
 800536c:	d207      	bcs.n	800537e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800536e:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <prvAddNewTaskToReadyList+0xdc>)
 8005370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20000e1c 	.word	0x20000e1c
 800538c:	20000948 	.word	0x20000948
 8005390:	20000e28 	.word	0x20000e28
 8005394:	20000e38 	.word	0x20000e38
 8005398:	20000e24 	.word	0x20000e24
 800539c:	2000094c 	.word	0x2000094c
 80053a0:	e000ed04 	.word	0xe000ed04

080053a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d017      	beq.n	80053e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053b6:	4b13      	ldr	r3, [pc, #76]	; (8005404 <vTaskDelay+0x60>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <vTaskDelay+0x30>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	60bb      	str	r3, [r7, #8]
}
 80053d0:	bf00      	nop
 80053d2:	e7fe      	b.n	80053d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053d4:	f000 f88a 	bl	80054ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053d8:	2100      	movs	r1, #0
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fd08 	bl	8005df0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053e0:	f000 f892 	bl	8005508 <xTaskResumeAll>
 80053e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d107      	bne.n	80053fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80053ec:	4b06      	ldr	r3, [pc, #24]	; (8005408 <vTaskDelay+0x64>)
 80053ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000e44 	.word	0x20000e44
 8005408:	e000ed04 	.word	0xe000ed04

0800540c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08a      	sub	sp, #40	; 0x28
 8005410:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005412:	2300      	movs	r3, #0
 8005414:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005416:	2300      	movs	r3, #0
 8005418:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800541a:	463a      	mov	r2, r7
 800541c:	1d39      	adds	r1, r7, #4
 800541e:	f107 0308 	add.w	r3, r7, #8
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe ff48 	bl	80042b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005428:	6839      	ldr	r1, [r7, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	9202      	str	r2, [sp, #8]
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	2300      	movs	r3, #0
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	2300      	movs	r3, #0
 8005438:	460a      	mov	r2, r1
 800543a:	4924      	ldr	r1, [pc, #144]	; (80054cc <vTaskStartScheduler+0xc0>)
 800543c:	4824      	ldr	r0, [pc, #144]	; (80054d0 <vTaskStartScheduler+0xc4>)
 800543e:	f7ff fe01 	bl	8005044 <xTaskCreateStatic>
 8005442:	4603      	mov	r3, r0
 8005444:	4a23      	ldr	r2, [pc, #140]	; (80054d4 <vTaskStartScheduler+0xc8>)
 8005446:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005448:	4b22      	ldr	r3, [pc, #136]	; (80054d4 <vTaskStartScheduler+0xc8>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005450:	2301      	movs	r3, #1
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e001      	b.n	800545a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d102      	bne.n	8005466 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005460:	f000 fd1a 	bl	8005e98 <xTimerCreateTimerTask>
 8005464:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d11b      	bne.n	80054a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	613b      	str	r3, [r7, #16]
}
 800547e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005480:	4b15      	ldr	r3, [pc, #84]	; (80054d8 <vTaskStartScheduler+0xcc>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3354      	adds	r3, #84	; 0x54
 8005486:	4a15      	ldr	r2, [pc, #84]	; (80054dc <vTaskStartScheduler+0xd0>)
 8005488:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800548a:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <vTaskStartScheduler+0xd4>)
 800548c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005490:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005492:	4b14      	ldr	r3, [pc, #80]	; (80054e4 <vTaskStartScheduler+0xd8>)
 8005494:	2201      	movs	r2, #1
 8005496:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005498:	4b13      	ldr	r3, [pc, #76]	; (80054e8 <vTaskStartScheduler+0xdc>)
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800549e:	f001 f897 	bl	80065d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054a2:	e00e      	b.n	80054c2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054aa:	d10a      	bne.n	80054c2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	60fb      	str	r3, [r7, #12]
}
 80054be:	bf00      	nop
 80054c0:	e7fe      	b.n	80054c0 <vTaskStartScheduler+0xb4>
}
 80054c2:	bf00      	nop
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	080070a8 	.word	0x080070a8
 80054d0:	08005b19 	.word	0x08005b19
 80054d4:	20000e40 	.word	0x20000e40
 80054d8:	20000948 	.word	0x20000948
 80054dc:	2000005c 	.word	0x2000005c
 80054e0:	20000e3c 	.word	0x20000e3c
 80054e4:	20000e28 	.word	0x20000e28
 80054e8:	20000e20 	.word	0x20000e20

080054ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80054f0:	4b04      	ldr	r3, [pc, #16]	; (8005504 <vTaskSuspendAll+0x18>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3301      	adds	r3, #1
 80054f6:	4a03      	ldr	r2, [pc, #12]	; (8005504 <vTaskSuspendAll+0x18>)
 80054f8:	6013      	str	r3, [r2, #0]
}
 80054fa:	bf00      	nop
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	20000e44 	.word	0x20000e44

08005508 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005512:	2300      	movs	r3, #0
 8005514:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005516:	4b42      	ldr	r3, [pc, #264]	; (8005620 <xTaskResumeAll+0x118>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10a      	bne.n	8005534 <xTaskResumeAll+0x2c>
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	603b      	str	r3, [r7, #0]
}
 8005530:	bf00      	nop
 8005532:	e7fe      	b.n	8005532 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005534:	f001 f8ee 	bl	8006714 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005538:	4b39      	ldr	r3, [pc, #228]	; (8005620 <xTaskResumeAll+0x118>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3b01      	subs	r3, #1
 800553e:	4a38      	ldr	r2, [pc, #224]	; (8005620 <xTaskResumeAll+0x118>)
 8005540:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005542:	4b37      	ldr	r3, [pc, #220]	; (8005620 <xTaskResumeAll+0x118>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d162      	bne.n	8005610 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800554a:	4b36      	ldr	r3, [pc, #216]	; (8005624 <xTaskResumeAll+0x11c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d05e      	beq.n	8005610 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005552:	e02f      	b.n	80055b4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005554:	4b34      	ldr	r3, [pc, #208]	; (8005628 <xTaskResumeAll+0x120>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3318      	adds	r3, #24
 8005560:	4618      	mov	r0, r3
 8005562:	f7fe ff67 	bl	8004434 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3304      	adds	r3, #4
 800556a:	4618      	mov	r0, r3
 800556c:	f7fe ff62 	bl	8004434 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005574:	4b2d      	ldr	r3, [pc, #180]	; (800562c <xTaskResumeAll+0x124>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d903      	bls.n	8005584 <xTaskResumeAll+0x7c>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	4a2a      	ldr	r2, [pc, #168]	; (800562c <xTaskResumeAll+0x124>)
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4a27      	ldr	r2, [pc, #156]	; (8005630 <xTaskResumeAll+0x128>)
 8005592:	441a      	add	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	3304      	adds	r3, #4
 8005598:	4619      	mov	r1, r3
 800559a:	4610      	mov	r0, r2
 800559c:	f7fe feed 	bl	800437a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a4:	4b23      	ldr	r3, [pc, #140]	; (8005634 <xTaskResumeAll+0x12c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d302      	bcc.n	80055b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80055ae:	4b22      	ldr	r3, [pc, #136]	; (8005638 <xTaskResumeAll+0x130>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055b4:	4b1c      	ldr	r3, [pc, #112]	; (8005628 <xTaskResumeAll+0x120>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1cb      	bne.n	8005554 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055c2:	f000 fb63 	bl	8005c8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80055c6:	4b1d      	ldr	r3, [pc, #116]	; (800563c <xTaskResumeAll+0x134>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d010      	beq.n	80055f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055d2:	f000 f847 	bl	8005664 <xTaskIncrementTick>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80055dc:	4b16      	ldr	r3, [pc, #88]	; (8005638 <xTaskResumeAll+0x130>)
 80055de:	2201      	movs	r2, #1
 80055e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3b01      	subs	r3, #1
 80055e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f1      	bne.n	80055d2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80055ee:	4b13      	ldr	r3, [pc, #76]	; (800563c <xTaskResumeAll+0x134>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055f4:	4b10      	ldr	r3, [pc, #64]	; (8005638 <xTaskResumeAll+0x130>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d009      	beq.n	8005610 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055fc:	2301      	movs	r3, #1
 80055fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005600:	4b0f      	ldr	r3, [pc, #60]	; (8005640 <xTaskResumeAll+0x138>)
 8005602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005610:	f001 f8b0 	bl	8006774 <vPortExitCritical>

	return xAlreadyYielded;
 8005614:	68bb      	ldr	r3, [r7, #8]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000e44 	.word	0x20000e44
 8005624:	20000e1c 	.word	0x20000e1c
 8005628:	20000ddc 	.word	0x20000ddc
 800562c:	20000e24 	.word	0x20000e24
 8005630:	2000094c 	.word	0x2000094c
 8005634:	20000948 	.word	0x20000948
 8005638:	20000e30 	.word	0x20000e30
 800563c:	20000e2c 	.word	0x20000e2c
 8005640:	e000ed04 	.word	0xe000ed04

08005644 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800564a:	4b05      	ldr	r3, [pc, #20]	; (8005660 <xTaskGetTickCount+0x1c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005650:	687b      	ldr	r3, [r7, #4]
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	20000e20 	.word	0x20000e20

08005664 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800566e:	4b51      	ldr	r3, [pc, #324]	; (80057b4 <xTaskIncrementTick+0x150>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f040 808e 	bne.w	8005794 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005678:	4b4f      	ldr	r3, [pc, #316]	; (80057b8 <xTaskIncrementTick+0x154>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3301      	adds	r3, #1
 800567e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005680:	4a4d      	ldr	r2, [pc, #308]	; (80057b8 <xTaskIncrementTick+0x154>)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d120      	bne.n	80056ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800568c:	4b4b      	ldr	r3, [pc, #300]	; (80057bc <xTaskIncrementTick+0x158>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <xTaskIncrementTick+0x48>
	__asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	603b      	str	r3, [r7, #0]
}
 80056a8:	bf00      	nop
 80056aa:	e7fe      	b.n	80056aa <xTaskIncrementTick+0x46>
 80056ac:	4b43      	ldr	r3, [pc, #268]	; (80057bc <xTaskIncrementTick+0x158>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	4b43      	ldr	r3, [pc, #268]	; (80057c0 <xTaskIncrementTick+0x15c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a41      	ldr	r2, [pc, #260]	; (80057bc <xTaskIncrementTick+0x158>)
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	4a41      	ldr	r2, [pc, #260]	; (80057c0 <xTaskIncrementTick+0x15c>)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	4b40      	ldr	r3, [pc, #256]	; (80057c4 <xTaskIncrementTick+0x160>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3301      	adds	r3, #1
 80056c6:	4a3f      	ldr	r2, [pc, #252]	; (80057c4 <xTaskIncrementTick+0x160>)
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	f000 fadf 	bl	8005c8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056ce:	4b3e      	ldr	r3, [pc, #248]	; (80057c8 <xTaskIncrementTick+0x164>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d34e      	bcc.n	8005776 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056d8:	4b38      	ldr	r3, [pc, #224]	; (80057bc <xTaskIncrementTick+0x158>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <xTaskIncrementTick+0x82>
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <xTaskIncrementTick+0x84>
 80056e6:	2300      	movs	r3, #0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d004      	beq.n	80056f6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ec:	4b36      	ldr	r3, [pc, #216]	; (80057c8 <xTaskIncrementTick+0x164>)
 80056ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056f2:	601a      	str	r2, [r3, #0]
					break;
 80056f4:	e03f      	b.n	8005776 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80056f6:	4b31      	ldr	r3, [pc, #196]	; (80057bc <xTaskIncrementTick+0x158>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	429a      	cmp	r2, r3
 800570c:	d203      	bcs.n	8005716 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800570e:	4a2e      	ldr	r2, [pc, #184]	; (80057c8 <xTaskIncrementTick+0x164>)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6013      	str	r3, [r2, #0]
						break;
 8005714:	e02f      	b.n	8005776 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	3304      	adds	r3, #4
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe fe8a 	bl	8004434 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005724:	2b00      	cmp	r3, #0
 8005726:	d004      	beq.n	8005732 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	3318      	adds	r3, #24
 800572c:	4618      	mov	r0, r3
 800572e:	f7fe fe81 	bl	8004434 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005736:	4b25      	ldr	r3, [pc, #148]	; (80057cc <xTaskIncrementTick+0x168>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d903      	bls.n	8005746 <xTaskIncrementTick+0xe2>
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	4a22      	ldr	r2, [pc, #136]	; (80057cc <xTaskIncrementTick+0x168>)
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574a:	4613      	mov	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4a1f      	ldr	r2, [pc, #124]	; (80057d0 <xTaskIncrementTick+0x16c>)
 8005754:	441a      	add	r2, r3
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	3304      	adds	r3, #4
 800575a:	4619      	mov	r1, r3
 800575c:	4610      	mov	r0, r2
 800575e:	f7fe fe0c 	bl	800437a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005766:	4b1b      	ldr	r3, [pc, #108]	; (80057d4 <xTaskIncrementTick+0x170>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	429a      	cmp	r2, r3
 800576e:	d3b3      	bcc.n	80056d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005770:	2301      	movs	r3, #1
 8005772:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005774:	e7b0      	b.n	80056d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005776:	4b17      	ldr	r3, [pc, #92]	; (80057d4 <xTaskIncrementTick+0x170>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577c:	4914      	ldr	r1, [pc, #80]	; (80057d0 <xTaskIncrementTick+0x16c>)
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d907      	bls.n	800579e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800578e:	2301      	movs	r3, #1
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e004      	b.n	800579e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005794:	4b10      	ldr	r3, [pc, #64]	; (80057d8 <xTaskIncrementTick+0x174>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3301      	adds	r3, #1
 800579a:	4a0f      	ldr	r2, [pc, #60]	; (80057d8 <xTaskIncrementTick+0x174>)
 800579c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800579e:	4b0f      	ldr	r3, [pc, #60]	; (80057dc <xTaskIncrementTick+0x178>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80057a6:	2301      	movs	r3, #1
 80057a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80057aa:	697b      	ldr	r3, [r7, #20]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	20000e44 	.word	0x20000e44
 80057b8:	20000e20 	.word	0x20000e20
 80057bc:	20000dd4 	.word	0x20000dd4
 80057c0:	20000dd8 	.word	0x20000dd8
 80057c4:	20000e34 	.word	0x20000e34
 80057c8:	20000e3c 	.word	0x20000e3c
 80057cc:	20000e24 	.word	0x20000e24
 80057d0:	2000094c 	.word	0x2000094c
 80057d4:	20000948 	.word	0x20000948
 80057d8:	20000e2c 	.word	0x20000e2c
 80057dc:	20000e30 	.word	0x20000e30

080057e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057e6:	4b2a      	ldr	r3, [pc, #168]	; (8005890 <vTaskSwitchContext+0xb0>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057ee:	4b29      	ldr	r3, [pc, #164]	; (8005894 <vTaskSwitchContext+0xb4>)
 80057f0:	2201      	movs	r2, #1
 80057f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057f4:	e046      	b.n	8005884 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80057f6:	4b27      	ldr	r3, [pc, #156]	; (8005894 <vTaskSwitchContext+0xb4>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80057fc:	4b26      	ldr	r3, [pc, #152]	; (8005898 <vTaskSwitchContext+0xb8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	e010      	b.n	8005826 <vTaskSwitchContext+0x46>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10a      	bne.n	8005820 <vTaskSwitchContext+0x40>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	607b      	str	r3, [r7, #4]
}
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <vTaskSwitchContext+0x3e>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3b01      	subs	r3, #1
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	491d      	ldr	r1, [pc, #116]	; (800589c <vTaskSwitchContext+0xbc>)
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	440b      	add	r3, r1
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0e4      	beq.n	8005804 <vTaskSwitchContext+0x24>
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4613      	mov	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4a15      	ldr	r2, [pc, #84]	; (800589c <vTaskSwitchContext+0xbc>)
 8005846:	4413      	add	r3, r2
 8005848:	60bb      	str	r3, [r7, #8]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	605a      	str	r2, [r3, #4]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	3308      	adds	r3, #8
 800585c:	429a      	cmp	r2, r3
 800585e:	d104      	bne.n	800586a <vTaskSwitchContext+0x8a>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	605a      	str	r2, [r3, #4]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	4a0b      	ldr	r2, [pc, #44]	; (80058a0 <vTaskSwitchContext+0xc0>)
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	4a08      	ldr	r2, [pc, #32]	; (8005898 <vTaskSwitchContext+0xb8>)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800587a:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <vTaskSwitchContext+0xc0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3354      	adds	r3, #84	; 0x54
 8005880:	4a08      	ldr	r2, [pc, #32]	; (80058a4 <vTaskSwitchContext+0xc4>)
 8005882:	6013      	str	r3, [r2, #0]
}
 8005884:	bf00      	nop
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	20000e44 	.word	0x20000e44
 8005894:	20000e30 	.word	0x20000e30
 8005898:	20000e24 	.word	0x20000e24
 800589c:	2000094c 	.word	0x2000094c
 80058a0:	20000948 	.word	0x20000948
 80058a4:	2000005c 	.word	0x2000005c

080058a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10a      	bne.n	80058ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	60fb      	str	r3, [r7, #12]
}
 80058ca:	bf00      	nop
 80058cc:	e7fe      	b.n	80058cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058ce:	4b07      	ldr	r3, [pc, #28]	; (80058ec <vTaskPlaceOnEventList+0x44>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3318      	adds	r3, #24
 80058d4:	4619      	mov	r1, r3
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7fe fd73 	bl	80043c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058dc:	2101      	movs	r1, #1
 80058de:	6838      	ldr	r0, [r7, #0]
 80058e0:	f000 fa86 	bl	8005df0 <prvAddCurrentTaskToDelayedList>
}
 80058e4:	bf00      	nop
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	20000948 	.word	0x20000948

080058f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10a      	bne.n	8005918 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	617b      	str	r3, [r7, #20]
}
 8005914:	bf00      	nop
 8005916:	e7fe      	b.n	8005916 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005918:	4b0a      	ldr	r3, [pc, #40]	; (8005944 <vTaskPlaceOnEventListRestricted+0x54>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3318      	adds	r3, #24
 800591e:	4619      	mov	r1, r3
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f7fe fd2a 	bl	800437a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800592c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005930:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	68b8      	ldr	r0, [r7, #8]
 8005936:	f000 fa5b 	bl	8005df0 <prvAddCurrentTaskToDelayedList>
	}
 800593a:	bf00      	nop
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20000948 	.word	0x20000948

08005948 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	60fb      	str	r3, [r7, #12]
}
 8005970:	bf00      	nop
 8005972:	e7fe      	b.n	8005972 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	3318      	adds	r3, #24
 8005978:	4618      	mov	r0, r3
 800597a:	f7fe fd5b 	bl	8004434 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800597e:	4b1e      	ldr	r3, [pc, #120]	; (80059f8 <xTaskRemoveFromEventList+0xb0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d11d      	bne.n	80059c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	3304      	adds	r3, #4
 800598a:	4618      	mov	r0, r3
 800598c:	f7fe fd52 	bl	8004434 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005994:	4b19      	ldr	r3, [pc, #100]	; (80059fc <xTaskRemoveFromEventList+0xb4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d903      	bls.n	80059a4 <xTaskRemoveFromEventList+0x5c>
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	4a16      	ldr	r2, [pc, #88]	; (80059fc <xTaskRemoveFromEventList+0xb4>)
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a8:	4613      	mov	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4a13      	ldr	r2, [pc, #76]	; (8005a00 <xTaskRemoveFromEventList+0xb8>)
 80059b2:	441a      	add	r2, r3
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	3304      	adds	r3, #4
 80059b8:	4619      	mov	r1, r3
 80059ba:	4610      	mov	r0, r2
 80059bc:	f7fe fcdd 	bl	800437a <vListInsertEnd>
 80059c0:	e005      	b.n	80059ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	3318      	adds	r3, #24
 80059c6:	4619      	mov	r1, r3
 80059c8:	480e      	ldr	r0, [pc, #56]	; (8005a04 <xTaskRemoveFromEventList+0xbc>)
 80059ca:	f7fe fcd6 	bl	800437a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d2:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <xTaskRemoveFromEventList+0xc0>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	429a      	cmp	r2, r3
 80059da:	d905      	bls.n	80059e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059dc:	2301      	movs	r3, #1
 80059de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059e0:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <xTaskRemoveFromEventList+0xc4>)
 80059e2:	2201      	movs	r2, #1
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	e001      	b.n	80059ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80059ec:	697b      	ldr	r3, [r7, #20]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000e44 	.word	0x20000e44
 80059fc:	20000e24 	.word	0x20000e24
 8005a00:	2000094c 	.word	0x2000094c
 8005a04:	20000ddc 	.word	0x20000ddc
 8005a08:	20000948 	.word	0x20000948
 8005a0c:	20000e30 	.word	0x20000e30

08005a10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a18:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <vTaskInternalSetTimeOutState+0x24>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a20:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <vTaskInternalSetTimeOutState+0x28>)
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	605a      	str	r2, [r3, #4]
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	20000e34 	.word	0x20000e34
 8005a38:	20000e20 	.word	0x20000e20

08005a3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b088      	sub	sp, #32
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10a      	bne.n	8005a62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	613b      	str	r3, [r7, #16]
}
 8005a5e:	bf00      	nop
 8005a60:	e7fe      	b.n	8005a60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	60fb      	str	r3, [r7, #12]
}
 8005a7a:	bf00      	nop
 8005a7c:	e7fe      	b.n	8005a7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005a7e:	f000 fe49 	bl	8006714 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a82:	4b1d      	ldr	r3, [pc, #116]	; (8005af8 <xTaskCheckForTimeOut+0xbc>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a9a:	d102      	bne.n	8005aa2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	e023      	b.n	8005aea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	4b15      	ldr	r3, [pc, #84]	; (8005afc <xTaskCheckForTimeOut+0xc0>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d007      	beq.n	8005abe <xTaskCheckForTimeOut+0x82>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d302      	bcc.n	8005abe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	61fb      	str	r3, [r7, #28]
 8005abc:	e015      	b.n	8005aea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d20b      	bcs.n	8005ae0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	1ad2      	subs	r2, r2, r3
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff ff9b 	bl	8005a10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	61fb      	str	r3, [r7, #28]
 8005ade:	e004      	b.n	8005aea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005aea:	f000 fe43 	bl	8006774 <vPortExitCritical>

	return xReturn;
 8005aee:	69fb      	ldr	r3, [r7, #28]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3720      	adds	r7, #32
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	20000e20 	.word	0x20000e20
 8005afc:	20000e34 	.word	0x20000e34

08005b00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <vTaskMissedYield+0x14>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
}
 8005b0a:	bf00      	nop
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	20000e30 	.word	0x20000e30

08005b18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b20:	f000 f852 	bl	8005bc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b24:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <prvIdleTask+0x28>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d9f9      	bls.n	8005b20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b2c:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <prvIdleTask+0x2c>)
 8005b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b3c:	e7f0      	b.n	8005b20 <prvIdleTask+0x8>
 8005b3e:	bf00      	nop
 8005b40:	2000094c 	.word	0x2000094c
 8005b44:	e000ed04 	.word	0xe000ed04

08005b48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b4e:	2300      	movs	r3, #0
 8005b50:	607b      	str	r3, [r7, #4]
 8005b52:	e00c      	b.n	8005b6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4a12      	ldr	r2, [pc, #72]	; (8005ba8 <prvInitialiseTaskLists+0x60>)
 8005b60:	4413      	add	r3, r2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe fbdc 	bl	8004320 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	607b      	str	r3, [r7, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b37      	cmp	r3, #55	; 0x37
 8005b72:	d9ef      	bls.n	8005b54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b74:	480d      	ldr	r0, [pc, #52]	; (8005bac <prvInitialiseTaskLists+0x64>)
 8005b76:	f7fe fbd3 	bl	8004320 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b7a:	480d      	ldr	r0, [pc, #52]	; (8005bb0 <prvInitialiseTaskLists+0x68>)
 8005b7c:	f7fe fbd0 	bl	8004320 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b80:	480c      	ldr	r0, [pc, #48]	; (8005bb4 <prvInitialiseTaskLists+0x6c>)
 8005b82:	f7fe fbcd 	bl	8004320 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b86:	480c      	ldr	r0, [pc, #48]	; (8005bb8 <prvInitialiseTaskLists+0x70>)
 8005b88:	f7fe fbca 	bl	8004320 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b8c:	480b      	ldr	r0, [pc, #44]	; (8005bbc <prvInitialiseTaskLists+0x74>)
 8005b8e:	f7fe fbc7 	bl	8004320 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b92:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <prvInitialiseTaskLists+0x78>)
 8005b94:	4a05      	ldr	r2, [pc, #20]	; (8005bac <prvInitialiseTaskLists+0x64>)
 8005b96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b98:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <prvInitialiseTaskLists+0x7c>)
 8005b9a:	4a05      	ldr	r2, [pc, #20]	; (8005bb0 <prvInitialiseTaskLists+0x68>)
 8005b9c:	601a      	str	r2, [r3, #0]
}
 8005b9e:	bf00      	nop
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	2000094c 	.word	0x2000094c
 8005bac:	20000dac 	.word	0x20000dac
 8005bb0:	20000dc0 	.word	0x20000dc0
 8005bb4:	20000ddc 	.word	0x20000ddc
 8005bb8:	20000df0 	.word	0x20000df0
 8005bbc:	20000e08 	.word	0x20000e08
 8005bc0:	20000dd4 	.word	0x20000dd4
 8005bc4:	20000dd8 	.word	0x20000dd8

08005bc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bce:	e019      	b.n	8005c04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bd0:	f000 fda0 	bl	8006714 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005bd4:	4b10      	ldr	r3, [pc, #64]	; (8005c18 <prvCheckTasksWaitingTermination+0x50>)
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3304      	adds	r3, #4
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fe fc27 	bl	8004434 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005be6:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <prvCheckTasksWaitingTermination+0x54>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	4a0b      	ldr	r2, [pc, #44]	; (8005c1c <prvCheckTasksWaitingTermination+0x54>)
 8005bee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bf0:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <prvCheckTasksWaitingTermination+0x58>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	4a0a      	ldr	r2, [pc, #40]	; (8005c20 <prvCheckTasksWaitingTermination+0x58>)
 8005bf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bfa:	f000 fdbb 	bl	8006774 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f810 	bl	8005c24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c04:	4b06      	ldr	r3, [pc, #24]	; (8005c20 <prvCheckTasksWaitingTermination+0x58>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e1      	bne.n	8005bd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c0c:	bf00      	nop
 8005c0e:	bf00      	nop
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000df0 	.word	0x20000df0
 8005c1c:	20000e1c 	.word	0x20000e1c
 8005c20:	20000e04 	.word	0x20000e04

08005c24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3354      	adds	r3, #84	; 0x54
 8005c30:	4618      	mov	r0, r3
 8005c32:	f001 f873 	bl	8006d1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d108      	bne.n	8005c52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 ff4b 	bl	8006ae0 <vPortFree>
				vPortFree( pxTCB );
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 ff48 	bl	8006ae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c50:	e018      	b.n	8005c84 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d103      	bne.n	8005c64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 ff3f 	bl	8006ae0 <vPortFree>
	}
 8005c62:	e00f      	b.n	8005c84 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d00a      	beq.n	8005c84 <prvDeleteTCB+0x60>
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	60fb      	str	r3, [r7, #12]
}
 8005c80:	bf00      	nop
 8005c82:	e7fe      	b.n	8005c82 <prvDeleteTCB+0x5e>
	}
 8005c84:	bf00      	nop
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c92:	4b0f      	ldr	r3, [pc, #60]	; (8005cd0 <prvResetNextTaskUnblockTime+0x44>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <prvResetNextTaskUnblockTime+0x14>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e000      	b.n	8005ca2 <prvResetNextTaskUnblockTime+0x16>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ca6:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <prvResetNextTaskUnblockTime+0x48>)
 8005ca8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cae:	e008      	b.n	8005cc2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <prvResetNextTaskUnblockTime+0x44>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	4a05      	ldr	r2, [pc, #20]	; (8005cd4 <prvResetNextTaskUnblockTime+0x48>)
 8005cc0:	6013      	str	r3, [r2, #0]
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	20000dd4 	.word	0x20000dd4
 8005cd4:	20000e3c 	.word	0x20000e3c

08005cd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cde:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <xTaskGetSchedulerState+0x34>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d102      	bne.n	8005cec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	607b      	str	r3, [r7, #4]
 8005cea:	e008      	b.n	8005cfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cec:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <xTaskGetSchedulerState+0x38>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d102      	bne.n	8005cfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	607b      	str	r3, [r7, #4]
 8005cf8:	e001      	b.n	8005cfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cfe:	687b      	ldr	r3, [r7, #4]
	}
 8005d00:	4618      	mov	r0, r3
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	20000e28 	.word	0x20000e28
 8005d10:	20000e44 	.word	0x20000e44

08005d14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d20:	2300      	movs	r3, #0
 8005d22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d056      	beq.n	8005dd8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d2a:	4b2e      	ldr	r3, [pc, #184]	; (8005de4 <xTaskPriorityDisinherit+0xd0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d00a      	beq.n	8005d4a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	60fb      	str	r3, [r7, #12]
}
 8005d46:	bf00      	nop
 8005d48:	e7fe      	b.n	8005d48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10a      	bne.n	8005d68 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	60bb      	str	r3, [r7, #8]
}
 8005d64:	bf00      	nop
 8005d66:	e7fe      	b.n	8005d66 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d6c:	1e5a      	subs	r2, r3, #1
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d02c      	beq.n	8005dd8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d128      	bne.n	8005dd8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe fb52 	bl	8004434 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da8:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <xTaskPriorityDisinherit+0xd4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d903      	bls.n	8005db8 <xTaskPriorityDisinherit+0xa4>
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	4a0c      	ldr	r2, [pc, #48]	; (8005de8 <xTaskPriorityDisinherit+0xd4>)
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4a09      	ldr	r2, [pc, #36]	; (8005dec <xTaskPriorityDisinherit+0xd8>)
 8005dc6:	441a      	add	r2, r3
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	f7fe fad3 	bl	800437a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005dd8:	697b      	ldr	r3, [r7, #20]
	}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000948 	.word	0x20000948
 8005de8:	20000e24 	.word	0x20000e24
 8005dec:	2000094c 	.word	0x2000094c

08005df0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005dfa:	4b21      	ldr	r3, [pc, #132]	; (8005e80 <prvAddCurrentTaskToDelayedList+0x90>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e00:	4b20      	ldr	r3, [pc, #128]	; (8005e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3304      	adds	r3, #4
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fe fb14 	bl	8004434 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e12:	d10a      	bne.n	8005e2a <prvAddCurrentTaskToDelayedList+0x3a>
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d007      	beq.n	8005e2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e1a:	4b1a      	ldr	r3, [pc, #104]	; (8005e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	4619      	mov	r1, r3
 8005e22:	4819      	ldr	r0, [pc, #100]	; (8005e88 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e24:	f7fe faa9 	bl	800437a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e28:	e026      	b.n	8005e78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4413      	add	r3, r2
 8005e30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e32:	4b14      	ldr	r3, [pc, #80]	; (8005e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d209      	bcs.n	8005e56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e42:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	f7fe fab7 	bl	80043c2 <vListInsert>
}
 8005e54:	e010      	b.n	8005e78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e56:	4b0e      	ldr	r3, [pc, #56]	; (8005e90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3304      	adds	r3, #4
 8005e60:	4619      	mov	r1, r3
 8005e62:	4610      	mov	r0, r2
 8005e64:	f7fe faad 	bl	80043c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e68:	4b0a      	ldr	r3, [pc, #40]	; (8005e94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d202      	bcs.n	8005e78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e72:	4a08      	ldr	r2, [pc, #32]	; (8005e94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	6013      	str	r3, [r2, #0]
}
 8005e78:	bf00      	nop
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	20000e20 	.word	0x20000e20
 8005e84:	20000948 	.word	0x20000948
 8005e88:	20000e08 	.word	0x20000e08
 8005e8c:	20000dd8 	.word	0x20000dd8
 8005e90:	20000dd4 	.word	0x20000dd4
 8005e94:	20000e3c 	.word	0x20000e3c

08005e98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08a      	sub	sp, #40	; 0x28
 8005e9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ea2:	f000 facb 	bl	800643c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ea6:	4b1c      	ldr	r3, [pc, #112]	; (8005f18 <xTimerCreateTimerTask+0x80>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d021      	beq.n	8005ef2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005eb6:	1d3a      	adds	r2, r7, #4
 8005eb8:	f107 0108 	add.w	r1, r7, #8
 8005ebc:	f107 030c 	add.w	r3, r7, #12
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fe fa13 	bl	80042ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	9202      	str	r2, [sp, #8]
 8005ece:	9301      	str	r3, [sp, #4]
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	460a      	mov	r2, r1
 8005ed8:	4910      	ldr	r1, [pc, #64]	; (8005f1c <xTimerCreateTimerTask+0x84>)
 8005eda:	4811      	ldr	r0, [pc, #68]	; (8005f20 <xTimerCreateTimerTask+0x88>)
 8005edc:	f7ff f8b2 	bl	8005044 <xTaskCreateStatic>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	4a10      	ldr	r2, [pc, #64]	; (8005f24 <xTimerCreateTimerTask+0x8c>)
 8005ee4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ee6:	4b0f      	ldr	r3, [pc, #60]	; (8005f24 <xTimerCreateTimerTask+0x8c>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10a      	bne.n	8005f0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	613b      	str	r3, [r7, #16]
}
 8005f0a:	bf00      	nop
 8005f0c:	e7fe      	b.n	8005f0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f0e:	697b      	ldr	r3, [r7, #20]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	20000e78 	.word	0x20000e78
 8005f1c:	080070b0 	.word	0x080070b0
 8005f20:	08006045 	.word	0x08006045
 8005f24:	20000e7c 	.word	0x20000e7c

08005f28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08a      	sub	sp, #40	; 0x28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	623b      	str	r3, [r7, #32]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f56:	4b1a      	ldr	r3, [pc, #104]	; (8005fc0 <xTimerGenericCommand+0x98>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d02a      	beq.n	8005fb4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b05      	cmp	r3, #5
 8005f6e:	dc18      	bgt.n	8005fa2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f70:	f7ff feb2 	bl	8005cd8 <xTaskGetSchedulerState>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d109      	bne.n	8005f8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f7a:	4b11      	ldr	r3, [pc, #68]	; (8005fc0 <xTimerGenericCommand+0x98>)
 8005f7c:	6818      	ldr	r0, [r3, #0]
 8005f7e:	f107 0110 	add.w	r1, r7, #16
 8005f82:	2300      	movs	r3, #0
 8005f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f86:	f7fe fbbf 	bl	8004708 <xQueueGenericSend>
 8005f8a:	6278      	str	r0, [r7, #36]	; 0x24
 8005f8c:	e012      	b.n	8005fb4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f8e:	4b0c      	ldr	r3, [pc, #48]	; (8005fc0 <xTimerGenericCommand+0x98>)
 8005f90:	6818      	ldr	r0, [r3, #0]
 8005f92:	f107 0110 	add.w	r1, r7, #16
 8005f96:	2300      	movs	r3, #0
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f7fe fbb5 	bl	8004708 <xQueueGenericSend>
 8005f9e:	6278      	str	r0, [r7, #36]	; 0x24
 8005fa0:	e008      	b.n	8005fb4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005fa2:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <xTimerGenericCommand+0x98>)
 8005fa4:	6818      	ldr	r0, [r3, #0]
 8005fa6:	f107 0110 	add.w	r1, r7, #16
 8005faa:	2300      	movs	r3, #0
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	f7fe fca9 	bl	8004904 <xQueueGenericSendFromISR>
 8005fb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3728      	adds	r7, #40	; 0x28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20000e78 	.word	0x20000e78

08005fc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fce:	4b1c      	ldr	r3, [pc, #112]	; (8006040 <prvProcessExpiredTimer+0x7c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	3304      	adds	r3, #4
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fe fa29 	bl	8004434 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d122      	bne.n	8006030 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	699a      	ldr	r2, [r3, #24]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	18d1      	adds	r1, r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	6978      	ldr	r0, [r7, #20]
 8005ff8:	f000 f8c8 	bl	800618c <prvInsertTimerInActiveList>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d016      	beq.n	8006030 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006002:	2300      	movs	r3, #0
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	2300      	movs	r3, #0
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	2100      	movs	r1, #0
 800600c:	6978      	ldr	r0, [r7, #20]
 800600e:	f7ff ff8b 	bl	8005f28 <xTimerGenericCommand>
 8006012:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10a      	bne.n	8006030 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	60fb      	str	r3, [r7, #12]
}
 800602c:	bf00      	nop
 800602e:	e7fe      	b.n	800602e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	6978      	ldr	r0, [r7, #20]
 8006036:	4798      	blx	r3
}
 8006038:	bf00      	nop
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	20000e70 	.word	0x20000e70

08006044 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800604c:	f107 0308 	add.w	r3, r7, #8
 8006050:	4618      	mov	r0, r3
 8006052:	f000 f857 	bl	8006104 <prvGetNextExpireTime>
 8006056:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4619      	mov	r1, r3
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f803 	bl	8006068 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006062:	f000 f8d5 	bl	8006210 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006066:	e7f1      	b.n	800604c <prvTimerTask+0x8>

08006068 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006072:	f7ff fa3b 	bl	80054ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006076:	f107 0308 	add.w	r3, r7, #8
 800607a:	4618      	mov	r0, r3
 800607c:	f000 f866 	bl	800614c <prvSampleTimeNow>
 8006080:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d130      	bne.n	80060ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10a      	bne.n	80060a4 <prvProcessTimerOrBlockTask+0x3c>
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	429a      	cmp	r2, r3
 8006094:	d806      	bhi.n	80060a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006096:	f7ff fa37 	bl	8005508 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800609a:	68f9      	ldr	r1, [r7, #12]
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff ff91 	bl	8005fc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80060a2:	e024      	b.n	80060ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d008      	beq.n	80060bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060aa:	4b13      	ldr	r3, [pc, #76]	; (80060f8 <prvProcessTimerOrBlockTask+0x90>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	bf0c      	ite	eq
 80060b4:	2301      	moveq	r3, #1
 80060b6:	2300      	movne	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060bc:	4b0f      	ldr	r3, [pc, #60]	; (80060fc <prvProcessTimerOrBlockTask+0x94>)
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	4619      	mov	r1, r3
 80060ca:	f7fe ff87 	bl	8004fdc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80060ce:	f7ff fa1b 	bl	8005508 <xTaskResumeAll>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10a      	bne.n	80060ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060d8:	4b09      	ldr	r3, [pc, #36]	; (8006100 <prvProcessTimerOrBlockTask+0x98>)
 80060da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	f3bf 8f6f 	isb	sy
}
 80060e8:	e001      	b.n	80060ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060ea:	f7ff fa0d 	bl	8005508 <xTaskResumeAll>
}
 80060ee:	bf00      	nop
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20000e74 	.word	0x20000e74
 80060fc:	20000e78 	.word	0x20000e78
 8006100:	e000ed04 	.word	0xe000ed04

08006104 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800610c:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <prvGetNextExpireTime+0x44>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	bf0c      	ite	eq
 8006116:	2301      	moveq	r3, #1
 8006118:	2300      	movne	r3, #0
 800611a:	b2db      	uxtb	r3, r3
 800611c:	461a      	mov	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d105      	bne.n	8006136 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800612a:	4b07      	ldr	r3, [pc, #28]	; (8006148 <prvGetNextExpireTime+0x44>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	e001      	b.n	800613a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800613a:	68fb      	ldr	r3, [r7, #12]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	20000e70 	.word	0x20000e70

0800614c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006154:	f7ff fa76 	bl	8005644 <xTaskGetTickCount>
 8006158:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800615a:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <prvSampleTimeNow+0x3c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	429a      	cmp	r2, r3
 8006162:	d205      	bcs.n	8006170 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006164:	f000 f908 	bl	8006378 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	e002      	b.n	8006176 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006176:	4a04      	ldr	r2, [pc, #16]	; (8006188 <prvSampleTimeNow+0x3c>)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800617c:	68fb      	ldr	r3, [r7, #12]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000e80 	.word	0x20000e80

0800618c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800619a:	2300      	movs	r3, #0
 800619c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d812      	bhi.n	80061d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	1ad2      	subs	r2, r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d302      	bcc.n	80061c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80061c0:	2301      	movs	r3, #1
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	e01b      	b.n	80061fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061c6:	4b10      	ldr	r3, [pc, #64]	; (8006208 <prvInsertTimerInActiveList+0x7c>)
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3304      	adds	r3, #4
 80061ce:	4619      	mov	r1, r3
 80061d0:	4610      	mov	r0, r2
 80061d2:	f7fe f8f6 	bl	80043c2 <vListInsert>
 80061d6:	e012      	b.n	80061fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d206      	bcs.n	80061ee <prvInsertTimerInActiveList+0x62>
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d302      	bcc.n	80061ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061e8:	2301      	movs	r3, #1
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	e007      	b.n	80061fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061ee:	4b07      	ldr	r3, [pc, #28]	; (800620c <prvInsertTimerInActiveList+0x80>)
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	3304      	adds	r3, #4
 80061f6:	4619      	mov	r1, r3
 80061f8:	4610      	mov	r0, r2
 80061fa:	f7fe f8e2 	bl	80043c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061fe:	697b      	ldr	r3, [r7, #20]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	20000e74 	.word	0x20000e74
 800620c:	20000e70 	.word	0x20000e70

08006210 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08e      	sub	sp, #56	; 0x38
 8006214:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006216:	e09d      	b.n	8006354 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	da18      	bge.n	8006250 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800621e:	1d3b      	adds	r3, r7, #4
 8006220:	3304      	adds	r3, #4
 8006222:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10a      	bne.n	8006240 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	61fb      	str	r3, [r7, #28]
}
 800623c:	bf00      	nop
 800623e:	e7fe      	b.n	800623e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006246:	6850      	ldr	r0, [r2, #4]
 8006248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800624a:	6892      	ldr	r2, [r2, #8]
 800624c:	4611      	mov	r1, r2
 800624e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	db7e      	blt.n	8006354 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d004      	beq.n	800626c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	3304      	adds	r3, #4
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe f8e4 	bl	8004434 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800626c:	463b      	mov	r3, r7
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff ff6c 	bl	800614c <prvSampleTimeNow>
 8006274:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b09      	cmp	r3, #9
 800627a:	d86a      	bhi.n	8006352 <prvProcessReceivedCommands+0x142>
 800627c:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <prvProcessReceivedCommands+0x74>)
 800627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006282:	bf00      	nop
 8006284:	080062ad 	.word	0x080062ad
 8006288:	080062ad 	.word	0x080062ad
 800628c:	080062ad 	.word	0x080062ad
 8006290:	08006355 	.word	0x08006355
 8006294:	08006309 	.word	0x08006309
 8006298:	08006341 	.word	0x08006341
 800629c:	080062ad 	.word	0x080062ad
 80062a0:	080062ad 	.word	0x080062ad
 80062a4:	08006355 	.word	0x08006355
 80062a8:	08006309 	.word	0x08006309
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	18d1      	adds	r1, r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ba:	f7ff ff67 	bl	800618c <prvInsertTimerInActiveList>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d047      	beq.n	8006354 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d13f      	bne.n	8006354 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	441a      	add	r2, r3
 80062dc:	2300      	movs	r3, #0
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	2300      	movs	r3, #0
 80062e2:	2100      	movs	r1, #0
 80062e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e6:	f7ff fe1f 	bl	8005f28 <xTimerGenericCommand>
 80062ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d130      	bne.n	8006354 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	61bb      	str	r3, [r7, #24]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10a      	bne.n	800632c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	617b      	str	r3, [r7, #20]
}
 8006328:	bf00      	nop
 800632a:	e7fe      	b.n	800632a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	699a      	ldr	r2, [r3, #24]
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	18d1      	adds	r1, r2, r3
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800633a:	f7ff ff27 	bl	800618c <prvInsertTimerInActiveList>
					break;
 800633e:	e009      	b.n	8006354 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006342:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d104      	bne.n	8006354 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800634a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800634c:	f000 fbc8 	bl	8006ae0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006350:	e000      	b.n	8006354 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8006352:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006354:	4b07      	ldr	r3, [pc, #28]	; (8006374 <prvProcessReceivedCommands+0x164>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	1d39      	adds	r1, r7, #4
 800635a:	2200      	movs	r2, #0
 800635c:	4618      	mov	r0, r3
 800635e:	f7fe fb69 	bl	8004a34 <xQueueReceive>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	f47f af57 	bne.w	8006218 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800636a:	bf00      	nop
 800636c:	bf00      	nop
 800636e:	3730      	adds	r7, #48	; 0x30
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	20000e78 	.word	0x20000e78

08006378 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b088      	sub	sp, #32
 800637c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800637e:	e045      	b.n	800640c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006380:	4b2c      	ldr	r3, [pc, #176]	; (8006434 <prvSwitchTimerLists+0xbc>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800638a:	4b2a      	ldr	r3, [pc, #168]	; (8006434 <prvSwitchTimerLists+0xbc>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	3304      	adds	r3, #4
 8006398:	4618      	mov	r0, r3
 800639a:	f7fe f84b 	bl	8004434 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d12e      	bne.n	800640c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4413      	add	r3, r2
 80063b6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d90e      	bls.n	80063de <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063cc:	4b19      	ldr	r3, [pc, #100]	; (8006434 <prvSwitchTimerLists+0xbc>)
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3304      	adds	r3, #4
 80063d4:	4619      	mov	r1, r3
 80063d6:	4610      	mov	r0, r2
 80063d8:	f7fd fff3 	bl	80043c2 <vListInsert>
 80063dc:	e016      	b.n	800640c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063de:	2300      	movs	r3, #0
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	2300      	movs	r3, #0
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	2100      	movs	r1, #0
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f7ff fd9d 	bl	8005f28 <xTimerGenericCommand>
 80063ee:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10a      	bne.n	800640c <prvSwitchTimerLists+0x94>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	603b      	str	r3, [r7, #0]
}
 8006408:	bf00      	nop
 800640a:	e7fe      	b.n	800640a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800640c:	4b09      	ldr	r3, [pc, #36]	; (8006434 <prvSwitchTimerLists+0xbc>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1b4      	bne.n	8006380 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006416:	4b07      	ldr	r3, [pc, #28]	; (8006434 <prvSwitchTimerLists+0xbc>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800641c:	4b06      	ldr	r3, [pc, #24]	; (8006438 <prvSwitchTimerLists+0xc0>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a04      	ldr	r2, [pc, #16]	; (8006434 <prvSwitchTimerLists+0xbc>)
 8006422:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006424:	4a04      	ldr	r2, [pc, #16]	; (8006438 <prvSwitchTimerLists+0xc0>)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	6013      	str	r3, [r2, #0]
}
 800642a:	bf00      	nop
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20000e70 	.word	0x20000e70
 8006438:	20000e74 	.word	0x20000e74

0800643c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006442:	f000 f967 	bl	8006714 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006446:	4b15      	ldr	r3, [pc, #84]	; (800649c <prvCheckForValidListAndQueue+0x60>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d120      	bne.n	8006490 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800644e:	4814      	ldr	r0, [pc, #80]	; (80064a0 <prvCheckForValidListAndQueue+0x64>)
 8006450:	f7fd ff66 	bl	8004320 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006454:	4813      	ldr	r0, [pc, #76]	; (80064a4 <prvCheckForValidListAndQueue+0x68>)
 8006456:	f7fd ff63 	bl	8004320 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800645a:	4b13      	ldr	r3, [pc, #76]	; (80064a8 <prvCheckForValidListAndQueue+0x6c>)
 800645c:	4a10      	ldr	r2, [pc, #64]	; (80064a0 <prvCheckForValidListAndQueue+0x64>)
 800645e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006460:	4b12      	ldr	r3, [pc, #72]	; (80064ac <prvCheckForValidListAndQueue+0x70>)
 8006462:	4a10      	ldr	r2, [pc, #64]	; (80064a4 <prvCheckForValidListAndQueue+0x68>)
 8006464:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006466:	2300      	movs	r3, #0
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <prvCheckForValidListAndQueue+0x74>)
 800646c:	4a11      	ldr	r2, [pc, #68]	; (80064b4 <prvCheckForValidListAndQueue+0x78>)
 800646e:	2110      	movs	r1, #16
 8006470:	200a      	movs	r0, #10
 8006472:	f7fe f871 	bl	8004558 <xQueueGenericCreateStatic>
 8006476:	4603      	mov	r3, r0
 8006478:	4a08      	ldr	r2, [pc, #32]	; (800649c <prvCheckForValidListAndQueue+0x60>)
 800647a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800647c:	4b07      	ldr	r3, [pc, #28]	; (800649c <prvCheckForValidListAndQueue+0x60>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d005      	beq.n	8006490 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006484:	4b05      	ldr	r3, [pc, #20]	; (800649c <prvCheckForValidListAndQueue+0x60>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	490b      	ldr	r1, [pc, #44]	; (80064b8 <prvCheckForValidListAndQueue+0x7c>)
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe fd7c 	bl	8004f88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006490:	f000 f970 	bl	8006774 <vPortExitCritical>
}
 8006494:	bf00      	nop
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	20000e78 	.word	0x20000e78
 80064a0:	20000e48 	.word	0x20000e48
 80064a4:	20000e5c 	.word	0x20000e5c
 80064a8:	20000e70 	.word	0x20000e70
 80064ac:	20000e74 	.word	0x20000e74
 80064b0:	20000f24 	.word	0x20000f24
 80064b4:	20000e84 	.word	0x20000e84
 80064b8:	080070b8 	.word	0x080070b8

080064bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	3b04      	subs	r3, #4
 80064cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	3b04      	subs	r3, #4
 80064da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f023 0201 	bic.w	r2, r3, #1
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3b04      	subs	r3, #4
 80064ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064ec:	4a0c      	ldr	r2, [pc, #48]	; (8006520 <pxPortInitialiseStack+0x64>)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3b14      	subs	r3, #20
 80064f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3b04      	subs	r3, #4
 8006502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f06f 0202 	mvn.w	r2, #2
 800650a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3b20      	subs	r3, #32
 8006510:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006512:	68fb      	ldr	r3, [r7, #12]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	08006525 	.word	0x08006525

08006524 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800652a:	2300      	movs	r3, #0
 800652c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800652e:	4b12      	ldr	r3, [pc, #72]	; (8006578 <prvTaskExitError+0x54>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006536:	d00a      	beq.n	800654e <prvTaskExitError+0x2a>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	60fb      	str	r3, [r7, #12]
}
 800654a:	bf00      	nop
 800654c:	e7fe      	b.n	800654c <prvTaskExitError+0x28>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	60bb      	str	r3, [r7, #8]
}
 8006560:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006562:	bf00      	nop
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0fc      	beq.n	8006564 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800656a:	bf00      	nop
 800656c:	bf00      	nop
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	2000000c 	.word	0x2000000c
 800657c:	00000000 	.word	0x00000000

08006580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006580:	4b07      	ldr	r3, [pc, #28]	; (80065a0 <pxCurrentTCBConst2>)
 8006582:	6819      	ldr	r1, [r3, #0]
 8006584:	6808      	ldr	r0, [r1, #0]
 8006586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658a:	f380 8809 	msr	PSP, r0
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f04f 0000 	mov.w	r0, #0
 8006596:	f380 8811 	msr	BASEPRI, r0
 800659a:	4770      	bx	lr
 800659c:	f3af 8000 	nop.w

080065a0 <pxCurrentTCBConst2>:
 80065a0:	20000948 	.word	0x20000948
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop

080065a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065a8:	4808      	ldr	r0, [pc, #32]	; (80065cc <prvPortStartFirstTask+0x24>)
 80065aa:	6800      	ldr	r0, [r0, #0]
 80065ac:	6800      	ldr	r0, [r0, #0]
 80065ae:	f380 8808 	msr	MSP, r0
 80065b2:	f04f 0000 	mov.w	r0, #0
 80065b6:	f380 8814 	msr	CONTROL, r0
 80065ba:	b662      	cpsie	i
 80065bc:	b661      	cpsie	f
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	df00      	svc	0
 80065c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065ca:	bf00      	nop
 80065cc:	e000ed08 	.word	0xe000ed08

080065d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065d6:	4b46      	ldr	r3, [pc, #280]	; (80066f0 <xPortStartScheduler+0x120>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a46      	ldr	r2, [pc, #280]	; (80066f4 <xPortStartScheduler+0x124>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d10a      	bne.n	80065f6 <xPortStartScheduler+0x26>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	613b      	str	r3, [r7, #16]
}
 80065f2:	bf00      	nop
 80065f4:	e7fe      	b.n	80065f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065f6:	4b3e      	ldr	r3, [pc, #248]	; (80066f0 <xPortStartScheduler+0x120>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a3f      	ldr	r2, [pc, #252]	; (80066f8 <xPortStartScheduler+0x128>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d10a      	bne.n	8006616 <xPortStartScheduler+0x46>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	60fb      	str	r3, [r7, #12]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006616:	4b39      	ldr	r3, [pc, #228]	; (80066fc <xPortStartScheduler+0x12c>)
 8006618:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	b2db      	uxtb	r3, r3
 8006620:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	22ff      	movs	r2, #255	; 0xff
 8006626:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	b2db      	uxtb	r3, r3
 800662e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006638:	b2da      	uxtb	r2, r3
 800663a:	4b31      	ldr	r3, [pc, #196]	; (8006700 <xPortStartScheduler+0x130>)
 800663c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800663e:	4b31      	ldr	r3, [pc, #196]	; (8006704 <xPortStartScheduler+0x134>)
 8006640:	2207      	movs	r2, #7
 8006642:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006644:	e009      	b.n	800665a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006646:	4b2f      	ldr	r3, [pc, #188]	; (8006704 <xPortStartScheduler+0x134>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3b01      	subs	r3, #1
 800664c:	4a2d      	ldr	r2, [pc, #180]	; (8006704 <xPortStartScheduler+0x134>)
 800664e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	b2db      	uxtb	r3, r3
 8006654:	005b      	lsls	r3, r3, #1
 8006656:	b2db      	uxtb	r3, r3
 8006658:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800665a:	78fb      	ldrb	r3, [r7, #3]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006662:	2b80      	cmp	r3, #128	; 0x80
 8006664:	d0ef      	beq.n	8006646 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006666:	4b27      	ldr	r3, [pc, #156]	; (8006704 <xPortStartScheduler+0x134>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f1c3 0307 	rsb	r3, r3, #7
 800666e:	2b04      	cmp	r3, #4
 8006670:	d00a      	beq.n	8006688 <xPortStartScheduler+0xb8>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	60bb      	str	r3, [r7, #8]
}
 8006684:	bf00      	nop
 8006686:	e7fe      	b.n	8006686 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006688:	4b1e      	ldr	r3, [pc, #120]	; (8006704 <xPortStartScheduler+0x134>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	021b      	lsls	r3, r3, #8
 800668e:	4a1d      	ldr	r2, [pc, #116]	; (8006704 <xPortStartScheduler+0x134>)
 8006690:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006692:	4b1c      	ldr	r3, [pc, #112]	; (8006704 <xPortStartScheduler+0x134>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800669a:	4a1a      	ldr	r2, [pc, #104]	; (8006704 <xPortStartScheduler+0x134>)
 800669c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066a6:	4b18      	ldr	r3, [pc, #96]	; (8006708 <xPortStartScheduler+0x138>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a17      	ldr	r2, [pc, #92]	; (8006708 <xPortStartScheduler+0x138>)
 80066ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066b2:	4b15      	ldr	r3, [pc, #84]	; (8006708 <xPortStartScheduler+0x138>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a14      	ldr	r2, [pc, #80]	; (8006708 <xPortStartScheduler+0x138>)
 80066b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80066bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066be:	f000 f8dd 	bl	800687c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066c2:	4b12      	ldr	r3, [pc, #72]	; (800670c <xPortStartScheduler+0x13c>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066c8:	f000 f8fc 	bl	80068c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066cc:	4b10      	ldr	r3, [pc, #64]	; (8006710 <xPortStartScheduler+0x140>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a0f      	ldr	r2, [pc, #60]	; (8006710 <xPortStartScheduler+0x140>)
 80066d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80066d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066d8:	f7ff ff66 	bl	80065a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066dc:	f7ff f880 	bl	80057e0 <vTaskSwitchContext>
	prvTaskExitError();
 80066e0:	f7ff ff20 	bl	8006524 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	e000ed00 	.word	0xe000ed00
 80066f4:	410fc271 	.word	0x410fc271
 80066f8:	410fc270 	.word	0x410fc270
 80066fc:	e000e400 	.word	0xe000e400
 8006700:	20000f74 	.word	0x20000f74
 8006704:	20000f78 	.word	0x20000f78
 8006708:	e000ed20 	.word	0xe000ed20
 800670c:	2000000c 	.word	0x2000000c
 8006710:	e000ef34 	.word	0xe000ef34

08006714 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	607b      	str	r3, [r7, #4]
}
 800672c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800672e:	4b0f      	ldr	r3, [pc, #60]	; (800676c <vPortEnterCritical+0x58>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3301      	adds	r3, #1
 8006734:	4a0d      	ldr	r2, [pc, #52]	; (800676c <vPortEnterCritical+0x58>)
 8006736:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006738:	4b0c      	ldr	r3, [pc, #48]	; (800676c <vPortEnterCritical+0x58>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d10f      	bne.n	8006760 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006740:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <vPortEnterCritical+0x5c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <vPortEnterCritical+0x4c>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	603b      	str	r3, [r7, #0]
}
 800675c:	bf00      	nop
 800675e:	e7fe      	b.n	800675e <vPortEnterCritical+0x4a>
	}
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	2000000c 	.word	0x2000000c
 8006770:	e000ed04 	.word	0xe000ed04

08006774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800677a:	4b12      	ldr	r3, [pc, #72]	; (80067c4 <vPortExitCritical+0x50>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <vPortExitCritical+0x24>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	607b      	str	r3, [r7, #4]
}
 8006794:	bf00      	nop
 8006796:	e7fe      	b.n	8006796 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006798:	4b0a      	ldr	r3, [pc, #40]	; (80067c4 <vPortExitCritical+0x50>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3b01      	subs	r3, #1
 800679e:	4a09      	ldr	r2, [pc, #36]	; (80067c4 <vPortExitCritical+0x50>)
 80067a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067a2:	4b08      	ldr	r3, [pc, #32]	; (80067c4 <vPortExitCritical+0x50>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d105      	bne.n	80067b6 <vPortExitCritical+0x42>
 80067aa:	2300      	movs	r3, #0
 80067ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	f383 8811 	msr	BASEPRI, r3
}
 80067b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	2000000c 	.word	0x2000000c
	...

080067d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067d0:	f3ef 8009 	mrs	r0, PSP
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	4b15      	ldr	r3, [pc, #84]	; (8006830 <pxCurrentTCBConst>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	f01e 0f10 	tst.w	lr, #16
 80067e0:	bf08      	it	eq
 80067e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ea:	6010      	str	r0, [r2, #0]
 80067ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067f4:	f380 8811 	msr	BASEPRI, r0
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f7fe ffee 	bl	80057e0 <vTaskSwitchContext>
 8006804:	f04f 0000 	mov.w	r0, #0
 8006808:	f380 8811 	msr	BASEPRI, r0
 800680c:	bc09      	pop	{r0, r3}
 800680e:	6819      	ldr	r1, [r3, #0]
 8006810:	6808      	ldr	r0, [r1, #0]
 8006812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006816:	f01e 0f10 	tst.w	lr, #16
 800681a:	bf08      	it	eq
 800681c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006820:	f380 8809 	msr	PSP, r0
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	f3af 8000 	nop.w

08006830 <pxCurrentTCBConst>:
 8006830:	20000948 	.word	0x20000948
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop

08006838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	607b      	str	r3, [r7, #4]
}
 8006850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006852:	f7fe ff07 	bl	8005664 <xTaskIncrementTick>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800685c:	4b06      	ldr	r3, [pc, #24]	; (8006878 <SysTick_Handler+0x40>)
 800685e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	2300      	movs	r3, #0
 8006866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	f383 8811 	msr	BASEPRI, r3
}
 800686e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006870:	bf00      	nop
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	e000ed04 	.word	0xe000ed04

0800687c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006880:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <vPortSetupTimerInterrupt+0x34>)
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006886:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <vPortSetupTimerInterrupt+0x38>)
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800688c:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <vPortSetupTimerInterrupt+0x3c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a0a      	ldr	r2, [pc, #40]	; (80068bc <vPortSetupTimerInterrupt+0x40>)
 8006892:	fba2 2303 	umull	r2, r3, r2, r3
 8006896:	099b      	lsrs	r3, r3, #6
 8006898:	4a09      	ldr	r2, [pc, #36]	; (80068c0 <vPortSetupTimerInterrupt+0x44>)
 800689a:	3b01      	subs	r3, #1
 800689c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800689e:	4b04      	ldr	r3, [pc, #16]	; (80068b0 <vPortSetupTimerInterrupt+0x34>)
 80068a0:	2207      	movs	r2, #7
 80068a2:	601a      	str	r2, [r3, #0]
}
 80068a4:	bf00      	nop
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	e000e010 	.word	0xe000e010
 80068b4:	e000e018 	.word	0xe000e018
 80068b8:	20000000 	.word	0x20000000
 80068bc:	10624dd3 	.word	0x10624dd3
 80068c0:	e000e014 	.word	0xe000e014

080068c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80068d4 <vPortEnableVFP+0x10>
 80068c8:	6801      	ldr	r1, [r0, #0]
 80068ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80068ce:	6001      	str	r1, [r0, #0]
 80068d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80068d2:	bf00      	nop
 80068d4:	e000ed88 	.word	0xe000ed88

080068d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068de:	f3ef 8305 	mrs	r3, IPSR
 80068e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b0f      	cmp	r3, #15
 80068e8:	d914      	bls.n	8006914 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068ea:	4a17      	ldr	r2, [pc, #92]	; (8006948 <vPortValidateInterruptPriority+0x70>)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4413      	add	r3, r2
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068f4:	4b15      	ldr	r3, [pc, #84]	; (800694c <vPortValidateInterruptPriority+0x74>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	7afa      	ldrb	r2, [r7, #11]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d20a      	bcs.n	8006914 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	607b      	str	r3, [r7, #4]
}
 8006910:	bf00      	nop
 8006912:	e7fe      	b.n	8006912 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006914:	4b0e      	ldr	r3, [pc, #56]	; (8006950 <vPortValidateInterruptPriority+0x78>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800691c:	4b0d      	ldr	r3, [pc, #52]	; (8006954 <vPortValidateInterruptPriority+0x7c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	429a      	cmp	r2, r3
 8006922:	d90a      	bls.n	800693a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	603b      	str	r3, [r7, #0]
}
 8006936:	bf00      	nop
 8006938:	e7fe      	b.n	8006938 <vPortValidateInterruptPriority+0x60>
	}
 800693a:	bf00      	nop
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	e000e3f0 	.word	0xe000e3f0
 800694c:	20000f74 	.word	0x20000f74
 8006950:	e000ed0c 	.word	0xe000ed0c
 8006954:	20000f78 	.word	0x20000f78

08006958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08a      	sub	sp, #40	; 0x28
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006960:	2300      	movs	r3, #0
 8006962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006964:	f7fe fdc2 	bl	80054ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006968:	4b58      	ldr	r3, [pc, #352]	; (8006acc <pvPortMalloc+0x174>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006970:	f000 f910 	bl	8006b94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006974:	4b56      	ldr	r3, [pc, #344]	; (8006ad0 <pvPortMalloc+0x178>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4013      	ands	r3, r2
 800697c:	2b00      	cmp	r3, #0
 800697e:	f040 808e 	bne.w	8006a9e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01d      	beq.n	80069c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006988:	2208      	movs	r2, #8
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4413      	add	r3, r2
 800698e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f003 0307 	and.w	r3, r3, #7
 8006996:	2b00      	cmp	r3, #0
 8006998:	d014      	beq.n	80069c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f023 0307 	bic.w	r3, r3, #7
 80069a0:	3308      	adds	r3, #8
 80069a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f003 0307 	and.w	r3, r3, #7
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <pvPortMalloc+0x6c>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	617b      	str	r3, [r7, #20]
}
 80069c0:	bf00      	nop
 80069c2:	e7fe      	b.n	80069c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d069      	beq.n	8006a9e <pvPortMalloc+0x146>
 80069ca:	4b42      	ldr	r3, [pc, #264]	; (8006ad4 <pvPortMalloc+0x17c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d864      	bhi.n	8006a9e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069d4:	4b40      	ldr	r3, [pc, #256]	; (8006ad8 <pvPortMalloc+0x180>)
 80069d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069d8:	4b3f      	ldr	r3, [pc, #252]	; (8006ad8 <pvPortMalloc+0x180>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069de:	e004      	b.n	80069ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d903      	bls.n	80069fc <pvPortMalloc+0xa4>
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1f1      	bne.n	80069e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069fc:	4b33      	ldr	r3, [pc, #204]	; (8006acc <pvPortMalloc+0x174>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d04b      	beq.n	8006a9e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2208      	movs	r2, #8
 8006a0c:	4413      	add	r3, r2
 8006a0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	1ad2      	subs	r2, r2, r3
 8006a20:	2308      	movs	r3, #8
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d91f      	bls.n	8006a68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	f003 0307 	and.w	r3, r3, #7
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <pvPortMalloc+0xf8>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	613b      	str	r3, [r7, #16]
}
 8006a4c:	bf00      	nop
 8006a4e:	e7fe      	b.n	8006a4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	1ad2      	subs	r2, r2, r3
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a62:	69b8      	ldr	r0, [r7, #24]
 8006a64:	f000 f8f8 	bl	8006c58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a68:	4b1a      	ldr	r3, [pc, #104]	; (8006ad4 <pvPortMalloc+0x17c>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	4a18      	ldr	r2, [pc, #96]	; (8006ad4 <pvPortMalloc+0x17c>)
 8006a74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a76:	4b17      	ldr	r3, [pc, #92]	; (8006ad4 <pvPortMalloc+0x17c>)
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	4b18      	ldr	r3, [pc, #96]	; (8006adc <pvPortMalloc+0x184>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d203      	bcs.n	8006a8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a82:	4b14      	ldr	r3, [pc, #80]	; (8006ad4 <pvPortMalloc+0x17c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a15      	ldr	r2, [pc, #84]	; (8006adc <pvPortMalloc+0x184>)
 8006a88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	4b10      	ldr	r3, [pc, #64]	; (8006ad0 <pvPortMalloc+0x178>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	431a      	orrs	r2, r3
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a9e:	f7fe fd33 	bl	8005508 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00a      	beq.n	8006ac2 <pvPortMalloc+0x16a>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	60fb      	str	r3, [r7, #12]
}
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <pvPortMalloc+0x168>
	return pvReturn;
 8006ac2:	69fb      	ldr	r3, [r7, #28]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3728      	adds	r7, #40	; 0x28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	20001b84 	.word	0x20001b84
 8006ad0:	20001b90 	.word	0x20001b90
 8006ad4:	20001b88 	.word	0x20001b88
 8006ad8:	20001b7c 	.word	0x20001b7c
 8006adc:	20001b8c 	.word	0x20001b8c

08006ae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d048      	beq.n	8006b84 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006af2:	2308      	movs	r3, #8
 8006af4:	425b      	negs	r3, r3
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4413      	add	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	4b21      	ldr	r3, [pc, #132]	; (8006b8c <vPortFree+0xac>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <vPortFree+0x44>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	60fb      	str	r3, [r7, #12]
}
 8006b20:	bf00      	nop
 8006b22:	e7fe      	b.n	8006b22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00a      	beq.n	8006b42 <vPortFree+0x62>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	60bb      	str	r3, [r7, #8]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	4b11      	ldr	r3, [pc, #68]	; (8006b8c <vPortFree+0xac>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d019      	beq.n	8006b84 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d115      	bne.n	8006b84 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	4b0b      	ldr	r3, [pc, #44]	; (8006b8c <vPortFree+0xac>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	43db      	mvns	r3, r3
 8006b62:	401a      	ands	r2, r3
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b68:	f7fe fcc0 	bl	80054ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	4b07      	ldr	r3, [pc, #28]	; (8006b90 <vPortFree+0xb0>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4413      	add	r3, r2
 8006b76:	4a06      	ldr	r2, [pc, #24]	; (8006b90 <vPortFree+0xb0>)
 8006b78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b7a:	6938      	ldr	r0, [r7, #16]
 8006b7c:	f000 f86c 	bl	8006c58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006b80:	f7fe fcc2 	bl	8005508 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b84:	bf00      	nop
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20001b90 	.word	0x20001b90
 8006b90:	20001b88 	.word	0x20001b88

08006b94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006b9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ba0:	4b27      	ldr	r3, [pc, #156]	; (8006c40 <prvHeapInit+0xac>)
 8006ba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00c      	beq.n	8006bc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3307      	adds	r3, #7
 8006bb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0307 	bic.w	r3, r3, #7
 8006bba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	4a1f      	ldr	r2, [pc, #124]	; (8006c40 <prvHeapInit+0xac>)
 8006bc4:	4413      	add	r3, r2
 8006bc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bcc:	4a1d      	ldr	r2, [pc, #116]	; (8006c44 <prvHeapInit+0xb0>)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006bd2:	4b1c      	ldr	r3, [pc, #112]	; (8006c44 <prvHeapInit+0xb0>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	4413      	add	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006be0:	2208      	movs	r2, #8
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	1a9b      	subs	r3, r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0307 	bic.w	r3, r3, #7
 8006bee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4a15      	ldr	r2, [pc, #84]	; (8006c48 <prvHeapInit+0xb4>)
 8006bf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006bf6:	4b14      	ldr	r3, [pc, #80]	; (8006c48 <prvHeapInit+0xb4>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006bfe:	4b12      	ldr	r3, [pc, #72]	; (8006c48 <prvHeapInit+0xb4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	1ad2      	subs	r2, r2, r3
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c14:	4b0c      	ldr	r3, [pc, #48]	; (8006c48 <prvHeapInit+0xb4>)
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	4a0a      	ldr	r2, [pc, #40]	; (8006c4c <prvHeapInit+0xb8>)
 8006c22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	4a09      	ldr	r2, [pc, #36]	; (8006c50 <prvHeapInit+0xbc>)
 8006c2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c2c:	4b09      	ldr	r3, [pc, #36]	; (8006c54 <prvHeapInit+0xc0>)
 8006c2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c32:	601a      	str	r2, [r3, #0]
}
 8006c34:	bf00      	nop
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	20000f7c 	.word	0x20000f7c
 8006c44:	20001b7c 	.word	0x20001b7c
 8006c48:	20001b84 	.word	0x20001b84
 8006c4c:	20001b8c 	.word	0x20001b8c
 8006c50:	20001b88 	.word	0x20001b88
 8006c54:	20001b90 	.word	0x20001b90

08006c58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c60:	4b28      	ldr	r3, [pc, #160]	; (8006d04 <prvInsertBlockIntoFreeList+0xac>)
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	e002      	b.n	8006c6c <prvInsertBlockIntoFreeList+0x14>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d8f7      	bhi.n	8006c66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	4413      	add	r3, r2
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d108      	bne.n	8006c9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	441a      	add	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	441a      	add	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d118      	bne.n	8006ce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	4b15      	ldr	r3, [pc, #84]	; (8006d08 <prvInsertBlockIntoFreeList+0xb0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d00d      	beq.n	8006cd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	441a      	add	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	e008      	b.n	8006ce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006cd6:	4b0c      	ldr	r3, [pc, #48]	; (8006d08 <prvInsertBlockIntoFreeList+0xb0>)
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	e003      	b.n	8006ce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d002      	beq.n	8006cf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cf6:	bf00      	nop
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	20001b7c 	.word	0x20001b7c
 8006d08:	20001b84 	.word	0x20001b84

08006d0c <memset>:
 8006d0c:	4402      	add	r2, r0
 8006d0e:	4603      	mov	r3, r0
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d100      	bne.n	8006d16 <memset+0xa>
 8006d14:	4770      	bx	lr
 8006d16:	f803 1b01 	strb.w	r1, [r3], #1
 8006d1a:	e7f9      	b.n	8006d10 <memset+0x4>

08006d1c <_reclaim_reent>:
 8006d1c:	4b29      	ldr	r3, [pc, #164]	; (8006dc4 <_reclaim_reent+0xa8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4283      	cmp	r3, r0
 8006d22:	b570      	push	{r4, r5, r6, lr}
 8006d24:	4604      	mov	r4, r0
 8006d26:	d04b      	beq.n	8006dc0 <_reclaim_reent+0xa4>
 8006d28:	69c3      	ldr	r3, [r0, #28]
 8006d2a:	b143      	cbz	r3, 8006d3e <_reclaim_reent+0x22>
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d144      	bne.n	8006dbc <_reclaim_reent+0xa0>
 8006d32:	69e3      	ldr	r3, [r4, #28]
 8006d34:	6819      	ldr	r1, [r3, #0]
 8006d36:	b111      	cbz	r1, 8006d3e <_reclaim_reent+0x22>
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f000 f879 	bl	8006e30 <_free_r>
 8006d3e:	6961      	ldr	r1, [r4, #20]
 8006d40:	b111      	cbz	r1, 8006d48 <_reclaim_reent+0x2c>
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 f874 	bl	8006e30 <_free_r>
 8006d48:	69e1      	ldr	r1, [r4, #28]
 8006d4a:	b111      	cbz	r1, 8006d52 <_reclaim_reent+0x36>
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f000 f86f 	bl	8006e30 <_free_r>
 8006d52:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006d54:	b111      	cbz	r1, 8006d5c <_reclaim_reent+0x40>
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 f86a 	bl	8006e30 <_free_r>
 8006d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d5e:	b111      	cbz	r1, 8006d66 <_reclaim_reent+0x4a>
 8006d60:	4620      	mov	r0, r4
 8006d62:	f000 f865 	bl	8006e30 <_free_r>
 8006d66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006d68:	b111      	cbz	r1, 8006d70 <_reclaim_reent+0x54>
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f000 f860 	bl	8006e30 <_free_r>
 8006d70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006d72:	b111      	cbz	r1, 8006d7a <_reclaim_reent+0x5e>
 8006d74:	4620      	mov	r0, r4
 8006d76:	f000 f85b 	bl	8006e30 <_free_r>
 8006d7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006d7c:	b111      	cbz	r1, 8006d84 <_reclaim_reent+0x68>
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f000 f856 	bl	8006e30 <_free_r>
 8006d84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006d86:	b111      	cbz	r1, 8006d8e <_reclaim_reent+0x72>
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f000 f851 	bl	8006e30 <_free_r>
 8006d8e:	6a23      	ldr	r3, [r4, #32]
 8006d90:	b1b3      	cbz	r3, 8006dc0 <_reclaim_reent+0xa4>
 8006d92:	4620      	mov	r0, r4
 8006d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d98:	4718      	bx	r3
 8006d9a:	5949      	ldr	r1, [r1, r5]
 8006d9c:	b941      	cbnz	r1, 8006db0 <_reclaim_reent+0x94>
 8006d9e:	3504      	adds	r5, #4
 8006da0:	69e3      	ldr	r3, [r4, #28]
 8006da2:	2d80      	cmp	r5, #128	; 0x80
 8006da4:	68d9      	ldr	r1, [r3, #12]
 8006da6:	d1f8      	bne.n	8006d9a <_reclaim_reent+0x7e>
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 f841 	bl	8006e30 <_free_r>
 8006dae:	e7c0      	b.n	8006d32 <_reclaim_reent+0x16>
 8006db0:	680e      	ldr	r6, [r1, #0]
 8006db2:	4620      	mov	r0, r4
 8006db4:	f000 f83c 	bl	8006e30 <_free_r>
 8006db8:	4631      	mov	r1, r6
 8006dba:	e7ef      	b.n	8006d9c <_reclaim_reent+0x80>
 8006dbc:	2500      	movs	r5, #0
 8006dbe:	e7ef      	b.n	8006da0 <_reclaim_reent+0x84>
 8006dc0:	bd70      	pop	{r4, r5, r6, pc}
 8006dc2:	bf00      	nop
 8006dc4:	2000005c 	.word	0x2000005c

08006dc8 <__libc_init_array>:
 8006dc8:	b570      	push	{r4, r5, r6, lr}
 8006dca:	4d0d      	ldr	r5, [pc, #52]	; (8006e00 <__libc_init_array+0x38>)
 8006dcc:	4c0d      	ldr	r4, [pc, #52]	; (8006e04 <__libc_init_array+0x3c>)
 8006dce:	1b64      	subs	r4, r4, r5
 8006dd0:	10a4      	asrs	r4, r4, #2
 8006dd2:	2600      	movs	r6, #0
 8006dd4:	42a6      	cmp	r6, r4
 8006dd6:	d109      	bne.n	8006dec <__libc_init_array+0x24>
 8006dd8:	4d0b      	ldr	r5, [pc, #44]	; (8006e08 <__libc_init_array+0x40>)
 8006dda:	4c0c      	ldr	r4, [pc, #48]	; (8006e0c <__libc_init_array+0x44>)
 8006ddc:	f000 f880 	bl	8006ee0 <_init>
 8006de0:	1b64      	subs	r4, r4, r5
 8006de2:	10a4      	asrs	r4, r4, #2
 8006de4:	2600      	movs	r6, #0
 8006de6:	42a6      	cmp	r6, r4
 8006de8:	d105      	bne.n	8006df6 <__libc_init_array+0x2e>
 8006dea:	bd70      	pop	{r4, r5, r6, pc}
 8006dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8006df0:	4798      	blx	r3
 8006df2:	3601      	adds	r6, #1
 8006df4:	e7ee      	b.n	8006dd4 <__libc_init_array+0xc>
 8006df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dfa:	4798      	blx	r3
 8006dfc:	3601      	adds	r6, #1
 8006dfe:	e7f2      	b.n	8006de6 <__libc_init_array+0x1e>
 8006e00:	08007194 	.word	0x08007194
 8006e04:	08007194 	.word	0x08007194
 8006e08:	08007194 	.word	0x08007194
 8006e0c:	08007198 	.word	0x08007198

08006e10 <__retarget_lock_acquire_recursive>:
 8006e10:	4770      	bx	lr

08006e12 <__retarget_lock_release_recursive>:
 8006e12:	4770      	bx	lr

08006e14 <memcpy>:
 8006e14:	440a      	add	r2, r1
 8006e16:	4291      	cmp	r1, r2
 8006e18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006e1c:	d100      	bne.n	8006e20 <memcpy+0xc>
 8006e1e:	4770      	bx	lr
 8006e20:	b510      	push	{r4, lr}
 8006e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e2a:	4291      	cmp	r1, r2
 8006e2c:	d1f9      	bne.n	8006e22 <memcpy+0xe>
 8006e2e:	bd10      	pop	{r4, pc}

08006e30 <_free_r>:
 8006e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e32:	2900      	cmp	r1, #0
 8006e34:	d044      	beq.n	8006ec0 <_free_r+0x90>
 8006e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e3a:	9001      	str	r0, [sp, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e42:	bfb8      	it	lt
 8006e44:	18e4      	addlt	r4, r4, r3
 8006e46:	f000 f83f 	bl	8006ec8 <__malloc_lock>
 8006e4a:	4a1e      	ldr	r2, [pc, #120]	; (8006ec4 <_free_r+0x94>)
 8006e4c:	9801      	ldr	r0, [sp, #4]
 8006e4e:	6813      	ldr	r3, [r2, #0]
 8006e50:	b933      	cbnz	r3, 8006e60 <_free_r+0x30>
 8006e52:	6063      	str	r3, [r4, #4]
 8006e54:	6014      	str	r4, [r2, #0]
 8006e56:	b003      	add	sp, #12
 8006e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e5c:	f000 b83a 	b.w	8006ed4 <__malloc_unlock>
 8006e60:	42a3      	cmp	r3, r4
 8006e62:	d908      	bls.n	8006e76 <_free_r+0x46>
 8006e64:	6825      	ldr	r5, [r4, #0]
 8006e66:	1961      	adds	r1, r4, r5
 8006e68:	428b      	cmp	r3, r1
 8006e6a:	bf01      	itttt	eq
 8006e6c:	6819      	ldreq	r1, [r3, #0]
 8006e6e:	685b      	ldreq	r3, [r3, #4]
 8006e70:	1949      	addeq	r1, r1, r5
 8006e72:	6021      	streq	r1, [r4, #0]
 8006e74:	e7ed      	b.n	8006e52 <_free_r+0x22>
 8006e76:	461a      	mov	r2, r3
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	b10b      	cbz	r3, 8006e80 <_free_r+0x50>
 8006e7c:	42a3      	cmp	r3, r4
 8006e7e:	d9fa      	bls.n	8006e76 <_free_r+0x46>
 8006e80:	6811      	ldr	r1, [r2, #0]
 8006e82:	1855      	adds	r5, r2, r1
 8006e84:	42a5      	cmp	r5, r4
 8006e86:	d10b      	bne.n	8006ea0 <_free_r+0x70>
 8006e88:	6824      	ldr	r4, [r4, #0]
 8006e8a:	4421      	add	r1, r4
 8006e8c:	1854      	adds	r4, r2, r1
 8006e8e:	42a3      	cmp	r3, r4
 8006e90:	6011      	str	r1, [r2, #0]
 8006e92:	d1e0      	bne.n	8006e56 <_free_r+0x26>
 8006e94:	681c      	ldr	r4, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	6053      	str	r3, [r2, #4]
 8006e9a:	440c      	add	r4, r1
 8006e9c:	6014      	str	r4, [r2, #0]
 8006e9e:	e7da      	b.n	8006e56 <_free_r+0x26>
 8006ea0:	d902      	bls.n	8006ea8 <_free_r+0x78>
 8006ea2:	230c      	movs	r3, #12
 8006ea4:	6003      	str	r3, [r0, #0]
 8006ea6:	e7d6      	b.n	8006e56 <_free_r+0x26>
 8006ea8:	6825      	ldr	r5, [r4, #0]
 8006eaa:	1961      	adds	r1, r4, r5
 8006eac:	428b      	cmp	r3, r1
 8006eae:	bf04      	itt	eq
 8006eb0:	6819      	ldreq	r1, [r3, #0]
 8006eb2:	685b      	ldreq	r3, [r3, #4]
 8006eb4:	6063      	str	r3, [r4, #4]
 8006eb6:	bf04      	itt	eq
 8006eb8:	1949      	addeq	r1, r1, r5
 8006eba:	6021      	streq	r1, [r4, #0]
 8006ebc:	6054      	str	r4, [r2, #4]
 8006ebe:	e7ca      	b.n	8006e56 <_free_r+0x26>
 8006ec0:	b003      	add	sp, #12
 8006ec2:	bd30      	pop	{r4, r5, pc}
 8006ec4:	20001cd0 	.word	0x20001cd0

08006ec8 <__malloc_lock>:
 8006ec8:	4801      	ldr	r0, [pc, #4]	; (8006ed0 <__malloc_lock+0x8>)
 8006eca:	f7ff bfa1 	b.w	8006e10 <__retarget_lock_acquire_recursive>
 8006ece:	bf00      	nop
 8006ed0:	20001ccc 	.word	0x20001ccc

08006ed4 <__malloc_unlock>:
 8006ed4:	4801      	ldr	r0, [pc, #4]	; (8006edc <__malloc_unlock+0x8>)
 8006ed6:	f7ff bf9c 	b.w	8006e12 <__retarget_lock_release_recursive>
 8006eda:	bf00      	nop
 8006edc:	20001ccc 	.word	0x20001ccc

08006ee0 <_init>:
 8006ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee2:	bf00      	nop
 8006ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ee6:	bc08      	pop	{r3}
 8006ee8:	469e      	mov	lr, r3
 8006eea:	4770      	bx	lr

08006eec <_fini>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	bf00      	nop
 8006ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef2:	bc08      	pop	{r3}
 8006ef4:	469e      	mov	lr, r3
 8006ef6:	4770      	bx	lr
