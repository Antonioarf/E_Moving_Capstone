
controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008830  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  080089c0  080089c0  000189c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cec  08008cec  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08008cec  08008cec  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008cec  08008cec  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cec  08008cec  00018cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cf0  08008cf0  00018cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cec  20000060  08008d54  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d4c  08008d54  00021d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c0f8  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003996  00000000  00000000  0003c1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001658  00000000  00000000  0003fb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000116a  00000000  00000000  000411c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003cb5  00000000  00000000  0004232a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ef2  00000000  00000000  00045fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6398  00000000  00000000  0005fed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000630c  00000000  00000000  0011626c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0011c578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089a8 	.word	0x080089a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080089a8 	.word	0x080089a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <osStatusToString>:

/**
This function is to convert the status mesages from FreeRTOS
into strings to be sent via bluetooth in case of error
*/
char* osStatusToString(osStatus_t status) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    switch (status) {
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	3305      	adds	r3, #5
 800028c:	2b05      	cmp	r3, #5
 800028e:	d81b      	bhi.n	80002c8 <osStatusToString+0x48>
 8000290:	a201      	add	r2, pc, #4	; (adr r2, 8000298 <osStatusToString+0x18>)
 8000292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000296:	bf00      	nop
 8000298:	080002c5 	.word	0x080002c5
 800029c:	080002c1 	.word	0x080002c1
 80002a0:	080002bd 	.word	0x080002bd
 80002a4:	080002b9 	.word	0x080002b9
 80002a8:	080002b5 	.word	0x080002b5
 80002ac:	080002b1 	.word	0x080002b1
        case osOK:
            return "OK: Operation completed successfully\r\n";
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <osStatusToString+0x58>)
 80002b2:	e00a      	b.n	80002ca <osStatusToString+0x4a>
        case osError:
            return "osError: Unspecified error\r\n";
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <osStatusToString+0x5c>)
 80002b6:	e008      	b.n	80002ca <osStatusToString+0x4a>
        case osErrorTimeout:
            return "Timeout: osErrorTimeout:  Operation timed out\r\n";
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <osStatusToString+0x60>)
 80002ba:	e006      	b.n	80002ca <osStatusToString+0x4a>
        case osErrorResource:
            return "Resource: osErrorResource: Resource not available\r\n";
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <osStatusToString+0x64>)
 80002be:	e004      	b.n	80002ca <osStatusToString+0x4a>
        case osErrorParameter:
            return "Parameter: osErrorParameter: Parameter error\r\n";
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <osStatusToString+0x68>)
 80002c2:	e002      	b.n	80002ca <osStatusToString+0x4a>
        case osErrorNoMemory:
            return "NoMemory: osErrorNoMemory: System is out of memory\r\n";
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <osStatusToString+0x6c>)
 80002c6:	e000      	b.n	80002ca <osStatusToString+0x4a>
        default:
            return "Unknown osStatus_t\r\n";
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <osStatusToString+0x70>)
    }
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	080089c0 	.word	0x080089c0
 80002dc:	080089e8 	.word	0x080089e8
 80002e0:	08008a08 	.word	0x08008a08
 80002e4:	08008a38 	.word	0x08008a38
 80002e8:	08008a6c 	.word	0x08008a6c
 80002ec:	08008a9c 	.word	0x08008a9c
 80002f0:	08008ad4 	.word	0x08008ad4

080002f4 <MAP>:

The constants used in this function are defined in the main.h file
but should be edited via the controller.ioc file
*/
float MAP(float int_IN)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	ed87 0a01 	vstr	s0, [r7, #4]
	 if (int_IN < pedal_min){return 0.0;}
 80002fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000302:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800030a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800030e:	d502      	bpl.n	8000316 <MAP+0x22>
 8000310:	eddf 7a13 	vldr	s15, [pc, #76]	; 8000360 <MAP+0x6c>
 8000314:	e01d      	b.n	8000352 <MAP+0x5e>
	 else if (int_IN > pedal_max){return pwm_max;}
 8000316:	edd7 7a01 	vldr	s15, [r7, #4]
 800031a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800031e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000326:	dd02      	ble.n	800032e <MAP+0x3a>
 8000328:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8000364 <MAP+0x70>
 800032c:	e011      	b.n	8000352 <MAP+0x5e>
	 else{
		return ((((int_IN - pedal_min)*(pwm_max - pwm_min))/(pedal_max - pedal_min)) + pwm_min);
 800032e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000332:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000336:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800033a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000368 <MAP+0x74>
 800033e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000342:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8000346:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800034a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000368 <MAP+0x74>
 800034e:	ee77 7a87 	vadd.f32	s15, s15, s14
	 }
}
 8000352:	eeb0 0a67 	vmov.f32	s0, s15
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	00000000 	.word	0x00000000
 8000364:	43480000 	.word	0x43480000
 8000368:	42c80000 	.word	0x42c80000

0800036c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000370:	f000 ff22 	bl	80011b8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000374:	f000 f854 	bl	8000420 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000378:	f000 f9e2 	bl	8000740 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800037c:	f000 f9b0 	bl	80006e0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000380:	f000 f8d8 	bl	8000534 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000384:	f000 f934 	bl	80005f0 <MX_TIM2_Init>
  MX_RTC_Init();
 8000388:	f000 f8ae 	bl	80004e8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800038c:	f004 fdd6 	bl	8004f3c <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of input_queue */
  input_queueHandle = osMessageQueueNew (16, sizeof(command), &input_queue_attributes);
 8000390:	4a16      	ldr	r2, [pc, #88]	; (80003ec <main+0x80>)
 8000392:	210c      	movs	r1, #12
 8000394:	2010      	movs	r0, #16
 8000396:	f004 ff43 	bl	8005220 <osMessageQueueNew>
 800039a:	4603      	mov	r3, r0
 800039c:	4a14      	ldr	r2, [pc, #80]	; (80003f0 <main+0x84>)
 800039e:	6013      	str	r3, [r2, #0]

  /* creation of bluetooth_queue */
  bluetooth_queueHandle = osMessageQueueNew (16, sizeof(char*), &bluetooth_queue_attributes);
 80003a0:	4a14      	ldr	r2, [pc, #80]	; (80003f4 <main+0x88>)
 80003a2:	2104      	movs	r1, #4
 80003a4:	2010      	movs	r0, #16
 80003a6:	f004 ff3b 	bl	8005220 <osMessageQueueNew>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <main+0x8c>)
 80003ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of bluetooth_task */
  bluetooth_taskHandle = osThreadNew(BT_reader_funct, NULL, &bluetooth_task_attributes);
 80003b0:	4a12      	ldr	r2, [pc, #72]	; (80003fc <main+0x90>)
 80003b2:	2100      	movs	r1, #0
 80003b4:	4812      	ldr	r0, [pc, #72]	; (8000400 <main+0x94>)
 80003b6:	f004 fe29 	bl	800500c <osThreadNew>
 80003ba:	4603      	mov	r3, r0
 80003bc:	4a11      	ldr	r2, [pc, #68]	; (8000404 <main+0x98>)
 80003be:	6013      	str	r3, [r2, #0]

  /* creation of motor_ctrl */
  motor_ctrlHandle = osThreadNew(MT_controller_funct, NULL, &motor_ctrl_attributes);
 80003c0:	4a11      	ldr	r2, [pc, #68]	; (8000408 <main+0x9c>)
 80003c2:	2100      	movs	r1, #0
 80003c4:	4811      	ldr	r0, [pc, #68]	; (800040c <main+0xa0>)
 80003c6:	f004 fe21 	bl	800500c <osThreadNew>
 80003ca:	4603      	mov	r3, r0
 80003cc:	4a10      	ldr	r2, [pc, #64]	; (8000410 <main+0xa4>)
 80003ce:	6013      	str	r3, [r2, #0]

  /* creation of sensors_task */
  sensors_taskHandle = osThreadNew(Sensor_reader_funct, NULL, &sensors_task_attributes);
 80003d0:	4a10      	ldr	r2, [pc, #64]	; (8000414 <main+0xa8>)
 80003d2:	2100      	movs	r1, #0
 80003d4:	4810      	ldr	r0, [pc, #64]	; (8000418 <main+0xac>)
 80003d6:	f004 fe19 	bl	800500c <osThreadNew>
 80003da:	4603      	mov	r3, r0
 80003dc:	4a0f      	ldr	r2, [pc, #60]	; (800041c <main+0xb0>)
 80003de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80003e0:	f004 fde0 	bl	8004fa4 <osKernelStart>
 80003e4:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	08008c50 	.word	0x08008c50
 80003f0:	200001c8 	.word	0x200001c8
 80003f4:	08008c68 	.word	0x08008c68
 80003f8:	200001cc 	.word	0x200001cc
 80003fc:	08008be4 	.word	0x08008be4
 8000400:	0800095d 	.word	0x0800095d
 8000404:	200001bc 	.word	0x200001bc
 8000408:	08008c08 	.word	0x08008c08
 800040c:	08000a35 	.word	0x08000a35
 8000410:	200001c0 	.word	0x200001c0
 8000414:	08008c2c 	.word	0x08008c2c
 8000418:	08000c3d 	.word	0x08000c3d
 800041c:	200001c4 	.word	0x200001c4

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b09c      	sub	sp, #112	; 0x70
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800042a:	2228      	movs	r2, #40	; 0x28
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f007 fde0 	bl	8007ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
 8000442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000444:	463b      	mov	r3, r7
 8000446:	2234      	movs	r2, #52	; 0x34
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f007 fdd2 	bl	8007ff4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000450:	2309      	movs	r3, #9
 8000452:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000454:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000458:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045e:	2301      	movs	r3, #1
 8000460:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000462:	2301      	movs	r3, #1
 8000464:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000466:	2302      	movs	r3, #2
 8000468:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800046a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800046e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000470:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000474:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000476:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800047a:	4618      	mov	r0, r3
 800047c:	f001 f98e 	bl	800179c <HAL_RCC_OscConfig>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000486:	f000 fc39 	bl	8000cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048a:	230f      	movs	r3, #15
 800048c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048e:	2302      	movs	r3, #2
 8000490:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800049a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004a4:	2102      	movs	r1, #2
 80004a6:	4618      	mov	r0, r3
 80004a8:	f002 f9b6 	bl	8002818 <HAL_RCC_ClockConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004b2:	f000 fc23 	bl	8000cfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <SystemClock_Config+0xc4>)
 80004b8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80004be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004c2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004c4:	2300      	movs	r3, #0
 80004c6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c8:	463b      	mov	r3, r7
 80004ca:	4618      	mov	r0, r3
 80004cc:	f002 fc0c 	bl	8002ce8 <HAL_RCCEx_PeriphCLKConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0xba>
  {
    Error_Handler();
 80004d6:	f000 fc11 	bl	8000cfc <Error_Handler>
  }
}
 80004da:	bf00      	nop
 80004dc:	3770      	adds	r7, #112	; 0x70
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	00011001 	.word	0x00011001

080004e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_RTC_Init+0x44>)
 80004ee:	4a10      	ldr	r2, [pc, #64]	; (8000530 <MX_RTC_Init+0x48>)
 80004f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <MX_RTC_Init+0x44>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <MX_RTC_Init+0x44>)
 80004fa:	227f      	movs	r2, #127	; 0x7f
 80004fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <MX_RTC_Init+0x44>)
 8000500:	22ff      	movs	r2, #255	; 0xff
 8000502:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_RTC_Init+0x44>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800050a:	4b08      	ldr	r3, [pc, #32]	; (800052c <MX_RTC_Init+0x44>)
 800050c:	2200      	movs	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_RTC_Init+0x44>)
 8000512:	2200      	movs	r2, #0
 8000514:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_RTC_Init+0x44>)
 8000518:	f002 fd78 	bl	800300c <HAL_RTC_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000522:	f000 fbeb 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	2000007c 	.word	0x2000007c
 8000530:	40002800 	.word	0x40002800

08000534 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000552:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <MX_TIM1_Init+0xb4>)
 8000554:	4a25      	ldr	r2, [pc, #148]	; (80005ec <MX_TIM1_Init+0xb8>)
 8000556:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000558:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <MX_TIM1_Init+0xb4>)
 800055a:	2200      	movs	r2, #0
 800055c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800055e:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <MX_TIM1_Init+0xb4>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000564:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <MX_TIM1_Init+0xb4>)
 8000566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800056a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <MX_TIM1_Init+0xb4>)
 800056e:	2200      	movs	r2, #0
 8000570:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000572:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <MX_TIM1_Init+0xb4>)
 8000574:	2200      	movs	r2, #0
 8000576:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000578:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <MX_TIM1_Init+0xb4>)
 800057a:	2200      	movs	r2, #0
 800057c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800057e:	481a      	ldr	r0, [pc, #104]	; (80005e8 <MX_TIM1_Init+0xb4>)
 8000580:	f002 fe7c 	bl	800327c <HAL_TIM_Base_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800058a:	f000 fbb7 	bl	8000cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800058e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000592:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_INVERTED;
 8000594:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000598:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 15;
 800059e:	230f      	movs	r3, #15
 80005a0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	4619      	mov	r1, r3
 80005a8:	480f      	ldr	r0, [pc, #60]	; (80005e8 <MX_TIM1_Init+0xb4>)
 80005aa:	f003 fa8f 	bl	8003acc <HAL_TIM_ConfigClockSource>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80005b4:	f000 fba2 	bl	8000cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4619      	mov	r1, r3
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <MX_TIM1_Init+0xb4>)
 80005ca:	f003 ff45 	bl	8004458 <HAL_TIMEx_MasterConfigSynchronization>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80005d4:	f000 fb92 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <MX_TIM1_Init+0xb4>)
 80005da:	f002 fea7 	bl	800332c <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM1_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	3720      	adds	r7, #32
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000009c 	.word	0x2000009c
 80005ec:	40012c00 	.word	0x40012c00

080005f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08e      	sub	sp, #56	; 0x38
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]
 800061e:	615a      	str	r2, [r3, #20]
 8000620:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <MX_TIM2_Init+0xec>)
 8000624:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000628:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 800062a:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <MX_TIM2_Init+0xec>)
 800062c:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8000630:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000632:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <MX_TIM2_Init+0xec>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <MX_TIM2_Init+0xec>)
 800063a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800063e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <MX_TIM2_Init+0xec>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <MX_TIM2_Init+0xec>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800064c:	4823      	ldr	r0, [pc, #140]	; (80006dc <MX_TIM2_Init+0xec>)
 800064e:	f002 fe15 	bl	800327c <HAL_TIM_Base_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000658:	f000 fb50 	bl	8000cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000666:	4619      	mov	r1, r3
 8000668:	481c      	ldr	r0, [pc, #112]	; (80006dc <MX_TIM2_Init+0xec>)
 800066a:	f003 fa2f 	bl	8003acc <HAL_TIM_ConfigClockSource>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000674:	f000 fb42 	bl	8000cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000678:	4818      	ldr	r0, [pc, #96]	; (80006dc <MX_TIM2_Init+0xec>)
 800067a:	f002 feab 	bl	80033d4 <HAL_TIM_PWM_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000684:	f000 fb3a 	bl	8000cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	4811      	ldr	r0, [pc, #68]	; (80006dc <MX_TIM2_Init+0xec>)
 8000698:	f003 fede 	bl	8004458 <HAL_TIMEx_MasterConfigSynchronization>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80006a2:	f000 fb2b 	bl	8000cfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a6:	2360      	movs	r3, #96	; 0x60
 80006a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	4619      	mov	r1, r3
 80006bc:	4807      	ldr	r0, [pc, #28]	; (80006dc <MX_TIM2_Init+0xec>)
 80006be:	f003 f8f1 	bl	80038a4 <HAL_TIM_PWM_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80006c8:	f000 fb18 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <MX_TIM2_Init+0xec>)
 80006ce:	f000 fbcd 	bl	8000e6c <HAL_TIM_MspPostInit>

}
 80006d2:	bf00      	nop
 80006d4:	3738      	adds	r7, #56	; 0x38
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200000e8 	.word	0x200000e8

080006e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_USART1_UART_Init+0x58>)
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <MX_USART1_UART_Init+0x5c>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_USART1_UART_Init+0x58>)
 80006ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_USART1_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_USART1_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_USART1_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_USART1_UART_Init+0x58>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_USART1_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_USART1_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_USART1_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_USART1_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_USART1_UART_Init+0x58>)
 8000724:	f003 ff1c 	bl	8004560 <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800072e:	f000 fae5 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000134 	.word	0x20000134
 800073c:	40013800 	.word	0x40013800

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4b36      	ldr	r3, [pc, #216]	; (8000830 <MX_GPIO_Init+0xf0>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a35      	ldr	r2, [pc, #212]	; (8000830 <MX_GPIO_Init+0xf0>)
 800075c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000760:	6153      	str	r3, [r2, #20]
 8000762:	4b33      	ldr	r3, [pc, #204]	; (8000830 <MX_GPIO_Init+0xf0>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b30      	ldr	r3, [pc, #192]	; (8000830 <MX_GPIO_Init+0xf0>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	4a2f      	ldr	r2, [pc, #188]	; (8000830 <MX_GPIO_Init+0xf0>)
 8000774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000778:	6153      	str	r3, [r2, #20]
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <MX_GPIO_Init+0xf0>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <MX_GPIO_Init+0xf0>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a29      	ldr	r2, [pc, #164]	; (8000830 <MX_GPIO_Init+0xf0>)
 800078c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000790:	6153      	str	r3, [r2, #20]
 8000792:	4b27      	ldr	r3, [pc, #156]	; (8000830 <MX_GPIO_Init+0xf0>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b24      	ldr	r3, [pc, #144]	; (8000830 <MX_GPIO_Init+0xf0>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	4a23      	ldr	r2, [pc, #140]	; (8000830 <MX_GPIO_Init+0xf0>)
 80007a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007a8:	6153      	str	r3, [r2, #20]
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_GPIO_Init+0xf0>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rele_ctrl_GPIO_Port, rele_ctrl_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007bc:	481d      	ldr	r0, [pc, #116]	; (8000834 <MX_GPIO_Init+0xf4>)
 80007be:	f000 ff9d 	bl	80016fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BREAK_1_Pin */
  GPIO_InitStruct.Pin = BREAK_1_Pin;
 80007c2:	2320      	movs	r3, #32
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007c6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BREAK_1_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007da:	f000 fe05 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BREAK_2_Pin */
  GPIO_InitStruct.Pin = BREAK_2_Pin;
 80007de:	2340      	movs	r3, #64	; 0x40
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BREAK_2_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f6:	f000 fdf7 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : rele_ctrl_Pin */
  GPIO_InitStruct.Pin = rele_ctrl_Pin;
 80007fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(rele_ctrl_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	4808      	ldr	r0, [pc, #32]	; (8000834 <MX_GPIO_Init+0xf4>)
 8000814:	f000 fde8 	bl	80013e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2105      	movs	r1, #5
 800081c:	2017      	movs	r0, #23
 800081e:	f000 fdb9 	bl	8001394 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000822:	2017      	movs	r0, #23
 8000824:	f000 fdd2 	bl	80013cc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000
 8000834:	48000800 	.word	0x48000800

08000838 <FON_UART_Receive>:

/*
 * Since the available function HAL_UART_Receive reads a predetermined amount of bytes
 * this function  was developt to try to read until finds the \n char
*/
int FON_UART_Receive(char *received, uint16_t timeout,UART_HandleTypeDef *huartX) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	460b      	mov	r3, r1
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	817b      	strh	r3, [r7, #10]
    HAL_StatusTypeDef status;
    unsigned char receivedChar;
    int index = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
    while (1) {
        status = HAL_UART_Receive(huartX, &receivedChar, 1, timeout); //tries to read next availabe byte in the buffer
 800084a:	897b      	ldrh	r3, [r7, #10]
 800084c:	f107 0112 	add.w	r1, r7, #18
 8000850:	2201      	movs	r2, #1
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f003 ff5c 	bl	8004710 <HAL_UART_Receive>
 8000858:	4603      	mov	r3, r0
 800085a:	74fb      	strb	r3, [r7, #19]

        if (status == HAL_OK) { //verifies if the read was succesfull
 800085c:	7cfb      	ldrb	r3, [r7, #19]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d112      	bne.n	8000888 <FON_UART_Receive+0x50>
            if (receivedChar == '\n') {
 8000862:	7cbb      	ldrb	r3, [r7, #18]
 8000864:	2b0a      	cmp	r3, #10
 8000866:	d106      	bne.n	8000876 <FON_UART_Receive+0x3e>
            	received[index] = '\0';
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	4413      	add	r3, r2
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
                return 1; //returns success value
 8000872:	2301      	movs	r3, #1
 8000874:	e00c      	b.n	8000890 <FON_UART_Receive+0x58>
            }
            else {
                received[index] = receivedChar;
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	4413      	add	r3, r2
 800087c:	7cba      	ldrb	r2, [r7, #18]
 800087e:	701a      	strb	r2, [r3, #0]
                index++; //keeps reading
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	3301      	adds	r3, #1
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	e7e0      	b.n	800084a <FON_UART_Receive+0x12>
            }
        }
        else {
            received[0] = '\0';
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
            return 0; //returns error value
 800088e:	2300      	movs	r3, #0
        }
    }
}
 8000890:	4618      	mov	r0, r3
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <HAL_GPIO_EXTI_Callback>:
 * In our case, both brake handles are dealt with here
 * by simmply adding the correct  command in the queue
 *
 * Import to note that in interruptions, the waittime argument for queues MUST be 0
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	80fb      	strh	r3, [r7, #6]
	command com;

	if (GPIO_Pin == BREAK_1_Pin ) {
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	2b20      	cmp	r3, #32
 80008a6:	d110      	bne.n	80008ca <HAL_GPIO_EXTI_Callback+0x32>
		com.button_id 		= 1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
		if (HAL_GPIO_ReadPin(BREAK_1_GPIO_Port, GPIO_Pin) == GPIO_PIN_SET) { //because of this line, it was necessary to split both pins
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	4619      	mov	r1, r3
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b4:	f000 ff0a 	bl	80016cc <HAL_GPIO_ReadPin>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d102      	bne.n	80008c4 <HAL_GPIO_EXTI_Callback+0x2c>
			// Your code for rising edge -> released
			com.button_status  	= 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	e015      	b.n	80008f0 <HAL_GPIO_EXTI_Callback+0x58>
		}
		else {
			// Your code for falling edge -> pressed
			com.button_status  	= 1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	e012      	b.n	80008f0 <HAL_GPIO_EXTI_Callback+0x58>
		}
	}
	else if (GPIO_Pin == BREAK_2_Pin ) {
 80008ca:	88fb      	ldrh	r3, [r7, #6]
 80008cc:	2b40      	cmp	r3, #64	; 0x40
 80008ce:	d10f      	bne.n	80008f0 <HAL_GPIO_EXTI_Callback+0x58>
		com.button_id 		= 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	613b      	str	r3, [r7, #16]
		if (HAL_GPIO_ReadPin(BREAK_2_GPIO_Port, GPIO_Pin) == GPIO_PIN_SET) {
 80008d4:	88fb      	ldrh	r3, [r7, #6]
 80008d6:	4619      	mov	r1, r3
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008dc:	f000 fef6 	bl	80016cc <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d102      	bne.n	80008ec <HAL_GPIO_EXTI_Callback+0x54>
			// Your code for rising edge -> released
			com.button_status  	= 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	e001      	b.n	80008f0 <HAL_GPIO_EXTI_Callback+0x58>
		} else {
			// Your code for falling edge -> pressed
			com.button_status  	= 1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	617b      	str	r3, [r7, #20]
		}
	}

	osStatus_t status 	=  osMessageQueuePut(input_queueHandle, &com, 0, 0); //this block tries to sent to the  input_queue
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <HAL_GPIO_EXTI_Callback+0x94>)
 80008f2:	6818      	ldr	r0, [r3, #0]
 80008f4:	f107 0110 	add.w	r1, r7, #16
 80008f8:	2300      	movs	r3, #0
 80008fa:	2200      	movs	r2, #0
 80008fc:	f004 fd16 	bl	800532c <osMessageQueuePut>
 8000900:	61f8      	str	r0, [r7, #28]
	if (status != osOK){													 // in case it  fails,
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00c      	beq.n	8000922 <HAL_GPIO_EXTI_Callback+0x8a>
		char* str = osStatusToString(status);								 // then sent the error to the bluetooth_queue
 8000908:	69f8      	ldr	r0, [r7, #28]
 800090a:	f7ff fcb9 	bl	8000280 <osStatusToString>
 800090e:	4603      	mov	r3, r0
 8000910:	60fb      	str	r3, [r7, #12]
		osMessageQueuePut(bluetooth_queueHandle, &str, 0, 0);
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <HAL_GPIO_EXTI_Callback+0x98>)
 8000914:	6818      	ldr	r0, [r3, #0]
 8000916:	f107 010c 	add.w	r1, r7, #12
 800091a:	2300      	movs	r3, #0
 800091c:	2200      	movs	r2, #0
 800091e:	f004 fd05 	bl	800532c <osMessageQueuePut>
	}
}
 8000922:	bf00      	nop
 8000924:	3720      	adds	r7, #32
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200001c8 	.word	0x200001c8
 8000930:	200001cc 	.word	0x200001cc

08000934 <backup_write>:



void backup_write(uint32_t reg){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	   HAL_PWR_EnableBkUpAccess();
 800093c:	f000 ff0e 	bl	800175c <HAL_PWR_EnableBkUpAccess>
	   // Writes a data in a RTC Backup data Register 1
	   HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, reg);
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	2100      	movs	r1, #0
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <backup_write+0x24>)
 8000946:	f002 fc67 	bl	8003218 <HAL_RTCEx_BKUPWrite>
	   HAL_PWR_DisableBkUpAccess();
 800094a:	f000 ff17 	bl	800177c <HAL_PWR_DisableBkUpAccess>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000007c 	.word	0x2000007c

0800095c <BT_reader_funct>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BT_reader_funct */
void BT_reader_funct(void *argument)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b091      	sub	sp, #68	; 0x44
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	unsigned char str[8] ="\r\nInit\r\n";  //initial post to confirm
 8000964:	4a2f      	ldr	r2, [pc, #188]	; (8000a24 <BT_reader_funct+0xc8>)
 8000966:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800096a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800096e:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_UART_Transmit(&huart1, str, sizeof(str), 500);
 8000972:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000976:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800097a:	2208      	movs	r2, #8
 800097c:	482a      	ldr	r0, [pc, #168]	; (8000a28 <BT_reader_funct+0xcc>)
 800097e:	f003 fe3d 	bl	80045fc <HAL_UART_Transmit>

	char* res;
    char receivedData[32];
	command com;
	while (1) {
	        if (FON_UART_Receive(receivedData,500, &huart1)){
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4a28      	ldr	r2, [pc, #160]	; (8000a28 <BT_reader_funct+0xcc>)
 8000988:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff53 	bl	8000838 <FON_UART_Receive>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d01f      	beq.n	80009d8 <BT_reader_funct+0x7c>
	        	if (strlen(receivedData)==3){ //strlen function returns the "used" len of a string, not the allocated size
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fc17 	bl	80001d0 <strlen>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b03      	cmp	r3, #3
 80009a6:	d117      	bne.n	80009d8 <BT_reader_funct+0x7c>
	        		com.button_id 		= receivedData[0] - '0'; //the commands come in the form of 3 digits, so this 2 lines turn
 80009a8:	7d3b      	ldrb	r3, [r7, #20]
 80009aa:	3b30      	subs	r3, #48	; 0x30
 80009ac:	60bb      	str	r3, [r7, #8]
					com.button_status  	= 10*(receivedData[1] - '0') + (receivedData[2] - '0'); //the string of len3 into 2 ints
 80009ae:	7d7b      	ldrb	r3, [r7, #21]
 80009b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80009b4:	4613      	mov	r3, r2
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	461a      	mov	r2, r3
 80009be:	7dbb      	ldrb	r3, [r7, #22]
 80009c0:	3b30      	subs	r3, #48	; 0x30
 80009c2:	4413      	add	r3, r2
 80009c4:	60fb      	str	r3, [r7, #12]
					osMessageQueuePut(input_queueHandle, &com, 0, 2000);
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <BT_reader_funct+0xd0>)
 80009c8:	6818      	ldr	r0, [r3, #0]
 80009ca:	f107 0108 	add.w	r1, r7, #8
 80009ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009d2:	2200      	movs	r2, #0
 80009d4:	f004 fcaa 	bl	800532c <osMessageQueuePut>
	        	}
	        }

	        while (1){
	        	if (osMessageQueueGet(bluetooth_queueHandle, &res, NULL, 250) == osOK) {
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <BT_reader_funct+0xd4>)
 80009da:	6818      	ldr	r0, [r3, #0]
 80009dc:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80009e0:	23fa      	movs	r3, #250	; 0xfa
 80009e2:	2200      	movs	r2, #0
 80009e4:	f004 fd16 	bl	8005414 <osMessageQueueGet>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d10c      	bne.n	8000a08 <BT_reader_funct+0xac>
	        	    HAL_UART_Transmit(&huart1, res, strlen(res), 1000);
 80009ee:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80009f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fbec 	bl	80001d0 <strlen>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a00:	4621      	mov	r1, r4
 8000a02:	4809      	ldr	r0, [pc, #36]	; (8000a28 <BT_reader_funct+0xcc>)
 8000a04:	f003 fdfa 	bl	80045fc <HAL_UART_Transmit>
	        	}
	        	if (osMessageQueueGetCount(bluetooth_queueHandle)==0){
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <BT_reader_funct+0xd4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f004 fd73 	bl	80054f8 <osMessageQueueGetCount>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d000      	beq.n	8000a1a <BT_reader_funct+0xbe>
	        	if (osMessageQueueGet(bluetooth_queueHandle, &res, NULL, 250) == osOK) {
 8000a18:	e7de      	b.n	80009d8 <BT_reader_funct+0x7c>
	        		break;
 8000a1a:	bf00      	nop
	        	}

	        }

	        //osDelay(1000);
	        osThreadYield();
 8000a1c:	f004 fba0 	bl	8005160 <osThreadYield>
	        if (FON_UART_Receive(receivedData,500, &huart1)){
 8000a20:	e7af      	b.n	8000982 <BT_reader_funct+0x26>
 8000a22:	bf00      	nop
 8000a24:	08008b34 	.word	0x08008b34
 8000a28:	20000134 	.word	0x20000134
 8000a2c:	200001c8 	.word	0x200001c8
 8000a30:	200001cc 	.word	0x200001cc

08000a34 <MT_controller_funct>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MT_controller_funct */
void MT_controller_funct(void *argument)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08e      	sub	sp, #56	; 0x38
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MT_controller_funct */
  /* Infinite loop */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	486e      	ldr	r0, [pc, #440]	; (8000bf8 <MT_controller_funct+0x1c4>)
 8000a40:	f002 fd2a 	bl	8003498 <HAL_TIM_PWM_Start>

	//variables for the finite state machine
	int lock = 0; 		//binary indicator for the  locking
 8000a44:	2300      	movs	r3, #0
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
	int brk = 0;  		//binary indicator for the  brake
 8000a48:	2300      	movs	r3, #0
 8000a4a:	633b      	str	r3, [r7, #48]	; 0x30
	float freq = 0.0; 	//float for the  frequencie sent by the sensor
 8000a4c:	f04f 0300 	mov.w	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
	float output = 0.0; //float for the  frequencie post MAP function
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
	int freq_int; 		//int  to sent to the bluetooth the value of  freq (I had issues formating string with float)

	command com;
	char* input_command,decision;
	uint32_t reg = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4868      	ldr	r0, [pc, #416]	; (8000bfc <MT_controller_funct+0x1c8>)
 8000a5c:	f002 fbf6 	bl	800324c <HAL_RTCEx_BKUPRead>
 8000a60:	6278      	str	r0, [r7, #36]	; 0x24

	 if ((reg != 0) && (reg != 1) ){
 8000a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d016      	beq.n	8000a96 <MT_controller_funct+0x62>
 8000a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d013      	beq.n	8000a96 <MT_controller_funct+0x62>
			   // Write Back Up Register 1 Data
		 	   backup_write(0);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f7ff ff60 	bl	8000934 <backup_write>
			   asprintf(&input_command, "Starting value: %d\n", 0);
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	2200      	movs	r2, #0
 8000a7a:	4961      	ldr	r1, [pc, #388]	; (8000c00 <MT_controller_funct+0x1cc>)
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f007 fa95 	bl	8007fac <asiprintf>
			   osMessageQueuePut(bluetooth_queueHandle, &input_command, 0, 2000);
 8000a82:	4b60      	ldr	r3, [pc, #384]	; (8000c04 <MT_controller_funct+0x1d0>)
 8000a84:	6818      	ldr	r0, [r3, #0]
 8000a86:	f107 0110 	add.w	r1, r7, #16
 8000a8a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f004 fc4c 	bl	800532c <osMessageQueuePut>
	 if ((reg != 0) && (reg != 1) ){
 8000a94:	e011      	b.n	8000aba <MT_controller_funct+0x86>
	 }
	 else{
			 lock = (int) reg;
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
			 asprintf(&input_command, "MEM read: %d\n", lock);
 8000a9a:	f107 0310 	add.w	r3, r7, #16
 8000a9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000aa0:	4959      	ldr	r1, [pc, #356]	; (8000c08 <MT_controller_funct+0x1d4>)
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f007 fa82 	bl	8007fac <asiprintf>
			 osMessageQueuePut(bluetooth_queueHandle, &input_command, 0, 2000);
 8000aa8:	4b56      	ldr	r3, [pc, #344]	; (8000c04 <MT_controller_funct+0x1d0>)
 8000aaa:	6818      	ldr	r0, [r3, #0]
 8000aac:	f107 0110 	add.w	r1, r7, #16
 8000ab0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f004 fc39 	bl	800532c <osMessageQueuePut>

	 }


	while(1){
		if (osMessageQueueGet(input_queueHandle, &com, NULL, 2000)== osOK){
 8000aba:	4b54      	ldr	r3, [pc, #336]	; (8000c0c <MT_controller_funct+0x1d8>)
 8000abc:	6818      	ldr	r0, [r3, #0]
 8000abe:	f107 0114 	add.w	r1, r7, #20
 8000ac2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f004 fca4 	bl	8005414 <osMessageQueueGet>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d144      	bne.n	8000b5c <MT_controller_funct+0x128>
			if(com.button_id==9){
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	2b09      	cmp	r3, #9
 8000ad6:	d10e      	bne.n	8000af6 <MT_controller_funct+0xc2>
				lock = com.button_status;
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
				if (lock){
 8000adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d002      	beq.n	8000ae8 <MT_controller_funct+0xb4>
					input_command = "lock\n";} 	//this lines just return the action to the bluetooth
 8000ae2:	4b4b      	ldr	r3, [pc, #300]	; (8000c10 <MT_controller_funct+0x1dc>)
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	e001      	b.n	8000aec <MT_controller_funct+0xb8>
				else{input_command = "UNlock\n";}		// might delete them in the final version
 8000ae8:	4b4a      	ldr	r3, [pc, #296]	; (8000c14 <MT_controller_funct+0x1e0>)
 8000aea:	613b      	str	r3, [r7, #16]
				backup_write(lock);
 8000aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff ff20 	bl	8000934 <backup_write>
 8000af4:	e028      	b.n	8000b48 <MT_controller_funct+0x114>
			}
			else if(com.button_id==1){
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d10a      	bne.n	8000b12 <MT_controller_funct+0xde>
				brk = com.button_status;
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
				if (brk){ input_command = "FREIOU \n";} //this lines just return the action to the bluetooth
 8000b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <MT_controller_funct+0xd8>
 8000b06:	4b44      	ldr	r3, [pc, #272]	; (8000c18 <MT_controller_funct+0x1e4>)
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	e01d      	b.n	8000b48 <MT_controller_funct+0x114>
				else{ input_command = "SOLTOU\n";}		// might delete them in the final version
 8000b0c:	4b43      	ldr	r3, [pc, #268]	; (8000c1c <MT_controller_funct+0x1e8>)
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	e01a      	b.n	8000b48 <MT_controller_funct+0x114>
			}
			else if(com.button_id==2){
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d117      	bne.n	8000b48 <MT_controller_funct+0x114>
					freq = (com.sensor_value)*1000;
 8000b18:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b1c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000c20 <MT_controller_funct+0x1ec>
 8000b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b24:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
					input_command = "";					//this lines just return the action to the bluetooth
 8000b28:	4b3e      	ldr	r3, [pc, #248]	; (8000c24 <MT_controller_funct+0x1f0>)
 8000b2a:	613b      	str	r3, [r7, #16]
					freq_int = (int) freq;				// might delete them in the final version
 8000b2c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b34:	ee17 3a90 	vmov	r3, s15
 8000b38:	623b      	str	r3, [r7, #32]
					asprintf(&input_command, "FREQ(Hz): %d\n", freq_int);
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	6a3a      	ldr	r2, [r7, #32]
 8000b40:	4939      	ldr	r1, [pc, #228]	; (8000c28 <MT_controller_funct+0x1f4>)
 8000b42:	4618      	mov	r0, r3
 8000b44:	f007 fa32 	bl	8007fac <asiprintf>
			}
			osMessageQueuePut(bluetooth_queueHandle, &input_command, 0, 2000);
 8000b48:	4b2e      	ldr	r3, [pc, #184]	; (8000c04 <MT_controller_funct+0x1d0>)
 8000b4a:	6818      	ldr	r0, [r3, #0]
 8000b4c:	f107 0110 	add.w	r1, r7, #16
 8000b50:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b54:	2200      	movs	r2, #0
 8000b56:	f004 fbe9 	bl	800532c <osMessageQueuePut>
 8000b5a:	e00a      	b.n	8000b72 <MT_controller_funct+0x13e>

		}
		else{
			input_command = "No new input\n";
 8000b5c:	4b33      	ldr	r3, [pc, #204]	; (8000c2c <MT_controller_funct+0x1f8>)
 8000b5e:	613b      	str	r3, [r7, #16]
			osMessageQueuePut(bluetooth_queueHandle, &input_command, 0, 2000);
 8000b60:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <MT_controller_funct+0x1d0>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f107 0110 	add.w	r1, r7, #16
 8000b68:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f004 fbdd 	bl	800532c <osMessageQueuePut>

		}


		if(!lock){
 8000b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d11b      	bne.n	8000bb0 <MT_controller_funct+0x17c>
			if (!brk){
 8000b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d106      	bne.n	8000b8c <MT_controller_funct+0x158>
				//normal movemente
				output = MAP(freq);
 8000b7e:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8000b82:	f7ff fbb7 	bl	80002f4 <MAP>
 8000b86:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
 8000b8a:	e001      	b.n	8000b90 <MT_controller_funct+0x15c>
			}
			else{
				//nether motor or lock
			output = pwm_min;
 8000b8c:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <MT_controller_funct+0x1fc>)
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			HAL_GPIO_WritePin(rele_ctrl_GPIO_Port, rele_ctrl_Pin, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b96:	4827      	ldr	r0, [pc, #156]	; (8000c34 <MT_controller_funct+0x200>)
 8000b98:	f000 fdb0 	bl	80016fc <HAL_GPIO_WritePin>
			htim2.Instance->CCR1 = output;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MT_controller_funct+0x1c4>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ba8:	ee17 2a90 	vmov	r2, s15
 8000bac:	635a      	str	r2, [r3, #52]	; 0x34
 8000bae:	e009      	b.n	8000bc4 <MT_controller_funct+0x190>
		}
		else{
			//call locking function
			// it is still not defined what to do when locking the bike
			//but the code will go here
			HAL_GPIO_WritePin(rele_ctrl_GPIO_Port, rele_ctrl_Pin, 1);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb6:	481f      	ldr	r0, [pc, #124]	; (8000c34 <MT_controller_funct+0x200>)
 8000bb8:	f000 fda0 	bl	80016fc <HAL_GPIO_WritePin>
			htim2.Instance->CCR1 = pwm_min;
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MT_controller_funct+0x1c4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2264      	movs	r2, #100	; 0x64
 8000bc2:	635a      	str	r2, [r3, #52]	; 0x34
		}

		//return status to phone
		asprintf(&decision, "OUTPUT: %d\n", (int)output);
 8000bc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000bc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bcc:	f107 030f 	add.w	r3, r7, #15
 8000bd0:	ee17 2a90 	vmov	r2, s15
 8000bd4:	4918      	ldr	r1, [pc, #96]	; (8000c38 <MT_controller_funct+0x204>)
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f007 f9e8 	bl	8007fac <asiprintf>
		osMessageQueuePut(bluetooth_queueHandle, &decision, 0, 2000);
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MT_controller_funct+0x1d0>)
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	f107 010f 	add.w	r1, r7, #15
 8000be4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000be8:	2200      	movs	r2, #0
 8000bea:	f004 fb9f 	bl	800532c <osMessageQueuePut>
        //osThreadYield();
		osDelay(1000);
 8000bee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf2:	f004 fae7 	bl	80051c4 <osDelay>
	while(1){
 8000bf6:	e760      	b.n	8000aba <MT_controller_funct+0x86>
 8000bf8:	200000e8 	.word	0x200000e8
 8000bfc:	2000007c 	.word	0x2000007c
 8000c00:	08008b3c 	.word	0x08008b3c
 8000c04:	200001cc 	.word	0x200001cc
 8000c08:	08008b50 	.word	0x08008b50
 8000c0c:	200001c8 	.word	0x200001c8
 8000c10:	08008b60 	.word	0x08008b60
 8000c14:	08008b68 	.word	0x08008b68
 8000c18:	08008b70 	.word	0x08008b70
 8000c1c:	08008b7c 	.word	0x08008b7c
 8000c20:	447a0000 	.word	0x447a0000
 8000c24:	08008b84 	.word	0x08008b84
 8000c28:	08008b88 	.word	0x08008b88
 8000c2c:	08008b98 	.word	0x08008b98
 8000c30:	42c80000 	.word	0x42c80000
 8000c34:	48000800 	.word	0x48000800
 8000c38:	08008ba8 	.word	0x08008ba8

08000c3c <Sensor_reader_funct>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensor_reader_funct */
void Sensor_reader_funct(void *argument)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sensor_reader_funct */
  /* Infinite loop */
	int delay = 2000;				//int to define  how often the sensors will be read
 8000c44:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c48:	623b      	str	r3, [r7, #32]
	float rpm_input, rpm_old = 0;	// both current and old pedal measures
 8000c4a:	f04f 0300 	mov.w	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
	int counter;					// value read from the periferal
	command com;
	com.button_id = 2;				// code of the comand to be sent
 8000c50:	2302      	movs	r3, #2
 8000c52:	60fb      	str	r3, [r7, #12]
	while(1){
        counter = __HAL_TIM_GET_COUNTER(&htim1); //getter for the nummber of pulses
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <Sensor_reader_funct+0x94>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5a:	61fb      	str	r3, [r7, #28]
        rpm_input =(float) 1.0*counter/(PulsesPerRound*delay);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	ee07 3a90 	vmov	s15, r3
 8000c62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c66:	6a3a      	ldr	r2, [r7, #32]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	ee07 3a90 	vmov	s15, r3
 8000c74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c7c:	edc7 7a06 	vstr	s15, [r7, #24]
		com.sensor_value = rpm_input;
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	617b      	str	r3, [r7, #20]
		if (counter != rpm_old){
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	ee07 3a90 	vmov	s15, r3
 8000c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c8e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000c92:	eeb4 7a67 	vcmp.f32	s14, s15
 8000c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9a:	d008      	beq.n	8000cae <Sensor_reader_funct+0x72>
			osMessageQueuePut(input_queueHandle, &com, 0, 500);
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <Sensor_reader_funct+0x98>)
 8000c9e:	6818      	ldr	r0, [r3, #0]
 8000ca0:	f107 010c 	add.w	r1, r7, #12
 8000ca4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f004 fb3f 	bl	800532c <osMessageQueuePut>
		}
		__HAL_TIM_SET_COUNTER(&htim1,0);
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <Sensor_reader_funct+0x94>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24

		rpm_old = counter;
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	ee07 3a90 	vmov	s15, r3
 8000cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		osDelay(delay);
 8000cc4:	6a3b      	ldr	r3, [r7, #32]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f004 fa7c 	bl	80051c4 <osDelay>
        counter = __HAL_TIM_GET_COUNTER(&htim1); //getter for the nummber of pulses
 8000ccc:	e7c2      	b.n	8000c54 <Sensor_reader_funct+0x18>
 8000cce:	bf00      	nop
 8000cd0:	2000009c 	.word	0x2000009c
 8000cd4:	200001c8 	.word	0x200001c8

08000cd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d101      	bne.n	8000cee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cea:	f000 fa7b 	bl	80011e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40001000 	.word	0x40001000

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	char* str = "ERROR_HANDLER CALLED";
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <Error_Handler+0x20>)
 8000d04:	607b      	str	r3, [r7, #4]
	osMessageQueuePut(bluetooth_queueHandle, &str, 0, 0);
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <Error_Handler+0x24>)
 8000d08:	6818      	ldr	r0, [r3, #0]
 8000d0a:	1d39      	adds	r1, r7, #4
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f004 fb0c 	bl	800532c <osMessageQueuePut>
  /* USER CODE END Error_Handler_Debug */
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	08008bb4 	.word	0x08008bb4
 8000d20:	200001cc 	.word	0x200001cc

08000d24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6193      	str	r3, [r2, #24]
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	210f      	movs	r1, #15
 8000d5e:	f06f 0001 	mvn.w	r0, #1
 8000d62:	f000 fb17 	bl	8001394 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40021000 	.word	0x40021000

08000d74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <HAL_RTC_MspInit+0x44>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d111      	bne.n	8000daa <HAL_RTC_MspInit+0x36>
 8000d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d8a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	fa93 f3a3 	rbit	r3, r3
 8000d92:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d94:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d96:	fab3 f383 	clz	r3, r3
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <HAL_RTC_MspInit+0x48>)
 8000da0:	4413      	add	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	461a      	mov	r2, r3
 8000da6:	2301      	movs	r3, #1
 8000da8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	40002800 	.word	0x40002800
 8000dbc:	10908100 	.word	0x10908100

08000dc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <HAL_TIM_Base_MspInit+0xa4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d12a      	bne.n	8000e38 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000de2:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <HAL_TIM_Base_MspInit+0xa8>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	4a20      	ldr	r2, [pc, #128]	; (8000e68 <HAL_TIM_Base_MspInit+0xa8>)
 8000de8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dec:	6193      	str	r3, [r2, #24]
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <HAL_TIM_Base_MspInit+0xa8>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <HAL_TIM_Base_MspInit+0xa8>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	4a1a      	ldr	r2, [pc, #104]	; (8000e68 <HAL_TIM_Base_MspInit+0xa8>)
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e04:	6153      	str	r3, [r2, #20]
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_TIM_Base_MspInit+0xa8>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8000e24:	230b      	movs	r3, #11
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e32:	f000 fad9 	bl	80013e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e36:	e010      	b.n	8000e5a <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e40:	d10b      	bne.n	8000e5a <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_TIM_Base_MspInit+0xa8>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <HAL_TIM_Base_MspInit+0xa8>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	61d3      	str	r3, [r2, #28]
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_TIM_Base_MspInit+0xa8>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	; 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40012c00 	.word	0x40012c00
 8000e68:	40021000 	.word	0x40021000

08000e6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e8c:	d11c      	bne.n	8000ec8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <HAL_TIM_MspPostInit+0x64>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <HAL_TIM_MspPostInit+0x64>)
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	6153      	str	r3, [r2, #20]
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_TIM_MspPostInit+0x64>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec4:	f000 fa90 	bl	80013e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a17      	ldr	r2, [pc, #92]	; (8000f50 <HAL_UART_MspInit+0x7c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d127      	bne.n	8000f46 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_UART_MspInit+0x80>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4a16      	ldr	r2, [pc, #88]	; (8000f54 <HAL_UART_MspInit+0x80>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f00:	6193      	str	r3, [r2, #24]
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_UART_MspInit+0x80>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_UART_MspInit+0x80>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	4a10      	ldr	r2, [pc, #64]	; (8000f54 <HAL_UART_MspInit+0x80>)
 8000f14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f18:	6153      	str	r3, [r2, #20]
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_UART_MspInit+0x80>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f26:	2330      	movs	r3, #48	; 0x30
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f36:	2307      	movs	r3, #7
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <HAL_UART_MspInit+0x84>)
 8000f42:	f000 fa51 	bl	80013e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	3728      	adds	r7, #40	; 0x28
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40013800 	.word	0x40013800
 8000f54:	40021000 	.word	0x40021000
 8000f58:	48000800 	.word	0x48000800

08000f5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08e      	sub	sp, #56	; 0x38
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f6c:	4b33      	ldr	r3, [pc, #204]	; (800103c <HAL_InitTick+0xe0>)
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	4a32      	ldr	r2, [pc, #200]	; (800103c <HAL_InitTick+0xe0>)
 8000f72:	f043 0310 	orr.w	r3, r3, #16
 8000f76:	61d3      	str	r3, [r2, #28]
 8000f78:	4b30      	ldr	r3, [pc, #192]	; (800103c <HAL_InitTick+0xe0>)
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	f003 0310 	and.w	r3, r3, #16
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f84:	f107 0210 	add.w	r2, r7, #16
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 fe78 	bl	8002c84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f94:	6a3b      	ldr	r3, [r7, #32]
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d103      	bne.n	8000fa6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f9e:	f001 fe2d 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 8000fa2:	6378      	str	r0, [r7, #52]	; 0x34
 8000fa4:	e004      	b.n	8000fb0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fa6:	f001 fe29 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 8000faa:	4603      	mov	r3, r0
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb2:	4a23      	ldr	r2, [pc, #140]	; (8001040 <HAL_InitTick+0xe4>)
 8000fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb8:	0c9b      	lsrs	r3, r3, #18
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fbe:	4b21      	ldr	r3, [pc, #132]	; (8001044 <HAL_InitTick+0xe8>)
 8000fc0:	4a21      	ldr	r2, [pc, #132]	; (8001048 <HAL_InitTick+0xec>)
 8000fc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <HAL_InitTick+0xe8>)
 8000fc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fcc:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <HAL_InitTick+0xe8>)
 8000fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <HAL_InitTick+0xe8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <HAL_InitTick+0xe8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <HAL_InitTick+0xe8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000fe4:	4817      	ldr	r0, [pc, #92]	; (8001044 <HAL_InitTick+0xe8>)
 8000fe6:	f002 f949 	bl	800327c <HAL_TIM_Base_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ff0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d11b      	bne.n	8001030 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ff8:	4812      	ldr	r0, [pc, #72]	; (8001044 <HAL_InitTick+0xe8>)
 8000ffa:	f002 f997 	bl	800332c <HAL_TIM_Base_Start_IT>
 8000ffe:	4603      	mov	r3, r0
 8001000:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001004:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001008:	2b00      	cmp	r3, #0
 800100a:	d111      	bne.n	8001030 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800100c:	2036      	movs	r0, #54	; 0x36
 800100e:	f000 f9dd 	bl	80013cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d808      	bhi.n	800102a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	2036      	movs	r0, #54	; 0x36
 800101e:	f000 f9b9 	bl	8001394 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_InitTick+0xf0>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	e002      	b.n	8001030 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001030:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001034:	4618      	mov	r0, r3
 8001036:	3738      	adds	r7, #56	; 0x38
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021000 	.word	0x40021000
 8001040:	431bde83 	.word	0x431bde83
 8001044:	200001d0 	.word	0x200001d0
 8001048:	40001000 	.word	0x40001000
 800104c:	20000004 	.word	0x20000004

08001050 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001054:	f3bf 8f4f 	dsb	sy
}
 8001058:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <__NVIC_SystemReset+0x24>)
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001062:	4904      	ldr	r1, [pc, #16]	; (8001074 <__NVIC_SystemReset+0x24>)
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_SystemReset+0x28>)
 8001066:	4313      	orrs	r3, r2
 8001068:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800106a:	f3bf 8f4f 	dsb	sy
}
 800106e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <__NVIC_SystemReset+0x20>
 8001074:	e000ed00 	.word	0xe000ed00
 8001078:	05fa0004 	.word	0x05fa0004

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler+0x4>

08001082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 8001086:	f7ff ffe3 	bl	8001050 <__NVIC_SystemReset>

0800108a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <MemManage_Handler+0x4>

08001090 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <BusFault_Handler+0x4>

08001096 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <UsageFault_Handler+0x4>

0800109c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BREAK_1_Pin);
 80010ae:	2020      	movs	r0, #32
 80010b0:	f000 fb3c 	bl	800172c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BREAK_2_Pin);
 80010b4:	2040      	movs	r0, #64	; 0x40
 80010b6:	f000 fb39 	bl	800172c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <TIM6_DAC_IRQHandler+0x10>)
 80010c6:	f002 facd 	bl	8003664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200001d0 	.word	0x200001d0

080010d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010dc:	4a14      	ldr	r2, [pc, #80]	; (8001130 <_sbrk+0x5c>)
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <_sbrk+0x60>)
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <_sbrk+0x64>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <_sbrk+0x68>)
 80010f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	429a      	cmp	r2, r3
 8001102:	d207      	bcs.n	8001114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001104:	f006 ffd4 	bl	80080b0 <__errno>
 8001108:	4603      	mov	r3, r0
 800110a:	220c      	movs	r2, #12
 800110c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001112:	e009      	b.n	8001128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <_sbrk+0x64>)
 8001124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20004000 	.word	0x20004000
 8001134:	00000400 	.word	0x00000400
 8001138:	2000021c 	.word	0x2000021c
 800113c:	20001d50 	.word	0x20001d50

08001140 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <SystemInit+0x20>)
 8001146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <SystemInit+0x20>)
 800114c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800119c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001168:	f7ff ffea 	bl	8001140 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800116e:	490d      	ldr	r1, [pc, #52]	; (80011a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001170:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <LoopForever+0xe>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001184:	4c0a      	ldr	r4, [pc, #40]	; (80011b0 <LoopForever+0x16>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001192:	f006 ff93 	bl	80080bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001196:	f7ff f8e9 	bl	800036c <main>

0800119a <LoopForever>:

LoopForever:
    b LoopForever
 800119a:	e7fe      	b.n	800119a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800119c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80011a8:	08008cf4 	.word	0x08008cf4
  ldr r2, =_sbss
 80011ac:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80011b0:	20001d4c 	.word	0x20001d4c

080011b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC1_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_Init+0x28>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <HAL_Init+0x28>)
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c8:	2003      	movs	r0, #3
 80011ca:	f000 f8d8 	bl	800137e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ce:	200f      	movs	r0, #15
 80011d0:	f7ff fec4 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d4:	f7ff fda6 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40022000 	.word	0x40022000

080011e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x20>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_IncTick+0x24>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <HAL_IncTick+0x24>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008
 8001208:	20000220 	.word	0x20000220

0800120c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <HAL_GetTick+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000220 	.word	0x20000220

08001224 <__NVIC_SetPriorityGrouping>:
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800124c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	60d3      	str	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_GetPriorityGrouping>:
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_EnableIRQ>:
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db0b      	blt.n	80012b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <__NVIC_EnableIRQ+0x38>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_SetPriority>:
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	; (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff4c 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a6:	f7ff ff61 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	6978      	ldr	r0, [r7, #20]
 80013b2:	f7ff ffb1 	bl	8001318 <NVIC_EncodePriority>
 80013b6:	4602      	mov	r2, r0
 80013b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff80 	bl	80012c4 <__NVIC_SetPriority>
}
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff54 	bl	8001288 <__NVIC_EnableIRQ>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f6:	e14e      	b.n	8001696 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	2101      	movs	r1, #1
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	4013      	ands	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 8140 	beq.w	8001690 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b01      	cmp	r3, #1
 800141a:	d005      	beq.n	8001428 <HAL_GPIO_Init+0x40>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d130      	bne.n	800148a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800145e:	2201      	movs	r2, #1
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	f003 0201 	and.w	r2, r3, #1
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	2b03      	cmp	r3, #3
 8001494:	d017      	beq.n	80014c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d123      	bne.n	800151a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	08da      	lsrs	r2, r3, #3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3208      	adds	r2, #8
 80014da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	220f      	movs	r2, #15
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	691a      	ldr	r2, [r3, #16]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	08da      	lsrs	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3208      	adds	r2, #8
 8001514:	6939      	ldr	r1, [r7, #16]
 8001516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	2203      	movs	r2, #3
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0203 	and.w	r2, r3, #3
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 809a 	beq.w	8001690 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155c:	4b55      	ldr	r3, [pc, #340]	; (80016b4 <HAL_GPIO_Init+0x2cc>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a54      	ldr	r2, [pc, #336]	; (80016b4 <HAL_GPIO_Init+0x2cc>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b52      	ldr	r3, [pc, #328]	; (80016b4 <HAL_GPIO_Init+0x2cc>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001574:	4a50      	ldr	r2, [pc, #320]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	3302      	adds	r3, #2
 800157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	220f      	movs	r2, #15
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800159e:	d013      	beq.n	80015c8 <HAL_GPIO_Init+0x1e0>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a46      	ldr	r2, [pc, #280]	; (80016bc <HAL_GPIO_Init+0x2d4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d00d      	beq.n	80015c4 <HAL_GPIO_Init+0x1dc>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a45      	ldr	r2, [pc, #276]	; (80016c0 <HAL_GPIO_Init+0x2d8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d007      	beq.n	80015c0 <HAL_GPIO_Init+0x1d8>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a44      	ldr	r2, [pc, #272]	; (80016c4 <HAL_GPIO_Init+0x2dc>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d101      	bne.n	80015bc <HAL_GPIO_Init+0x1d4>
 80015b8:	2303      	movs	r3, #3
 80015ba:	e006      	b.n	80015ca <HAL_GPIO_Init+0x1e2>
 80015bc:	2305      	movs	r3, #5
 80015be:	e004      	b.n	80015ca <HAL_GPIO_Init+0x1e2>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e002      	b.n	80015ca <HAL_GPIO_Init+0x1e2>
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <HAL_GPIO_Init+0x1e2>
 80015c8:	2300      	movs	r3, #0
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	f002 0203 	and.w	r2, r2, #3
 80015d0:	0092      	lsls	r2, r2, #2
 80015d2:	4093      	lsls	r3, r2
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015da:	4937      	ldr	r1, [pc, #220]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	089b      	lsrs	r3, r3, #2
 80015e0:	3302      	adds	r3, #2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015e8:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <HAL_GPIO_Init+0x2e0>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800160c:	4a2e      	ldr	r2, [pc, #184]	; (80016c8 <HAL_GPIO_Init+0x2e0>)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001612:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <HAL_GPIO_Init+0x2e0>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001636:	4a24      	ldr	r2, [pc, #144]	; (80016c8 <HAL_GPIO_Init+0x2e0>)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800163c:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <HAL_GPIO_Init+0x2e0>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001660:	4a19      	ldr	r2, [pc, #100]	; (80016c8 <HAL_GPIO_Init+0x2e0>)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_GPIO_Init+0x2e0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800168a:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <HAL_GPIO_Init+0x2e0>)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3301      	adds	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	fa22 f303 	lsr.w	r3, r2, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f47f aea9 	bne.w	80013f8 <HAL_GPIO_Init+0x10>
  }
}
 80016a6:	bf00      	nop
 80016a8:	bf00      	nop
 80016aa:	371c      	adds	r7, #28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010000 	.word	0x40010000
 80016bc:	48000400 	.word	0x48000400
 80016c0:	48000800 	.word	0x48000800
 80016c4:	48000c00 	.word	0x48000c00
 80016c8:	40010400 	.word	0x40010400

080016cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	887b      	ldrh	r3, [r7, #2]
 80016de:	4013      	ands	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	e001      	b.n	80016ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	807b      	strh	r3, [r7, #2]
 8001708:	4613      	mov	r3, r2
 800170a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800170c:	787b      	ldrb	r3, [r7, #1]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001712:	887a      	ldrh	r2, [r7, #2]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001718:	e002      	b.n	8001720 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800171a:	887a      	ldrh	r2, [r7, #2]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	4013      	ands	r3, r2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d006      	beq.n	8001750 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff f8a4 	bl	8000898 <HAL_GPIO_EXTI_Callback>
  }
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40010400 	.word	0x40010400

0800175c <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40007000 	.word	0x40007000

0800177c <HAL_PWR_DisableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);  
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8001786:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40007000 	.word	0x40007000

0800179c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	f001 b823 	b.w	8002808 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 817d 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017d8:	4bbc      	ldr	r3, [pc, #752]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d00c      	beq.n	80017fe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017e4:	4bb9      	ldr	r3, [pc, #740]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d15c      	bne.n	80018aa <HAL_RCC_OscConfig+0x10e>
 80017f0:	4bb6      	ldr	r3, [pc, #728]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fc:	d155      	bne.n	80018aa <HAL_RCC_OscConfig+0x10e>
 80017fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001802:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001806:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800180a:	fa93 f3a3 	rbit	r3, r3
 800180e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8001812:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001816:	fab3 f383 	clz	r3, r3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	095b      	lsrs	r3, r3, #5
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b01      	cmp	r3, #1
 8001828:	d102      	bne.n	8001830 <HAL_RCC_OscConfig+0x94>
 800182a:	4ba8      	ldr	r3, [pc, #672]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	e015      	b.n	800185c <HAL_RCC_OscConfig+0xc0>
 8001830:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001834:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001838:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800183c:	fa93 f3a3 	rbit	r3, r3
 8001840:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001844:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001848:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800184c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001850:	fa93 f3a3 	rbit	r3, r3
 8001854:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001858:	4b9c      	ldr	r3, [pc, #624]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001860:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001864:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001868:	fa92 f2a2 	rbit	r2, r2
 800186c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001870:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001874:	fab2 f282 	clz	r2, r2
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	f042 0220 	orr.w	r2, r2, #32
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	f002 021f 	and.w	r2, r2, #31
 8001884:	2101      	movs	r1, #1
 8001886:	fa01 f202 	lsl.w	r2, r1, r2
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 811f 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x334>
 8001892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001896:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f040 8116 	bne.w	8001ad0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	f000 bfaf 	b.w	8002808 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x12e>
 80018bc:	4b83      	ldr	r3, [pc, #524]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a82      	ldr	r2, [pc, #520]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 80018c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	e036      	b.n	8001938 <HAL_RCC_OscConfig+0x19c>
 80018ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x158>
 80018da:	4b7c      	ldr	r3, [pc, #496]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a7b      	ldr	r2, [pc, #492]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 80018e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	4b79      	ldr	r3, [pc, #484]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a78      	ldr	r2, [pc, #480]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 80018ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	e021      	b.n	8001938 <HAL_RCC_OscConfig+0x19c>
 80018f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x184>
 8001906:	4b71      	ldr	r3, [pc, #452]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a70      	ldr	r2, [pc, #448]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 800190c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b6e      	ldr	r3, [pc, #440]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a6d      	ldr	r2, [pc, #436]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e00b      	b.n	8001938 <HAL_RCC_OscConfig+0x19c>
 8001920:	4b6a      	ldr	r3, [pc, #424]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a69      	ldr	r2, [pc, #420]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 8001926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b67      	ldr	r3, [pc, #412]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a66      	ldr	r2, [pc, #408]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 8001932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001936:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001938:	4b64      	ldr	r3, [pc, #400]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	f023 020f 	bic.w	r2, r3, #15
 8001940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001944:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	495f      	ldr	r1, [pc, #380]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 800194e:	4313      	orrs	r3, r2
 8001950:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001956:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d059      	beq.n	8001a16 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7ff fc53 	bl	800120c <HAL_GetTick>
 8001966:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	e00a      	b.n	8001982 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff fc4e 	bl	800120c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b64      	cmp	r3, #100	; 0x64
 800197a:	d902      	bls.n	8001982 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	f000 bf43 	b.w	8002808 <HAL_RCC_OscConfig+0x106c>
 8001982:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001986:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800198e:	fa93 f3a3 	rbit	r3, r3
 8001992:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001996:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	095b      	lsrs	r3, r3, #5
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d102      	bne.n	80019b4 <HAL_RCC_OscConfig+0x218>
 80019ae:	4b47      	ldr	r3, [pc, #284]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	e015      	b.n	80019e0 <HAL_RCC_OscConfig+0x244>
 80019b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019b8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80019c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019cc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80019d0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80019dc:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019e4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80019e8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80019ec:	fa92 f2a2 	rbit	r2, r2
 80019f0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80019f4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80019f8:	fab2 f282 	clz	r2, r2
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	f042 0220 	orr.w	r2, r2, #32
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	f002 021f 	and.w	r2, r2, #31
 8001a08:	2101      	movs	r1, #1
 8001a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0ab      	beq.n	800196c <HAL_RCC_OscConfig+0x1d0>
 8001a14:	e05d      	b.n	8001ad2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a16:	f7ff fbf9 	bl	800120c <HAL_GetTick>
 8001a1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fbf4 	bl	800120c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b64      	cmp	r3, #100	; 0x64
 8001a2e:	d902      	bls.n	8001a36 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	f000 bee9 	b.w	8002808 <HAL_RCC_OscConfig+0x106c>
 8001a36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a3a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001a4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	095b      	lsrs	r3, r3, #5
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d102      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2cc>
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	e015      	b.n	8001a94 <HAL_RCC_OscConfig+0x2f8>
 8001a68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a6c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a74:	fa93 f3a3 	rbit	r3, r3
 8001a78:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a80:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a84:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <HAL_RCC_OscConfig+0x330>)
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a98:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001a9c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001aa0:	fa92 f2a2 	rbit	r2, r2
 8001aa4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001aa8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001aac:	fab2 f282 	clz	r2, r2
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	f042 0220 	orr.w	r2, r2, #32
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	f002 021f 	and.w	r2, r2, #31
 8001abc:	2101      	movs	r1, #1
 8001abe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1ab      	bne.n	8001a20 <HAL_RCC_OscConfig+0x284>
 8001ac8:	e003      	b.n	8001ad2 <HAL_RCC_OscConfig+0x336>
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 817d 	beq.w	8001de2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ae8:	4ba6      	ldr	r3, [pc, #664]	; (8001d84 <HAL_RCC_OscConfig+0x5e8>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00b      	beq.n	8001b0c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001af4:	4ba3      	ldr	r3, [pc, #652]	; (8001d84 <HAL_RCC_OscConfig+0x5e8>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d172      	bne.n	8001be6 <HAL_RCC_OscConfig+0x44a>
 8001b00:	4ba0      	ldr	r3, [pc, #640]	; (8001d84 <HAL_RCC_OscConfig+0x5e8>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d16c      	bne.n	8001be6 <HAL_RCC_OscConfig+0x44a>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b16:	fa93 f3a3 	rbit	r3, r3
 8001b1a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001b1e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	fab3 f383 	clz	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	095b      	lsrs	r3, r3, #5
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d102      	bne.n	8001b3c <HAL_RCC_OscConfig+0x3a0>
 8001b36:	4b93      	ldr	r3, [pc, #588]	; (8001d84 <HAL_RCC_OscConfig+0x5e8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	e013      	b.n	8001b64 <HAL_RCC_OscConfig+0x3c8>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b4e:	2302      	movs	r3, #2
 8001b50:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b54:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001b60:	4b88      	ldr	r3, [pc, #544]	; (8001d84 <HAL_RCC_OscConfig+0x5e8>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	2202      	movs	r2, #2
 8001b66:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001b6a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b6e:	fa92 f2a2 	rbit	r2, r2
 8001b72:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001b76:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b7a:	fab2 f282 	clz	r2, r2
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	f042 0220 	orr.w	r2, r2, #32
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	f002 021f 	and.w	r2, r2, #31
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00a      	beq.n	8001bac <HAL_RCC_OscConfig+0x410>
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d002      	beq.n	8001bac <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f000 be2e 	b.w	8002808 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bac:	4b75      	ldr	r3, [pc, #468]	; (8001d84 <HAL_RCC_OscConfig+0x5e8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	21f8      	movs	r1, #248	; 0xf8
 8001bc2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001bca:	fa91 f1a1 	rbit	r1, r1
 8001bce:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001bd2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001bd6:	fab1 f181 	clz	r1, r1
 8001bda:	b2c9      	uxtb	r1, r1
 8001bdc:	408b      	lsls	r3, r1
 8001bde:	4969      	ldr	r1, [pc, #420]	; (8001d84 <HAL_RCC_OscConfig+0x5e8>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be4:	e0fd      	b.n	8001de2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 8088 	beq.w	8001d08 <HAL_RCC_OscConfig+0x56c>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001c0a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c0e:	fab3 f383 	clz	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	461a      	mov	r2, r3
 8001c20:	2301      	movs	r3, #1
 8001c22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff faf2 	bl	800120c <HAL_GetTick>
 8001c28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2e:	f7ff faed 	bl	800120c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d902      	bls.n	8001c44 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	f000 bde2 	b.w	8002808 <HAL_RCC_OscConfig+0x106c>
 8001c44:	2302      	movs	r3, #2
 8001c46:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001c4e:	fa93 f3a3 	rbit	r3, r3
 8001c52:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001c56:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	095b      	lsrs	r3, r3, #5
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d102      	bne.n	8001c74 <HAL_RCC_OscConfig+0x4d8>
 8001c6e:	4b45      	ldr	r3, [pc, #276]	; (8001d84 <HAL_RCC_OscConfig+0x5e8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	e013      	b.n	8001c9c <HAL_RCC_OscConfig+0x500>
 8001c74:	2302      	movs	r3, #2
 8001c76:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c86:	2302      	movs	r3, #2
 8001c88:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c8c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c98:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <HAL_RCC_OscConfig+0x5e8>)
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001ca2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ca6:	fa92 f2a2 	rbit	r2, r2
 8001caa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001cae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001cb2:	fab2 f282 	clz	r2, r2
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	f042 0220 	orr.w	r2, r2, #32
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	f002 021f 	and.w	r2, r2, #31
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0af      	beq.n	8001c2e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cce:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <HAL_RCC_OscConfig+0x5e8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	21f8      	movs	r1, #248	; 0xf8
 8001ce4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001cec:	fa91 f1a1 	rbit	r1, r1
 8001cf0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001cf4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001cf8:	fab1 f181 	clz	r1, r1
 8001cfc:	b2c9      	uxtb	r1, r1
 8001cfe:	408b      	lsls	r3, r1
 8001d00:	4920      	ldr	r1, [pc, #128]	; (8001d84 <HAL_RCC_OscConfig+0x5e8>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
 8001d06:	e06c      	b.n	8001de2 <HAL_RCC_OscConfig+0x646>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001d1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	461a      	mov	r2, r3
 8001d30:	2300      	movs	r3, #0
 8001d32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff fa6a 	bl	800120c <HAL_GetTick>
 8001d38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3c:	e00a      	b.n	8001d54 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fa65 	bl	800120c <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d902      	bls.n	8001d54 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	f000 bd5a 	b.w	8002808 <HAL_RCC_OscConfig+0x106c>
 8001d54:	2302      	movs	r3, #2
 8001d56:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	095b      	lsrs	r3, r3, #5
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d104      	bne.n	8001d88 <HAL_RCC_OscConfig+0x5ec>
 8001d7e:	4b01      	ldr	r3, [pc, #4]	; (8001d84 <HAL_RCC_OscConfig+0x5e8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	e015      	b.n	8001db0 <HAL_RCC_OscConfig+0x614>
 8001d84:	40021000 	.word	0x40021000
 8001d88:	2302      	movs	r3, #2
 8001d8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001da0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001dac:	4bc8      	ldr	r3, [pc, #800]	; (80020d0 <HAL_RCC_OscConfig+0x934>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	2202      	movs	r2, #2
 8001db2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001db6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001dba:	fa92 f2a2 	rbit	r2, r2
 8001dbe:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001dc2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001dc6:	fab2 f282 	clz	r2, r2
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	f042 0220 	orr.w	r2, r2, #32
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	f002 021f 	and.w	r2, r2, #31
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1ad      	bne.n	8001d3e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8110 	beq.w	8002018 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d079      	beq.n	8001efc <HAL_RCC_OscConfig+0x760>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	4bab      	ldr	r3, [pc, #684]	; (80020d4 <HAL_RCC_OscConfig+0x938>)
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	2301      	movs	r3, #1
 8001e30:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e32:	f7ff f9eb 	bl	800120c <HAL_GetTick>
 8001e36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	e00a      	b.n	8001e52 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7ff f9e6 	bl	800120c <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d902      	bls.n	8001e52 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	f000 bcdb 	b.w	8002808 <HAL_RCC_OscConfig+0x106c>
 8001e52:	2302      	movs	r3, #2
 8001e54:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e68:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e74:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	fa93 f2a3 	rbit	r2, r3
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e90:	2202      	movs	r2, #2
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	fa93 f2a3 	rbit	r2, r3
 8001ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001eaa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eac:	4b88      	ldr	r3, [pc, #544]	; (80020d0 <HAL_RCC_OscConfig+0x934>)
 8001eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001eb8:	2102      	movs	r1, #2
 8001eba:	6019      	str	r1, [r3, #0]
 8001ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	fa93 f1a3 	rbit	r1, r3
 8001eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ece:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ed2:	6019      	str	r1, [r3, #0]
  return result;
 8001ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	2101      	movs	r1, #1
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0a0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x6a0>
 8001efa:	e08d      	b.n	8002018 <HAL_RCC_OscConfig+0x87c>
 8001efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f00:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f04:	2201      	movs	r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	fa93 f2a3 	rbit	r2, r3
 8001f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f1e:	601a      	str	r2, [r3, #0]
  return result;
 8001f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f24:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f28:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b68      	ldr	r3, [pc, #416]	; (80020d4 <HAL_RCC_OscConfig+0x938>)
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff f965 	bl	800120c <HAL_GetTick>
 8001f42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f46:	e00a      	b.n	8001f5e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f48:	f7ff f960 	bl	800120c <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d902      	bls.n	8001f5e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	f000 bc55 	b.w	8002808 <HAL_RCC_OscConfig+0x106c>
 8001f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f62:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f66:	2202      	movs	r2, #2
 8001f68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	fa93 f2a3 	rbit	r2, r3
 8001f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f86:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	fa93 f2a3 	rbit	r2, r3
 8001f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001fae:	2202      	movs	r2, #2
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	fa93 f2a3 	rbit	r2, r3
 8001fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001fc8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <HAL_RCC_OscConfig+0x934>)
 8001fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001fd6:	2102      	movs	r1, #2
 8001fd8:	6019      	str	r1, [r3, #0]
 8001fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fde:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	fa93 f1a3 	rbit	r1, r3
 8001fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ff0:	6019      	str	r1, [r3, #0]
  return result;
 8001ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	fab3 f383 	clz	r3, r3
 8002000:	b2db      	uxtb	r3, r3
 8002002:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	2101      	movs	r1, #1
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d197      	bne.n	8001f48 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 81a1 	beq.w	8002370 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002034:	4b26      	ldr	r3, [pc, #152]	; (80020d0 <HAL_RCC_OscConfig+0x934>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d116      	bne.n	800206e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <HAL_RCC_OscConfig+0x934>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	4a22      	ldr	r2, [pc, #136]	; (80020d0 <HAL_RCC_OscConfig+0x934>)
 8002046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204a:	61d3      	str	r3, [r2, #28]
 800204c:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <HAL_RCC_OscConfig+0x934>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002058:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002062:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002066:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002068:	2301      	movs	r3, #1
 800206a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <HAL_RCC_OscConfig+0x93c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d11a      	bne.n	80020b0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_RCC_OscConfig+0x93c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <HAL_RCC_OscConfig+0x93c>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002084:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002086:	f7ff f8c1 	bl	800120c <HAL_GetTick>
 800208a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208e:	e009      	b.n	80020a4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002090:	f7ff f8bc 	bl	800120c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b64      	cmp	r3, #100	; 0x64
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e3b1      	b.n	8002808 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <HAL_RCC_OscConfig+0x93c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0ef      	beq.n	8002090 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d10d      	bne.n	80020dc <HAL_RCC_OscConfig+0x940>
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <HAL_RCC_OscConfig+0x934>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4a02      	ldr	r2, [pc, #8]	; (80020d0 <HAL_RCC_OscConfig+0x934>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6213      	str	r3, [r2, #32]
 80020cc:	e03c      	b.n	8002148 <HAL_RCC_OscConfig+0x9ac>
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	10908120 	.word	0x10908120
 80020d8:	40007000 	.word	0x40007000
 80020dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10c      	bne.n	8002106 <HAL_RCC_OscConfig+0x96a>
 80020ec:	4bc1      	ldr	r3, [pc, #772]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4ac0      	ldr	r2, [pc, #768]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 80020f2:	f023 0301 	bic.w	r3, r3, #1
 80020f6:	6213      	str	r3, [r2, #32]
 80020f8:	4bbe      	ldr	r3, [pc, #760]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4abd      	ldr	r2, [pc, #756]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 80020fe:	f023 0304 	bic.w	r3, r3, #4
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	e020      	b.n	8002148 <HAL_RCC_OscConfig+0x9ac>
 8002106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b05      	cmp	r3, #5
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x994>
 8002116:	4bb7      	ldr	r3, [pc, #732]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4ab6      	ldr	r2, [pc, #728]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	6213      	str	r3, [r2, #32]
 8002122:	4bb4      	ldr	r3, [pc, #720]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4ab3      	ldr	r2, [pc, #716]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6213      	str	r3, [r2, #32]
 800212e:	e00b      	b.n	8002148 <HAL_RCC_OscConfig+0x9ac>
 8002130:	4bb0      	ldr	r3, [pc, #704]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4aaf      	ldr	r2, [pc, #700]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 8002136:	f023 0301 	bic.w	r3, r3, #1
 800213a:	6213      	str	r3, [r2, #32]
 800213c:	4bad      	ldr	r3, [pc, #692]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4aac      	ldr	r2, [pc, #688]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 8002142:	f023 0304 	bic.w	r3, r3, #4
 8002146:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8081 	beq.w	800225c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215a:	f7ff f857 	bl	800120c <HAL_GetTick>
 800215e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002164:	f7ff f852 	bl	800120c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f241 3288 	movw	r2, #5000	; 0x1388
 8002174:	4293      	cmp	r3, r2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e345      	b.n	8002808 <HAL_RCC_OscConfig+0x106c>
 800217c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002180:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002184:	2202      	movs	r2, #2
 8002186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	fa93 f2a3 	rbit	r2, r3
 8002196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80021a8:	2202      	movs	r2, #2
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	fa93 f2a3 	rbit	r2, r3
 80021ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021be:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80021c2:	601a      	str	r2, [r3, #0]
  return result;
 80021c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80021cc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d102      	bne.n	80021e8 <HAL_RCC_OscConfig+0xa4c>
 80021e2:	4b84      	ldr	r3, [pc, #528]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	e013      	b.n	8002210 <HAL_RCC_OscConfig+0xa74>
 80021e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80021f0:	2202      	movs	r2, #2
 80021f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	fa93 f2a3 	rbit	r2, r3
 8002202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002206:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	4b79      	ldr	r3, [pc, #484]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002214:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002218:	2102      	movs	r1, #2
 800221a:	6011      	str	r1, [r2, #0]
 800221c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002220:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	fa92 f1a2 	rbit	r1, r2
 800222a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800222e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002232:	6011      	str	r1, [r2, #0]
  return result;
 8002234:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002238:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	fab2 f282 	clz	r2, r2
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	f002 021f 	and.w	r2, r2, #31
 800224e:	2101      	movs	r1, #1
 8002250:	fa01 f202 	lsl.w	r2, r1, r2
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d084      	beq.n	8002164 <HAL_RCC_OscConfig+0x9c8>
 800225a:	e07f      	b.n	800235c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225c:	f7fe ffd6 	bl	800120c <HAL_GetTick>
 8002260:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002264:	e00b      	b.n	800227e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f7fe ffd1 	bl	800120c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	; 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e2c4      	b.n	8002808 <HAL_RCC_OscConfig+0x106c>
 800227e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002282:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002286:	2202      	movs	r2, #2
 8002288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	fa93 f2a3 	rbit	r2, r3
 8002298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80022aa:	2202      	movs	r2, #2
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	fa93 f2a3 	rbit	r2, r3
 80022bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80022c4:	601a      	str	r2, [r3, #0]
  return result;
 80022c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ca:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80022ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	f043 0302 	orr.w	r3, r3, #2
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d102      	bne.n	80022ea <HAL_RCC_OscConfig+0xb4e>
 80022e4:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	e013      	b.n	8002312 <HAL_RCC_OscConfig+0xb76>
 80022ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80022f2:	2202      	movs	r2, #2
 80022f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	fa93 f2a3 	rbit	r2, r3
 8002304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002308:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	4b39      	ldr	r3, [pc, #228]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002316:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800231a:	2102      	movs	r1, #2
 800231c:	6011      	str	r1, [r2, #0]
 800231e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002322:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	fa92 f1a2 	rbit	r1, r2
 800232c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002330:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002334:	6011      	str	r1, [r2, #0]
  return result;
 8002336:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800233a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	fab2 f282 	clz	r2, r2
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	f002 021f 	and.w	r2, r2, #31
 8002350:	2101      	movs	r1, #1
 8002352:	fa01 f202 	lsl.w	r2, r1, r2
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d184      	bne.n	8002266 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800235c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002360:	2b01      	cmp	r3, #1
 8002362:	d105      	bne.n	8002370 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002364:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 800236a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002374:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 8242 	beq.w	8002806 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_RCC_OscConfig+0xc58>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b08      	cmp	r3, #8
 800238c:	f000 8213 	beq.w	80027b6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002394:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	2b02      	cmp	r3, #2
 800239e:	f040 8162 	bne.w	8002666 <HAL_RCC_OscConfig+0xeca>
 80023a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80023aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	fa93 f2a3 	rbit	r2, r3
 80023be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80023c6:	601a      	str	r2, [r3, #0]
  return result;
 80023c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023cc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80023d0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	461a      	mov	r2, r3
 80023e4:	2300      	movs	r3, #0
 80023e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7fe ff10 	bl	800120c <HAL_GetTick>
 80023ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f0:	e00c      	b.n	800240c <HAL_RCC_OscConfig+0xc70>
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f8:	f7fe ff08 	bl	800120c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e1fd      	b.n	8002808 <HAL_RCC_OscConfig+0x106c>
 800240c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002410:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002414:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	fa93 f2a3 	rbit	r2, r3
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002430:	601a      	str	r2, [r3, #0]
  return result;
 8002432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002436:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800243a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d102      	bne.n	8002456 <HAL_RCC_OscConfig+0xcba>
 8002450:	4bb0      	ldr	r3, [pc, #704]	; (8002714 <HAL_RCC_OscConfig+0xf78>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	e027      	b.n	80024a6 <HAL_RCC_OscConfig+0xd0a>
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800245e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002468:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	fa93 f2a3 	rbit	r2, r3
 8002472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002476:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002480:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002484:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	fa93 f2a3 	rbit	r2, r3
 8002498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	4b9c      	ldr	r3, [pc, #624]	; (8002714 <HAL_RCC_OscConfig+0xf78>)
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024aa:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80024ae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024b2:	6011      	str	r1, [r2, #0]
 80024b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024b8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	fa92 f1a2 	rbit	r1, r2
 80024c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024c6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80024ca:	6011      	str	r1, [r2, #0]
  return result;
 80024cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024d0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	fab2 f282 	clz	r2, r2
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	f042 0220 	orr.w	r2, r2, #32
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f002 021f 	and.w	r2, r2, #31
 80024e6:	2101      	movs	r1, #1
 80024e8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d182      	bne.n	80023f8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f2:	4b88      	ldr	r3, [pc, #544]	; (8002714 <HAL_RCC_OscConfig+0xf78>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	430b      	orrs	r3, r1
 8002514:	497f      	ldr	r1, [pc, #508]	; (8002714 <HAL_RCC_OscConfig+0xf78>)
 8002516:	4313      	orrs	r3, r2
 8002518:	604b      	str	r3, [r1, #4]
 800251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002522:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	fa93 f2a3 	rbit	r2, r3
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800253e:	601a      	str	r2, [r3, #0]
  return result;
 8002540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002544:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002548:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002554:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	461a      	mov	r2, r3
 800255c:	2301      	movs	r3, #1
 800255e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe fe54 	bl	800120c <HAL_GetTick>
 8002564:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002568:	e009      	b.n	800257e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256a:	f7fe fe4f 	bl	800120c <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e144      	b.n	8002808 <HAL_RCC_OscConfig+0x106c>
 800257e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002582:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002586:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800258a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002590:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	fa93 f2a3 	rbit	r2, r3
 800259a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80025a2:	601a      	str	r2, [r3, #0]
  return result;
 80025a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80025ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d102      	bne.n	80025c8 <HAL_RCC_OscConfig+0xe2c>
 80025c2:	4b54      	ldr	r3, [pc, #336]	; (8002714 <HAL_RCC_OscConfig+0xf78>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	e027      	b.n	8002618 <HAL_RCC_OscConfig+0xe7c>
 80025c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025cc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80025d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025da:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	fa93 f2a3 	rbit	r2, r3
 80025e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80025f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002600:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	fa93 f2a3 	rbit	r2, r3
 800260a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	4b3f      	ldr	r3, [pc, #252]	; (8002714 <HAL_RCC_OscConfig+0xf78>)
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800261c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002620:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002624:	6011      	str	r1, [r2, #0]
 8002626:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800262a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	fa92 f1a2 	rbit	r1, r2
 8002634:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002638:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800263c:	6011      	str	r1, [r2, #0]
  return result;
 800263e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002642:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	fab2 f282 	clz	r2, r2
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	f042 0220 	orr.w	r2, r2, #32
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	f002 021f 	and.w	r2, r2, #31
 8002658:	2101      	movs	r1, #1
 800265a:	fa01 f202 	lsl.w	r2, r1, r2
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d082      	beq.n	800256a <HAL_RCC_OscConfig+0xdce>
 8002664:	e0cf      	b.n	8002806 <HAL_RCC_OscConfig+0x106a>
 8002666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800266e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002672:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002678:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	fa93 f2a3 	rbit	r2, r3
 8002682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002686:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800268a:	601a      	str	r2, [r3, #0]
  return result;
 800268c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002690:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002694:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002696:	fab3 f383 	clz	r3, r3
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	461a      	mov	r2, r3
 80026a8:	2300      	movs	r3, #0
 80026aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7fe fdae 	bl	800120c <HAL_GetTick>
 80026b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b4:	e009      	b.n	80026ca <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b6:	f7fe fda9 	bl	800120c <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e09e      	b.n	8002808 <HAL_RCC_OscConfig+0x106c>
 80026ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ce:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80026d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026dc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	fa93 f2a3 	rbit	r2, r3
 80026e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026ee:	601a      	str	r2, [r3, #0]
  return result;
 80026f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	095b      	lsrs	r3, r3, #5
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d104      	bne.n	8002718 <HAL_RCC_OscConfig+0xf7c>
 800270e:	4b01      	ldr	r3, [pc, #4]	; (8002714 <HAL_RCC_OscConfig+0xf78>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	e029      	b.n	8002768 <HAL_RCC_OscConfig+0xfcc>
 8002714:	40021000 	.word	0x40021000
 8002718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002720:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002724:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	fa93 f2a3 	rbit	r2, r3
 8002734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002738:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002742:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002746:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002750:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	fa93 f2a3 	rbit	r2, r3
 800275a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	4b2b      	ldr	r3, [pc, #172]	; (8002814 <HAL_RCC_OscConfig+0x1078>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800276c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002770:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002774:	6011      	str	r1, [r2, #0]
 8002776:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800277a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	fa92 f1a2 	rbit	r1, r2
 8002784:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002788:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800278c:	6011      	str	r1, [r2, #0]
  return result;
 800278e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002792:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	fab2 f282 	clz	r2, r2
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	f042 0220 	orr.w	r2, r2, #32
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	f002 021f 	and.w	r2, r2, #31
 80027a8:	2101      	movs	r1, #1
 80027aa:	fa01 f202 	lsl.w	r2, r1, r2
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d180      	bne.n	80026b6 <HAL_RCC_OscConfig+0xf1a>
 80027b4:	e027      	b.n	8002806 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e01e      	b.n	8002808 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027ca:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_RCC_OscConfig+0x1078>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027d6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d10b      	bne.n	8002802 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80027ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027fe:	429a      	cmp	r2, r3
 8002800:	d001      	beq.n	8002806 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000

08002818 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b09e      	sub	sp, #120	; 0x78
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002822:	2300      	movs	r3, #0
 8002824:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e162      	b.n	8002af6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002830:	4b90      	ldr	r3, [pc, #576]	; (8002a74 <HAL_RCC_ClockConfig+0x25c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d910      	bls.n	8002860 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b8d      	ldr	r3, [pc, #564]	; (8002a74 <HAL_RCC_ClockConfig+0x25c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 0207 	bic.w	r2, r3, #7
 8002846:	498b      	ldr	r1, [pc, #556]	; (8002a74 <HAL_RCC_ClockConfig+0x25c>)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b89      	ldr	r3, [pc, #548]	; (8002a74 <HAL_RCC_ClockConfig+0x25c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e14a      	b.n	8002af6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800286c:	4b82      	ldr	r3, [pc, #520]	; (8002a78 <HAL_RCC_ClockConfig+0x260>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	497f      	ldr	r1, [pc, #508]	; (8002a78 <HAL_RCC_ClockConfig+0x260>)
 800287a:	4313      	orrs	r3, r2
 800287c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 80dc 	beq.w	8002a44 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d13c      	bne.n	800290e <HAL_RCC_ClockConfig+0xf6>
 8002894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002898:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800289c:	fa93 f3a3 	rbit	r3, r3
 80028a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80028a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d102      	bne.n	80028be <HAL_RCC_ClockConfig+0xa6>
 80028b8:	4b6f      	ldr	r3, [pc, #444]	; (8002a78 <HAL_RCC_ClockConfig+0x260>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	e00f      	b.n	80028de <HAL_RCC_ClockConfig+0xc6>
 80028be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	667b      	str	r3, [r7, #100]	; 0x64
 80028cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028d0:	663b      	str	r3, [r7, #96]	; 0x60
 80028d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028da:	4b67      	ldr	r3, [pc, #412]	; (8002a78 <HAL_RCC_ClockConfig+0x260>)
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80028e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028e6:	fa92 f2a2 	rbit	r2, r2
 80028ea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80028ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028ee:	fab2 f282 	clz	r2, r2
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	f042 0220 	orr.w	r2, r2, #32
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	f002 021f 	and.w	r2, r2, #31
 80028fe:	2101      	movs	r1, #1
 8002900:	fa01 f202 	lsl.w	r2, r1, r2
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d17b      	bne.n	8002a02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e0f3      	b.n	8002af6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d13c      	bne.n	8002990 <HAL_RCC_ClockConfig+0x178>
 8002916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800291a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	095b      	lsrs	r3, r3, #5
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d102      	bne.n	8002940 <HAL_RCC_ClockConfig+0x128>
 800293a:	4b4f      	ldr	r3, [pc, #316]	; (8002a78 <HAL_RCC_ClockConfig+0x260>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	e00f      	b.n	8002960 <HAL_RCC_ClockConfig+0x148>
 8002940:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002944:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002948:	fa93 f3a3 	rbit	r3, r3
 800294c:	647b      	str	r3, [r7, #68]	; 0x44
 800294e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002952:	643b      	str	r3, [r7, #64]	; 0x40
 8002954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800295c:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <HAL_RCC_ClockConfig+0x260>)
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002964:	63ba      	str	r2, [r7, #56]	; 0x38
 8002966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002968:	fa92 f2a2 	rbit	r2, r2
 800296c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800296e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002970:	fab2 f282 	clz	r2, r2
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	f042 0220 	orr.w	r2, r2, #32
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	f002 021f 	and.w	r2, r2, #31
 8002980:	2101      	movs	r1, #1
 8002982:	fa01 f202 	lsl.w	r2, r1, r2
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d13a      	bne.n	8002a02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0b2      	b.n	8002af6 <HAL_RCC_ClockConfig+0x2de>
 8002990:	2302      	movs	r3, #2
 8002992:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800299c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d102      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x1a0>
 80029b2:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <HAL_RCC_ClockConfig+0x260>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	e00d      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1bc>
 80029b8:	2302      	movs	r3, #2
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
 80029c4:	2302      	movs	r3, #2
 80029c6:	623b      	str	r3, [r7, #32]
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	61fb      	str	r3, [r7, #28]
 80029d0:	4b29      	ldr	r3, [pc, #164]	; (8002a78 <HAL_RCC_ClockConfig+0x260>)
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	2202      	movs	r2, #2
 80029d6:	61ba      	str	r2, [r7, #24]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	fa92 f2a2 	rbit	r2, r2
 80029de:	617a      	str	r2, [r7, #20]
  return result;
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	fab2 f282 	clz	r2, r2
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	f042 0220 	orr.w	r2, r2, #32
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	f002 021f 	and.w	r2, r2, #31
 80029f2:	2101      	movs	r1, #1
 80029f4:	fa01 f202 	lsl.w	r2, r1, r2
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e079      	b.n	8002af6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a02:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <HAL_RCC_ClockConfig+0x260>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f023 0203 	bic.w	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	491a      	ldr	r1, [pc, #104]	; (8002a78 <HAL_RCC_ClockConfig+0x260>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a14:	f7fe fbfa 	bl	800120c <HAL_GetTick>
 8002a18:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1c:	f7fe fbf6 	bl	800120c <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e061      	b.n	8002af6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_RCC_ClockConfig+0x260>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 020c 	and.w	r2, r3, #12
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d1eb      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_ClockConfig+0x25c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d214      	bcs.n	8002a7c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_RCC_ClockConfig+0x25c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 0207 	bic.w	r2, r3, #7
 8002a5a:	4906      	ldr	r1, [pc, #24]	; (8002a74 <HAL_RCC_ClockConfig+0x25c>)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <HAL_RCC_ClockConfig+0x25c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e040      	b.n	8002af6 <HAL_RCC_ClockConfig+0x2de>
 8002a74:	40022000 	.word	0x40022000
 8002a78:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a88:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <HAL_RCC_ClockConfig+0x2e8>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	491a      	ldr	r1, [pc, #104]	; (8002b00 <HAL_RCC_ClockConfig+0x2e8>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa6:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <HAL_RCC_ClockConfig+0x2e8>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4912      	ldr	r1, [pc, #72]	; (8002b00 <HAL_RCC_ClockConfig+0x2e8>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002aba:	f000 f829 	bl	8002b10 <HAL_RCC_GetSysClockFreq>
 8002abe:	4601      	mov	r1, r0
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <HAL_RCC_ClockConfig+0x2e8>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ac8:	22f0      	movs	r2, #240	; 0xf0
 8002aca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	fa92 f2a2 	rbit	r2, r2
 8002ad2:	60fa      	str	r2, [r7, #12]
  return result;
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	fab2 f282 	clz	r2, r2
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	40d3      	lsrs	r3, r2
 8002ade:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <HAL_RCC_ClockConfig+0x2ec>)
 8002ae0:	5cd3      	ldrb	r3, [r2, r3]
 8002ae2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ae6:	4a08      	ldr	r2, [pc, #32]	; (8002b08 <HAL_RCC_ClockConfig+0x2f0>)
 8002ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <HAL_RCC_ClockConfig+0x2f4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe fa34 	bl	8000f5c <HAL_InitTick>
  
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3778      	adds	r7, #120	; 0x78
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000
 8002b04:	08008c80 	.word	0x08008c80
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	20000004 	.word	0x20000004

08002b10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b08b      	sub	sp, #44	; 0x2c
 8002b14:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b2a:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d002      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x30>
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d003      	beq.n	8002b46 <HAL_RCC_GetSysClockFreq+0x36>
 8002b3e:	e03c      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b40:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b42:	623b      	str	r3, [r7, #32]
      break;
 8002b44:	e03c      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b4c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b50:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	fa92 f2a2 	rbit	r2, r2
 8002b58:	607a      	str	r2, [r7, #4]
  return result;
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	fab2 f282 	clz	r2, r2
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	40d3      	lsrs	r3, r2
 8002b64:	4a1c      	ldr	r2, [pc, #112]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b66:	5cd3      	ldrb	r3, [r2, r3]
 8002b68:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b6a:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	220f      	movs	r2, #15
 8002b74:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	fa92 f2a2 	rbit	r2, r2
 8002b7c:	60fa      	str	r2, [r7, #12]
  return result;
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	fab2 f282 	clz	r2, r2
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	40d3      	lsrs	r3, r2
 8002b88:	4a14      	ldr	r2, [pc, #80]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b8a:	5cd3      	ldrb	r3, [r2, r3]
 8002b8c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b98:	4a0e      	ldr	r2, [pc, #56]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba8:	e004      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	4a0c      	ldr	r2, [pc, #48]	; (8002be0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	623b      	str	r3, [r7, #32]
      break;
 8002bb8:	e002      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bbc:	623b      	str	r3, [r7, #32]
      break;
 8002bbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	372c      	adds	r7, #44	; 0x2c
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	007a1200 	.word	0x007a1200
 8002bd8:	08008c98 	.word	0x08008c98
 8002bdc:	08008ca8 	.word	0x08008ca8
 8002be0:	003d0900 	.word	0x003d0900

08002be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000000 	.word	0x20000000

08002bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c02:	f7ff ffef 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8002c06:	4601      	mov	r1, r0
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c10:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	fa92 f2a2 	rbit	r2, r2
 8002c1c:	603a      	str	r2, [r7, #0]
  return result;
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	fab2 f282 	clz	r2, r2
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	40d3      	lsrs	r3, r2
 8002c28:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c2a:	5cd3      	ldrb	r3, [r2, r3]
 8002c2c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	08008c90 	.word	0x08008c90

08002c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002c46:	f7ff ffcd 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8002c4a:	4601      	mov	r1, r0
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002c54:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	fa92 f2a2 	rbit	r2, r2
 8002c60:	603a      	str	r2, [r7, #0]
  return result;
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	fab2 f282 	clz	r2, r2
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	40d3      	lsrs	r3, r2
 8002c6c:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c6e:	5cd3      	ldrb	r3, [r2, r3]
 8002c70:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	08008c90 	.word	0x08008c90

08002c84 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	220f      	movs	r2, #15
 8002c92:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c94:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0203 	and.w	r2, r3, #3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002cb8:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	08db      	lsrs	r3, r3, #3
 8002cbe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002cc6:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <HAL_RCC_GetClockConfig+0x60>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0207 	and.w	r2, r3, #7
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	601a      	str	r2, [r3, #0]
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40022000 	.word	0x40022000

08002ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b092      	sub	sp, #72	; 0x48
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80d4 	beq.w	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0c:	4b4e      	ldr	r3, [pc, #312]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10e      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d18:	4b4b      	ldr	r3, [pc, #300]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	4a4a      	ldr	r2, [pc, #296]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d22:	61d3      	str	r3, [r2, #28]
 8002d24:	4b48      	ldr	r3, [pc, #288]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d36:	4b45      	ldr	r3, [pc, #276]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d118      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d42:	4b42      	ldr	r3, [pc, #264]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a41      	ldr	r2, [pc, #260]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fa5d 	bl	800120c <HAL_GetTick>
 8002d52:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	e008      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d56:	f7fe fa59 	bl	800120c <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b64      	cmp	r3, #100	; 0x64
 8002d62:	d901      	bls.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e14b      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	4b38      	ldr	r3, [pc, #224]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d74:	4b34      	ldr	r3, [pc, #208]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 8084 	beq.w	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d07c      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d94:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002da2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	461a      	mov	r2, r3
 8002de2:	2300      	movs	r3, #0
 8002de4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002de6:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d04b      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df6:	f7fe fa09 	bl	800120c <HAL_GetTick>
 8002dfa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fe fa05 	bl	800120c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e0f5      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002e14:	2302      	movs	r3, #2
 8002e16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e20:	2302      	movs	r3, #2
 8002e22:	623b      	str	r3, [r7, #32]
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	61fb      	str	r3, [r7, #28]
  return result;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f043 0302 	orr.w	r3, r3, #2
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d108      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e42:	4b01      	ldr	r3, [pc, #4]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	e00d      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	10908100 	.word	0x10908100
 8002e54:	2302      	movs	r3, #2
 8002e56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	4b69      	ldr	r3, [pc, #420]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	2202      	movs	r2, #2
 8002e66:	613a      	str	r2, [r7, #16]
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	fa92 f2a2 	rbit	r2, r2
 8002e6e:	60fa      	str	r2, [r7, #12]
  return result;
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	fab2 f282 	clz	r2, r2
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	f002 021f 	and.w	r2, r2, #31
 8002e82:	2101      	movs	r1, #1
 8002e84:	fa01 f202 	lsl.w	r2, r1, r2
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0b7      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e8e:	4b5e      	ldr	r3, [pc, #376]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	495b      	ldr	r1, [pc, #364]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ea0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d105      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea8:	4b57      	ldr	r3, [pc, #348]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	4a56      	ldr	r2, [pc, #344]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ec0:	4b51      	ldr	r3, [pc, #324]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	f023 0203 	bic.w	r2, r3, #3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	494e      	ldr	r1, [pc, #312]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ede:	4b4a      	ldr	r3, [pc, #296]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	f023 0210 	bic.w	r2, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	4947      	ldr	r1, [pc, #284]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002efc:	4b42      	ldr	r3, [pc, #264]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	493f      	ldr	r1, [pc, #252]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d008      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f1a:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f023 0220 	bic.w	r2, r3, #32
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	4938      	ldr	r1, [pc, #224]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f38:	4b33      	ldr	r3, [pc, #204]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	4930      	ldr	r1, [pc, #192]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f56:	4b2c      	ldr	r3, [pc, #176]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	4929      	ldr	r1, [pc, #164]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002f74:	4b24      	ldr	r3, [pc, #144]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	4921      	ldr	r1, [pc, #132]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f92:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	491a      	ldr	r1, [pc, #104]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002fb0:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	4912      	ldr	r1, [pc, #72]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002fce:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fda:	490b      	ldr	r1, [pc, #44]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002fec:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	4903      	ldr	r1, [pc, #12]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3748      	adds	r7, #72	; 0x48
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000

0800300c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e073      	b.n	800310a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	7f5b      	ldrb	r3, [r3, #29]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd fe9e 	bl	8000d74 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b10      	cmp	r3, #16
 800304a:	d055      	beq.n	80030f8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	22ca      	movs	r2, #202	; 0xca
 8003052:	625a      	str	r2, [r3, #36]	; 0x24
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2253      	movs	r2, #83	; 0x53
 800305a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f87f 	bl	8003160 <RTC_EnterInitMode>
 8003062:	4603      	mov	r3, r0
 8003064:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d12c      	bne.n	80030c6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800307a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800307e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6899      	ldr	r1, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68d2      	ldr	r2, [r2, #12]
 80030a6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6919      	ldr	r1, [r3, #16]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	041a      	lsls	r2, r3, #16
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f886 	bl	80031ce <RTC_ExitInitMode>
 80030c2:	4603      	mov	r3, r0
 80030c4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d110      	bne.n	80030ee <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030da:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	22ff      	movs	r2, #255	; 0xff
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24
 80030f6:	e001      	b.n	80030fc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d102      	bne.n	8003108 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003108:	7bfb      	ldrb	r3, [r7, #15]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0d      	ldr	r2, [pc, #52]	; (800315c <HAL_RTC_WaitForSynchro+0x48>)
 8003126:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003128:	f7fe f870 	bl	800120c <HAL_GetTick>
 800312c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800312e:	e009      	b.n	8003144 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003130:	f7fe f86c 	bl	800120c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800313e:	d901      	bls.n	8003144 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e007      	b.n	8003154 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0ee      	beq.n	8003130 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	00017f5f 	.word	0x00017f5f

08003160 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d122      	bne.n	80031c4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800318c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800318e:	f7fe f83d 	bl	800120c <HAL_GetTick>
 8003192:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003194:	e00c      	b.n	80031b0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003196:	f7fe f839 	bl	800120c <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031a4:	d904      	bls.n	80031b0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2204      	movs	r2, #4
 80031aa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d102      	bne.n	80031c4 <RTC_EnterInitMode+0x64>
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d1e8      	bne.n	8003196 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10a      	bne.n	800320e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff ff8b 	bl	8003114 <HAL_RTC_WaitForSynchro>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d004      	beq.n	800320e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2204      	movs	r2, #4
 8003208:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800320e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_RTCEx_BKUPWrite>:
  *         the same on all devices.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3350      	adds	r3, #80	; 0x50
 800322e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	4413      	add	r3, r2
 8003238:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	601a      	str	r2, [r3, #0]
}
 8003240:	bf00      	nop
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_RTCEx_BKUPRead>:
  *         the total number of Backup data Registers. This total number is not
  *         the same on all devices.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3350      	adds	r3, #80	; 0x50
 8003260:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4413      	add	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e049      	b.n	8003322 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7fd fd8c 	bl	8000dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3304      	adds	r3, #4
 80032b8:	4619      	mov	r1, r3
 80032ba:	4610      	mov	r0, r2
 80032bc:	f000 fcf8 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b01      	cmp	r3, #1
 800333e:	d001      	beq.n	8003344 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e03b      	b.n	80033bc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a19      	ldr	r2, [pc, #100]	; (80033c8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d009      	beq.n	800337a <HAL_TIM_Base_Start_IT+0x4e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336e:	d004      	beq.n	800337a <HAL_TIM_Base_Start_IT+0x4e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a15      	ldr	r2, [pc, #84]	; (80033cc <HAL_TIM_Base_Start_IT+0xa0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d115      	bne.n	80033a6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <HAL_TIM_Base_Start_IT+0xa4>)
 8003382:	4013      	ands	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b06      	cmp	r3, #6
 800338a:	d015      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x8c>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003392:	d011      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a4:	e008      	b.n	80033b8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0201 	orr.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	e000      	b.n	80033ba <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	40012c00 	.word	0x40012c00
 80033cc:	40014000 	.word	0x40014000
 80033d0:	00010007 	.word	0x00010007

080033d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e049      	b.n	800347a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f841 	bl	8003482 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3304      	adds	r3, #4
 8003410:	4619      	mov	r1, r3
 8003412:	4610      	mov	r0, r2
 8003414:	f000 fc4c 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d109      	bne.n	80034bc <HAL_TIM_PWM_Start+0x24>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	bf14      	ite	ne
 80034b4:	2301      	movne	r3, #1
 80034b6:	2300      	moveq	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	e03c      	b.n	8003536 <HAL_TIM_PWM_Start+0x9e>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d109      	bne.n	80034d6 <HAL_TIM_PWM_Start+0x3e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	bf14      	ite	ne
 80034ce:	2301      	movne	r3, #1
 80034d0:	2300      	moveq	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	e02f      	b.n	8003536 <HAL_TIM_PWM_Start+0x9e>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d109      	bne.n	80034f0 <HAL_TIM_PWM_Start+0x58>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e022      	b.n	8003536 <HAL_TIM_PWM_Start+0x9e>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	d109      	bne.n	800350a <HAL_TIM_PWM_Start+0x72>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b01      	cmp	r3, #1
 8003500:	bf14      	ite	ne
 8003502:	2301      	movne	r3, #1
 8003504:	2300      	moveq	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	e015      	b.n	8003536 <HAL_TIM_PWM_Start+0x9e>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b10      	cmp	r3, #16
 800350e:	d109      	bne.n	8003524 <HAL_TIM_PWM_Start+0x8c>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	bf14      	ite	ne
 800351c:	2301      	movne	r3, #1
 800351e:	2300      	moveq	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	e008      	b.n	8003536 <HAL_TIM_PWM_Start+0x9e>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	bf14      	ite	ne
 8003530:	2301      	movne	r3, #1
 8003532:	2300      	moveq	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e083      	b.n	8003646 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d104      	bne.n	800354e <HAL_TIM_PWM_Start+0xb6>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800354c:	e023      	b.n	8003596 <HAL_TIM_PWM_Start+0xfe>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b04      	cmp	r3, #4
 8003552:	d104      	bne.n	800355e <HAL_TIM_PWM_Start+0xc6>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800355c:	e01b      	b.n	8003596 <HAL_TIM_PWM_Start+0xfe>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b08      	cmp	r3, #8
 8003562:	d104      	bne.n	800356e <HAL_TIM_PWM_Start+0xd6>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800356c:	e013      	b.n	8003596 <HAL_TIM_PWM_Start+0xfe>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b0c      	cmp	r3, #12
 8003572:	d104      	bne.n	800357e <HAL_TIM_PWM_Start+0xe6>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800357c:	e00b      	b.n	8003596 <HAL_TIM_PWM_Start+0xfe>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b10      	cmp	r3, #16
 8003582:	d104      	bne.n	800358e <HAL_TIM_PWM_Start+0xf6>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800358c:	e003      	b.n	8003596 <HAL_TIM_PWM_Start+0xfe>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2201      	movs	r2, #1
 800359c:	6839      	ldr	r1, [r7, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 ff34 	bl	800440c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a29      	ldr	r2, [pc, #164]	; (8003650 <HAL_TIM_PWM_Start+0x1b8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00e      	beq.n	80035cc <HAL_TIM_PWM_Start+0x134>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a28      	ldr	r2, [pc, #160]	; (8003654 <HAL_TIM_PWM_Start+0x1bc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d009      	beq.n	80035cc <HAL_TIM_PWM_Start+0x134>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a26      	ldr	r2, [pc, #152]	; (8003658 <HAL_TIM_PWM_Start+0x1c0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d004      	beq.n	80035cc <HAL_TIM_PWM_Start+0x134>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a25      	ldr	r2, [pc, #148]	; (800365c <HAL_TIM_PWM_Start+0x1c4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d101      	bne.n	80035d0 <HAL_TIM_PWM_Start+0x138>
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <HAL_TIM_PWM_Start+0x13a>
 80035d0:	2300      	movs	r3, #0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a19      	ldr	r2, [pc, #100]	; (8003650 <HAL_TIM_PWM_Start+0x1b8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d009      	beq.n	8003604 <HAL_TIM_PWM_Start+0x16c>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f8:	d004      	beq.n	8003604 <HAL_TIM_PWM_Start+0x16c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a15      	ldr	r2, [pc, #84]	; (8003654 <HAL_TIM_PWM_Start+0x1bc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d115      	bne.n	8003630 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	4b15      	ldr	r3, [pc, #84]	; (8003660 <HAL_TIM_PWM_Start+0x1c8>)
 800360c:	4013      	ands	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b06      	cmp	r3, #6
 8003614:	d015      	beq.n	8003642 <HAL_TIM_PWM_Start+0x1aa>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361c:	d011      	beq.n	8003642 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0201 	orr.w	r2, r2, #1
 800362c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362e:	e008      	b.n	8003642 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	e000      	b.n	8003644 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003642:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40014000 	.word	0x40014000
 8003658:	40014400 	.word	0x40014400
 800365c:	40014800 	.word	0x40014800
 8003660:	00010007 	.word	0x00010007

08003664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b02      	cmp	r3, #2
 8003678:	d122      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b02      	cmp	r3, #2
 8003686:	d11b      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0202 	mvn.w	r2, #2
 8003690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fae3 	bl	8003c72 <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fad5 	bl	8003c5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fae6 	bl	8003c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d122      	bne.n	8003714 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d11b      	bne.n	8003714 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0204 	mvn.w	r2, #4
 80036e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2202      	movs	r2, #2
 80036ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fab9 	bl	8003c72 <HAL_TIM_IC_CaptureCallback>
 8003700:	e005      	b.n	800370e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 faab 	bl	8003c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 fabc 	bl	8003c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b08      	cmp	r3, #8
 8003720:	d122      	bne.n	8003768 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b08      	cmp	r3, #8
 800372e:	d11b      	bne.n	8003768 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0208 	mvn.w	r2, #8
 8003738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2204      	movs	r2, #4
 800373e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fa8f 	bl	8003c72 <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fa81 	bl	8003c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fa92 	bl	8003c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	2b10      	cmp	r3, #16
 8003774:	d122      	bne.n	80037bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b10      	cmp	r3, #16
 8003782:	d11b      	bne.n	80037bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0210 	mvn.w	r2, #16
 800378c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2208      	movs	r2, #8
 8003792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fa65 	bl	8003c72 <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fa57 	bl	8003c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fa68 	bl	8003c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d10e      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d107      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0201 	mvn.w	r2, #1
 80037e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd fa78 	bl	8000cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f2:	2b80      	cmp	r3, #128	; 0x80
 80037f4:	d10e      	bne.n	8003814 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003800:	2b80      	cmp	r3, #128	; 0x80
 8003802:	d107      	bne.n	8003814 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800380c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fe92 	bl	8004538 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003822:	d10e      	bne.n	8003842 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	2b80      	cmp	r3, #128	; 0x80
 8003830:	d107      	bne.n	8003842 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800383a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fe85 	bl	800454c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	d10e      	bne.n	800386e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d107      	bne.n	800386e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fa16 	bl	8003c9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b20      	cmp	r3, #32
 800387a:	d10e      	bne.n	800389a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b20      	cmp	r3, #32
 8003888:	d107      	bne.n	800389a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f06f 0220 	mvn.w	r2, #32
 8003892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fe45 	bl	8004524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038be:	2302      	movs	r3, #2
 80038c0:	e0ff      	b.n	8003ac2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b14      	cmp	r3, #20
 80038ce:	f200 80f0 	bhi.w	8003ab2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80038d2:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d8:	0800392d 	.word	0x0800392d
 80038dc:	08003ab3 	.word	0x08003ab3
 80038e0:	08003ab3 	.word	0x08003ab3
 80038e4:	08003ab3 	.word	0x08003ab3
 80038e8:	0800396d 	.word	0x0800396d
 80038ec:	08003ab3 	.word	0x08003ab3
 80038f0:	08003ab3 	.word	0x08003ab3
 80038f4:	08003ab3 	.word	0x08003ab3
 80038f8:	080039af 	.word	0x080039af
 80038fc:	08003ab3 	.word	0x08003ab3
 8003900:	08003ab3 	.word	0x08003ab3
 8003904:	08003ab3 	.word	0x08003ab3
 8003908:	080039ef 	.word	0x080039ef
 800390c:	08003ab3 	.word	0x08003ab3
 8003910:	08003ab3 	.word	0x08003ab3
 8003914:	08003ab3 	.word	0x08003ab3
 8003918:	08003a31 	.word	0x08003a31
 800391c:	08003ab3 	.word	0x08003ab3
 8003920:	08003ab3 	.word	0x08003ab3
 8003924:	08003ab3 	.word	0x08003ab3
 8003928:	08003a71 	.word	0x08003a71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fa2a 	bl	8003d8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0208 	orr.w	r2, r2, #8
 8003946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0204 	bic.w	r2, r2, #4
 8003956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6999      	ldr	r1, [r3, #24]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	619a      	str	r2, [r3, #24]
      break;
 800396a:	e0a5      	b.n	8003ab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fa90 	bl	8003e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6999      	ldr	r1, [r3, #24]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	021a      	lsls	r2, r3, #8
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	619a      	str	r2, [r3, #24]
      break;
 80039ac:	e084      	b.n	8003ab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 faef 	bl	8003f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0208 	orr.w	r2, r2, #8
 80039c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69da      	ldr	r2, [r3, #28]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0204 	bic.w	r2, r2, #4
 80039d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69d9      	ldr	r1, [r3, #28]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	61da      	str	r2, [r3, #28]
      break;
 80039ec:	e064      	b.n	8003ab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fb4d 	bl	8004094 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69da      	ldr	r2, [r3, #28]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69da      	ldr	r2, [r3, #28]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69d9      	ldr	r1, [r3, #28]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	021a      	lsls	r2, r3, #8
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	61da      	str	r2, [r3, #28]
      break;
 8003a2e:	e043      	b.n	8003ab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fb90 	bl	800415c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0208 	orr.w	r2, r2, #8
 8003a4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0204 	bic.w	r2, r2, #4
 8003a5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a6e:	e023      	b.n	8003ab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fbce 	bl	8004218 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	021a      	lsls	r2, r3, #8
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ab0:	e002      	b.n	8003ab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop

08003acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e0b6      	b.n	8003c56 <HAL_TIM_ConfigClockSource+0x18a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b24:	d03e      	beq.n	8003ba4 <HAL_TIM_ConfigClockSource+0xd8>
 8003b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b2a:	f200 8087 	bhi.w	8003c3c <HAL_TIM_ConfigClockSource+0x170>
 8003b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b32:	f000 8086 	beq.w	8003c42 <HAL_TIM_ConfigClockSource+0x176>
 8003b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3a:	d87f      	bhi.n	8003c3c <HAL_TIM_ConfigClockSource+0x170>
 8003b3c:	2b70      	cmp	r3, #112	; 0x70
 8003b3e:	d01a      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0xaa>
 8003b40:	2b70      	cmp	r3, #112	; 0x70
 8003b42:	d87b      	bhi.n	8003c3c <HAL_TIM_ConfigClockSource+0x170>
 8003b44:	2b60      	cmp	r3, #96	; 0x60
 8003b46:	d050      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0x11e>
 8003b48:	2b60      	cmp	r3, #96	; 0x60
 8003b4a:	d877      	bhi.n	8003c3c <HAL_TIM_ConfigClockSource+0x170>
 8003b4c:	2b50      	cmp	r3, #80	; 0x50
 8003b4e:	d03c      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0xfe>
 8003b50:	2b50      	cmp	r3, #80	; 0x50
 8003b52:	d873      	bhi.n	8003c3c <HAL_TIM_ConfigClockSource+0x170>
 8003b54:	2b40      	cmp	r3, #64	; 0x40
 8003b56:	d058      	beq.n	8003c0a <HAL_TIM_ConfigClockSource+0x13e>
 8003b58:	2b40      	cmp	r3, #64	; 0x40
 8003b5a:	d86f      	bhi.n	8003c3c <HAL_TIM_ConfigClockSource+0x170>
 8003b5c:	2b30      	cmp	r3, #48	; 0x30
 8003b5e:	d064      	beq.n	8003c2a <HAL_TIM_ConfigClockSource+0x15e>
 8003b60:	2b30      	cmp	r3, #48	; 0x30
 8003b62:	d86b      	bhi.n	8003c3c <HAL_TIM_ConfigClockSource+0x170>
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d060      	beq.n	8003c2a <HAL_TIM_ConfigClockSource+0x15e>
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d867      	bhi.n	8003c3c <HAL_TIM_ConfigClockSource+0x170>
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d05c      	beq.n	8003c2a <HAL_TIM_ConfigClockSource+0x15e>
 8003b70:	2b10      	cmp	r3, #16
 8003b72:	d05a      	beq.n	8003c2a <HAL_TIM_ConfigClockSource+0x15e>
 8003b74:	e062      	b.n	8003c3c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b86:	f000 fc21 	bl	80043cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	609a      	str	r2, [r3, #8]
      break;
 8003ba2:	e04f      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bb4:	f000 fc0a 	bl	80043cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bc6:	609a      	str	r2, [r3, #8]
      break;
 8003bc8:	e03c      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f000 fb7e 	bl	80042d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2150      	movs	r1, #80	; 0x50
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fbd7 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 8003be8:	e02c      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f000 fb9d 	bl	8004336 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2160      	movs	r1, #96	; 0x60
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fbc7 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 8003c08:	e01c      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c16:	461a      	mov	r2, r3
 8003c18:	f000 fb5e 	bl	80042d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2140      	movs	r1, #64	; 0x40
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fbb7 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 8003c28:	e00c      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4619      	mov	r1, r3
 8003c34:	4610      	mov	r0, r2
 8003c36:	f000 fbae 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 8003c3a:	e003      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c40:	e000      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003c42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a2e      	ldr	r2, [pc, #184]	; (8003d7c <TIM_Base_SetConfig+0xcc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_Base_SetConfig+0x20>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cce:	d108      	bne.n	8003ce2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a25      	ldr	r2, [pc, #148]	; (8003d7c <TIM_Base_SetConfig+0xcc>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00f      	beq.n	8003d0a <TIM_Base_SetConfig+0x5a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf0:	d00b      	beq.n	8003d0a <TIM_Base_SetConfig+0x5a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a22      	ldr	r2, [pc, #136]	; (8003d80 <TIM_Base_SetConfig+0xd0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <TIM_Base_SetConfig+0x5a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a21      	ldr	r2, [pc, #132]	; (8003d84 <TIM_Base_SetConfig+0xd4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_Base_SetConfig+0x5a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a20      	ldr	r2, [pc, #128]	; (8003d88 <TIM_Base_SetConfig+0xd8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d108      	bne.n	8003d1c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a0e      	ldr	r2, [pc, #56]	; (8003d7c <TIM_Base_SetConfig+0xcc>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00b      	beq.n	8003d60 <TIM_Base_SetConfig+0xb0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a0d      	ldr	r2, [pc, #52]	; (8003d80 <TIM_Base_SetConfig+0xd0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d007      	beq.n	8003d60 <TIM_Base_SetConfig+0xb0>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a0c      	ldr	r2, [pc, #48]	; (8003d84 <TIM_Base_SetConfig+0xd4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d003      	beq.n	8003d60 <TIM_Base_SetConfig+0xb0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a0b      	ldr	r2, [pc, #44]	; (8003d88 <TIM_Base_SetConfig+0xd8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d103      	bne.n	8003d68 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	615a      	str	r2, [r3, #20]
}
 8003d6e:	bf00      	nop
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40012c00 	.word	0x40012c00
 8003d80:	40014000 	.word	0x40014000
 8003d84:	40014400 	.word	0x40014400
 8003d88:	40014800 	.word	0x40014800

08003d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	f023 0201 	bic.w	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0303 	bic.w	r3, r3, #3
 8003dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f023 0302 	bic.w	r3, r3, #2
 8003dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a28      	ldr	r2, [pc, #160]	; (8003e88 <TIM_OC1_SetConfig+0xfc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00b      	beq.n	8003e04 <TIM_OC1_SetConfig+0x78>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a27      	ldr	r2, [pc, #156]	; (8003e8c <TIM_OC1_SetConfig+0x100>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d007      	beq.n	8003e04 <TIM_OC1_SetConfig+0x78>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a26      	ldr	r2, [pc, #152]	; (8003e90 <TIM_OC1_SetConfig+0x104>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d003      	beq.n	8003e04 <TIM_OC1_SetConfig+0x78>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a25      	ldr	r2, [pc, #148]	; (8003e94 <TIM_OC1_SetConfig+0x108>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d10c      	bne.n	8003e1e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f023 0308 	bic.w	r3, r3, #8
 8003e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f023 0304 	bic.w	r3, r3, #4
 8003e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a19      	ldr	r2, [pc, #100]	; (8003e88 <TIM_OC1_SetConfig+0xfc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00b      	beq.n	8003e3e <TIM_OC1_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a18      	ldr	r2, [pc, #96]	; (8003e8c <TIM_OC1_SetConfig+0x100>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d007      	beq.n	8003e3e <TIM_OC1_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <TIM_OC1_SetConfig+0x104>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d003      	beq.n	8003e3e <TIM_OC1_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a16      	ldr	r2, [pc, #88]	; (8003e94 <TIM_OC1_SetConfig+0x108>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d111      	bne.n	8003e62 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	621a      	str	r2, [r3, #32]
}
 8003e7c:	bf00      	nop
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40014000 	.word	0x40014000
 8003e90:	40014400 	.word	0x40014400
 8003e94:	40014800 	.word	0x40014800

08003e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f023 0210 	bic.w	r2, r3, #16
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	021b      	lsls	r3, r3, #8
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f023 0320 	bic.w	r3, r3, #32
 8003ee6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a24      	ldr	r2, [pc, #144]	; (8003f88 <TIM_OC2_SetConfig+0xf0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d10d      	bne.n	8003f18 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <TIM_OC2_SetConfig+0xf0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00b      	beq.n	8003f38 <TIM_OC2_SetConfig+0xa0>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a1a      	ldr	r2, [pc, #104]	; (8003f8c <TIM_OC2_SetConfig+0xf4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d007      	beq.n	8003f38 <TIM_OC2_SetConfig+0xa0>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a19      	ldr	r2, [pc, #100]	; (8003f90 <TIM_OC2_SetConfig+0xf8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_OC2_SetConfig+0xa0>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a18      	ldr	r2, [pc, #96]	; (8003f94 <TIM_OC2_SetConfig+0xfc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d113      	bne.n	8003f60 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f3e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f46:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	621a      	str	r2, [r3, #32]
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40012c00 	.word	0x40012c00
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40014400 	.word	0x40014400
 8003f94:	40014800 	.word	0x40014800

08003f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0303 	bic.w	r3, r3, #3
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a23      	ldr	r2, [pc, #140]	; (8004084 <TIM_OC3_SetConfig+0xec>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d10d      	bne.n	8004016 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004014:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1a      	ldr	r2, [pc, #104]	; (8004084 <TIM_OC3_SetConfig+0xec>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00b      	beq.n	8004036 <TIM_OC3_SetConfig+0x9e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a19      	ldr	r2, [pc, #100]	; (8004088 <TIM_OC3_SetConfig+0xf0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d007      	beq.n	8004036 <TIM_OC3_SetConfig+0x9e>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a18      	ldr	r2, [pc, #96]	; (800408c <TIM_OC3_SetConfig+0xf4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d003      	beq.n	8004036 <TIM_OC3_SetConfig+0x9e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a17      	ldr	r2, [pc, #92]	; (8004090 <TIM_OC3_SetConfig+0xf8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d113      	bne.n	800405e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800403c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	621a      	str	r2, [r3, #32]
}
 8004078:	bf00      	nop
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	40012c00 	.word	0x40012c00
 8004088:	40014000 	.word	0x40014000
 800408c:	40014400 	.word	0x40014400
 8004090:	40014800 	.word	0x40014800

08004094 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	021b      	lsls	r3, r3, #8
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	031b      	lsls	r3, r3, #12
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a16      	ldr	r2, [pc, #88]	; (800414c <TIM_OC4_SetConfig+0xb8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00b      	beq.n	8004110 <TIM_OC4_SetConfig+0x7c>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a15      	ldr	r2, [pc, #84]	; (8004150 <TIM_OC4_SetConfig+0xbc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d007      	beq.n	8004110 <TIM_OC4_SetConfig+0x7c>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a14      	ldr	r2, [pc, #80]	; (8004154 <TIM_OC4_SetConfig+0xc0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d003      	beq.n	8004110 <TIM_OC4_SetConfig+0x7c>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a13      	ldr	r2, [pc, #76]	; (8004158 <TIM_OC4_SetConfig+0xc4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d109      	bne.n	8004124 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004116:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	019b      	lsls	r3, r3, #6
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40012c00 	.word	0x40012c00
 8004150:	40014000 	.word	0x40014000
 8004154:	40014400 	.word	0x40014400
 8004158:	40014800 	.word	0x40014800

0800415c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80041a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	041b      	lsls	r3, r3, #16
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a15      	ldr	r2, [pc, #84]	; (8004208 <TIM_OC5_SetConfig+0xac>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00b      	beq.n	80041ce <TIM_OC5_SetConfig+0x72>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a14      	ldr	r2, [pc, #80]	; (800420c <TIM_OC5_SetConfig+0xb0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d007      	beq.n	80041ce <TIM_OC5_SetConfig+0x72>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a13      	ldr	r2, [pc, #76]	; (8004210 <TIM_OC5_SetConfig+0xb4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d003      	beq.n	80041ce <TIM_OC5_SetConfig+0x72>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a12      	ldr	r2, [pc, #72]	; (8004214 <TIM_OC5_SetConfig+0xb8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d109      	bne.n	80041e2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	621a      	str	r2, [r3, #32]
}
 80041fc:	bf00      	nop
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	40012c00 	.word	0x40012c00
 800420c:	40014000 	.word	0x40014000
 8004210:	40014400 	.word	0x40014400
 8004214:	40014800 	.word	0x40014800

08004218 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800425e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	051b      	lsls	r3, r3, #20
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a16      	ldr	r2, [pc, #88]	; (80042c8 <TIM_OC6_SetConfig+0xb0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00b      	beq.n	800428c <TIM_OC6_SetConfig+0x74>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a15      	ldr	r2, [pc, #84]	; (80042cc <TIM_OC6_SetConfig+0xb4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d007      	beq.n	800428c <TIM_OC6_SetConfig+0x74>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a14      	ldr	r2, [pc, #80]	; (80042d0 <TIM_OC6_SetConfig+0xb8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d003      	beq.n	800428c <TIM_OC6_SetConfig+0x74>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a13      	ldr	r2, [pc, #76]	; (80042d4 <TIM_OC6_SetConfig+0xbc>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d109      	bne.n	80042a0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004292:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	029b      	lsls	r3, r3, #10
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	40014000 	.word	0x40014000
 80042d0:	40014400 	.word	0x40014400
 80042d4:	40014800 	.word	0x40014800

080042d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	f023 0201 	bic.w	r2, r3, #1
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f023 030a 	bic.w	r3, r3, #10
 8004314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	621a      	str	r2, [r3, #32]
}
 800432a:	bf00      	nop
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004336:	b480      	push	{r7}
 8004338:	b087      	sub	sp, #28
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f023 0210 	bic.w	r2, r3, #16
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004360:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	031b      	lsls	r3, r3, #12
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004372:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004396:	b480      	push	{r7}
 8004398:	b085      	sub	sp, #20
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f043 0307 	orr.w	r3, r3, #7
 80043b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	609a      	str	r2, [r3, #8]
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	021a      	lsls	r2, r3, #8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	609a      	str	r2, [r3, #8]
}
 8004400:	bf00      	nop
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	2201      	movs	r2, #1
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a1a      	ldr	r2, [r3, #32]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	43db      	mvns	r3, r3
 800442e:	401a      	ands	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1a      	ldr	r2, [r3, #32]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	fa01 f303 	lsl.w	r3, r1, r3
 8004444:	431a      	orrs	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	621a      	str	r2, [r3, #32]
}
 800444a:	bf00      	nop
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800446c:	2302      	movs	r3, #2
 800446e:	e04f      	b.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a21      	ldr	r2, [pc, #132]	; (800451c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d108      	bne.n	80044ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80044a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a14      	ldr	r2, [pc, #80]	; (800451c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d009      	beq.n	80044e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d8:	d004      	beq.n	80044e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a10      	ldr	r2, [pc, #64]	; (8004520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d10c      	bne.n	80044fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	40012c00 	.word	0x40012c00
 8004520:	40014000 	.word	0x40014000

08004524 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e040      	b.n	80045f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fc fca6 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2224      	movs	r2, #36	; 0x24
 800458c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f980 	bl	80048a4 <UART_SetConfig>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e022      	b.n	80045f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 faaa 	bl	8004b10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fb31 	bl	8004c54 <UART_CheckIdleState>
 80045f2:	4603      	mov	r3, r0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08a      	sub	sp, #40	; 0x28
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	4613      	mov	r3, r2
 800460a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004610:	2b20      	cmp	r3, #32
 8004612:	d178      	bne.n	8004706 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_UART_Transmit+0x24>
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e071      	b.n	8004708 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2221      	movs	r2, #33	; 0x21
 8004630:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004632:	f7fc fdeb 	bl	800120c <HAL_GetTick>
 8004636:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	88fa      	ldrh	r2, [r7, #6]
 8004644:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004650:	d108      	bne.n	8004664 <HAL_UART_Transmit+0x68>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d104      	bne.n	8004664 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	e003      	b.n	800466c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004668:	2300      	movs	r3, #0
 800466a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800466c:	e030      	b.n	80046d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2200      	movs	r2, #0
 8004676:	2180      	movs	r1, #128	; 0x80
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fb93 	bl	8004da4 <UART_WaitOnFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d004      	beq.n	800468e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2220      	movs	r2, #32
 8004688:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e03c      	b.n	8004708 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10b      	bne.n	80046ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	881a      	ldrh	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046a0:	b292      	uxth	r2, r2
 80046a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	3302      	adds	r3, #2
 80046a8:	61bb      	str	r3, [r7, #24]
 80046aa:	e008      	b.n	80046be <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	781a      	ldrb	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	b292      	uxth	r2, r2
 80046b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	3301      	adds	r3, #1
 80046bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1c8      	bne.n	800466e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2200      	movs	r2, #0
 80046e4:	2140      	movs	r1, #64	; 0x40
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 fb5c 	bl	8004da4 <UART_WaitOnFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d004      	beq.n	80046fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e005      	b.n	8004708 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2220      	movs	r2, #32
 8004700:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	e000      	b.n	8004708 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004706:	2302      	movs	r3, #2
  }
}
 8004708:	4618      	mov	r0, r3
 800470a:	3720      	adds	r7, #32
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08a      	sub	sp, #40	; 0x28
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004726:	2b20      	cmp	r3, #32
 8004728:	f040 80b6 	bne.w	8004898 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_UART_Receive+0x28>
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0ae      	b.n	800489a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2222      	movs	r2, #34	; 0x22
 8004748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004752:	f7fc fd5b 	bl	800120c <HAL_GetTick>
 8004756:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	88fa      	ldrh	r2, [r7, #6]
 800475c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	88fa      	ldrh	r2, [r7, #6]
 8004764:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004770:	d10e      	bne.n	8004790 <HAL_UART_Receive+0x80>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d105      	bne.n	8004786 <HAL_UART_Receive+0x76>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004780:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004784:	e02d      	b.n	80047e2 <HAL_UART_Receive+0xd2>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	22ff      	movs	r2, #255	; 0xff
 800478a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800478e:	e028      	b.n	80047e2 <HAL_UART_Receive+0xd2>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10d      	bne.n	80047b4 <HAL_UART_Receive+0xa4>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d104      	bne.n	80047aa <HAL_UART_Receive+0x9a>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	22ff      	movs	r2, #255	; 0xff
 80047a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047a8:	e01b      	b.n	80047e2 <HAL_UART_Receive+0xd2>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	227f      	movs	r2, #127	; 0x7f
 80047ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047b2:	e016      	b.n	80047e2 <HAL_UART_Receive+0xd2>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047bc:	d10d      	bne.n	80047da <HAL_UART_Receive+0xca>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d104      	bne.n	80047d0 <HAL_UART_Receive+0xc0>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	227f      	movs	r2, #127	; 0x7f
 80047ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047ce:	e008      	b.n	80047e2 <HAL_UART_Receive+0xd2>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	223f      	movs	r2, #63	; 0x3f
 80047d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047d8:	e003      	b.n	80047e2 <HAL_UART_Receive+0xd2>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047e8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f2:	d108      	bne.n	8004806 <HAL_UART_Receive+0xf6>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d104      	bne.n	8004806 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	61bb      	str	r3, [r7, #24]
 8004804:	e003      	b.n	800480e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800480a:	2300      	movs	r3, #0
 800480c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800480e:	e037      	b.n	8004880 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2200      	movs	r2, #0
 8004818:	2120      	movs	r1, #32
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fac2 	bl	8004da4 <UART_WaitOnFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e033      	b.n	800489a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10c      	bne.n	8004852 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800483e:	b29a      	uxth	r2, r3
 8004840:	8a7b      	ldrh	r3, [r7, #18]
 8004842:	4013      	ands	r3, r2
 8004844:	b29a      	uxth	r2, r3
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	3302      	adds	r3, #2
 800484e:	61bb      	str	r3, [r7, #24]
 8004850:	e00d      	b.n	800486e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004858:	b29b      	uxth	r3, r3
 800485a:	b2da      	uxtb	r2, r3
 800485c:	8a7b      	ldrh	r3, [r7, #18]
 800485e:	b2db      	uxtb	r3, r3
 8004860:	4013      	ands	r3, r2
 8004862:	b2da      	uxtb	r2, r3
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	3301      	adds	r3, #1
 800486c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1c1      	bne.n	8004810 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	e000      	b.n	800489a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004898:	2302      	movs	r3, #2
  }
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	4b8a      	ldr	r3, [pc, #552]	; (8004af8 <UART_SetConfig+0x254>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6812      	ldr	r2, [r2, #0]
 80048d6:	6979      	ldr	r1, [r7, #20]
 80048d8:	430b      	orrs	r3, r1
 80048da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	430a      	orrs	r2, r1
 8004914:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a78      	ldr	r2, [pc, #480]	; (8004afc <UART_SetConfig+0x258>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d120      	bne.n	8004962 <UART_SetConfig+0xbe>
 8004920:	4b77      	ldr	r3, [pc, #476]	; (8004b00 <UART_SetConfig+0x25c>)
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	f003 0303 	and.w	r3, r3, #3
 8004928:	2b03      	cmp	r3, #3
 800492a:	d817      	bhi.n	800495c <UART_SetConfig+0xb8>
 800492c:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <UART_SetConfig+0x90>)
 800492e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004932:	bf00      	nop
 8004934:	08004945 	.word	0x08004945
 8004938:	08004951 	.word	0x08004951
 800493c:	08004957 	.word	0x08004957
 8004940:	0800494b 	.word	0x0800494b
 8004944:	2300      	movs	r3, #0
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e01d      	b.n	8004986 <UART_SetConfig+0xe2>
 800494a:	2302      	movs	r3, #2
 800494c:	77fb      	strb	r3, [r7, #31]
 800494e:	e01a      	b.n	8004986 <UART_SetConfig+0xe2>
 8004950:	2304      	movs	r3, #4
 8004952:	77fb      	strb	r3, [r7, #31]
 8004954:	e017      	b.n	8004986 <UART_SetConfig+0xe2>
 8004956:	2308      	movs	r3, #8
 8004958:	77fb      	strb	r3, [r7, #31]
 800495a:	e014      	b.n	8004986 <UART_SetConfig+0xe2>
 800495c:	2310      	movs	r3, #16
 800495e:	77fb      	strb	r3, [r7, #31]
 8004960:	e011      	b.n	8004986 <UART_SetConfig+0xe2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a67      	ldr	r2, [pc, #412]	; (8004b04 <UART_SetConfig+0x260>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d102      	bne.n	8004972 <UART_SetConfig+0xce>
 800496c:	2300      	movs	r3, #0
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e009      	b.n	8004986 <UART_SetConfig+0xe2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a64      	ldr	r2, [pc, #400]	; (8004b08 <UART_SetConfig+0x264>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d102      	bne.n	8004982 <UART_SetConfig+0xde>
 800497c:	2300      	movs	r3, #0
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e001      	b.n	8004986 <UART_SetConfig+0xe2>
 8004982:	2310      	movs	r3, #16
 8004984:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800498e:	d15a      	bne.n	8004a46 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004990:	7ffb      	ldrb	r3, [r7, #31]
 8004992:	2b08      	cmp	r3, #8
 8004994:	d827      	bhi.n	80049e6 <UART_SetConfig+0x142>
 8004996:	a201      	add	r2, pc, #4	; (adr r2, 800499c <UART_SetConfig+0xf8>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	080049c1 	.word	0x080049c1
 80049a0:	080049c9 	.word	0x080049c9
 80049a4:	080049d1 	.word	0x080049d1
 80049a8:	080049e7 	.word	0x080049e7
 80049ac:	080049d7 	.word	0x080049d7
 80049b0:	080049e7 	.word	0x080049e7
 80049b4:	080049e7 	.word	0x080049e7
 80049b8:	080049e7 	.word	0x080049e7
 80049bc:	080049df 	.word	0x080049df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c0:	f7fe f91c 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 80049c4:	61b8      	str	r0, [r7, #24]
        break;
 80049c6:	e013      	b.n	80049f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049c8:	f7fe f93a 	bl	8002c40 <HAL_RCC_GetPCLK2Freq>
 80049cc:	61b8      	str	r0, [r7, #24]
        break;
 80049ce:	e00f      	b.n	80049f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049d0:	4b4e      	ldr	r3, [pc, #312]	; (8004b0c <UART_SetConfig+0x268>)
 80049d2:	61bb      	str	r3, [r7, #24]
        break;
 80049d4:	e00c      	b.n	80049f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049d6:	f7fe f89b 	bl	8002b10 <HAL_RCC_GetSysClockFreq>
 80049da:	61b8      	str	r0, [r7, #24]
        break;
 80049dc:	e008      	b.n	80049f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049e2:	61bb      	str	r3, [r7, #24]
        break;
 80049e4:	e004      	b.n	80049f0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	77bb      	strb	r3, [r7, #30]
        break;
 80049ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d074      	beq.n	8004ae0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	005a      	lsls	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	085b      	lsrs	r3, r3, #1
 8004a00:	441a      	add	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	2b0f      	cmp	r3, #15
 8004a10:	d916      	bls.n	8004a40 <UART_SetConfig+0x19c>
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a18:	d212      	bcs.n	8004a40 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f023 030f 	bic.w	r3, r3, #15
 8004a22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	085b      	lsrs	r3, r3, #1
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	89fb      	ldrh	r3, [r7, #14]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	89fa      	ldrh	r2, [r7, #14]
 8004a3c:	60da      	str	r2, [r3, #12]
 8004a3e:	e04f      	b.n	8004ae0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	77bb      	strb	r3, [r7, #30]
 8004a44:	e04c      	b.n	8004ae0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a46:	7ffb      	ldrb	r3, [r7, #31]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d828      	bhi.n	8004a9e <UART_SetConfig+0x1fa>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <UART_SetConfig+0x1b0>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004a81 	.word	0x08004a81
 8004a5c:	08004a89 	.word	0x08004a89
 8004a60:	08004a9f 	.word	0x08004a9f
 8004a64:	08004a8f 	.word	0x08004a8f
 8004a68:	08004a9f 	.word	0x08004a9f
 8004a6c:	08004a9f 	.word	0x08004a9f
 8004a70:	08004a9f 	.word	0x08004a9f
 8004a74:	08004a97 	.word	0x08004a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a78:	f7fe f8c0 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 8004a7c:	61b8      	str	r0, [r7, #24]
        break;
 8004a7e:	e013      	b.n	8004aa8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a80:	f7fe f8de 	bl	8002c40 <HAL_RCC_GetPCLK2Freq>
 8004a84:	61b8      	str	r0, [r7, #24]
        break;
 8004a86:	e00f      	b.n	8004aa8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a88:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <UART_SetConfig+0x268>)
 8004a8a:	61bb      	str	r3, [r7, #24]
        break;
 8004a8c:	e00c      	b.n	8004aa8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a8e:	f7fe f83f 	bl	8002b10 <HAL_RCC_GetSysClockFreq>
 8004a92:	61b8      	str	r0, [r7, #24]
        break;
 8004a94:	e008      	b.n	8004aa8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a9a:	61bb      	str	r3, [r7, #24]
        break;
 8004a9c:	e004      	b.n	8004aa8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	77bb      	strb	r3, [r7, #30]
        break;
 8004aa6:	bf00      	nop
    }

    if (pclk != 0U)
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d018      	beq.n	8004ae0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	085a      	lsrs	r2, r3, #1
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	441a      	add	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	2b0f      	cmp	r3, #15
 8004ac6:	d909      	bls.n	8004adc <UART_SetConfig+0x238>
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ace:	d205      	bcs.n	8004adc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60da      	str	r2, [r3, #12]
 8004ada:	e001      	b.n	8004ae0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004aec:	7fbb      	ldrb	r3, [r7, #30]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3720      	adds	r7, #32
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	efff69f3 	.word	0xefff69f3
 8004afc:	40013800 	.word	0x40013800
 8004b00:	40021000 	.word	0x40021000
 8004b04:	40004400 	.word	0x40004400
 8004b08:	40004800 	.word	0x40004800
 8004b0c:	007a1200 	.word	0x007a1200

08004b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00a      	beq.n	8004b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01a      	beq.n	8004c26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c0e:	d10a      	bne.n	8004c26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	605a      	str	r2, [r3, #4]
  }
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b098      	sub	sp, #96	; 0x60
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c64:	f7fc fad2 	bl	800120c <HAL_GetTick>
 8004c68:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d12e      	bne.n	8004cd6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c80:	2200      	movs	r2, #0
 8004c82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f88c 	bl	8004da4 <UART_WaitOnFlagUntilTimeout>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d021      	beq.n	8004cd6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9a:	e853 3f00 	ldrex	r3, [r3]
 8004c9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ca6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8004cb2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cb8:	e841 2300 	strex	r3, r2, [r1]
 8004cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1e6      	bne.n	8004c92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e062      	b.n	8004d9c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d149      	bne.n	8004d78 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cec:	2200      	movs	r2, #0
 8004cee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f856 	bl	8004da4 <UART_WaitOnFlagUntilTimeout>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d03c      	beq.n	8004d78 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	623b      	str	r3, [r7, #32]
   return(result);
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d1e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e6      	bne.n	8004cfe <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3308      	adds	r3, #8
 8004d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0301 	bic.w	r3, r3, #1
 8004d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d50:	61fa      	str	r2, [r7, #28]
 8004d52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	69b9      	ldr	r1, [r7, #24]
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e5      	bne.n	8004d30 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e011      	b.n	8004d9c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3758      	adds	r7, #88	; 0x58
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db4:	e049      	b.n	8004e4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dbc:	d045      	beq.n	8004e4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dbe:	f7fc fa25 	bl	800120c <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d302      	bcc.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e048      	b.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d031      	beq.n	8004e4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d110      	bne.n	8004e16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2208      	movs	r2, #8
 8004dfa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f838 	bl	8004e72 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2208      	movs	r2, #8
 8004e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e029      	b.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e24:	d111      	bne.n	8004e4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f81e 	bl	8004e72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e00f      	b.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69da      	ldr	r2, [r3, #28]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4013      	ands	r3, r2
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	bf0c      	ite	eq
 8004e5a:	2301      	moveq	r3, #1
 8004e5c:	2300      	movne	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	461a      	mov	r2, r3
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d0a6      	beq.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b095      	sub	sp, #84	; 0x54
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e82:	e853 3f00 	ldrex	r3, [r3]
 8004e86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	461a      	mov	r2, r3
 8004e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e98:	643b      	str	r3, [r7, #64]	; 0x40
 8004e9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ea0:	e841 2300 	strex	r3, r2, [r1]
 8004ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e6      	bne.n	8004e7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3308      	adds	r3, #8
 8004eb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	e853 3f00 	ldrex	r3, [r3]
 8004eba:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f023 0301 	bic.w	r3, r3, #1
 8004ec2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3308      	adds	r3, #8
 8004eca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ecc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ece:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ed4:	e841 2300 	strex	r3, r2, [r1]
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e5      	bne.n	8004eac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d118      	bne.n	8004f1a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f023 0310 	bic.w	r3, r3, #16
 8004efc:	647b      	str	r3, [r7, #68]	; 0x44
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	6979      	ldr	r1, [r7, #20]
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	613b      	str	r3, [r7, #16]
   return(result);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1e6      	bne.n	8004ee8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f2e:	bf00      	nop
 8004f30:	3754      	adds	r7, #84	; 0x54
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
	...

08004f3c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f42:	f3ef 8305 	mrs	r3, IPSR
 8004f46:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10f      	bne.n	8004f6e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f52:	607b      	str	r3, [r7, #4]
  return(result);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d109      	bne.n	8004f6e <osKernelInitialize+0x32>
 8004f5a:	4b11      	ldr	r3, [pc, #68]	; (8004fa0 <osKernelInitialize+0x64>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d109      	bne.n	8004f76 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f62:	f3ef 8311 	mrs	r3, BASEPRI
 8004f66:	603b      	str	r3, [r7, #0]
  return(result);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004f6e:	f06f 0305 	mvn.w	r3, #5
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e00c      	b.n	8004f90 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f76:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <osKernelInitialize+0x64>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d105      	bne.n	8004f8a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004f7e:	4b08      	ldr	r3, [pc, #32]	; (8004fa0 <osKernelInitialize+0x64>)
 8004f80:	2201      	movs	r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	e002      	b.n	8004f90 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f90:	68fb      	ldr	r3, [r7, #12]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	20000224 	.word	0x20000224

08004fa4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004faa:	f3ef 8305 	mrs	r3, IPSR
 8004fae:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10f      	bne.n	8004fd6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004fba:	607b      	str	r3, [r7, #4]
  return(result);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d109      	bne.n	8004fd6 <osKernelStart+0x32>
 8004fc2:	4b11      	ldr	r3, [pc, #68]	; (8005008 <osKernelStart+0x64>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d109      	bne.n	8004fde <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fca:	f3ef 8311 	mrs	r3, BASEPRI
 8004fce:	603b      	str	r3, [r7, #0]
  return(result);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <osKernelStart+0x3a>
    stat = osErrorISR;
 8004fd6:	f06f 0305 	mvn.w	r3, #5
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e00e      	b.n	8004ffc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004fde:	4b0a      	ldr	r3, [pc, #40]	; (8005008 <osKernelStart+0x64>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d107      	bne.n	8004ff6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004fe6:	4b08      	ldr	r3, [pc, #32]	; (8005008 <osKernelStart+0x64>)
 8004fe8:	2202      	movs	r2, #2
 8004fea:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004fec:	f001 fb60 	bl	80066b0 <vTaskStartScheduler>
      stat = osOK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	e002      	b.n	8004ffc <osKernelStart+0x58>
    } else {
      stat = osError;
 8004ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ffa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20000224 	.word	0x20000224

0800500c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b092      	sub	sp, #72	; 0x48
 8005010:	af04      	add	r7, sp, #16
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800501c:	f3ef 8305 	mrs	r3, IPSR
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005024:	2b00      	cmp	r3, #0
 8005026:	f040 8094 	bne.w	8005152 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800502a:	f3ef 8310 	mrs	r3, PRIMASK
 800502e:	623b      	str	r3, [r7, #32]
  return(result);
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	2b00      	cmp	r3, #0
 8005034:	f040 808d 	bne.w	8005152 <osThreadNew+0x146>
 8005038:	4b48      	ldr	r3, [pc, #288]	; (800515c <osThreadNew+0x150>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d106      	bne.n	800504e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005040:	f3ef 8311 	mrs	r3, BASEPRI
 8005044:	61fb      	str	r3, [r7, #28]
  return(result);
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	2b00      	cmp	r3, #0
 800504a:	f040 8082 	bne.w	8005152 <osThreadNew+0x146>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d07e      	beq.n	8005152 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005058:	2318      	movs	r3, #24
 800505a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800505c:	2300      	movs	r3, #0
 800505e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005060:	f107 031b 	add.w	r3, r7, #27
 8005064:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800506a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d045      	beq.n	80050fe <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <osThreadNew+0x74>
        name = attr->name;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800508e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <osThreadNew+0x9a>
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005096:	2b38      	cmp	r3, #56	; 0x38
 8005098:	d805      	bhi.n	80050a6 <osThreadNew+0x9a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <osThreadNew+0x9e>
        return (NULL);
 80050a6:	2300      	movs	r3, #0
 80050a8:	e054      	b.n	8005154 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	089b      	lsrs	r3, r3, #2
 80050b8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00e      	beq.n	80050e0 <osThreadNew+0xd4>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	2ba7      	cmp	r3, #167	; 0xa7
 80050c8:	d90a      	bls.n	80050e0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d006      	beq.n	80050e0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <osThreadNew+0xd4>
        mem = 1;
 80050da:	2301      	movs	r3, #1
 80050dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050de:	e010      	b.n	8005102 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10c      	bne.n	8005102 <osThreadNew+0xf6>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d108      	bne.n	8005102 <osThreadNew+0xf6>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d104      	bne.n	8005102 <osThreadNew+0xf6>
          mem = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80050fc:	e001      	b.n	8005102 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80050fe:	2300      	movs	r3, #0
 8005100:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	2b01      	cmp	r3, #1
 8005106:	d110      	bne.n	800512a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005110:	9202      	str	r2, [sp, #8]
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800511c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f001 f8e2 	bl	80062e8 <xTaskCreateStatic>
 8005124:	4603      	mov	r3, r0
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	e013      	b.n	8005152 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512c:	2b00      	cmp	r3, #0
 800512e:	d110      	bne.n	8005152 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	b29a      	uxth	r2, r3
 8005134:	f107 0314 	add.w	r3, r7, #20
 8005138:	9301      	str	r3, [sp, #4]
 800513a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f001 f92c 	bl	80063a0 <xTaskCreate>
 8005148:	4603      	mov	r3, r0
 800514a:	2b01      	cmp	r3, #1
 800514c:	d001      	beq.n	8005152 <osThreadNew+0x146>
          hTask = NULL;
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005152:	697b      	ldr	r3, [r7, #20]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3738      	adds	r7, #56	; 0x38
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	20000224 	.word	0x20000224

08005160 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005166:	f3ef 8305 	mrs	r3, IPSR
 800516a:	60bb      	str	r3, [r7, #8]
  return(result);
 800516c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10f      	bne.n	8005192 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005172:	f3ef 8310 	mrs	r3, PRIMASK
 8005176:	607b      	str	r3, [r7, #4]
  return(result);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d109      	bne.n	8005192 <osThreadYield+0x32>
 800517e:	4b0f      	ldr	r3, [pc, #60]	; (80051bc <osThreadYield+0x5c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d109      	bne.n	800519a <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005186:	f3ef 8311 	mrs	r3, BASEPRI
 800518a:	603b      	str	r3, [r7, #0]
  return(result);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <osThreadYield+0x3a>
    stat = osErrorISR;
 8005192:	f06f 0305 	mvn.w	r3, #5
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	e009      	b.n	80051ae <osThreadYield+0x4e>
  } else {
    stat = osOK;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 800519e:	4b08      	ldr	r3, [pc, #32]	; (80051c0 <osThreadYield+0x60>)
 80051a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80051ae:	68fb      	ldr	r3, [r7, #12]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	20000224 	.word	0x20000224
 80051c0:	e000ed04 	.word	0xe000ed04

080051c4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051cc:	f3ef 8305 	mrs	r3, IPSR
 80051d0:	613b      	str	r3, [r7, #16]
  return(result);
 80051d2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10f      	bne.n	80051f8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051d8:	f3ef 8310 	mrs	r3, PRIMASK
 80051dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d109      	bne.n	80051f8 <osDelay+0x34>
 80051e4:	4b0d      	ldr	r3, [pc, #52]	; (800521c <osDelay+0x58>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d109      	bne.n	8005200 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051ec:	f3ef 8311 	mrs	r3, BASEPRI
 80051f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <osDelay+0x3c>
    stat = osErrorISR;
 80051f8:	f06f 0305 	mvn.w	r3, #5
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	e007      	b.n	8005210 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005200:	2300      	movs	r3, #0
 8005202:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <osDelay+0x4c>
      vTaskDelay(ticks);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f001 fa1c 	bl	8006648 <vTaskDelay>
    }
  }

  return (stat);
 8005210:	697b      	ldr	r3, [r7, #20]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20000224 	.word	0x20000224

08005220 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005220:	b580      	push	{r7, lr}
 8005222:	b08c      	sub	sp, #48	; 0x30
 8005224:	af02      	add	r7, sp, #8
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800522c:	2300      	movs	r3, #0
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005230:	f3ef 8305 	mrs	r3, IPSR
 8005234:	61bb      	str	r3, [r7, #24]
  return(result);
 8005236:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005238:	2b00      	cmp	r3, #0
 800523a:	d16f      	bne.n	800531c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800523c:	f3ef 8310 	mrs	r3, PRIMASK
 8005240:	617b      	str	r3, [r7, #20]
  return(result);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d169      	bne.n	800531c <osMessageQueueNew+0xfc>
 8005248:	4b37      	ldr	r3, [pc, #220]	; (8005328 <osMessageQueueNew+0x108>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d105      	bne.n	800525c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005250:	f3ef 8311 	mrs	r3, BASEPRI
 8005254:	613b      	str	r3, [r7, #16]
  return(result);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d15f      	bne.n	800531c <osMessageQueueNew+0xfc>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d05c      	beq.n	800531c <osMessageQueueNew+0xfc>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d059      	beq.n	800531c <osMessageQueueNew+0xfc>
    mem = -1;
 8005268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800526c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d029      	beq.n	80052c8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d012      	beq.n	80052a2 <osMessageQueueNew+0x82>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b4f      	cmp	r3, #79	; 0x4f
 8005282:	d90e      	bls.n	80052a2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	695a      	ldr	r2, [r3, #20]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	fb01 f303 	mul.w	r3, r1, r3
 8005298:	429a      	cmp	r2, r3
 800529a:	d302      	bcc.n	80052a2 <osMessageQueueNew+0x82>
        mem = 1;
 800529c:	2301      	movs	r3, #1
 800529e:	623b      	str	r3, [r7, #32]
 80052a0:	e014      	b.n	80052cc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d110      	bne.n	80052cc <osMessageQueueNew+0xac>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10c      	bne.n	80052cc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d108      	bne.n	80052cc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d104      	bne.n	80052cc <osMessageQueueNew+0xac>
          mem = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	623b      	str	r3, [r7, #32]
 80052c6:	e001      	b.n	80052cc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80052c8:	2300      	movs	r3, #0
 80052ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d10b      	bne.n	80052ea <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2100      	movs	r1, #0
 80052dc:	9100      	str	r1, [sp, #0]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 fa8b 	bl	80057fc <xQueueGenericCreateStatic>
 80052e6:	6278      	str	r0, [r7, #36]	; 0x24
 80052e8:	e008      	b.n	80052fc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d105      	bne.n	80052fc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80052f0:	2200      	movs	r2, #0
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 faf8 	bl	80058ea <xQueueGenericCreate>
 80052fa:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00c      	beq.n	800531c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	61fb      	str	r3, [r7, #28]
 800530e:	e001      	b.n	8005314 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005310:	2300      	movs	r3, #0
 8005312:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005314:	69f9      	ldr	r1, [r7, #28]
 8005316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005318:	f000 ff88 	bl	800622c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800531e:	4618      	mov	r0, r3
 8005320:	3728      	adds	r7, #40	; 0x28
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	20000224 	.word	0x20000224

0800532c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800532c:	b580      	push	{r7, lr}
 800532e:	b08a      	sub	sp, #40	; 0x28
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	4613      	mov	r3, r2
 800533a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005340:	2300      	movs	r3, #0
 8005342:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005344:	f3ef 8305 	mrs	r3, IPSR
 8005348:	61fb      	str	r3, [r7, #28]
  return(result);
 800534a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10f      	bne.n	8005370 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005350:	f3ef 8310 	mrs	r3, PRIMASK
 8005354:	61bb      	str	r3, [r7, #24]
  return(result);
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d109      	bne.n	8005370 <osMessageQueuePut+0x44>
 800535c:	4b2b      	ldr	r3, [pc, #172]	; (800540c <osMessageQueuePut+0xe0>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b02      	cmp	r3, #2
 8005362:	d12e      	bne.n	80053c2 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005364:	f3ef 8311 	mrs	r3, BASEPRI
 8005368:	617b      	str	r3, [r7, #20]
  return(result);
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d028      	beq.n	80053c2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <osMessageQueuePut+0x56>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <osMessageQueuePut+0x56>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005382:	f06f 0303 	mvn.w	r3, #3
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005388:	e039      	b.n	80053fe <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800538a:	2300      	movs	r3, #0
 800538c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800538e:	f107 0210 	add.w	r2, r7, #16
 8005392:	2300      	movs	r3, #0
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	6a38      	ldr	r0, [r7, #32]
 8005398:	f000 fc06 	bl	8005ba8 <xQueueGenericSendFromISR>
 800539c:	4603      	mov	r3, r0
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d003      	beq.n	80053aa <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80053a2:	f06f 0302 	mvn.w	r3, #2
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80053a8:	e029      	b.n	80053fe <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d026      	beq.n	80053fe <osMessageQueuePut+0xd2>
 80053b0:	4b17      	ldr	r3, [pc, #92]	; (8005410 <osMessageQueuePut+0xe4>)
 80053b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80053c0:	e01d      	b.n	80053fe <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <osMessageQueuePut+0xa2>
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d103      	bne.n	80053d6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80053ce:	f06f 0303 	mvn.w	r3, #3
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
 80053d4:	e014      	b.n	8005400 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80053d6:	2300      	movs	r3, #0
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	68b9      	ldr	r1, [r7, #8]
 80053dc:	6a38      	ldr	r0, [r7, #32]
 80053de:	f000 fae5 	bl	80059ac <xQueueGenericSend>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d00b      	beq.n	8005400 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80053ee:	f06f 0301 	mvn.w	r3, #1
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
 80053f4:	e004      	b.n	8005400 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80053f6:	f06f 0302 	mvn.w	r3, #2
 80053fa:	627b      	str	r3, [r7, #36]	; 0x24
 80053fc:	e000      	b.n	8005400 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80053fe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005402:	4618      	mov	r0, r3
 8005404:	3728      	adds	r7, #40	; 0x28
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000224 	.word	0x20000224
 8005410:	e000ed04 	.word	0xe000ed04

08005414 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b08a      	sub	sp, #40	; 0x28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005426:	2300      	movs	r3, #0
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800542a:	f3ef 8305 	mrs	r3, IPSR
 800542e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005430:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10f      	bne.n	8005456 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005436:	f3ef 8310 	mrs	r3, PRIMASK
 800543a:	61bb      	str	r3, [r7, #24]
  return(result);
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <osMessageQueueGet+0x42>
 8005442:	4b2b      	ldr	r3, [pc, #172]	; (80054f0 <osMessageQueueGet+0xdc>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b02      	cmp	r3, #2
 8005448:	d12e      	bne.n	80054a8 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800544a:	f3ef 8311 	mrs	r3, BASEPRI
 800544e:	617b      	str	r3, [r7, #20]
  return(result);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d028      	beq.n	80054a8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d005      	beq.n	8005468 <osMessageQueueGet+0x54>
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <osMessageQueueGet+0x54>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005468:	f06f 0303 	mvn.w	r3, #3
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800546e:	e038      	b.n	80054e2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005470:	2300      	movs	r3, #0
 8005472:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005474:	f107 0310 	add.w	r3, r7, #16
 8005478:	461a      	mov	r2, r3
 800547a:	68b9      	ldr	r1, [r7, #8]
 800547c:	6a38      	ldr	r0, [r7, #32]
 800547e:	f000 fd0b 	bl	8005e98 <xQueueReceiveFromISR>
 8005482:	4603      	mov	r3, r0
 8005484:	2b01      	cmp	r3, #1
 8005486:	d003      	beq.n	8005490 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005488:	f06f 0302 	mvn.w	r3, #2
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800548e:	e028      	b.n	80054e2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d025      	beq.n	80054e2 <osMessageQueueGet+0xce>
 8005496:	4b17      	ldr	r3, [pc, #92]	; (80054f4 <osMessageQueueGet+0xe0>)
 8005498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80054a6:	e01c      	b.n	80054e2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <osMessageQueueGet+0xa0>
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d103      	bne.n	80054bc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80054b4:	f06f 0303 	mvn.w	r3, #3
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ba:	e013      	b.n	80054e4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	6a38      	ldr	r0, [r7, #32]
 80054c2:	f000 fc09 	bl	8005cd8 <xQueueReceive>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d00b      	beq.n	80054e4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80054d2:	f06f 0301 	mvn.w	r3, #1
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
 80054d8:	e004      	b.n	80054e4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80054da:	f06f 0302 	mvn.w	r3, #2
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
 80054e0:	e000      	b.n	80054e4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80054e2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3728      	adds	r7, #40	; 0x28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20000224 	.word	0x20000224
 80054f4:	e000ed04 	.word	0xe000ed04

080054f8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d102      	bne.n	8005510 <osMessageQueueGetCount+0x18>
    count = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	61fb      	str	r3, [r7, #28]
 800550e:	e01e      	b.n	800554e <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005510:	f3ef 8305 	mrs	r3, IPSR
 8005514:	617b      	str	r3, [r7, #20]
  return(result);
 8005516:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10f      	bne.n	800553c <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800551c:	f3ef 8310 	mrs	r3, PRIMASK
 8005520:	613b      	str	r3, [r7, #16]
  return(result);
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d109      	bne.n	800553c <osMessageQueueGetCount+0x44>
 8005528:	4b0b      	ldr	r3, [pc, #44]	; (8005558 <osMessageQueueGetCount+0x60>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b02      	cmp	r3, #2
 800552e:	d10a      	bne.n	8005546 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005530:	f3ef 8311 	mrs	r3, BASEPRI
 8005534:	60fb      	str	r3, [r7, #12]
  return(result);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d004      	beq.n	8005546 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800553c:	69b8      	ldr	r0, [r7, #24]
 800553e:	f000 fd49 	bl	8005fd4 <uxQueueMessagesWaitingFromISR>
 8005542:	61f8      	str	r0, [r7, #28]
 8005544:	e003      	b.n	800554e <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005546:	69b8      	ldr	r0, [r7, #24]
 8005548:	f000 fd26 	bl	8005f98 <uxQueueMessagesWaiting>
 800554c:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800554e:	69fb      	ldr	r3, [r7, #28]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3720      	adds	r7, #32
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	20000224 	.word	0x20000224

0800555c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4a07      	ldr	r2, [pc, #28]	; (8005588 <vApplicationGetIdleTaskMemory+0x2c>)
 800556c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	4a06      	ldr	r2, [pc, #24]	; (800558c <vApplicationGetIdleTaskMemory+0x30>)
 8005572:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2280      	movs	r2, #128	; 0x80
 8005578:	601a      	str	r2, [r3, #0]
}
 800557a:	bf00      	nop
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	20000228 	.word	0x20000228
 800558c:	200002d0 	.word	0x200002d0

08005590 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4a07      	ldr	r2, [pc, #28]	; (80055bc <vApplicationGetTimerTaskMemory+0x2c>)
 80055a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	4a06      	ldr	r2, [pc, #24]	; (80055c0 <vApplicationGetTimerTaskMemory+0x30>)
 80055a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055ae:	601a      	str	r2, [r3, #0]
}
 80055b0:	bf00      	nop
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	200004d0 	.word	0x200004d0
 80055c0:	20000578 	.word	0x20000578

080055c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f103 0208 	add.w	r2, r3, #8
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f103 0208 	add.w	r2, r3, #8
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f103 0208 	add.w	r2, r3, #8
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	601a      	str	r2, [r3, #0]
}
 800565a:	bf00      	nop
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005666:	b480      	push	{r7}
 8005668:	b085      	sub	sp, #20
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800567c:	d103      	bne.n	8005686 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	e00c      	b.n	80056a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3308      	adds	r3, #8
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	e002      	b.n	8005694 <vListInsert+0x2e>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	429a      	cmp	r2, r3
 800569e:	d2f6      	bcs.n	800568e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	601a      	str	r2, [r3, #0]
}
 80056cc:	bf00      	nop
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6892      	ldr	r2, [r2, #8]
 80056ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6852      	ldr	r2, [r2, #4]
 80056f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	d103      	bne.n	800570c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	1e5a      	subs	r2, r3, #1
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005756:	f002 f92d 	bl	80079b4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005762:	68f9      	ldr	r1, [r7, #12]
 8005764:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005766:	fb01 f303 	mul.w	r3, r1, r3
 800576a:	441a      	add	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005786:	3b01      	subs	r3, #1
 8005788:	68f9      	ldr	r1, [r7, #12]
 800578a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800578c:	fb01 f303 	mul.w	r3, r1, r3
 8005790:	441a      	add	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	22ff      	movs	r2, #255	; 0xff
 800579a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	22ff      	movs	r2, #255	; 0xff
 80057a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d114      	bne.n	80057d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d01a      	beq.n	80057ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3310      	adds	r3, #16
 80057b8:	4618      	mov	r0, r3
 80057ba:	f001 fa17 	bl	8006bec <xTaskRemoveFromEventList>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d012      	beq.n	80057ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80057c4:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <xQueueGenericReset+0xcc>)
 80057c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	e009      	b.n	80057ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3310      	adds	r3, #16
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff fef2 	bl	80055c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	3324      	adds	r3, #36	; 0x24
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff feed 	bl	80055c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057ea:	f002 f913 	bl	8007a14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057ee:	2301      	movs	r3, #1
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	e000ed04 	.word	0xe000ed04

080057fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08e      	sub	sp, #56	; 0x38
 8005800:	af02      	add	r7, sp, #8
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10a      	bne.n	8005826 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10a      	bne.n	8005842 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800583e:	bf00      	nop
 8005840:	e7fe      	b.n	8005840 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <xQueueGenericCreateStatic+0x52>
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <xQueueGenericCreateStatic+0x56>
 800584e:	2301      	movs	r3, #1
 8005850:	e000      	b.n	8005854 <xQueueGenericCreateStatic+0x58>
 8005852:	2300      	movs	r3, #0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10a      	bne.n	800586e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	623b      	str	r3, [r7, #32]
}
 800586a:	bf00      	nop
 800586c:	e7fe      	b.n	800586c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d102      	bne.n	800587a <xQueueGenericCreateStatic+0x7e>
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <xQueueGenericCreateStatic+0x82>
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <xQueueGenericCreateStatic+0x84>
 800587e:	2300      	movs	r3, #0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	61fb      	str	r3, [r7, #28]
}
 8005896:	bf00      	nop
 8005898:	e7fe      	b.n	8005898 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800589a:	2350      	movs	r3, #80	; 0x50
 800589c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b50      	cmp	r3, #80	; 0x50
 80058a2:	d00a      	beq.n	80058ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	61bb      	str	r3, [r7, #24]
}
 80058b6:	bf00      	nop
 80058b8:	e7fe      	b.n	80058b8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80058be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00d      	beq.n	80058e0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058cc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	4613      	mov	r3, r2
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f843 	bl	8005966 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80058e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3730      	adds	r7, #48	; 0x30
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b08a      	sub	sp, #40	; 0x28
 80058ee:	af02      	add	r7, sp, #8
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	4613      	mov	r3, r2
 80058f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10a      	bne.n	8005914 <xQueueGenericCreate+0x2a>
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	613b      	str	r3, [r7, #16]
}
 8005910:	bf00      	nop
 8005912:	e7fe      	b.n	8005912 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d102      	bne.n	8005920 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800591a:	2300      	movs	r3, #0
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	e004      	b.n	800592a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	fb02 f303 	mul.w	r3, r2, r3
 8005928:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	3350      	adds	r3, #80	; 0x50
 800592e:	4618      	mov	r0, r3
 8005930:	f002 f962 	bl	8007bf8 <pvPortMalloc>
 8005934:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00f      	beq.n	800595c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	3350      	adds	r3, #80	; 0x50
 8005940:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800594a:	79fa      	ldrb	r2, [r7, #7]
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	4613      	mov	r3, r2
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 f805 	bl	8005966 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800595c:	69bb      	ldr	r3, [r7, #24]
	}
 800595e:	4618      	mov	r0, r3
 8005960:	3720      	adds	r7, #32
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	60f8      	str	r0, [r7, #12]
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	607a      	str	r2, [r7, #4]
 8005972:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d103      	bne.n	8005982 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e002      	b.n	8005988 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005994:	2101      	movs	r1, #1
 8005996:	69b8      	ldr	r0, [r7, #24]
 8005998:	f7ff fec8 	bl	800572c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	78fa      	ldrb	r2, [r7, #3]
 80059a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059a4:	bf00      	nop
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08e      	sub	sp, #56	; 0x38
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059ba:	2300      	movs	r3, #0
 80059bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10a      	bne.n	80059de <xQueueGenericSend+0x32>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059da:	bf00      	nop
 80059dc:	e7fe      	b.n	80059dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d103      	bne.n	80059ec <xQueueGenericSend+0x40>
 80059e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <xQueueGenericSend+0x44>
 80059ec:	2301      	movs	r3, #1
 80059ee:	e000      	b.n	80059f2 <xQueueGenericSend+0x46>
 80059f0:	2300      	movs	r3, #0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10a      	bne.n	8005a0c <xQueueGenericSend+0x60>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a08:	bf00      	nop
 8005a0a:	e7fe      	b.n	8005a0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d103      	bne.n	8005a1a <xQueueGenericSend+0x6e>
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <xQueueGenericSend+0x72>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e000      	b.n	8005a20 <xQueueGenericSend+0x74>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <xQueueGenericSend+0x8e>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	623b      	str	r3, [r7, #32]
}
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a3a:	f001 fa9f 	bl	8006f7c <xTaskGetSchedulerState>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <xQueueGenericSend+0x9e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <xQueueGenericSend+0xa2>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <xQueueGenericSend+0xa4>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <xQueueGenericSend+0xbe>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	61fb      	str	r3, [r7, #28]
}
 8005a66:	bf00      	nop
 8005a68:	e7fe      	b.n	8005a68 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a6a:	f001 ffa3 	bl	80079b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d302      	bcc.n	8005a80 <xQueueGenericSend+0xd4>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d129      	bne.n	8005ad4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a86:	f000 fac1 	bl	800600c <prvCopyDataToQueue>
 8005a8a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d010      	beq.n	8005ab6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	3324      	adds	r3, #36	; 0x24
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 f8a7 	bl	8006bec <xTaskRemoveFromEventList>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d013      	beq.n	8005acc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005aa4:	4b3f      	ldr	r3, [pc, #252]	; (8005ba4 <xQueueGenericSend+0x1f8>)
 8005aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	e00a      	b.n	8005acc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005abc:	4b39      	ldr	r3, [pc, #228]	; (8005ba4 <xQueueGenericSend+0x1f8>)
 8005abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005acc:	f001 ffa2 	bl	8007a14 <vPortExitCritical>
				return pdPASS;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e063      	b.n	8005b9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d103      	bne.n	8005ae2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ada:	f001 ff9b 	bl	8007a14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	e05c      	b.n	8005b9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d106      	bne.n	8005af6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ae8:	f107 0314 	add.w	r3, r7, #20
 8005aec:	4618      	mov	r0, r3
 8005aee:	f001 f8e1 	bl	8006cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005af2:	2301      	movs	r3, #1
 8005af4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005af6:	f001 ff8d 	bl	8007a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005afa:	f000 fe49 	bl	8006790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005afe:	f001 ff59 	bl	80079b4 <vPortEnterCritical>
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b08:	b25b      	sxtb	r3, r3
 8005b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b0e:	d103      	bne.n	8005b18 <xQueueGenericSend+0x16c>
 8005b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b1e:	b25b      	sxtb	r3, r3
 8005b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b24:	d103      	bne.n	8005b2e <xQueueGenericSend+0x182>
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b2e:	f001 ff71 	bl	8007a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b32:	1d3a      	adds	r2, r7, #4
 8005b34:	f107 0314 	add.w	r3, r7, #20
 8005b38:	4611      	mov	r1, r2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f001 f8d0 	bl	8006ce0 <xTaskCheckForTimeOut>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d124      	bne.n	8005b90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b48:	f000 fb58 	bl	80061fc <prvIsQueueFull>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d018      	beq.n	8005b84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	3310      	adds	r3, #16
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	4611      	mov	r1, r2
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fff6 	bl	8006b4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b62:	f000 fae3 	bl	800612c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b66:	f000 fe21 	bl	80067ac <xTaskResumeAll>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f47f af7c 	bne.w	8005a6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005b72:	4b0c      	ldr	r3, [pc, #48]	; (8005ba4 <xQueueGenericSend+0x1f8>)
 8005b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	e772      	b.n	8005a6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b86:	f000 fad1 	bl	800612c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b8a:	f000 fe0f 	bl	80067ac <xTaskResumeAll>
 8005b8e:	e76c      	b.n	8005a6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b92:	f000 facb 	bl	800612c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b96:	f000 fe09 	bl	80067ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b9a:	2300      	movs	r3, #0
		}
	}
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3738      	adds	r7, #56	; 0x38
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	e000ed04 	.word	0xe000ed04

08005ba8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08e      	sub	sp, #56	; 0x38
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10a      	bne.n	8005bd6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bd2:	bf00      	nop
 8005bd4:	e7fe      	b.n	8005bd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d103      	bne.n	8005be4 <xQueueGenericSendFromISR+0x3c>
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <xQueueGenericSendFromISR+0x40>
 8005be4:	2301      	movs	r3, #1
 8005be6:	e000      	b.n	8005bea <xQueueGenericSendFromISR+0x42>
 8005be8:	2300      	movs	r3, #0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10a      	bne.n	8005c04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	623b      	str	r3, [r7, #32]
}
 8005c00:	bf00      	nop
 8005c02:	e7fe      	b.n	8005c02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d103      	bne.n	8005c12 <xQueueGenericSendFromISR+0x6a>
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d101      	bne.n	8005c16 <xQueueGenericSendFromISR+0x6e>
 8005c12:	2301      	movs	r3, #1
 8005c14:	e000      	b.n	8005c18 <xQueueGenericSendFromISR+0x70>
 8005c16:	2300      	movs	r3, #0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	61fb      	str	r3, [r7, #28]
}
 8005c2e:	bf00      	nop
 8005c30:	e7fe      	b.n	8005c30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c32:	f001 ffa1 	bl	8007b78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c36:	f3ef 8211 	mrs	r2, BASEPRI
 8005c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	61ba      	str	r2, [r7, #24]
 8005c4c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c4e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d302      	bcc.n	8005c64 <xQueueGenericSendFromISR+0xbc>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d12c      	bne.n	8005cbe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c74:	f000 f9ca 	bl	800600c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c78:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c80:	d112      	bne.n	8005ca8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d016      	beq.n	8005cb8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8c:	3324      	adds	r3, #36	; 0x24
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 ffac 	bl	8006bec <xTaskRemoveFromEventList>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00e      	beq.n	8005cb8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00b      	beq.n	8005cb8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	e007      	b.n	8005cb8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ca8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cac:	3301      	adds	r3, #1
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	b25a      	sxtb	r2, r3
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005cbc:	e001      	b.n	8005cc2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ccc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3738      	adds	r7, #56	; 0x38
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08c      	sub	sp, #48	; 0x30
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <xQueueReceive+0x30>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	623b      	str	r3, [r7, #32]
}
 8005d04:	bf00      	nop
 8005d06:	e7fe      	b.n	8005d06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d103      	bne.n	8005d16 <xQueueReceive+0x3e>
 8005d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <xQueueReceive+0x42>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <xQueueReceive+0x44>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10a      	bne.n	8005d36 <xQueueReceive+0x5e>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	61fb      	str	r3, [r7, #28]
}
 8005d32:	bf00      	nop
 8005d34:	e7fe      	b.n	8005d34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d36:	f001 f921 	bl	8006f7c <xTaskGetSchedulerState>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d102      	bne.n	8005d46 <xQueueReceive+0x6e>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <xQueueReceive+0x72>
 8005d46:	2301      	movs	r3, #1
 8005d48:	e000      	b.n	8005d4c <xQueueReceive+0x74>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10a      	bne.n	8005d66 <xQueueReceive+0x8e>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	61bb      	str	r3, [r7, #24]
}
 8005d62:	bf00      	nop
 8005d64:	e7fe      	b.n	8005d64 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d66:	f001 fe25 	bl	80079b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d01f      	beq.n	8005db6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d7a:	f000 f9b1 	bl	80060e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	1e5a      	subs	r2, r3, #1
 8005d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00f      	beq.n	8005dae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d90:	3310      	adds	r3, #16
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 ff2a 	bl	8006bec <xTaskRemoveFromEventList>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d007      	beq.n	8005dae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d9e:	4b3d      	ldr	r3, [pc, #244]	; (8005e94 <xQueueReceive+0x1bc>)
 8005da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005dae:	f001 fe31 	bl	8007a14 <vPortExitCritical>
				return pdPASS;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e069      	b.n	8005e8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d103      	bne.n	8005dc4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005dbc:	f001 fe2a 	bl	8007a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	e062      	b.n	8005e8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dca:	f107 0310 	add.w	r3, r7, #16
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 ff70 	bl	8006cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dd8:	f001 fe1c 	bl	8007a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ddc:	f000 fcd8 	bl	8006790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005de0:	f001 fde8 	bl	80079b4 <vPortEnterCritical>
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dea:	b25b      	sxtb	r3, r3
 8005dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005df0:	d103      	bne.n	8005dfa <xQueueReceive+0x122>
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e00:	b25b      	sxtb	r3, r3
 8005e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e06:	d103      	bne.n	8005e10 <xQueueReceive+0x138>
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e10:	f001 fe00 	bl	8007a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e14:	1d3a      	adds	r2, r7, #4
 8005e16:	f107 0310 	add.w	r3, r7, #16
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 ff5f 	bl	8006ce0 <xTaskCheckForTimeOut>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d123      	bne.n	8005e70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e2a:	f000 f9d1 	bl	80061d0 <prvIsQueueEmpty>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d017      	beq.n	8005e64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	3324      	adds	r3, #36	; 0x24
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fe85 	bl	8006b4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e44:	f000 f972 	bl	800612c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e48:	f000 fcb0 	bl	80067ac <xTaskResumeAll>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d189      	bne.n	8005d66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005e52:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <xQueueReceive+0x1bc>)
 8005e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	e780      	b.n	8005d66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e66:	f000 f961 	bl	800612c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e6a:	f000 fc9f 	bl	80067ac <xTaskResumeAll>
 8005e6e:	e77a      	b.n	8005d66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e72:	f000 f95b 	bl	800612c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e76:	f000 fc99 	bl	80067ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e7c:	f000 f9a8 	bl	80061d0 <prvIsQueueEmpty>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f43f af6f 	beq.w	8005d66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3730      	adds	r7, #48	; 0x30
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	e000ed04 	.word	0xe000ed04

08005e98 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08e      	sub	sp, #56	; 0x38
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	623b      	str	r3, [r7, #32]
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d103      	bne.n	8005ed2 <xQueueReceiveFromISR+0x3a>
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <xQueueReceiveFromISR+0x3e>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <xQueueReceiveFromISR+0x40>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	61fb      	str	r3, [r7, #28]
}
 8005eee:	bf00      	nop
 8005ef0:	e7fe      	b.n	8005ef0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ef2:	f001 fe41 	bl	8007b78 <vPortValidateInterruptPriority>
	__asm volatile
 8005ef6:	f3ef 8211 	mrs	r2, BASEPRI
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	61ba      	str	r2, [r7, #24]
 8005f0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005f0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d02f      	beq.n	8005f7e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f28:	68b9      	ldr	r1, [r7, #8]
 8005f2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f2c:	f000 f8d8 	bl	80060e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f32:	1e5a      	subs	r2, r3, #1
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005f38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f40:	d112      	bne.n	8005f68 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d016      	beq.n	8005f78 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	3310      	adds	r3, #16
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fe4c 	bl	8006bec <xTaskRemoveFromEventList>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00e      	beq.n	8005f78 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e007      	b.n	8005f78 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	b25a      	sxtb	r2, r3
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f7c:	e001      	b.n	8005f82 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	637b      	str	r3, [r7, #52]	; 0x34
 8005f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f383 8811 	msr	BASEPRI, r3
}
 8005f8c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3738      	adds	r7, #56	; 0x38
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10a      	bne.n	8005fbc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	60bb      	str	r3, [r7, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	e7fe      	b.n	8005fba <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005fbc:	f001 fcfa 	bl	80079b4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005fc6:	f001 fd25 	bl	8007a14 <vPortExitCritical>

	return uxReturn;
 8005fca:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10a      	bne.n	8005ff8 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	60bb      	str	r3, [r7, #8]
}
 8005ff4:	bf00      	nop
 8005ff6:	e7fe      	b.n	8005ff6 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006018:	2300      	movs	r3, #0
 800601a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10d      	bne.n	8006046 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d14d      	bne.n	80060ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	4618      	mov	r0, r3
 8006038:	f000 ffbe 	bl	8006fb8 <xTaskPriorityDisinherit>
 800603c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	605a      	str	r2, [r3, #4]
 8006044:	e043      	b.n	80060ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d119      	bne.n	8006080 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6898      	ldr	r0, [r3, #8]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006054:	461a      	mov	r2, r3
 8006056:	68b9      	ldr	r1, [r7, #8]
 8006058:	f002 f856 	bl	8008108 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	441a      	add	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	429a      	cmp	r2, r3
 8006074:	d32b      	bcc.n	80060ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	609a      	str	r2, [r3, #8]
 800607e:	e026      	b.n	80060ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	68d8      	ldr	r0, [r3, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006088:	461a      	mov	r2, r3
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	f002 f83c 	bl	8008108 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	425b      	negs	r3, r3
 800609a:	441a      	add	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d207      	bcs.n	80060bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b4:	425b      	negs	r3, r3
 80060b6:	441a      	add	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d105      	bne.n	80060ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d002      	beq.n	80060ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80060d6:	697b      	ldr	r3, [r7, #20]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d018      	beq.n	8006124 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	441a      	add	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	429a      	cmp	r2, r3
 800610a:	d303      	bcc.n	8006114 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68d9      	ldr	r1, [r3, #12]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	461a      	mov	r2, r3
 800611e:	6838      	ldr	r0, [r7, #0]
 8006120:	f001 fff2 	bl	8008108 <memcpy>
	}
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006134:	f001 fc3e 	bl	80079b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800613e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006140:	e011      	b.n	8006166 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	2b00      	cmp	r3, #0
 8006148:	d012      	beq.n	8006170 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3324      	adds	r3, #36	; 0x24
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fd4c 	bl	8006bec <xTaskRemoveFromEventList>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800615a:	f000 fe23 	bl	8006da4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800615e:	7bfb      	ldrb	r3, [r7, #15]
 8006160:	3b01      	subs	r3, #1
 8006162:	b2db      	uxtb	r3, r3
 8006164:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800616a:	2b00      	cmp	r3, #0
 800616c:	dce9      	bgt.n	8006142 <prvUnlockQueue+0x16>
 800616e:	e000      	b.n	8006172 <prvUnlockQueue+0x46>
					break;
 8006170:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	22ff      	movs	r2, #255	; 0xff
 8006176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800617a:	f001 fc4b 	bl	8007a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800617e:	f001 fc19 	bl	80079b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006188:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800618a:	e011      	b.n	80061b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d012      	beq.n	80061ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3310      	adds	r3, #16
 8006198:	4618      	mov	r0, r3
 800619a:	f000 fd27 	bl	8006bec <xTaskRemoveFromEventList>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061a4:	f000 fdfe 	bl	8006da4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061a8:	7bbb      	ldrb	r3, [r7, #14]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	dce9      	bgt.n	800618c <prvUnlockQueue+0x60>
 80061b8:	e000      	b.n	80061bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	22ff      	movs	r2, #255	; 0xff
 80061c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80061c4:	f001 fc26 	bl	8007a14 <vPortExitCritical>
}
 80061c8:	bf00      	nop
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061d8:	f001 fbec 	bl	80079b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d102      	bne.n	80061ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80061e4:	2301      	movs	r3, #1
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	e001      	b.n	80061ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061ee:	f001 fc11 	bl	8007a14 <vPortExitCritical>

	return xReturn;
 80061f2:	68fb      	ldr	r3, [r7, #12]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006204:	f001 fbd6 	bl	80079b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006210:	429a      	cmp	r2, r3
 8006212:	d102      	bne.n	800621a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006214:	2301      	movs	r3, #1
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	e001      	b.n	800621e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800621e:	f001 fbf9 	bl	8007a14 <vPortExitCritical>

	return xReturn;
 8006222:	68fb      	ldr	r3, [r7, #12]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	e014      	b.n	8006266 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800623c:	4a0f      	ldr	r2, [pc, #60]	; (800627c <vQueueAddToRegistry+0x50>)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10b      	bne.n	8006260 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006248:	490c      	ldr	r1, [pc, #48]	; (800627c <vQueueAddToRegistry+0x50>)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006252:	4a0a      	ldr	r2, [pc, #40]	; (800627c <vQueueAddToRegistry+0x50>)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	4413      	add	r3, r2
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800625e:	e006      	b.n	800626e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	3301      	adds	r3, #1
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2b07      	cmp	r3, #7
 800626a:	d9e7      	bls.n	800623c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800626c:	bf00      	nop
 800626e:	bf00      	nop
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	20000978 	.word	0x20000978

08006280 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006290:	f001 fb90 	bl	80079b4 <vPortEnterCritical>
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800629a:	b25b      	sxtb	r3, r3
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062a0:	d103      	bne.n	80062aa <vQueueWaitForMessageRestricted+0x2a>
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062b0:	b25b      	sxtb	r3, r3
 80062b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062b6:	d103      	bne.n	80062c0 <vQueueWaitForMessageRestricted+0x40>
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062c0:	f001 fba8 	bl	8007a14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d106      	bne.n	80062da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	3324      	adds	r3, #36	; 0x24
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	68b9      	ldr	r1, [r7, #8]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fc5d 	bl	8006b94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80062da:	6978      	ldr	r0, [r7, #20]
 80062dc:	f7ff ff26 	bl	800612c <prvUnlockQueue>
	}
 80062e0:	bf00      	nop
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08e      	sub	sp, #56	; 0x38
 80062ec:	af04      	add	r7, sp, #16
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80062f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <xTaskCreateStatic+0x2a>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	623b      	str	r3, [r7, #32]
}
 800630e:	bf00      	nop
 8006310:	e7fe      	b.n	8006310 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <xTaskCreateStatic+0x46>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	61fb      	str	r3, [r7, #28]
}
 800632a:	bf00      	nop
 800632c:	e7fe      	b.n	800632c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800632e:	23a8      	movs	r3, #168	; 0xa8
 8006330:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	2ba8      	cmp	r3, #168	; 0xa8
 8006336:	d00a      	beq.n	800634e <xTaskCreateStatic+0x66>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	61bb      	str	r3, [r7, #24]
}
 800634a:	bf00      	nop
 800634c:	e7fe      	b.n	800634c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006350:	2b00      	cmp	r3, #0
 8006352:	d01e      	beq.n	8006392 <xTaskCreateStatic+0xaa>
 8006354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01b      	beq.n	8006392 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006362:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	2202      	movs	r2, #2
 8006368:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800636c:	2300      	movs	r3, #0
 800636e:	9303      	str	r3, [sp, #12]
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	9302      	str	r3, [sp, #8]
 8006374:	f107 0314 	add.w	r3, r7, #20
 8006378:	9301      	str	r3, [sp, #4]
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	68b9      	ldr	r1, [r7, #8]
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 f851 	bl	800642c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800638a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800638c:	f000 f8ec 	bl	8006568 <prvAddNewTaskToReadyList>
 8006390:	e001      	b.n	8006396 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006396:	697b      	ldr	r3, [r7, #20]
	}
 8006398:	4618      	mov	r0, r3
 800639a:	3728      	adds	r7, #40	; 0x28
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08c      	sub	sp, #48	; 0x30
 80063a4:	af04      	add	r7, sp, #16
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	4613      	mov	r3, r2
 80063ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063b0:	88fb      	ldrh	r3, [r7, #6]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4618      	mov	r0, r3
 80063b6:	f001 fc1f 	bl	8007bf8 <pvPortMalloc>
 80063ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00e      	beq.n	80063e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80063c2:	20a8      	movs	r0, #168	; 0xa8
 80063c4:	f001 fc18 	bl	8007bf8 <pvPortMalloc>
 80063c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	631a      	str	r2, [r3, #48]	; 0x30
 80063d6:	e005      	b.n	80063e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80063d8:	6978      	ldr	r0, [r7, #20]
 80063da:	f001 fcd1 	bl	8007d80 <vPortFree>
 80063de:	e001      	b.n	80063e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80063e0:	2300      	movs	r3, #0
 80063e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d017      	beq.n	800641a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063f2:	88fa      	ldrh	r2, [r7, #6]
 80063f4:	2300      	movs	r3, #0
 80063f6:	9303      	str	r3, [sp, #12]
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	9302      	str	r3, [sp, #8]
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	9301      	str	r3, [sp, #4]
 8006400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 f80f 	bl	800642c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800640e:	69f8      	ldr	r0, [r7, #28]
 8006410:	f000 f8aa 	bl	8006568 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006414:	2301      	movs	r3, #1
 8006416:	61bb      	str	r3, [r7, #24]
 8006418:	e002      	b.n	8006420 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800641a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800641e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006420:	69bb      	ldr	r3, [r7, #24]
	}
 8006422:	4618      	mov	r0, r3
 8006424:	3720      	adds	r7, #32
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	461a      	mov	r2, r3
 8006444:	21a5      	movs	r1, #165	; 0xa5
 8006446:	f001 fdd5 	bl	8007ff4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006454:	3b01      	subs	r3, #1
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	f023 0307 	bic.w	r3, r3, #7
 8006462:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <prvInitialiseNewTask+0x58>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	617b      	str	r3, [r7, #20]
}
 8006480:	bf00      	nop
 8006482:	e7fe      	b.n	8006482 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006484:	2300      	movs	r3, #0
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	e012      	b.n	80064b0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	4413      	add	r3, r2
 8006490:	7819      	ldrb	r1, [r3, #0]
 8006492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	4413      	add	r3, r2
 8006498:	3334      	adds	r3, #52	; 0x34
 800649a:	460a      	mov	r2, r1
 800649c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	4413      	add	r3, r2
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d006      	beq.n	80064b8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	3301      	adds	r3, #1
 80064ae:	61fb      	str	r3, [r7, #28]
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	2b0f      	cmp	r3, #15
 80064b4:	d9e9      	bls.n	800648a <prvInitialiseNewTask+0x5e>
 80064b6:	e000      	b.n	80064ba <prvInitialiseNewTask+0x8e>
		{
			break;
 80064b8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	2b37      	cmp	r3, #55	; 0x37
 80064c6:	d901      	bls.n	80064cc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064c8:	2337      	movs	r3, #55	; 0x37
 80064ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80064cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80064d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064da:	2200      	movs	r2, #0
 80064dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	3304      	adds	r3, #4
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7ff f88e 	bl	8005604 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80064e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ea:	3318      	adds	r3, #24
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7ff f889 	bl	8005604 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006506:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650a:	2200      	movs	r2, #0
 800650c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006512:	2200      	movs	r2, #0
 8006514:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651a:	3354      	adds	r3, #84	; 0x54
 800651c:	224c      	movs	r2, #76	; 0x4c
 800651e:	2100      	movs	r1, #0
 8006520:	4618      	mov	r0, r3
 8006522:	f001 fd67 	bl	8007ff4 <memset>
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	4a0c      	ldr	r2, [pc, #48]	; (800655c <prvInitialiseNewTask+0x130>)
 800652a:	659a      	str	r2, [r3, #88]	; 0x58
 800652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652e:	4a0c      	ldr	r2, [pc, #48]	; (8006560 <prvInitialiseNewTask+0x134>)
 8006530:	65da      	str	r2, [r3, #92]	; 0x5c
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	4a0b      	ldr	r2, [pc, #44]	; (8006564 <prvInitialiseNewTask+0x138>)
 8006536:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	68f9      	ldr	r1, [r7, #12]
 800653c:	69b8      	ldr	r0, [r7, #24]
 800653e:	f001 f90f 	bl	8007760 <pxPortInitialiseStack>
 8006542:	4602      	mov	r2, r0
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006552:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006554:	bf00      	nop
 8006556:	3720      	adds	r7, #32
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20001c04 	.word	0x20001c04
 8006560:	20001c6c 	.word	0x20001c6c
 8006564:	20001cd4 	.word	0x20001cd4

08006568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006570:	f001 fa20 	bl	80079b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006574:	4b2d      	ldr	r3, [pc, #180]	; (800662c <prvAddNewTaskToReadyList+0xc4>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3301      	adds	r3, #1
 800657a:	4a2c      	ldr	r2, [pc, #176]	; (800662c <prvAddNewTaskToReadyList+0xc4>)
 800657c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800657e:	4b2c      	ldr	r3, [pc, #176]	; (8006630 <prvAddNewTaskToReadyList+0xc8>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d109      	bne.n	800659a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006586:	4a2a      	ldr	r2, [pc, #168]	; (8006630 <prvAddNewTaskToReadyList+0xc8>)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800658c:	4b27      	ldr	r3, [pc, #156]	; (800662c <prvAddNewTaskToReadyList+0xc4>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d110      	bne.n	80065b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006594:	f000 fc2a 	bl	8006dec <prvInitialiseTaskLists>
 8006598:	e00d      	b.n	80065b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800659a:	4b26      	ldr	r3, [pc, #152]	; (8006634 <prvAddNewTaskToReadyList+0xcc>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065a2:	4b23      	ldr	r3, [pc, #140]	; (8006630 <prvAddNewTaskToReadyList+0xc8>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d802      	bhi.n	80065b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065b0:	4a1f      	ldr	r2, [pc, #124]	; (8006630 <prvAddNewTaskToReadyList+0xc8>)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065b6:	4b20      	ldr	r3, [pc, #128]	; (8006638 <prvAddNewTaskToReadyList+0xd0>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3301      	adds	r3, #1
 80065bc:	4a1e      	ldr	r2, [pc, #120]	; (8006638 <prvAddNewTaskToReadyList+0xd0>)
 80065be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80065c0:	4b1d      	ldr	r3, [pc, #116]	; (8006638 <prvAddNewTaskToReadyList+0xd0>)
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065cc:	4b1b      	ldr	r3, [pc, #108]	; (800663c <prvAddNewTaskToReadyList+0xd4>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d903      	bls.n	80065dc <prvAddNewTaskToReadyList+0x74>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	4a18      	ldr	r2, [pc, #96]	; (800663c <prvAddNewTaskToReadyList+0xd4>)
 80065da:	6013      	str	r3, [r2, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4a15      	ldr	r2, [pc, #84]	; (8006640 <prvAddNewTaskToReadyList+0xd8>)
 80065ea:	441a      	add	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3304      	adds	r3, #4
 80065f0:	4619      	mov	r1, r3
 80065f2:	4610      	mov	r0, r2
 80065f4:	f7ff f813 	bl	800561e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80065f8:	f001 fa0c 	bl	8007a14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80065fc:	4b0d      	ldr	r3, [pc, #52]	; (8006634 <prvAddNewTaskToReadyList+0xcc>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00e      	beq.n	8006622 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006604:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <prvAddNewTaskToReadyList+0xc8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660e:	429a      	cmp	r2, r3
 8006610:	d207      	bcs.n	8006622 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006612:	4b0c      	ldr	r3, [pc, #48]	; (8006644 <prvAddNewTaskToReadyList+0xdc>)
 8006614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006622:	bf00      	nop
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	20000e8c 	.word	0x20000e8c
 8006630:	200009b8 	.word	0x200009b8
 8006634:	20000e98 	.word	0x20000e98
 8006638:	20000ea8 	.word	0x20000ea8
 800663c:	20000e94 	.word	0x20000e94
 8006640:	200009bc 	.word	0x200009bc
 8006644:	e000ed04 	.word	0xe000ed04

08006648 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006650:	2300      	movs	r3, #0
 8006652:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d017      	beq.n	800668a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800665a:	4b13      	ldr	r3, [pc, #76]	; (80066a8 <vTaskDelay+0x60>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <vTaskDelay+0x30>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	60bb      	str	r3, [r7, #8]
}
 8006674:	bf00      	nop
 8006676:	e7fe      	b.n	8006676 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006678:	f000 f88a 	bl	8006790 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800667c:	2100      	movs	r1, #0
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fd08 	bl	8007094 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006684:	f000 f892 	bl	80067ac <xTaskResumeAll>
 8006688:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d107      	bne.n	80066a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006690:	4b06      	ldr	r3, [pc, #24]	; (80066ac <vTaskDelay+0x64>)
 8006692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066a0:	bf00      	nop
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20000eb4 	.word	0x20000eb4
 80066ac:	e000ed04 	.word	0xe000ed04

080066b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08a      	sub	sp, #40	; 0x28
 80066b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80066be:	463a      	mov	r2, r7
 80066c0:	1d39      	adds	r1, r7, #4
 80066c2:	f107 0308 	add.w	r3, r7, #8
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fe ff48 	bl	800555c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80066cc:	6839      	ldr	r1, [r7, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	9202      	str	r2, [sp, #8]
 80066d4:	9301      	str	r3, [sp, #4]
 80066d6:	2300      	movs	r3, #0
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	2300      	movs	r3, #0
 80066dc:	460a      	mov	r2, r1
 80066de:	4924      	ldr	r1, [pc, #144]	; (8006770 <vTaskStartScheduler+0xc0>)
 80066e0:	4824      	ldr	r0, [pc, #144]	; (8006774 <vTaskStartScheduler+0xc4>)
 80066e2:	f7ff fe01 	bl	80062e8 <xTaskCreateStatic>
 80066e6:	4603      	mov	r3, r0
 80066e8:	4a23      	ldr	r2, [pc, #140]	; (8006778 <vTaskStartScheduler+0xc8>)
 80066ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80066ec:	4b22      	ldr	r3, [pc, #136]	; (8006778 <vTaskStartScheduler+0xc8>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80066f4:	2301      	movs	r3, #1
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	e001      	b.n	80066fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d102      	bne.n	800670a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006704:	f000 fd1a 	bl	800713c <xTimerCreateTimerTask>
 8006708:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d11b      	bne.n	8006748 <vTaskStartScheduler+0x98>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	613b      	str	r3, [r7, #16]
}
 8006722:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006724:	4b15      	ldr	r3, [pc, #84]	; (800677c <vTaskStartScheduler+0xcc>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3354      	adds	r3, #84	; 0x54
 800672a:	4a15      	ldr	r2, [pc, #84]	; (8006780 <vTaskStartScheduler+0xd0>)
 800672c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800672e:	4b15      	ldr	r3, [pc, #84]	; (8006784 <vTaskStartScheduler+0xd4>)
 8006730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006734:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006736:	4b14      	ldr	r3, [pc, #80]	; (8006788 <vTaskStartScheduler+0xd8>)
 8006738:	2201      	movs	r2, #1
 800673a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800673c:	4b13      	ldr	r3, [pc, #76]	; (800678c <vTaskStartScheduler+0xdc>)
 800673e:	2200      	movs	r2, #0
 8006740:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006742:	f001 f895 	bl	8007870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006746:	e00e      	b.n	8006766 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800674e:	d10a      	bne.n	8006766 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	60fb      	str	r3, [r7, #12]
}
 8006762:	bf00      	nop
 8006764:	e7fe      	b.n	8006764 <vTaskStartScheduler+0xb4>
}
 8006766:	bf00      	nop
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	08008bcc 	.word	0x08008bcc
 8006774:	08006dbd 	.word	0x08006dbd
 8006778:	20000eb0 	.word	0x20000eb0
 800677c:	200009b8 	.word	0x200009b8
 8006780:	2000005c 	.word	0x2000005c
 8006784:	20000eac 	.word	0x20000eac
 8006788:	20000e98 	.word	0x20000e98
 800678c:	20000e90 	.word	0x20000e90

08006790 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006794:	4b04      	ldr	r3, [pc, #16]	; (80067a8 <vTaskSuspendAll+0x18>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	4a03      	ldr	r2, [pc, #12]	; (80067a8 <vTaskSuspendAll+0x18>)
 800679c:	6013      	str	r3, [r2, #0]
}
 800679e:	bf00      	nop
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr
 80067a8:	20000eb4 	.word	0x20000eb4

080067ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067b6:	2300      	movs	r3, #0
 80067b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80067ba:	4b42      	ldr	r3, [pc, #264]	; (80068c4 <xTaskResumeAll+0x118>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	603b      	str	r3, [r7, #0]
}
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80067d8:	f001 f8ec 	bl	80079b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80067dc:	4b39      	ldr	r3, [pc, #228]	; (80068c4 <xTaskResumeAll+0x118>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	4a38      	ldr	r2, [pc, #224]	; (80068c4 <xTaskResumeAll+0x118>)
 80067e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067e6:	4b37      	ldr	r3, [pc, #220]	; (80068c4 <xTaskResumeAll+0x118>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d162      	bne.n	80068b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80067ee:	4b36      	ldr	r3, [pc, #216]	; (80068c8 <xTaskResumeAll+0x11c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d05e      	beq.n	80068b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067f6:	e02f      	b.n	8006858 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80067f8:	4b34      	ldr	r3, [pc, #208]	; (80068cc <xTaskResumeAll+0x120>)
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3318      	adds	r3, #24
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe ff67 	bl	80056d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3304      	adds	r3, #4
 800680e:	4618      	mov	r0, r3
 8006810:	f7fe ff62 	bl	80056d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006818:	4b2d      	ldr	r3, [pc, #180]	; (80068d0 <xTaskResumeAll+0x124>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d903      	bls.n	8006828 <xTaskResumeAll+0x7c>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006824:	4a2a      	ldr	r2, [pc, #168]	; (80068d0 <xTaskResumeAll+0x124>)
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4a27      	ldr	r2, [pc, #156]	; (80068d4 <xTaskResumeAll+0x128>)
 8006836:	441a      	add	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3304      	adds	r3, #4
 800683c:	4619      	mov	r1, r3
 800683e:	4610      	mov	r0, r2
 8006840:	f7fe feed 	bl	800561e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006848:	4b23      	ldr	r3, [pc, #140]	; (80068d8 <xTaskResumeAll+0x12c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684e:	429a      	cmp	r2, r3
 8006850:	d302      	bcc.n	8006858 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006852:	4b22      	ldr	r3, [pc, #136]	; (80068dc <xTaskResumeAll+0x130>)
 8006854:	2201      	movs	r2, #1
 8006856:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006858:	4b1c      	ldr	r3, [pc, #112]	; (80068cc <xTaskResumeAll+0x120>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1cb      	bne.n	80067f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006866:	f000 fb63 	bl	8006f30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800686a:	4b1d      	ldr	r3, [pc, #116]	; (80068e0 <xTaskResumeAll+0x134>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d010      	beq.n	8006898 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006876:	f000 f847 	bl	8006908 <xTaskIncrementTick>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006880:	4b16      	ldr	r3, [pc, #88]	; (80068dc <xTaskResumeAll+0x130>)
 8006882:	2201      	movs	r2, #1
 8006884:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	3b01      	subs	r3, #1
 800688a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1f1      	bne.n	8006876 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006892:	4b13      	ldr	r3, [pc, #76]	; (80068e0 <xTaskResumeAll+0x134>)
 8006894:	2200      	movs	r2, #0
 8006896:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006898:	4b10      	ldr	r3, [pc, #64]	; (80068dc <xTaskResumeAll+0x130>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d009      	beq.n	80068b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068a0:	2301      	movs	r3, #1
 80068a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068a4:	4b0f      	ldr	r3, [pc, #60]	; (80068e4 <xTaskResumeAll+0x138>)
 80068a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068b4:	f001 f8ae 	bl	8007a14 <vPortExitCritical>

	return xAlreadyYielded;
 80068b8:	68bb      	ldr	r3, [r7, #8]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20000eb4 	.word	0x20000eb4
 80068c8:	20000e8c 	.word	0x20000e8c
 80068cc:	20000e4c 	.word	0x20000e4c
 80068d0:	20000e94 	.word	0x20000e94
 80068d4:	200009bc 	.word	0x200009bc
 80068d8:	200009b8 	.word	0x200009b8
 80068dc:	20000ea0 	.word	0x20000ea0
 80068e0:	20000e9c 	.word	0x20000e9c
 80068e4:	e000ed04 	.word	0xe000ed04

080068e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80068ee:	4b05      	ldr	r3, [pc, #20]	; (8006904 <xTaskGetTickCount+0x1c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80068f4:	687b      	ldr	r3, [r7, #4]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	20000e90 	.word	0x20000e90

08006908 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800690e:	2300      	movs	r3, #0
 8006910:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006912:	4b51      	ldr	r3, [pc, #324]	; (8006a58 <xTaskIncrementTick+0x150>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	f040 808e 	bne.w	8006a38 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800691c:	4b4f      	ldr	r3, [pc, #316]	; (8006a5c <xTaskIncrementTick+0x154>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3301      	adds	r3, #1
 8006922:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006924:	4a4d      	ldr	r2, [pc, #308]	; (8006a5c <xTaskIncrementTick+0x154>)
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d120      	bne.n	8006972 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006930:	4b4b      	ldr	r3, [pc, #300]	; (8006a60 <xTaskIncrementTick+0x158>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <xTaskIncrementTick+0x48>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	603b      	str	r3, [r7, #0]
}
 800694c:	bf00      	nop
 800694e:	e7fe      	b.n	800694e <xTaskIncrementTick+0x46>
 8006950:	4b43      	ldr	r3, [pc, #268]	; (8006a60 <xTaskIncrementTick+0x158>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	60fb      	str	r3, [r7, #12]
 8006956:	4b43      	ldr	r3, [pc, #268]	; (8006a64 <xTaskIncrementTick+0x15c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a41      	ldr	r2, [pc, #260]	; (8006a60 <xTaskIncrementTick+0x158>)
 800695c:	6013      	str	r3, [r2, #0]
 800695e:	4a41      	ldr	r2, [pc, #260]	; (8006a64 <xTaskIncrementTick+0x15c>)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	4b40      	ldr	r3, [pc, #256]	; (8006a68 <xTaskIncrementTick+0x160>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3301      	adds	r3, #1
 800696a:	4a3f      	ldr	r2, [pc, #252]	; (8006a68 <xTaskIncrementTick+0x160>)
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	f000 fadf 	bl	8006f30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006972:	4b3e      	ldr	r3, [pc, #248]	; (8006a6c <xTaskIncrementTick+0x164>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	429a      	cmp	r2, r3
 800697a:	d34e      	bcc.n	8006a1a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800697c:	4b38      	ldr	r3, [pc, #224]	; (8006a60 <xTaskIncrementTick+0x158>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <xTaskIncrementTick+0x82>
 8006986:	2301      	movs	r3, #1
 8006988:	e000      	b.n	800698c <xTaskIncrementTick+0x84>
 800698a:	2300      	movs	r3, #0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d004      	beq.n	800699a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006990:	4b36      	ldr	r3, [pc, #216]	; (8006a6c <xTaskIncrementTick+0x164>)
 8006992:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006996:	601a      	str	r2, [r3, #0]
					break;
 8006998:	e03f      	b.n	8006a1a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800699a:	4b31      	ldr	r3, [pc, #196]	; (8006a60 <xTaskIncrementTick+0x158>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d203      	bcs.n	80069ba <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069b2:	4a2e      	ldr	r2, [pc, #184]	; (8006a6c <xTaskIncrementTick+0x164>)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6013      	str	r3, [r2, #0]
						break;
 80069b8:	e02f      	b.n	8006a1a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	3304      	adds	r3, #4
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fe fe8a 	bl	80056d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d004      	beq.n	80069d6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	3318      	adds	r3, #24
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fe fe81 	bl	80056d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069da:	4b25      	ldr	r3, [pc, #148]	; (8006a70 <xTaskIncrementTick+0x168>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d903      	bls.n	80069ea <xTaskIncrementTick+0xe2>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e6:	4a22      	ldr	r2, [pc, #136]	; (8006a70 <xTaskIncrementTick+0x168>)
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4a1f      	ldr	r2, [pc, #124]	; (8006a74 <xTaskIncrementTick+0x16c>)
 80069f8:	441a      	add	r2, r3
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	3304      	adds	r3, #4
 80069fe:	4619      	mov	r1, r3
 8006a00:	4610      	mov	r0, r2
 8006a02:	f7fe fe0c 	bl	800561e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0a:	4b1b      	ldr	r3, [pc, #108]	; (8006a78 <xTaskIncrementTick+0x170>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d3b3      	bcc.n	800697c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a14:	2301      	movs	r3, #1
 8006a16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a18:	e7b0      	b.n	800697c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a1a:	4b17      	ldr	r3, [pc, #92]	; (8006a78 <xTaskIncrementTick+0x170>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a20:	4914      	ldr	r1, [pc, #80]	; (8006a74 <xTaskIncrementTick+0x16c>)
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	440b      	add	r3, r1
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d907      	bls.n	8006a42 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006a32:	2301      	movs	r3, #1
 8006a34:	617b      	str	r3, [r7, #20]
 8006a36:	e004      	b.n	8006a42 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006a38:	4b10      	ldr	r3, [pc, #64]	; (8006a7c <xTaskIncrementTick+0x174>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	4a0f      	ldr	r2, [pc, #60]	; (8006a7c <xTaskIncrementTick+0x174>)
 8006a40:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006a42:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <xTaskIncrementTick+0x178>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006a4e:	697b      	ldr	r3, [r7, #20]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20000eb4 	.word	0x20000eb4
 8006a5c:	20000e90 	.word	0x20000e90
 8006a60:	20000e44 	.word	0x20000e44
 8006a64:	20000e48 	.word	0x20000e48
 8006a68:	20000ea4 	.word	0x20000ea4
 8006a6c:	20000eac 	.word	0x20000eac
 8006a70:	20000e94 	.word	0x20000e94
 8006a74:	200009bc 	.word	0x200009bc
 8006a78:	200009b8 	.word	0x200009b8
 8006a7c:	20000e9c 	.word	0x20000e9c
 8006a80:	20000ea0 	.word	0x20000ea0

08006a84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a8a:	4b2a      	ldr	r3, [pc, #168]	; (8006b34 <vTaskSwitchContext+0xb0>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a92:	4b29      	ldr	r3, [pc, #164]	; (8006b38 <vTaskSwitchContext+0xb4>)
 8006a94:	2201      	movs	r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a98:	e046      	b.n	8006b28 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006a9a:	4b27      	ldr	r3, [pc, #156]	; (8006b38 <vTaskSwitchContext+0xb4>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006aa0:	4b26      	ldr	r3, [pc, #152]	; (8006b3c <vTaskSwitchContext+0xb8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60fb      	str	r3, [r7, #12]
 8006aa6:	e010      	b.n	8006aca <vTaskSwitchContext+0x46>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <vTaskSwitchContext+0x40>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	607b      	str	r3, [r7, #4]
}
 8006ac0:	bf00      	nop
 8006ac2:	e7fe      	b.n	8006ac2 <vTaskSwitchContext+0x3e>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	491d      	ldr	r1, [pc, #116]	; (8006b40 <vTaskSwitchContext+0xbc>)
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0e4      	beq.n	8006aa8 <vTaskSwitchContext+0x24>
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4a15      	ldr	r2, [pc, #84]	; (8006b40 <vTaskSwitchContext+0xbc>)
 8006aea:	4413      	add	r3, r2
 8006aec:	60bb      	str	r3, [r7, #8]
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	605a      	str	r2, [r3, #4]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	3308      	adds	r3, #8
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d104      	bne.n	8006b0e <vTaskSwitchContext+0x8a>
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	605a      	str	r2, [r3, #4]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	4a0b      	ldr	r2, [pc, #44]	; (8006b44 <vTaskSwitchContext+0xc0>)
 8006b16:	6013      	str	r3, [r2, #0]
 8006b18:	4a08      	ldr	r2, [pc, #32]	; (8006b3c <vTaskSwitchContext+0xb8>)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b1e:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <vTaskSwitchContext+0xc0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3354      	adds	r3, #84	; 0x54
 8006b24:	4a08      	ldr	r2, [pc, #32]	; (8006b48 <vTaskSwitchContext+0xc4>)
 8006b26:	6013      	str	r3, [r2, #0]
}
 8006b28:	bf00      	nop
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	20000eb4 	.word	0x20000eb4
 8006b38:	20000ea0 	.word	0x20000ea0
 8006b3c:	20000e94 	.word	0x20000e94
 8006b40:	200009bc 	.word	0x200009bc
 8006b44:	200009b8 	.word	0x200009b8
 8006b48:	2000005c 	.word	0x2000005c

08006b4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	60fb      	str	r3, [r7, #12]
}
 8006b6e:	bf00      	nop
 8006b70:	e7fe      	b.n	8006b70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b72:	4b07      	ldr	r3, [pc, #28]	; (8006b90 <vTaskPlaceOnEventList+0x44>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3318      	adds	r3, #24
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fe fd73 	bl	8005666 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b80:	2101      	movs	r1, #1
 8006b82:	6838      	ldr	r0, [r7, #0]
 8006b84:	f000 fa86 	bl	8007094 <prvAddCurrentTaskToDelayedList>
}
 8006b88:	bf00      	nop
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	200009b8 	.word	0x200009b8

08006b94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10a      	bne.n	8006bbc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	617b      	str	r3, [r7, #20]
}
 8006bb8:	bf00      	nop
 8006bba:	e7fe      	b.n	8006bba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bbc:	4b0a      	ldr	r3, [pc, #40]	; (8006be8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3318      	adds	r3, #24
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f7fe fd2a 	bl	800561e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bd4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	68b8      	ldr	r0, [r7, #8]
 8006bda:	f000 fa5b 	bl	8007094 <prvAddCurrentTaskToDelayedList>
	}
 8006bde:	bf00      	nop
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	200009b8 	.word	0x200009b8

08006bec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	60fb      	str	r3, [r7, #12]
}
 8006c14:	bf00      	nop
 8006c16:	e7fe      	b.n	8006c16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	3318      	adds	r3, #24
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7fe fd5b 	bl	80056d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c22:	4b1e      	ldr	r3, [pc, #120]	; (8006c9c <xTaskRemoveFromEventList+0xb0>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d11d      	bne.n	8006c66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	3304      	adds	r3, #4
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fe fd52 	bl	80056d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c38:	4b19      	ldr	r3, [pc, #100]	; (8006ca0 <xTaskRemoveFromEventList+0xb4>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d903      	bls.n	8006c48 <xTaskRemoveFromEventList+0x5c>
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c44:	4a16      	ldr	r2, [pc, #88]	; (8006ca0 <xTaskRemoveFromEventList+0xb4>)
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4a13      	ldr	r2, [pc, #76]	; (8006ca4 <xTaskRemoveFromEventList+0xb8>)
 8006c56:	441a      	add	r2, r3
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4610      	mov	r0, r2
 8006c60:	f7fe fcdd 	bl	800561e <vListInsertEnd>
 8006c64:	e005      	b.n	8006c72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	3318      	adds	r3, #24
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	480e      	ldr	r0, [pc, #56]	; (8006ca8 <xTaskRemoveFromEventList+0xbc>)
 8006c6e:	f7fe fcd6 	bl	800561e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c76:	4b0d      	ldr	r3, [pc, #52]	; (8006cac <xTaskRemoveFromEventList+0xc0>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d905      	bls.n	8006c8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c80:	2301      	movs	r3, #1
 8006c82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c84:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <xTaskRemoveFromEventList+0xc4>)
 8006c86:	2201      	movs	r2, #1
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	e001      	b.n	8006c90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006c90:	697b      	ldr	r3, [r7, #20]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000eb4 	.word	0x20000eb4
 8006ca0:	20000e94 	.word	0x20000e94
 8006ca4:	200009bc 	.word	0x200009bc
 8006ca8:	20000e4c 	.word	0x20000e4c
 8006cac:	200009b8 	.word	0x200009b8
 8006cb0:	20000ea0 	.word	0x20000ea0

08006cb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006cbc:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <vTaskInternalSetTimeOutState+0x24>)
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006cc4:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <vTaskInternalSetTimeOutState+0x28>)
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	605a      	str	r2, [r3, #4]
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	20000ea4 	.word	0x20000ea4
 8006cdc:	20000e90 	.word	0x20000e90

08006ce0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b088      	sub	sp, #32
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	613b      	str	r3, [r7, #16]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10a      	bne.n	8006d22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	60fb      	str	r3, [r7, #12]
}
 8006d1e:	bf00      	nop
 8006d20:	e7fe      	b.n	8006d20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006d22:	f000 fe47 	bl	80079b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d26:	4b1d      	ldr	r3, [pc, #116]	; (8006d9c <xTaskCheckForTimeOut+0xbc>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d3e:	d102      	bne.n	8006d46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d40:	2300      	movs	r3, #0
 8006d42:	61fb      	str	r3, [r7, #28]
 8006d44:	e023      	b.n	8006d8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	4b15      	ldr	r3, [pc, #84]	; (8006da0 <xTaskCheckForTimeOut+0xc0>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d007      	beq.n	8006d62 <xTaskCheckForTimeOut+0x82>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d302      	bcc.n	8006d62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	61fb      	str	r3, [r7, #28]
 8006d60:	e015      	b.n	8006d8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d20b      	bcs.n	8006d84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	1ad2      	subs	r2, r2, r3
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff ff9b 	bl	8006cb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	61fb      	str	r3, [r7, #28]
 8006d82:	e004      	b.n	8006d8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2200      	movs	r2, #0
 8006d88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d8e:	f000 fe41 	bl	8007a14 <vPortExitCritical>

	return xReturn;
 8006d92:	69fb      	ldr	r3, [r7, #28]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3720      	adds	r7, #32
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	20000e90 	.word	0x20000e90
 8006da0:	20000ea4 	.word	0x20000ea4

08006da4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006da4:	b480      	push	{r7}
 8006da6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006da8:	4b03      	ldr	r3, [pc, #12]	; (8006db8 <vTaskMissedYield+0x14>)
 8006daa:	2201      	movs	r2, #1
 8006dac:	601a      	str	r2, [r3, #0]
}
 8006dae:	bf00      	nop
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	20000ea0 	.word	0x20000ea0

08006dbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006dc4:	f000 f852 	bl	8006e6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006dc8:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <prvIdleTask+0x28>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d9f9      	bls.n	8006dc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006dd0:	4b05      	ldr	r3, [pc, #20]	; (8006de8 <prvIdleTask+0x2c>)
 8006dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006de0:	e7f0      	b.n	8006dc4 <prvIdleTask+0x8>
 8006de2:	bf00      	nop
 8006de4:	200009bc 	.word	0x200009bc
 8006de8:	e000ed04 	.word	0xe000ed04

08006dec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006df2:	2300      	movs	r3, #0
 8006df4:	607b      	str	r3, [r7, #4]
 8006df6:	e00c      	b.n	8006e12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4a12      	ldr	r2, [pc, #72]	; (8006e4c <prvInitialiseTaskLists+0x60>)
 8006e04:	4413      	add	r3, r2
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fe fbdc 	bl	80055c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	607b      	str	r3, [r7, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b37      	cmp	r3, #55	; 0x37
 8006e16:	d9ef      	bls.n	8006df8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e18:	480d      	ldr	r0, [pc, #52]	; (8006e50 <prvInitialiseTaskLists+0x64>)
 8006e1a:	f7fe fbd3 	bl	80055c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e1e:	480d      	ldr	r0, [pc, #52]	; (8006e54 <prvInitialiseTaskLists+0x68>)
 8006e20:	f7fe fbd0 	bl	80055c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e24:	480c      	ldr	r0, [pc, #48]	; (8006e58 <prvInitialiseTaskLists+0x6c>)
 8006e26:	f7fe fbcd 	bl	80055c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e2a:	480c      	ldr	r0, [pc, #48]	; (8006e5c <prvInitialiseTaskLists+0x70>)
 8006e2c:	f7fe fbca 	bl	80055c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e30:	480b      	ldr	r0, [pc, #44]	; (8006e60 <prvInitialiseTaskLists+0x74>)
 8006e32:	f7fe fbc7 	bl	80055c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e36:	4b0b      	ldr	r3, [pc, #44]	; (8006e64 <prvInitialiseTaskLists+0x78>)
 8006e38:	4a05      	ldr	r2, [pc, #20]	; (8006e50 <prvInitialiseTaskLists+0x64>)
 8006e3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e3c:	4b0a      	ldr	r3, [pc, #40]	; (8006e68 <prvInitialiseTaskLists+0x7c>)
 8006e3e:	4a05      	ldr	r2, [pc, #20]	; (8006e54 <prvInitialiseTaskLists+0x68>)
 8006e40:	601a      	str	r2, [r3, #0]
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	200009bc 	.word	0x200009bc
 8006e50:	20000e1c 	.word	0x20000e1c
 8006e54:	20000e30 	.word	0x20000e30
 8006e58:	20000e4c 	.word	0x20000e4c
 8006e5c:	20000e60 	.word	0x20000e60
 8006e60:	20000e78 	.word	0x20000e78
 8006e64:	20000e44 	.word	0x20000e44
 8006e68:	20000e48 	.word	0x20000e48

08006e6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e72:	e019      	b.n	8006ea8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e74:	f000 fd9e 	bl	80079b4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006e78:	4b10      	ldr	r3, [pc, #64]	; (8006ebc <prvCheckTasksWaitingTermination+0x50>)
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	3304      	adds	r3, #4
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fe fc27 	bl	80056d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e8a:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <prvCheckTasksWaitingTermination+0x54>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	4a0b      	ldr	r2, [pc, #44]	; (8006ec0 <prvCheckTasksWaitingTermination+0x54>)
 8006e92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e94:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <prvCheckTasksWaitingTermination+0x58>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	4a0a      	ldr	r2, [pc, #40]	; (8006ec4 <prvCheckTasksWaitingTermination+0x58>)
 8006e9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e9e:	f000 fdb9 	bl	8007a14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f810 	bl	8006ec8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ea8:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <prvCheckTasksWaitingTermination+0x58>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e1      	bne.n	8006e74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006eb0:	bf00      	nop
 8006eb2:	bf00      	nop
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000e60 	.word	0x20000e60
 8006ec0:	20000e8c 	.word	0x20000e8c
 8006ec4:	20000e74 	.word	0x20000e74

08006ec8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3354      	adds	r3, #84	; 0x54
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f001 f895 	bl	8008004 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d108      	bne.n	8006ef6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 ff49 	bl	8007d80 <vPortFree>
				vPortFree( pxTCB );
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 ff46 	bl	8007d80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ef4:	e018      	b.n	8006f28 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d103      	bne.n	8006f08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 ff3d 	bl	8007d80 <vPortFree>
	}
 8006f06:	e00f      	b.n	8006f28 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d00a      	beq.n	8006f28 <prvDeleteTCB+0x60>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	60fb      	str	r3, [r7, #12]
}
 8006f24:	bf00      	nop
 8006f26:	e7fe      	b.n	8006f26 <prvDeleteTCB+0x5e>
	}
 8006f28:	bf00      	nop
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f36:	4b0f      	ldr	r3, [pc, #60]	; (8006f74 <prvResetNextTaskUnblockTime+0x44>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <prvResetNextTaskUnblockTime+0x14>
 8006f40:	2301      	movs	r3, #1
 8006f42:	e000      	b.n	8006f46 <prvResetNextTaskUnblockTime+0x16>
 8006f44:	2300      	movs	r3, #0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d004      	beq.n	8006f54 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f4a:	4b0b      	ldr	r3, [pc, #44]	; (8006f78 <prvResetNextTaskUnblockTime+0x48>)
 8006f4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f50:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f52:	e008      	b.n	8006f66 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006f54:	4b07      	ldr	r3, [pc, #28]	; (8006f74 <prvResetNextTaskUnblockTime+0x44>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	4a05      	ldr	r2, [pc, #20]	; (8006f78 <prvResetNextTaskUnblockTime+0x48>)
 8006f64:	6013      	str	r3, [r2, #0]
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	20000e44 	.word	0x20000e44
 8006f78:	20000eac 	.word	0x20000eac

08006f7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f82:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <xTaskGetSchedulerState+0x34>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d102      	bne.n	8006f90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	607b      	str	r3, [r7, #4]
 8006f8e:	e008      	b.n	8006fa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f90:	4b08      	ldr	r3, [pc, #32]	; (8006fb4 <xTaskGetSchedulerState+0x38>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d102      	bne.n	8006f9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f98:	2302      	movs	r3, #2
 8006f9a:	607b      	str	r3, [r7, #4]
 8006f9c:	e001      	b.n	8006fa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fa2:	687b      	ldr	r3, [r7, #4]
	}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	20000e98 	.word	0x20000e98
 8006fb4:	20000eb4 	.word	0x20000eb4

08006fb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d056      	beq.n	800707c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006fce:	4b2e      	ldr	r3, [pc, #184]	; (8007088 <xTaskPriorityDisinherit+0xd0>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d00a      	beq.n	8006fee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	60fb      	str	r3, [r7, #12]
}
 8006fea:	bf00      	nop
 8006fec:	e7fe      	b.n	8006fec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	60bb      	str	r3, [r7, #8]
}
 8007008:	bf00      	nop
 800700a:	e7fe      	b.n	800700a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007010:	1e5a      	subs	r2, r3, #1
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800701e:	429a      	cmp	r2, r3
 8007020:	d02c      	beq.n	800707c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007026:	2b00      	cmp	r3, #0
 8007028:	d128      	bne.n	800707c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	3304      	adds	r3, #4
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe fb52 	bl	80056d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704c:	4b0f      	ldr	r3, [pc, #60]	; (800708c <xTaskPriorityDisinherit+0xd4>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	429a      	cmp	r2, r3
 8007052:	d903      	bls.n	800705c <xTaskPriorityDisinherit+0xa4>
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	4a0c      	ldr	r2, [pc, #48]	; (800708c <xTaskPriorityDisinherit+0xd4>)
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007060:	4613      	mov	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4a09      	ldr	r2, [pc, #36]	; (8007090 <xTaskPriorityDisinherit+0xd8>)
 800706a:	441a      	add	r2, r3
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	3304      	adds	r3, #4
 8007070:	4619      	mov	r1, r3
 8007072:	4610      	mov	r0, r2
 8007074:	f7fe fad3 	bl	800561e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007078:	2301      	movs	r3, #1
 800707a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800707c:	697b      	ldr	r3, [r7, #20]
	}
 800707e:	4618      	mov	r0, r3
 8007080:	3718      	adds	r7, #24
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	200009b8 	.word	0x200009b8
 800708c:	20000e94 	.word	0x20000e94
 8007090:	200009bc 	.word	0x200009bc

08007094 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800709e:	4b21      	ldr	r3, [pc, #132]	; (8007124 <prvAddCurrentTaskToDelayedList+0x90>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070a4:	4b20      	ldr	r3, [pc, #128]	; (8007128 <prvAddCurrentTaskToDelayedList+0x94>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	3304      	adds	r3, #4
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fe fb14 	bl	80056d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070b6:	d10a      	bne.n	80070ce <prvAddCurrentTaskToDelayedList+0x3a>
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d007      	beq.n	80070ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070be:	4b1a      	ldr	r3, [pc, #104]	; (8007128 <prvAddCurrentTaskToDelayedList+0x94>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3304      	adds	r3, #4
 80070c4:	4619      	mov	r1, r3
 80070c6:	4819      	ldr	r0, [pc, #100]	; (800712c <prvAddCurrentTaskToDelayedList+0x98>)
 80070c8:	f7fe faa9 	bl	800561e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070cc:	e026      	b.n	800711c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4413      	add	r3, r2
 80070d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070d6:	4b14      	ldr	r3, [pc, #80]	; (8007128 <prvAddCurrentTaskToDelayedList+0x94>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d209      	bcs.n	80070fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070e6:	4b12      	ldr	r3, [pc, #72]	; (8007130 <prvAddCurrentTaskToDelayedList+0x9c>)
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	4b0f      	ldr	r3, [pc, #60]	; (8007128 <prvAddCurrentTaskToDelayedList+0x94>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3304      	adds	r3, #4
 80070f0:	4619      	mov	r1, r3
 80070f2:	4610      	mov	r0, r2
 80070f4:	f7fe fab7 	bl	8005666 <vListInsert>
}
 80070f8:	e010      	b.n	800711c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070fa:	4b0e      	ldr	r3, [pc, #56]	; (8007134 <prvAddCurrentTaskToDelayedList+0xa0>)
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <prvAddCurrentTaskToDelayedList+0x94>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3304      	adds	r3, #4
 8007104:	4619      	mov	r1, r3
 8007106:	4610      	mov	r0, r2
 8007108:	f7fe faad 	bl	8005666 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800710c:	4b0a      	ldr	r3, [pc, #40]	; (8007138 <prvAddCurrentTaskToDelayedList+0xa4>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	429a      	cmp	r2, r3
 8007114:	d202      	bcs.n	800711c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007116:	4a08      	ldr	r2, [pc, #32]	; (8007138 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	6013      	str	r3, [r2, #0]
}
 800711c:	bf00      	nop
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	20000e90 	.word	0x20000e90
 8007128:	200009b8 	.word	0x200009b8
 800712c:	20000e78 	.word	0x20000e78
 8007130:	20000e48 	.word	0x20000e48
 8007134:	20000e44 	.word	0x20000e44
 8007138:	20000eac 	.word	0x20000eac

0800713c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b08a      	sub	sp, #40	; 0x28
 8007140:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007142:	2300      	movs	r3, #0
 8007144:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007146:	f000 facb 	bl	80076e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800714a:	4b1c      	ldr	r3, [pc, #112]	; (80071bc <xTimerCreateTimerTask+0x80>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d021      	beq.n	8007196 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007156:	2300      	movs	r3, #0
 8007158:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800715a:	1d3a      	adds	r2, r7, #4
 800715c:	f107 0108 	add.w	r1, r7, #8
 8007160:	f107 030c 	add.w	r3, r7, #12
 8007164:	4618      	mov	r0, r3
 8007166:	f7fe fa13 	bl	8005590 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	9202      	str	r2, [sp, #8]
 8007172:	9301      	str	r3, [sp, #4]
 8007174:	2302      	movs	r3, #2
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	2300      	movs	r3, #0
 800717a:	460a      	mov	r2, r1
 800717c:	4910      	ldr	r1, [pc, #64]	; (80071c0 <xTimerCreateTimerTask+0x84>)
 800717e:	4811      	ldr	r0, [pc, #68]	; (80071c4 <xTimerCreateTimerTask+0x88>)
 8007180:	f7ff f8b2 	bl	80062e8 <xTaskCreateStatic>
 8007184:	4603      	mov	r3, r0
 8007186:	4a10      	ldr	r2, [pc, #64]	; (80071c8 <xTimerCreateTimerTask+0x8c>)
 8007188:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800718a:	4b0f      	ldr	r3, [pc, #60]	; (80071c8 <xTimerCreateTimerTask+0x8c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007192:	2301      	movs	r3, #1
 8007194:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10a      	bne.n	80071b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	613b      	str	r3, [r7, #16]
}
 80071ae:	bf00      	nop
 80071b0:	e7fe      	b.n	80071b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80071b2:	697b      	ldr	r3, [r7, #20]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	20000ee8 	.word	0x20000ee8
 80071c0:	08008bd4 	.word	0x08008bd4
 80071c4:	080072e9 	.word	0x080072e9
 80071c8:	20000eec 	.word	0x20000eec

080071cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b08a      	sub	sp, #40	; 0x28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80071da:	2300      	movs	r3, #0
 80071dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10a      	bne.n	80071fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	623b      	str	r3, [r7, #32]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80071fa:	4b1a      	ldr	r3, [pc, #104]	; (8007264 <xTimerGenericCommand+0x98>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d02a      	beq.n	8007258 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b05      	cmp	r3, #5
 8007212:	dc18      	bgt.n	8007246 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007214:	f7ff feb2 	bl	8006f7c <xTaskGetSchedulerState>
 8007218:	4603      	mov	r3, r0
 800721a:	2b02      	cmp	r3, #2
 800721c:	d109      	bne.n	8007232 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800721e:	4b11      	ldr	r3, [pc, #68]	; (8007264 <xTimerGenericCommand+0x98>)
 8007220:	6818      	ldr	r0, [r3, #0]
 8007222:	f107 0110 	add.w	r1, r7, #16
 8007226:	2300      	movs	r3, #0
 8007228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800722a:	f7fe fbbf 	bl	80059ac <xQueueGenericSend>
 800722e:	6278      	str	r0, [r7, #36]	; 0x24
 8007230:	e012      	b.n	8007258 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007232:	4b0c      	ldr	r3, [pc, #48]	; (8007264 <xTimerGenericCommand+0x98>)
 8007234:	6818      	ldr	r0, [r3, #0]
 8007236:	f107 0110 	add.w	r1, r7, #16
 800723a:	2300      	movs	r3, #0
 800723c:	2200      	movs	r2, #0
 800723e:	f7fe fbb5 	bl	80059ac <xQueueGenericSend>
 8007242:	6278      	str	r0, [r7, #36]	; 0x24
 8007244:	e008      	b.n	8007258 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007246:	4b07      	ldr	r3, [pc, #28]	; (8007264 <xTimerGenericCommand+0x98>)
 8007248:	6818      	ldr	r0, [r3, #0]
 800724a:	f107 0110 	add.w	r1, r7, #16
 800724e:	2300      	movs	r3, #0
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	f7fe fca9 	bl	8005ba8 <xQueueGenericSendFromISR>
 8007256:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800725a:	4618      	mov	r0, r3
 800725c:	3728      	adds	r7, #40	; 0x28
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	20000ee8 	.word	0x20000ee8

08007268 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af02      	add	r7, sp, #8
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007272:	4b1c      	ldr	r3, [pc, #112]	; (80072e4 <prvProcessExpiredTimer+0x7c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	3304      	adds	r3, #4
 8007280:	4618      	mov	r0, r3
 8007282:	f7fe fa29 	bl	80056d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d122      	bne.n	80072d4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	18d1      	adds	r1, r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	6978      	ldr	r0, [r7, #20]
 800729c:	f000 f8c8 	bl	8007430 <prvInsertTimerInActiveList>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d016      	beq.n	80072d4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072a6:	2300      	movs	r3, #0
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	2300      	movs	r3, #0
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	2100      	movs	r1, #0
 80072b0:	6978      	ldr	r0, [r7, #20]
 80072b2:	f7ff ff8b 	bl	80071cc <xTimerGenericCommand>
 80072b6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10a      	bne.n	80072d4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	60fb      	str	r3, [r7, #12]
}
 80072d0:	bf00      	nop
 80072d2:	e7fe      	b.n	80072d2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	6978      	ldr	r0, [r7, #20]
 80072da:	4798      	blx	r3
}
 80072dc:	bf00      	nop
 80072de:	3718      	adds	r7, #24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	20000ee0 	.word	0x20000ee0

080072e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072f0:	f107 0308 	add.w	r3, r7, #8
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 f857 	bl	80073a8 <prvGetNextExpireTime>
 80072fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	4619      	mov	r1, r3
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 f803 	bl	800730c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007306:	f000 f8d5 	bl	80074b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800730a:	e7f1      	b.n	80072f0 <prvTimerTask+0x8>

0800730c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007316:	f7ff fa3b 	bl	8006790 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800731a:	f107 0308 	add.w	r3, r7, #8
 800731e:	4618      	mov	r0, r3
 8007320:	f000 f866 	bl	80073f0 <prvSampleTimeNow>
 8007324:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d130      	bne.n	800738e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10a      	bne.n	8007348 <prvProcessTimerOrBlockTask+0x3c>
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	429a      	cmp	r2, r3
 8007338:	d806      	bhi.n	8007348 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800733a:	f7ff fa37 	bl	80067ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800733e:	68f9      	ldr	r1, [r7, #12]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7ff ff91 	bl	8007268 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007346:	e024      	b.n	8007392 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d008      	beq.n	8007360 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800734e:	4b13      	ldr	r3, [pc, #76]	; (800739c <prvProcessTimerOrBlockTask+0x90>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	bf0c      	ite	eq
 8007358:	2301      	moveq	r3, #1
 800735a:	2300      	movne	r3, #0
 800735c:	b2db      	uxtb	r3, r3
 800735e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007360:	4b0f      	ldr	r3, [pc, #60]	; (80073a0 <prvProcessTimerOrBlockTask+0x94>)
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	4619      	mov	r1, r3
 800736e:	f7fe ff87 	bl	8006280 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007372:	f7ff fa1b 	bl	80067ac <xTaskResumeAll>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10a      	bne.n	8007392 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800737c:	4b09      	ldr	r3, [pc, #36]	; (80073a4 <prvProcessTimerOrBlockTask+0x98>)
 800737e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	f3bf 8f6f 	isb	sy
}
 800738c:	e001      	b.n	8007392 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800738e:	f7ff fa0d 	bl	80067ac <xTaskResumeAll>
}
 8007392:	bf00      	nop
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000ee4 	.word	0x20000ee4
 80073a0:	20000ee8 	.word	0x20000ee8
 80073a4:	e000ed04 	.word	0xe000ed04

080073a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80073b0:	4b0e      	ldr	r3, [pc, #56]	; (80073ec <prvGetNextExpireTime+0x44>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	bf0c      	ite	eq
 80073ba:	2301      	moveq	r3, #1
 80073bc:	2300      	movne	r3, #0
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	461a      	mov	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d105      	bne.n	80073da <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073ce:	4b07      	ldr	r3, [pc, #28]	; (80073ec <prvGetNextExpireTime+0x44>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	e001      	b.n	80073de <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80073de:	68fb      	ldr	r3, [r7, #12]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	20000ee0 	.word	0x20000ee0

080073f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073f8:	f7ff fa76 	bl	80068e8 <xTaskGetTickCount>
 80073fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073fe:	4b0b      	ldr	r3, [pc, #44]	; (800742c <prvSampleTimeNow+0x3c>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	429a      	cmp	r2, r3
 8007406:	d205      	bcs.n	8007414 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007408:	f000 f908 	bl	800761c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	e002      	b.n	800741a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800741a:	4a04      	ldr	r2, [pc, #16]	; (800742c <prvSampleTimeNow+0x3c>)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007420:	68fb      	ldr	r3, [r7, #12]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20000ef0 	.word	0x20000ef0

08007430 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	429a      	cmp	r2, r3
 8007454:	d812      	bhi.n	800747c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	1ad2      	subs	r2, r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	429a      	cmp	r2, r3
 8007462:	d302      	bcc.n	800746a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007464:	2301      	movs	r3, #1
 8007466:	617b      	str	r3, [r7, #20]
 8007468:	e01b      	b.n	80074a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800746a:	4b10      	ldr	r3, [pc, #64]	; (80074ac <prvInsertTimerInActiveList+0x7c>)
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	3304      	adds	r3, #4
 8007472:	4619      	mov	r1, r3
 8007474:	4610      	mov	r0, r2
 8007476:	f7fe f8f6 	bl	8005666 <vListInsert>
 800747a:	e012      	b.n	80074a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d206      	bcs.n	8007492 <prvInsertTimerInActiveList+0x62>
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d302      	bcc.n	8007492 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800748c:	2301      	movs	r3, #1
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	e007      	b.n	80074a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007492:	4b07      	ldr	r3, [pc, #28]	; (80074b0 <prvInsertTimerInActiveList+0x80>)
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	3304      	adds	r3, #4
 800749a:	4619      	mov	r1, r3
 800749c:	4610      	mov	r0, r2
 800749e:	f7fe f8e2 	bl	8005666 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80074a2:	697b      	ldr	r3, [r7, #20]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	20000ee4 	.word	0x20000ee4
 80074b0:	20000ee0 	.word	0x20000ee0

080074b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08e      	sub	sp, #56	; 0x38
 80074b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074ba:	e09d      	b.n	80075f8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	da18      	bge.n	80074f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80074c2:	1d3b      	adds	r3, r7, #4
 80074c4:	3304      	adds	r3, #4
 80074c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80074c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10a      	bne.n	80074e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	61fb      	str	r3, [r7, #28]
}
 80074e0:	bf00      	nop
 80074e2:	e7fe      	b.n	80074e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074ea:	6850      	ldr	r0, [r2, #4]
 80074ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074ee:	6892      	ldr	r2, [r2, #8]
 80074f0:	4611      	mov	r1, r2
 80074f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	db7e      	blt.n	80075f8 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d004      	beq.n	8007510 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	3304      	adds	r3, #4
 800750a:	4618      	mov	r0, r3
 800750c:	f7fe f8e4 	bl	80056d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007510:	463b      	mov	r3, r7
 8007512:	4618      	mov	r0, r3
 8007514:	f7ff ff6c 	bl	80073f0 <prvSampleTimeNow>
 8007518:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b09      	cmp	r3, #9
 800751e:	d86a      	bhi.n	80075f6 <prvProcessReceivedCommands+0x142>
 8007520:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <prvProcessReceivedCommands+0x74>)
 8007522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007526:	bf00      	nop
 8007528:	08007551 	.word	0x08007551
 800752c:	08007551 	.word	0x08007551
 8007530:	08007551 	.word	0x08007551
 8007534:	080075f9 	.word	0x080075f9
 8007538:	080075ad 	.word	0x080075ad
 800753c:	080075e5 	.word	0x080075e5
 8007540:	08007551 	.word	0x08007551
 8007544:	08007551 	.word	0x08007551
 8007548:	080075f9 	.word	0x080075f9
 800754c:	080075ad 	.word	0x080075ad
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	18d1      	adds	r1, r2, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800755c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800755e:	f7ff ff67 	bl	8007430 <prvInsertTimerInActiveList>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d047      	beq.n	80075f8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800756e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d13f      	bne.n	80075f8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	441a      	add	r2, r3
 8007580:	2300      	movs	r3, #0
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	2300      	movs	r3, #0
 8007586:	2100      	movs	r1, #0
 8007588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800758a:	f7ff fe1f 	bl	80071cc <xTimerGenericCommand>
 800758e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d130      	bne.n	80075f8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	61bb      	str	r3, [r7, #24]
}
 80075a8:	bf00      	nop
 80075aa:	e7fe      	b.n	80075aa <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10a      	bne.n	80075d0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	617b      	str	r3, [r7, #20]
}
 80075cc:	bf00      	nop
 80075ce:	e7fe      	b.n	80075ce <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	699a      	ldr	r2, [r3, #24]
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	18d1      	adds	r1, r2, r3
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075de:	f7ff ff27 	bl	8007430 <prvInsertTimerInActiveList>
					break;
 80075e2:	e009      	b.n	80075f8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80075e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d104      	bne.n	80075f8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80075ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f0:	f000 fbc6 	bl	8007d80 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075f4:	e000      	b.n	80075f8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80075f6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075f8:	4b07      	ldr	r3, [pc, #28]	; (8007618 <prvProcessReceivedCommands+0x164>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	1d39      	adds	r1, r7, #4
 80075fe:	2200      	movs	r2, #0
 8007600:	4618      	mov	r0, r3
 8007602:	f7fe fb69 	bl	8005cd8 <xQueueReceive>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	f47f af57 	bne.w	80074bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800760e:	bf00      	nop
 8007610:	bf00      	nop
 8007612:	3730      	adds	r7, #48	; 0x30
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	20000ee8 	.word	0x20000ee8

0800761c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b088      	sub	sp, #32
 8007620:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007622:	e045      	b.n	80076b0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007624:	4b2c      	ldr	r3, [pc, #176]	; (80076d8 <prvSwitchTimerLists+0xbc>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800762e:	4b2a      	ldr	r3, [pc, #168]	; (80076d8 <prvSwitchTimerLists+0xbc>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	3304      	adds	r3, #4
 800763c:	4618      	mov	r0, r3
 800763e:	f7fe f84b 	bl	80056d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d12e      	bne.n	80076b0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	4413      	add	r3, r2
 800765a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	429a      	cmp	r2, r3
 8007662:	d90e      	bls.n	8007682 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007670:	4b19      	ldr	r3, [pc, #100]	; (80076d8 <prvSwitchTimerLists+0xbc>)
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3304      	adds	r3, #4
 8007678:	4619      	mov	r1, r3
 800767a:	4610      	mov	r0, r2
 800767c:	f7fd fff3 	bl	8005666 <vListInsert>
 8007680:	e016      	b.n	80076b0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007682:	2300      	movs	r3, #0
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	2300      	movs	r3, #0
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	2100      	movs	r1, #0
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f7ff fd9d 	bl	80071cc <xTimerGenericCommand>
 8007692:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10a      	bne.n	80076b0 <prvSwitchTimerLists+0x94>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	603b      	str	r3, [r7, #0]
}
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076b0:	4b09      	ldr	r3, [pc, #36]	; (80076d8 <prvSwitchTimerLists+0xbc>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1b4      	bne.n	8007624 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076ba:	4b07      	ldr	r3, [pc, #28]	; (80076d8 <prvSwitchTimerLists+0xbc>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076c0:	4b06      	ldr	r3, [pc, #24]	; (80076dc <prvSwitchTimerLists+0xc0>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a04      	ldr	r2, [pc, #16]	; (80076d8 <prvSwitchTimerLists+0xbc>)
 80076c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076c8:	4a04      	ldr	r2, [pc, #16]	; (80076dc <prvSwitchTimerLists+0xc0>)
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	6013      	str	r3, [r2, #0]
}
 80076ce:	bf00      	nop
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000ee0 	.word	0x20000ee0
 80076dc:	20000ee4 	.word	0x20000ee4

080076e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076e6:	f000 f965 	bl	80079b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80076ea:	4b15      	ldr	r3, [pc, #84]	; (8007740 <prvCheckForValidListAndQueue+0x60>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d120      	bne.n	8007734 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80076f2:	4814      	ldr	r0, [pc, #80]	; (8007744 <prvCheckForValidListAndQueue+0x64>)
 80076f4:	f7fd ff66 	bl	80055c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076f8:	4813      	ldr	r0, [pc, #76]	; (8007748 <prvCheckForValidListAndQueue+0x68>)
 80076fa:	f7fd ff63 	bl	80055c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076fe:	4b13      	ldr	r3, [pc, #76]	; (800774c <prvCheckForValidListAndQueue+0x6c>)
 8007700:	4a10      	ldr	r2, [pc, #64]	; (8007744 <prvCheckForValidListAndQueue+0x64>)
 8007702:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007704:	4b12      	ldr	r3, [pc, #72]	; (8007750 <prvCheckForValidListAndQueue+0x70>)
 8007706:	4a10      	ldr	r2, [pc, #64]	; (8007748 <prvCheckForValidListAndQueue+0x68>)
 8007708:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800770a:	2300      	movs	r3, #0
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	4b11      	ldr	r3, [pc, #68]	; (8007754 <prvCheckForValidListAndQueue+0x74>)
 8007710:	4a11      	ldr	r2, [pc, #68]	; (8007758 <prvCheckForValidListAndQueue+0x78>)
 8007712:	2110      	movs	r1, #16
 8007714:	200a      	movs	r0, #10
 8007716:	f7fe f871 	bl	80057fc <xQueueGenericCreateStatic>
 800771a:	4603      	mov	r3, r0
 800771c:	4a08      	ldr	r2, [pc, #32]	; (8007740 <prvCheckForValidListAndQueue+0x60>)
 800771e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007720:	4b07      	ldr	r3, [pc, #28]	; (8007740 <prvCheckForValidListAndQueue+0x60>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d005      	beq.n	8007734 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007728:	4b05      	ldr	r3, [pc, #20]	; (8007740 <prvCheckForValidListAndQueue+0x60>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	490b      	ldr	r1, [pc, #44]	; (800775c <prvCheckForValidListAndQueue+0x7c>)
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fd7c 	bl	800622c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007734:	f000 f96e 	bl	8007a14 <vPortExitCritical>
}
 8007738:	bf00      	nop
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20000ee8 	.word	0x20000ee8
 8007744:	20000eb8 	.word	0x20000eb8
 8007748:	20000ecc 	.word	0x20000ecc
 800774c:	20000ee0 	.word	0x20000ee0
 8007750:	20000ee4 	.word	0x20000ee4
 8007754:	20000f94 	.word	0x20000f94
 8007758:	20000ef4 	.word	0x20000ef4
 800775c:	08008bdc 	.word	0x08008bdc

08007760 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3b04      	subs	r3, #4
 8007770:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3b04      	subs	r3, #4
 800777e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f023 0201 	bic.w	r2, r3, #1
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3b04      	subs	r3, #4
 800778e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007790:	4a0c      	ldr	r2, [pc, #48]	; (80077c4 <pxPortInitialiseStack+0x64>)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3b14      	subs	r3, #20
 800779a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3b04      	subs	r3, #4
 80077a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f06f 0202 	mvn.w	r2, #2
 80077ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	3b20      	subs	r3, #32
 80077b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077b6:	68fb      	ldr	r3, [r7, #12]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	080077c9 	.word	0x080077c9

080077c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077d2:	4b12      	ldr	r3, [pc, #72]	; (800781c <prvTaskExitError+0x54>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077da:	d00a      	beq.n	80077f2 <prvTaskExitError+0x2a>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	60fb      	str	r3, [r7, #12]
}
 80077ee:	bf00      	nop
 80077f0:	e7fe      	b.n	80077f0 <prvTaskExitError+0x28>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	60bb      	str	r3, [r7, #8]
}
 8007804:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007806:	bf00      	nop
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0fc      	beq.n	8007808 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800780e:	bf00      	nop
 8007810:	bf00      	nop
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	2000000c 	.word	0x2000000c

08007820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007820:	4b07      	ldr	r3, [pc, #28]	; (8007840 <pxCurrentTCBConst2>)
 8007822:	6819      	ldr	r1, [r3, #0]
 8007824:	6808      	ldr	r0, [r1, #0]
 8007826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782a:	f380 8809 	msr	PSP, r0
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f04f 0000 	mov.w	r0, #0
 8007836:	f380 8811 	msr	BASEPRI, r0
 800783a:	4770      	bx	lr
 800783c:	f3af 8000 	nop.w

08007840 <pxCurrentTCBConst2>:
 8007840:	200009b8 	.word	0x200009b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop

08007848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007848:	4808      	ldr	r0, [pc, #32]	; (800786c <prvPortStartFirstTask+0x24>)
 800784a:	6800      	ldr	r0, [r0, #0]
 800784c:	6800      	ldr	r0, [r0, #0]
 800784e:	f380 8808 	msr	MSP, r0
 8007852:	f04f 0000 	mov.w	r0, #0
 8007856:	f380 8814 	msr	CONTROL, r0
 800785a:	b662      	cpsie	i
 800785c:	b661      	cpsie	f
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	df00      	svc	0
 8007868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800786a:	bf00      	nop
 800786c:	e000ed08 	.word	0xe000ed08

08007870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007876:	4b46      	ldr	r3, [pc, #280]	; (8007990 <xPortStartScheduler+0x120>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a46      	ldr	r2, [pc, #280]	; (8007994 <xPortStartScheduler+0x124>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d10a      	bne.n	8007896 <xPortStartScheduler+0x26>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	613b      	str	r3, [r7, #16]
}
 8007892:	bf00      	nop
 8007894:	e7fe      	b.n	8007894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007896:	4b3e      	ldr	r3, [pc, #248]	; (8007990 <xPortStartScheduler+0x120>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a3f      	ldr	r2, [pc, #252]	; (8007998 <xPortStartScheduler+0x128>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d10a      	bne.n	80078b6 <xPortStartScheduler+0x46>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	60fb      	str	r3, [r7, #12]
}
 80078b2:	bf00      	nop
 80078b4:	e7fe      	b.n	80078b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078b6:	4b39      	ldr	r3, [pc, #228]	; (800799c <xPortStartScheduler+0x12c>)
 80078b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	22ff      	movs	r2, #255	; 0xff
 80078c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078d0:	78fb      	ldrb	r3, [r7, #3]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	4b31      	ldr	r3, [pc, #196]	; (80079a0 <xPortStartScheduler+0x130>)
 80078dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078de:	4b31      	ldr	r3, [pc, #196]	; (80079a4 <xPortStartScheduler+0x134>)
 80078e0:	2207      	movs	r2, #7
 80078e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078e4:	e009      	b.n	80078fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80078e6:	4b2f      	ldr	r3, [pc, #188]	; (80079a4 <xPortStartScheduler+0x134>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	4a2d      	ldr	r2, [pc, #180]	; (80079a4 <xPortStartScheduler+0x134>)
 80078ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007902:	2b80      	cmp	r3, #128	; 0x80
 8007904:	d0ef      	beq.n	80078e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007906:	4b27      	ldr	r3, [pc, #156]	; (80079a4 <xPortStartScheduler+0x134>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f1c3 0307 	rsb	r3, r3, #7
 800790e:	2b04      	cmp	r3, #4
 8007910:	d00a      	beq.n	8007928 <xPortStartScheduler+0xb8>
	__asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	60bb      	str	r3, [r7, #8]
}
 8007924:	bf00      	nop
 8007926:	e7fe      	b.n	8007926 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007928:	4b1e      	ldr	r3, [pc, #120]	; (80079a4 <xPortStartScheduler+0x134>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	021b      	lsls	r3, r3, #8
 800792e:	4a1d      	ldr	r2, [pc, #116]	; (80079a4 <xPortStartScheduler+0x134>)
 8007930:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007932:	4b1c      	ldr	r3, [pc, #112]	; (80079a4 <xPortStartScheduler+0x134>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800793a:	4a1a      	ldr	r2, [pc, #104]	; (80079a4 <xPortStartScheduler+0x134>)
 800793c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	b2da      	uxtb	r2, r3
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007946:	4b18      	ldr	r3, [pc, #96]	; (80079a8 <xPortStartScheduler+0x138>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a17      	ldr	r2, [pc, #92]	; (80079a8 <xPortStartScheduler+0x138>)
 800794c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007952:	4b15      	ldr	r3, [pc, #84]	; (80079a8 <xPortStartScheduler+0x138>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a14      	ldr	r2, [pc, #80]	; (80079a8 <xPortStartScheduler+0x138>)
 8007958:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800795c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800795e:	f000 f8dd 	bl	8007b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007962:	4b12      	ldr	r3, [pc, #72]	; (80079ac <xPortStartScheduler+0x13c>)
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007968:	f000 f8fc 	bl	8007b64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800796c:	4b10      	ldr	r3, [pc, #64]	; (80079b0 <xPortStartScheduler+0x140>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a0f      	ldr	r2, [pc, #60]	; (80079b0 <xPortStartScheduler+0x140>)
 8007972:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007976:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007978:	f7ff ff66 	bl	8007848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800797c:	f7ff f882 	bl	8006a84 <vTaskSwitchContext>
	prvTaskExitError();
 8007980:	f7ff ff22 	bl	80077c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	e000ed00 	.word	0xe000ed00
 8007994:	410fc271 	.word	0x410fc271
 8007998:	410fc270 	.word	0x410fc270
 800799c:	e000e400 	.word	0xe000e400
 80079a0:	20000fe4 	.word	0x20000fe4
 80079a4:	20000fe8 	.word	0x20000fe8
 80079a8:	e000ed20 	.word	0xe000ed20
 80079ac:	2000000c 	.word	0x2000000c
 80079b0:	e000ef34 	.word	0xe000ef34

080079b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	607b      	str	r3, [r7, #4]
}
 80079cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079ce:	4b0f      	ldr	r3, [pc, #60]	; (8007a0c <vPortEnterCritical+0x58>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3301      	adds	r3, #1
 80079d4:	4a0d      	ldr	r2, [pc, #52]	; (8007a0c <vPortEnterCritical+0x58>)
 80079d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079d8:	4b0c      	ldr	r3, [pc, #48]	; (8007a0c <vPortEnterCritical+0x58>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d10f      	bne.n	8007a00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079e0:	4b0b      	ldr	r3, [pc, #44]	; (8007a10 <vPortEnterCritical+0x5c>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00a      	beq.n	8007a00 <vPortEnterCritical+0x4c>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	603b      	str	r3, [r7, #0]
}
 80079fc:	bf00      	nop
 80079fe:	e7fe      	b.n	80079fe <vPortEnterCritical+0x4a>
	}
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	2000000c 	.word	0x2000000c
 8007a10:	e000ed04 	.word	0xe000ed04

08007a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a1a:	4b12      	ldr	r3, [pc, #72]	; (8007a64 <vPortExitCritical+0x50>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10a      	bne.n	8007a38 <vPortExitCritical+0x24>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	607b      	str	r3, [r7, #4]
}
 8007a34:	bf00      	nop
 8007a36:	e7fe      	b.n	8007a36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a38:	4b0a      	ldr	r3, [pc, #40]	; (8007a64 <vPortExitCritical+0x50>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	4a09      	ldr	r2, [pc, #36]	; (8007a64 <vPortExitCritical+0x50>)
 8007a40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a42:	4b08      	ldr	r3, [pc, #32]	; (8007a64 <vPortExitCritical+0x50>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d105      	bne.n	8007a56 <vPortExitCritical+0x42>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	f383 8811 	msr	BASEPRI, r3
}
 8007a54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a56:	bf00      	nop
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	2000000c 	.word	0x2000000c
	...

08007a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a70:	f3ef 8009 	mrs	r0, PSP
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	4b15      	ldr	r3, [pc, #84]	; (8007ad0 <pxCurrentTCBConst>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	f01e 0f10 	tst.w	lr, #16
 8007a80:	bf08      	it	eq
 8007a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8a:	6010      	str	r0, [r2, #0]
 8007a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a94:	f380 8811 	msr	BASEPRI, r0
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f7fe fff0 	bl	8006a84 <vTaskSwitchContext>
 8007aa4:	f04f 0000 	mov.w	r0, #0
 8007aa8:	f380 8811 	msr	BASEPRI, r0
 8007aac:	bc09      	pop	{r0, r3}
 8007aae:	6819      	ldr	r1, [r3, #0]
 8007ab0:	6808      	ldr	r0, [r1, #0]
 8007ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab6:	f01e 0f10 	tst.w	lr, #16
 8007aba:	bf08      	it	eq
 8007abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ac0:	f380 8809 	msr	PSP, r0
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	f3af 8000 	nop.w

08007ad0 <pxCurrentTCBConst>:
 8007ad0:	200009b8 	.word	0x200009b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop

08007ad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	607b      	str	r3, [r7, #4]
}
 8007af0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007af2:	f7fe ff09 	bl	8006908 <xTaskIncrementTick>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007afc:	4b06      	ldr	r3, [pc, #24]	; (8007b18 <SysTick_Handler+0x40>)
 8007afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	2300      	movs	r3, #0
 8007b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	f383 8811 	msr	BASEPRI, r3
}
 8007b0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	e000ed04 	.word	0xe000ed04

08007b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b20:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <vPortSetupTimerInterrupt+0x34>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <vPortSetupTimerInterrupt+0x38>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b2c:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <vPortSetupTimerInterrupt+0x3c>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a0a      	ldr	r2, [pc, #40]	; (8007b5c <vPortSetupTimerInterrupt+0x40>)
 8007b32:	fba2 2303 	umull	r2, r3, r2, r3
 8007b36:	099b      	lsrs	r3, r3, #6
 8007b38:	4a09      	ldr	r2, [pc, #36]	; (8007b60 <vPortSetupTimerInterrupt+0x44>)
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b3e:	4b04      	ldr	r3, [pc, #16]	; (8007b50 <vPortSetupTimerInterrupt+0x34>)
 8007b40:	2207      	movs	r2, #7
 8007b42:	601a      	str	r2, [r3, #0]
}
 8007b44:	bf00      	nop
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	e000e010 	.word	0xe000e010
 8007b54:	e000e018 	.word	0xe000e018
 8007b58:	20000000 	.word	0x20000000
 8007b5c:	10624dd3 	.word	0x10624dd3
 8007b60:	e000e014 	.word	0xe000e014

08007b64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b74 <vPortEnableVFP+0x10>
 8007b68:	6801      	ldr	r1, [r0, #0]
 8007b6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b6e:	6001      	str	r1, [r0, #0]
 8007b70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b72:	bf00      	nop
 8007b74:	e000ed88 	.word	0xe000ed88

08007b78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b7e:	f3ef 8305 	mrs	r3, IPSR
 8007b82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b0f      	cmp	r3, #15
 8007b88:	d914      	bls.n	8007bb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b8a:	4a17      	ldr	r2, [pc, #92]	; (8007be8 <vPortValidateInterruptPriority+0x70>)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4413      	add	r3, r2
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b94:	4b15      	ldr	r3, [pc, #84]	; (8007bec <vPortValidateInterruptPriority+0x74>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	7afa      	ldrb	r2, [r7, #11]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d20a      	bcs.n	8007bb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	607b      	str	r3, [r7, #4]
}
 8007bb0:	bf00      	nop
 8007bb2:	e7fe      	b.n	8007bb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bb4:	4b0e      	ldr	r3, [pc, #56]	; (8007bf0 <vPortValidateInterruptPriority+0x78>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007bbc:	4b0d      	ldr	r3, [pc, #52]	; (8007bf4 <vPortValidateInterruptPriority+0x7c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d90a      	bls.n	8007bda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	603b      	str	r3, [r7, #0]
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <vPortValidateInterruptPriority+0x60>
	}
 8007bda:	bf00      	nop
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	e000e3f0 	.word	0xe000e3f0
 8007bec:	20000fe4 	.word	0x20000fe4
 8007bf0:	e000ed0c 	.word	0xe000ed0c
 8007bf4:	20000fe8 	.word	0x20000fe8

08007bf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08a      	sub	sp, #40	; 0x28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c00:	2300      	movs	r3, #0
 8007c02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c04:	f7fe fdc4 	bl	8006790 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c08:	4b58      	ldr	r3, [pc, #352]	; (8007d6c <pvPortMalloc+0x174>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c10:	f000 f910 	bl	8007e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c14:	4b56      	ldr	r3, [pc, #344]	; (8007d70 <pvPortMalloc+0x178>)
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f040 808e 	bne.w	8007d3e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d01d      	beq.n	8007c64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c28:	2208      	movs	r2, #8
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d014      	beq.n	8007c64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f023 0307 	bic.w	r3, r3, #7
 8007c40:	3308      	adds	r3, #8
 8007c42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <pvPortMalloc+0x6c>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	617b      	str	r3, [r7, #20]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d069      	beq.n	8007d3e <pvPortMalloc+0x146>
 8007c6a:	4b42      	ldr	r3, [pc, #264]	; (8007d74 <pvPortMalloc+0x17c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d864      	bhi.n	8007d3e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c74:	4b40      	ldr	r3, [pc, #256]	; (8007d78 <pvPortMalloc+0x180>)
 8007c76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c78:	4b3f      	ldr	r3, [pc, #252]	; (8007d78 <pvPortMalloc+0x180>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c7e:	e004      	b.n	8007c8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d903      	bls.n	8007c9c <pvPortMalloc+0xa4>
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1f1      	bne.n	8007c80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c9c:	4b33      	ldr	r3, [pc, #204]	; (8007d6c <pvPortMalloc+0x174>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d04b      	beq.n	8007d3e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2208      	movs	r2, #8
 8007cac:	4413      	add	r3, r2
 8007cae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	1ad2      	subs	r2, r2, r3
 8007cc0:	2308      	movs	r3, #8
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d91f      	bls.n	8007d08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4413      	add	r3, r2
 8007cce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <pvPortMalloc+0xf8>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	613b      	str	r3, [r7, #16]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	1ad2      	subs	r2, r2, r3
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d02:	69b8      	ldr	r0, [r7, #24]
 8007d04:	f000 f8f8 	bl	8007ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d08:	4b1a      	ldr	r3, [pc, #104]	; (8007d74 <pvPortMalloc+0x17c>)
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	4a18      	ldr	r2, [pc, #96]	; (8007d74 <pvPortMalloc+0x17c>)
 8007d14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d16:	4b17      	ldr	r3, [pc, #92]	; (8007d74 <pvPortMalloc+0x17c>)
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	4b18      	ldr	r3, [pc, #96]	; (8007d7c <pvPortMalloc+0x184>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d203      	bcs.n	8007d2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d22:	4b14      	ldr	r3, [pc, #80]	; (8007d74 <pvPortMalloc+0x17c>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a15      	ldr	r2, [pc, #84]	; (8007d7c <pvPortMalloc+0x184>)
 8007d28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	4b10      	ldr	r3, [pc, #64]	; (8007d70 <pvPortMalloc+0x178>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	431a      	orrs	r2, r3
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d3e:	f7fe fd35 	bl	80067ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	f003 0307 	and.w	r3, r3, #7
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00a      	beq.n	8007d62 <pvPortMalloc+0x16a>
	__asm volatile
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	60fb      	str	r3, [r7, #12]
}
 8007d5e:	bf00      	nop
 8007d60:	e7fe      	b.n	8007d60 <pvPortMalloc+0x168>
	return pvReturn;
 8007d62:	69fb      	ldr	r3, [r7, #28]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3728      	adds	r7, #40	; 0x28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	20001bf4 	.word	0x20001bf4
 8007d70:	20001c00 	.word	0x20001c00
 8007d74:	20001bf8 	.word	0x20001bf8
 8007d78:	20001bec 	.word	0x20001bec
 8007d7c:	20001bfc 	.word	0x20001bfc

08007d80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d048      	beq.n	8007e24 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d92:	2308      	movs	r3, #8
 8007d94:	425b      	negs	r3, r3
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	4413      	add	r3, r2
 8007d9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	4b21      	ldr	r3, [pc, #132]	; (8007e2c <vPortFree+0xac>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4013      	ands	r3, r2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10a      	bne.n	8007dc4 <vPortFree+0x44>
	__asm volatile
 8007dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	60fb      	str	r3, [r7, #12]
}
 8007dc0:	bf00      	nop
 8007dc2:	e7fe      	b.n	8007dc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00a      	beq.n	8007de2 <vPortFree+0x62>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	60bb      	str	r3, [r7, #8]
}
 8007dde:	bf00      	nop
 8007de0:	e7fe      	b.n	8007de0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	4b11      	ldr	r3, [pc, #68]	; (8007e2c <vPortFree+0xac>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4013      	ands	r3, r2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d019      	beq.n	8007e24 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d115      	bne.n	8007e24 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	4b0b      	ldr	r3, [pc, #44]	; (8007e2c <vPortFree+0xac>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	43db      	mvns	r3, r3
 8007e02:	401a      	ands	r2, r3
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e08:	f7fe fcc2 	bl	8006790 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <vPortFree+0xb0>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4413      	add	r3, r2
 8007e16:	4a06      	ldr	r2, [pc, #24]	; (8007e30 <vPortFree+0xb0>)
 8007e18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e1a:	6938      	ldr	r0, [r7, #16]
 8007e1c:	f000 f86c 	bl	8007ef8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007e20:	f7fe fcc4 	bl	80067ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e24:	bf00      	nop
 8007e26:	3718      	adds	r7, #24
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	20001c00 	.word	0x20001c00
 8007e30:	20001bf8 	.word	0x20001bf8

08007e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e40:	4b27      	ldr	r3, [pc, #156]	; (8007ee0 <prvHeapInit+0xac>)
 8007e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f003 0307 	and.w	r3, r3, #7
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00c      	beq.n	8007e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3307      	adds	r3, #7
 8007e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f023 0307 	bic.w	r3, r3, #7
 8007e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	4a1f      	ldr	r2, [pc, #124]	; (8007ee0 <prvHeapInit+0xac>)
 8007e64:	4413      	add	r3, r2
 8007e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ee4 <prvHeapInit+0xb0>)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e72:	4b1c      	ldr	r3, [pc, #112]	; (8007ee4 <prvHeapInit+0xb0>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e80:	2208      	movs	r2, #8
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	1a9b      	subs	r3, r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f023 0307 	bic.w	r3, r3, #7
 8007e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4a15      	ldr	r2, [pc, #84]	; (8007ee8 <prvHeapInit+0xb4>)
 8007e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e96:	4b14      	ldr	r3, [pc, #80]	; (8007ee8 <prvHeapInit+0xb4>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e9e:	4b12      	ldr	r3, [pc, #72]	; (8007ee8 <prvHeapInit+0xb4>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	1ad2      	subs	r2, r2, r3
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007eb4:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <prvHeapInit+0xb4>)
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	4a0a      	ldr	r2, [pc, #40]	; (8007eec <prvHeapInit+0xb8>)
 8007ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	4a09      	ldr	r2, [pc, #36]	; (8007ef0 <prvHeapInit+0xbc>)
 8007eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ecc:	4b09      	ldr	r3, [pc, #36]	; (8007ef4 <prvHeapInit+0xc0>)
 8007ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ed2:	601a      	str	r2, [r3, #0]
}
 8007ed4:	bf00      	nop
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	20000fec 	.word	0x20000fec
 8007ee4:	20001bec 	.word	0x20001bec
 8007ee8:	20001bf4 	.word	0x20001bf4
 8007eec:	20001bfc 	.word	0x20001bfc
 8007ef0:	20001bf8 	.word	0x20001bf8
 8007ef4:	20001c00 	.word	0x20001c00

08007ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f00:	4b28      	ldr	r3, [pc, #160]	; (8007fa4 <prvInsertBlockIntoFreeList+0xac>)
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	e002      	b.n	8007f0c <prvInsertBlockIntoFreeList+0x14>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60fb      	str	r3, [r7, #12]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d8f7      	bhi.n	8007f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	4413      	add	r3, r2
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d108      	bne.n	8007f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	441a      	add	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	441a      	add	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d118      	bne.n	8007f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	4b15      	ldr	r3, [pc, #84]	; (8007fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d00d      	beq.n	8007f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	441a      	add	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	e008      	b.n	8007f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f76:	4b0c      	ldr	r3, [pc, #48]	; (8007fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	e003      	b.n	8007f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d002      	beq.n	8007f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f96:	bf00      	nop
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	20001bec 	.word	0x20001bec
 8007fa8:	20001bf4 	.word	0x20001bf4

08007fac <asiprintf>:
 8007fac:	b40e      	push	{r1, r2, r3}
 8007fae:	b530      	push	{r4, r5, lr}
 8007fb0:	b09c      	sub	sp, #112	; 0x70
 8007fb2:	ab1f      	add	r3, sp, #124	; 0x7c
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	490d      	ldr	r1, [pc, #52]	; (8007fec <asiprintf+0x40>)
 8007fb8:	480d      	ldr	r0, [pc, #52]	; (8007ff0 <asiprintf+0x44>)
 8007fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fbe:	6800      	ldr	r0, [r0, #0]
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	2400      	movs	r4, #0
 8007fc4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8007fc8:	a902      	add	r1, sp, #8
 8007fca:	9402      	str	r4, [sp, #8]
 8007fcc:	9404      	str	r4, [sp, #16]
 8007fce:	9407      	str	r4, [sp, #28]
 8007fd0:	f000 f9fa 	bl	80083c8 <_svfiprintf_r>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	bfa1      	itttt	ge
 8007fd8:	9b02      	ldrge	r3, [sp, #8]
 8007fda:	701c      	strbge	r4, [r3, #0]
 8007fdc:	9b06      	ldrge	r3, [sp, #24]
 8007fde:	602b      	strge	r3, [r5, #0]
 8007fe0:	b01c      	add	sp, #112	; 0x70
 8007fe2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fe6:	b003      	add	sp, #12
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	ffff0288 	.word	0xffff0288
 8007ff0:	2000005c 	.word	0x2000005c

08007ff4 <memset>:
 8007ff4:	4402      	add	r2, r0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d100      	bne.n	8007ffe <memset+0xa>
 8007ffc:	4770      	bx	lr
 8007ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8008002:	e7f9      	b.n	8007ff8 <memset+0x4>

08008004 <_reclaim_reent>:
 8008004:	4b29      	ldr	r3, [pc, #164]	; (80080ac <_reclaim_reent+0xa8>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4283      	cmp	r3, r0
 800800a:	b570      	push	{r4, r5, r6, lr}
 800800c:	4604      	mov	r4, r0
 800800e:	d04b      	beq.n	80080a8 <_reclaim_reent+0xa4>
 8008010:	69c3      	ldr	r3, [r0, #28]
 8008012:	b143      	cbz	r3, 8008026 <_reclaim_reent+0x22>
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d144      	bne.n	80080a4 <_reclaim_reent+0xa0>
 800801a:	69e3      	ldr	r3, [r4, #28]
 800801c:	6819      	ldr	r1, [r3, #0]
 800801e:	b111      	cbz	r1, 8008026 <_reclaim_reent+0x22>
 8008020:	4620      	mov	r0, r4
 8008022:	f000 f87f 	bl	8008124 <_free_r>
 8008026:	6961      	ldr	r1, [r4, #20]
 8008028:	b111      	cbz	r1, 8008030 <_reclaim_reent+0x2c>
 800802a:	4620      	mov	r0, r4
 800802c:	f000 f87a 	bl	8008124 <_free_r>
 8008030:	69e1      	ldr	r1, [r4, #28]
 8008032:	b111      	cbz	r1, 800803a <_reclaim_reent+0x36>
 8008034:	4620      	mov	r0, r4
 8008036:	f000 f875 	bl	8008124 <_free_r>
 800803a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800803c:	b111      	cbz	r1, 8008044 <_reclaim_reent+0x40>
 800803e:	4620      	mov	r0, r4
 8008040:	f000 f870 	bl	8008124 <_free_r>
 8008044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008046:	b111      	cbz	r1, 800804e <_reclaim_reent+0x4a>
 8008048:	4620      	mov	r0, r4
 800804a:	f000 f86b 	bl	8008124 <_free_r>
 800804e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008050:	b111      	cbz	r1, 8008058 <_reclaim_reent+0x54>
 8008052:	4620      	mov	r0, r4
 8008054:	f000 f866 	bl	8008124 <_free_r>
 8008058:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800805a:	b111      	cbz	r1, 8008062 <_reclaim_reent+0x5e>
 800805c:	4620      	mov	r0, r4
 800805e:	f000 f861 	bl	8008124 <_free_r>
 8008062:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008064:	b111      	cbz	r1, 800806c <_reclaim_reent+0x68>
 8008066:	4620      	mov	r0, r4
 8008068:	f000 f85c 	bl	8008124 <_free_r>
 800806c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800806e:	b111      	cbz	r1, 8008076 <_reclaim_reent+0x72>
 8008070:	4620      	mov	r0, r4
 8008072:	f000 f857 	bl	8008124 <_free_r>
 8008076:	6a23      	ldr	r3, [r4, #32]
 8008078:	b1b3      	cbz	r3, 80080a8 <_reclaim_reent+0xa4>
 800807a:	4620      	mov	r0, r4
 800807c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008080:	4718      	bx	r3
 8008082:	5949      	ldr	r1, [r1, r5]
 8008084:	b941      	cbnz	r1, 8008098 <_reclaim_reent+0x94>
 8008086:	3504      	adds	r5, #4
 8008088:	69e3      	ldr	r3, [r4, #28]
 800808a:	2d80      	cmp	r5, #128	; 0x80
 800808c:	68d9      	ldr	r1, [r3, #12]
 800808e:	d1f8      	bne.n	8008082 <_reclaim_reent+0x7e>
 8008090:	4620      	mov	r0, r4
 8008092:	f000 f847 	bl	8008124 <_free_r>
 8008096:	e7c0      	b.n	800801a <_reclaim_reent+0x16>
 8008098:	680e      	ldr	r6, [r1, #0]
 800809a:	4620      	mov	r0, r4
 800809c:	f000 f842 	bl	8008124 <_free_r>
 80080a0:	4631      	mov	r1, r6
 80080a2:	e7ef      	b.n	8008084 <_reclaim_reent+0x80>
 80080a4:	2500      	movs	r5, #0
 80080a6:	e7ef      	b.n	8008088 <_reclaim_reent+0x84>
 80080a8:	bd70      	pop	{r4, r5, r6, pc}
 80080aa:	bf00      	nop
 80080ac:	2000005c 	.word	0x2000005c

080080b0 <__errno>:
 80080b0:	4b01      	ldr	r3, [pc, #4]	; (80080b8 <__errno+0x8>)
 80080b2:	6818      	ldr	r0, [r3, #0]
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	2000005c 	.word	0x2000005c

080080bc <__libc_init_array>:
 80080bc:	b570      	push	{r4, r5, r6, lr}
 80080be:	4d0d      	ldr	r5, [pc, #52]	; (80080f4 <__libc_init_array+0x38>)
 80080c0:	4c0d      	ldr	r4, [pc, #52]	; (80080f8 <__libc_init_array+0x3c>)
 80080c2:	1b64      	subs	r4, r4, r5
 80080c4:	10a4      	asrs	r4, r4, #2
 80080c6:	2600      	movs	r6, #0
 80080c8:	42a6      	cmp	r6, r4
 80080ca:	d109      	bne.n	80080e0 <__libc_init_array+0x24>
 80080cc:	4d0b      	ldr	r5, [pc, #44]	; (80080fc <__libc_init_array+0x40>)
 80080ce:	4c0c      	ldr	r4, [pc, #48]	; (8008100 <__libc_init_array+0x44>)
 80080d0:	f000 fc6a 	bl	80089a8 <_init>
 80080d4:	1b64      	subs	r4, r4, r5
 80080d6:	10a4      	asrs	r4, r4, #2
 80080d8:	2600      	movs	r6, #0
 80080da:	42a6      	cmp	r6, r4
 80080dc:	d105      	bne.n	80080ea <__libc_init_array+0x2e>
 80080de:	bd70      	pop	{r4, r5, r6, pc}
 80080e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e4:	4798      	blx	r3
 80080e6:	3601      	adds	r6, #1
 80080e8:	e7ee      	b.n	80080c8 <__libc_init_array+0xc>
 80080ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ee:	4798      	blx	r3
 80080f0:	3601      	adds	r6, #1
 80080f2:	e7f2      	b.n	80080da <__libc_init_array+0x1e>
 80080f4:	08008cec 	.word	0x08008cec
 80080f8:	08008cec 	.word	0x08008cec
 80080fc:	08008cec 	.word	0x08008cec
 8008100:	08008cf0 	.word	0x08008cf0

08008104 <__retarget_lock_acquire_recursive>:
 8008104:	4770      	bx	lr

08008106 <__retarget_lock_release_recursive>:
 8008106:	4770      	bx	lr

08008108 <memcpy>:
 8008108:	440a      	add	r2, r1
 800810a:	4291      	cmp	r1, r2
 800810c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008110:	d100      	bne.n	8008114 <memcpy+0xc>
 8008112:	4770      	bx	lr
 8008114:	b510      	push	{r4, lr}
 8008116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800811a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800811e:	4291      	cmp	r1, r2
 8008120:	d1f9      	bne.n	8008116 <memcpy+0xe>
 8008122:	bd10      	pop	{r4, pc}

08008124 <_free_r>:
 8008124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008126:	2900      	cmp	r1, #0
 8008128:	d044      	beq.n	80081b4 <_free_r+0x90>
 800812a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800812e:	9001      	str	r0, [sp, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	f1a1 0404 	sub.w	r4, r1, #4
 8008136:	bfb8      	it	lt
 8008138:	18e4      	addlt	r4, r4, r3
 800813a:	f000 f8df 	bl	80082fc <__malloc_lock>
 800813e:	4a1e      	ldr	r2, [pc, #120]	; (80081b8 <_free_r+0x94>)
 8008140:	9801      	ldr	r0, [sp, #4]
 8008142:	6813      	ldr	r3, [r2, #0]
 8008144:	b933      	cbnz	r3, 8008154 <_free_r+0x30>
 8008146:	6063      	str	r3, [r4, #4]
 8008148:	6014      	str	r4, [r2, #0]
 800814a:	b003      	add	sp, #12
 800814c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008150:	f000 b8da 	b.w	8008308 <__malloc_unlock>
 8008154:	42a3      	cmp	r3, r4
 8008156:	d908      	bls.n	800816a <_free_r+0x46>
 8008158:	6825      	ldr	r5, [r4, #0]
 800815a:	1961      	adds	r1, r4, r5
 800815c:	428b      	cmp	r3, r1
 800815e:	bf01      	itttt	eq
 8008160:	6819      	ldreq	r1, [r3, #0]
 8008162:	685b      	ldreq	r3, [r3, #4]
 8008164:	1949      	addeq	r1, r1, r5
 8008166:	6021      	streq	r1, [r4, #0]
 8008168:	e7ed      	b.n	8008146 <_free_r+0x22>
 800816a:	461a      	mov	r2, r3
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	b10b      	cbz	r3, 8008174 <_free_r+0x50>
 8008170:	42a3      	cmp	r3, r4
 8008172:	d9fa      	bls.n	800816a <_free_r+0x46>
 8008174:	6811      	ldr	r1, [r2, #0]
 8008176:	1855      	adds	r5, r2, r1
 8008178:	42a5      	cmp	r5, r4
 800817a:	d10b      	bne.n	8008194 <_free_r+0x70>
 800817c:	6824      	ldr	r4, [r4, #0]
 800817e:	4421      	add	r1, r4
 8008180:	1854      	adds	r4, r2, r1
 8008182:	42a3      	cmp	r3, r4
 8008184:	6011      	str	r1, [r2, #0]
 8008186:	d1e0      	bne.n	800814a <_free_r+0x26>
 8008188:	681c      	ldr	r4, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	6053      	str	r3, [r2, #4]
 800818e:	440c      	add	r4, r1
 8008190:	6014      	str	r4, [r2, #0]
 8008192:	e7da      	b.n	800814a <_free_r+0x26>
 8008194:	d902      	bls.n	800819c <_free_r+0x78>
 8008196:	230c      	movs	r3, #12
 8008198:	6003      	str	r3, [r0, #0]
 800819a:	e7d6      	b.n	800814a <_free_r+0x26>
 800819c:	6825      	ldr	r5, [r4, #0]
 800819e:	1961      	adds	r1, r4, r5
 80081a0:	428b      	cmp	r3, r1
 80081a2:	bf04      	itt	eq
 80081a4:	6819      	ldreq	r1, [r3, #0]
 80081a6:	685b      	ldreq	r3, [r3, #4]
 80081a8:	6063      	str	r3, [r4, #4]
 80081aa:	bf04      	itt	eq
 80081ac:	1949      	addeq	r1, r1, r5
 80081ae:	6021      	streq	r1, [r4, #0]
 80081b0:	6054      	str	r4, [r2, #4]
 80081b2:	e7ca      	b.n	800814a <_free_r+0x26>
 80081b4:	b003      	add	sp, #12
 80081b6:	bd30      	pop	{r4, r5, pc}
 80081b8:	20001d44 	.word	0x20001d44

080081bc <sbrk_aligned>:
 80081bc:	b570      	push	{r4, r5, r6, lr}
 80081be:	4e0e      	ldr	r6, [pc, #56]	; (80081f8 <sbrk_aligned+0x3c>)
 80081c0:	460c      	mov	r4, r1
 80081c2:	6831      	ldr	r1, [r6, #0]
 80081c4:	4605      	mov	r5, r0
 80081c6:	b911      	cbnz	r1, 80081ce <sbrk_aligned+0x12>
 80081c8:	f000 fba6 	bl	8008918 <_sbrk_r>
 80081cc:	6030      	str	r0, [r6, #0]
 80081ce:	4621      	mov	r1, r4
 80081d0:	4628      	mov	r0, r5
 80081d2:	f000 fba1 	bl	8008918 <_sbrk_r>
 80081d6:	1c43      	adds	r3, r0, #1
 80081d8:	d00a      	beq.n	80081f0 <sbrk_aligned+0x34>
 80081da:	1cc4      	adds	r4, r0, #3
 80081dc:	f024 0403 	bic.w	r4, r4, #3
 80081e0:	42a0      	cmp	r0, r4
 80081e2:	d007      	beq.n	80081f4 <sbrk_aligned+0x38>
 80081e4:	1a21      	subs	r1, r4, r0
 80081e6:	4628      	mov	r0, r5
 80081e8:	f000 fb96 	bl	8008918 <_sbrk_r>
 80081ec:	3001      	adds	r0, #1
 80081ee:	d101      	bne.n	80081f4 <sbrk_aligned+0x38>
 80081f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80081f4:	4620      	mov	r0, r4
 80081f6:	bd70      	pop	{r4, r5, r6, pc}
 80081f8:	20001d48 	.word	0x20001d48

080081fc <_malloc_r>:
 80081fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008200:	1ccd      	adds	r5, r1, #3
 8008202:	f025 0503 	bic.w	r5, r5, #3
 8008206:	3508      	adds	r5, #8
 8008208:	2d0c      	cmp	r5, #12
 800820a:	bf38      	it	cc
 800820c:	250c      	movcc	r5, #12
 800820e:	2d00      	cmp	r5, #0
 8008210:	4607      	mov	r7, r0
 8008212:	db01      	blt.n	8008218 <_malloc_r+0x1c>
 8008214:	42a9      	cmp	r1, r5
 8008216:	d905      	bls.n	8008224 <_malloc_r+0x28>
 8008218:	230c      	movs	r3, #12
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	2600      	movs	r6, #0
 800821e:	4630      	mov	r0, r6
 8008220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008224:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80082f8 <_malloc_r+0xfc>
 8008228:	f000 f868 	bl	80082fc <__malloc_lock>
 800822c:	f8d8 3000 	ldr.w	r3, [r8]
 8008230:	461c      	mov	r4, r3
 8008232:	bb5c      	cbnz	r4, 800828c <_malloc_r+0x90>
 8008234:	4629      	mov	r1, r5
 8008236:	4638      	mov	r0, r7
 8008238:	f7ff ffc0 	bl	80081bc <sbrk_aligned>
 800823c:	1c43      	adds	r3, r0, #1
 800823e:	4604      	mov	r4, r0
 8008240:	d155      	bne.n	80082ee <_malloc_r+0xf2>
 8008242:	f8d8 4000 	ldr.w	r4, [r8]
 8008246:	4626      	mov	r6, r4
 8008248:	2e00      	cmp	r6, #0
 800824a:	d145      	bne.n	80082d8 <_malloc_r+0xdc>
 800824c:	2c00      	cmp	r4, #0
 800824e:	d048      	beq.n	80082e2 <_malloc_r+0xe6>
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	4631      	mov	r1, r6
 8008254:	4638      	mov	r0, r7
 8008256:	eb04 0903 	add.w	r9, r4, r3
 800825a:	f000 fb5d 	bl	8008918 <_sbrk_r>
 800825e:	4581      	cmp	r9, r0
 8008260:	d13f      	bne.n	80082e2 <_malloc_r+0xe6>
 8008262:	6821      	ldr	r1, [r4, #0]
 8008264:	1a6d      	subs	r5, r5, r1
 8008266:	4629      	mov	r1, r5
 8008268:	4638      	mov	r0, r7
 800826a:	f7ff ffa7 	bl	80081bc <sbrk_aligned>
 800826e:	3001      	adds	r0, #1
 8008270:	d037      	beq.n	80082e2 <_malloc_r+0xe6>
 8008272:	6823      	ldr	r3, [r4, #0]
 8008274:	442b      	add	r3, r5
 8008276:	6023      	str	r3, [r4, #0]
 8008278:	f8d8 3000 	ldr.w	r3, [r8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d038      	beq.n	80082f2 <_malloc_r+0xf6>
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	42a2      	cmp	r2, r4
 8008284:	d12b      	bne.n	80082de <_malloc_r+0xe2>
 8008286:	2200      	movs	r2, #0
 8008288:	605a      	str	r2, [r3, #4]
 800828a:	e00f      	b.n	80082ac <_malloc_r+0xb0>
 800828c:	6822      	ldr	r2, [r4, #0]
 800828e:	1b52      	subs	r2, r2, r5
 8008290:	d41f      	bmi.n	80082d2 <_malloc_r+0xd6>
 8008292:	2a0b      	cmp	r2, #11
 8008294:	d917      	bls.n	80082c6 <_malloc_r+0xca>
 8008296:	1961      	adds	r1, r4, r5
 8008298:	42a3      	cmp	r3, r4
 800829a:	6025      	str	r5, [r4, #0]
 800829c:	bf18      	it	ne
 800829e:	6059      	strne	r1, [r3, #4]
 80082a0:	6863      	ldr	r3, [r4, #4]
 80082a2:	bf08      	it	eq
 80082a4:	f8c8 1000 	streq.w	r1, [r8]
 80082a8:	5162      	str	r2, [r4, r5]
 80082aa:	604b      	str	r3, [r1, #4]
 80082ac:	4638      	mov	r0, r7
 80082ae:	f104 060b 	add.w	r6, r4, #11
 80082b2:	f000 f829 	bl	8008308 <__malloc_unlock>
 80082b6:	f026 0607 	bic.w	r6, r6, #7
 80082ba:	1d23      	adds	r3, r4, #4
 80082bc:	1af2      	subs	r2, r6, r3
 80082be:	d0ae      	beq.n	800821e <_malloc_r+0x22>
 80082c0:	1b9b      	subs	r3, r3, r6
 80082c2:	50a3      	str	r3, [r4, r2]
 80082c4:	e7ab      	b.n	800821e <_malloc_r+0x22>
 80082c6:	42a3      	cmp	r3, r4
 80082c8:	6862      	ldr	r2, [r4, #4]
 80082ca:	d1dd      	bne.n	8008288 <_malloc_r+0x8c>
 80082cc:	f8c8 2000 	str.w	r2, [r8]
 80082d0:	e7ec      	b.n	80082ac <_malloc_r+0xb0>
 80082d2:	4623      	mov	r3, r4
 80082d4:	6864      	ldr	r4, [r4, #4]
 80082d6:	e7ac      	b.n	8008232 <_malloc_r+0x36>
 80082d8:	4634      	mov	r4, r6
 80082da:	6876      	ldr	r6, [r6, #4]
 80082dc:	e7b4      	b.n	8008248 <_malloc_r+0x4c>
 80082de:	4613      	mov	r3, r2
 80082e0:	e7cc      	b.n	800827c <_malloc_r+0x80>
 80082e2:	230c      	movs	r3, #12
 80082e4:	603b      	str	r3, [r7, #0]
 80082e6:	4638      	mov	r0, r7
 80082e8:	f000 f80e 	bl	8008308 <__malloc_unlock>
 80082ec:	e797      	b.n	800821e <_malloc_r+0x22>
 80082ee:	6025      	str	r5, [r4, #0]
 80082f0:	e7dc      	b.n	80082ac <_malloc_r+0xb0>
 80082f2:	605b      	str	r3, [r3, #4]
 80082f4:	deff      	udf	#255	; 0xff
 80082f6:	bf00      	nop
 80082f8:	20001d44 	.word	0x20001d44

080082fc <__malloc_lock>:
 80082fc:	4801      	ldr	r0, [pc, #4]	; (8008304 <__malloc_lock+0x8>)
 80082fe:	f7ff bf01 	b.w	8008104 <__retarget_lock_acquire_recursive>
 8008302:	bf00      	nop
 8008304:	20001d40 	.word	0x20001d40

08008308 <__malloc_unlock>:
 8008308:	4801      	ldr	r0, [pc, #4]	; (8008310 <__malloc_unlock+0x8>)
 800830a:	f7ff befc 	b.w	8008106 <__retarget_lock_release_recursive>
 800830e:	bf00      	nop
 8008310:	20001d40 	.word	0x20001d40

08008314 <__ssputs_r>:
 8008314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008318:	688e      	ldr	r6, [r1, #8]
 800831a:	461f      	mov	r7, r3
 800831c:	42be      	cmp	r6, r7
 800831e:	680b      	ldr	r3, [r1, #0]
 8008320:	4682      	mov	sl, r0
 8008322:	460c      	mov	r4, r1
 8008324:	4690      	mov	r8, r2
 8008326:	d82c      	bhi.n	8008382 <__ssputs_r+0x6e>
 8008328:	898a      	ldrh	r2, [r1, #12]
 800832a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800832e:	d026      	beq.n	800837e <__ssputs_r+0x6a>
 8008330:	6965      	ldr	r5, [r4, #20]
 8008332:	6909      	ldr	r1, [r1, #16]
 8008334:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008338:	eba3 0901 	sub.w	r9, r3, r1
 800833c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008340:	1c7b      	adds	r3, r7, #1
 8008342:	444b      	add	r3, r9
 8008344:	106d      	asrs	r5, r5, #1
 8008346:	429d      	cmp	r5, r3
 8008348:	bf38      	it	cc
 800834a:	461d      	movcc	r5, r3
 800834c:	0553      	lsls	r3, r2, #21
 800834e:	d527      	bpl.n	80083a0 <__ssputs_r+0x8c>
 8008350:	4629      	mov	r1, r5
 8008352:	f7ff ff53 	bl	80081fc <_malloc_r>
 8008356:	4606      	mov	r6, r0
 8008358:	b360      	cbz	r0, 80083b4 <__ssputs_r+0xa0>
 800835a:	6921      	ldr	r1, [r4, #16]
 800835c:	464a      	mov	r2, r9
 800835e:	f7ff fed3 	bl	8008108 <memcpy>
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836c:	81a3      	strh	r3, [r4, #12]
 800836e:	6126      	str	r6, [r4, #16]
 8008370:	6165      	str	r5, [r4, #20]
 8008372:	444e      	add	r6, r9
 8008374:	eba5 0509 	sub.w	r5, r5, r9
 8008378:	6026      	str	r6, [r4, #0]
 800837a:	60a5      	str	r5, [r4, #8]
 800837c:	463e      	mov	r6, r7
 800837e:	42be      	cmp	r6, r7
 8008380:	d900      	bls.n	8008384 <__ssputs_r+0x70>
 8008382:	463e      	mov	r6, r7
 8008384:	6820      	ldr	r0, [r4, #0]
 8008386:	4632      	mov	r2, r6
 8008388:	4641      	mov	r1, r8
 800838a:	f000 faab 	bl	80088e4 <memmove>
 800838e:	68a3      	ldr	r3, [r4, #8]
 8008390:	1b9b      	subs	r3, r3, r6
 8008392:	60a3      	str	r3, [r4, #8]
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	4433      	add	r3, r6
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	2000      	movs	r0, #0
 800839c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a0:	462a      	mov	r2, r5
 80083a2:	f000 fac9 	bl	8008938 <_realloc_r>
 80083a6:	4606      	mov	r6, r0
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d1e0      	bne.n	800836e <__ssputs_r+0x5a>
 80083ac:	6921      	ldr	r1, [r4, #16]
 80083ae:	4650      	mov	r0, sl
 80083b0:	f7ff feb8 	bl	8008124 <_free_r>
 80083b4:	230c      	movs	r3, #12
 80083b6:	f8ca 3000 	str.w	r3, [sl]
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083c0:	81a3      	strh	r3, [r4, #12]
 80083c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083c6:	e7e9      	b.n	800839c <__ssputs_r+0x88>

080083c8 <_svfiprintf_r>:
 80083c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083cc:	4698      	mov	r8, r3
 80083ce:	898b      	ldrh	r3, [r1, #12]
 80083d0:	061b      	lsls	r3, r3, #24
 80083d2:	b09d      	sub	sp, #116	; 0x74
 80083d4:	4607      	mov	r7, r0
 80083d6:	460d      	mov	r5, r1
 80083d8:	4614      	mov	r4, r2
 80083da:	d50e      	bpl.n	80083fa <_svfiprintf_r+0x32>
 80083dc:	690b      	ldr	r3, [r1, #16]
 80083de:	b963      	cbnz	r3, 80083fa <_svfiprintf_r+0x32>
 80083e0:	2140      	movs	r1, #64	; 0x40
 80083e2:	f7ff ff0b 	bl	80081fc <_malloc_r>
 80083e6:	6028      	str	r0, [r5, #0]
 80083e8:	6128      	str	r0, [r5, #16]
 80083ea:	b920      	cbnz	r0, 80083f6 <_svfiprintf_r+0x2e>
 80083ec:	230c      	movs	r3, #12
 80083ee:	603b      	str	r3, [r7, #0]
 80083f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083f4:	e0d0      	b.n	8008598 <_svfiprintf_r+0x1d0>
 80083f6:	2340      	movs	r3, #64	; 0x40
 80083f8:	616b      	str	r3, [r5, #20]
 80083fa:	2300      	movs	r3, #0
 80083fc:	9309      	str	r3, [sp, #36]	; 0x24
 80083fe:	2320      	movs	r3, #32
 8008400:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008404:	f8cd 800c 	str.w	r8, [sp, #12]
 8008408:	2330      	movs	r3, #48	; 0x30
 800840a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80085b0 <_svfiprintf_r+0x1e8>
 800840e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008412:	f04f 0901 	mov.w	r9, #1
 8008416:	4623      	mov	r3, r4
 8008418:	469a      	mov	sl, r3
 800841a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800841e:	b10a      	cbz	r2, 8008424 <_svfiprintf_r+0x5c>
 8008420:	2a25      	cmp	r2, #37	; 0x25
 8008422:	d1f9      	bne.n	8008418 <_svfiprintf_r+0x50>
 8008424:	ebba 0b04 	subs.w	fp, sl, r4
 8008428:	d00b      	beq.n	8008442 <_svfiprintf_r+0x7a>
 800842a:	465b      	mov	r3, fp
 800842c:	4622      	mov	r2, r4
 800842e:	4629      	mov	r1, r5
 8008430:	4638      	mov	r0, r7
 8008432:	f7ff ff6f 	bl	8008314 <__ssputs_r>
 8008436:	3001      	adds	r0, #1
 8008438:	f000 80a9 	beq.w	800858e <_svfiprintf_r+0x1c6>
 800843c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800843e:	445a      	add	r2, fp
 8008440:	9209      	str	r2, [sp, #36]	; 0x24
 8008442:	f89a 3000 	ldrb.w	r3, [sl]
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 80a1 	beq.w	800858e <_svfiprintf_r+0x1c6>
 800844c:	2300      	movs	r3, #0
 800844e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008456:	f10a 0a01 	add.w	sl, sl, #1
 800845a:	9304      	str	r3, [sp, #16]
 800845c:	9307      	str	r3, [sp, #28]
 800845e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008462:	931a      	str	r3, [sp, #104]	; 0x68
 8008464:	4654      	mov	r4, sl
 8008466:	2205      	movs	r2, #5
 8008468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800846c:	4850      	ldr	r0, [pc, #320]	; (80085b0 <_svfiprintf_r+0x1e8>)
 800846e:	f7f7 feb7 	bl	80001e0 <memchr>
 8008472:	9a04      	ldr	r2, [sp, #16]
 8008474:	b9d8      	cbnz	r0, 80084ae <_svfiprintf_r+0xe6>
 8008476:	06d0      	lsls	r0, r2, #27
 8008478:	bf44      	itt	mi
 800847a:	2320      	movmi	r3, #32
 800847c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008480:	0711      	lsls	r1, r2, #28
 8008482:	bf44      	itt	mi
 8008484:	232b      	movmi	r3, #43	; 0x2b
 8008486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800848a:	f89a 3000 	ldrb.w	r3, [sl]
 800848e:	2b2a      	cmp	r3, #42	; 0x2a
 8008490:	d015      	beq.n	80084be <_svfiprintf_r+0xf6>
 8008492:	9a07      	ldr	r2, [sp, #28]
 8008494:	4654      	mov	r4, sl
 8008496:	2000      	movs	r0, #0
 8008498:	f04f 0c0a 	mov.w	ip, #10
 800849c:	4621      	mov	r1, r4
 800849e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084a2:	3b30      	subs	r3, #48	; 0x30
 80084a4:	2b09      	cmp	r3, #9
 80084a6:	d94d      	bls.n	8008544 <_svfiprintf_r+0x17c>
 80084a8:	b1b0      	cbz	r0, 80084d8 <_svfiprintf_r+0x110>
 80084aa:	9207      	str	r2, [sp, #28]
 80084ac:	e014      	b.n	80084d8 <_svfiprintf_r+0x110>
 80084ae:	eba0 0308 	sub.w	r3, r0, r8
 80084b2:	fa09 f303 	lsl.w	r3, r9, r3
 80084b6:	4313      	orrs	r3, r2
 80084b8:	9304      	str	r3, [sp, #16]
 80084ba:	46a2      	mov	sl, r4
 80084bc:	e7d2      	b.n	8008464 <_svfiprintf_r+0x9c>
 80084be:	9b03      	ldr	r3, [sp, #12]
 80084c0:	1d19      	adds	r1, r3, #4
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	9103      	str	r1, [sp, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	bfbb      	ittet	lt
 80084ca:	425b      	neglt	r3, r3
 80084cc:	f042 0202 	orrlt.w	r2, r2, #2
 80084d0:	9307      	strge	r3, [sp, #28]
 80084d2:	9307      	strlt	r3, [sp, #28]
 80084d4:	bfb8      	it	lt
 80084d6:	9204      	strlt	r2, [sp, #16]
 80084d8:	7823      	ldrb	r3, [r4, #0]
 80084da:	2b2e      	cmp	r3, #46	; 0x2e
 80084dc:	d10c      	bne.n	80084f8 <_svfiprintf_r+0x130>
 80084de:	7863      	ldrb	r3, [r4, #1]
 80084e0:	2b2a      	cmp	r3, #42	; 0x2a
 80084e2:	d134      	bne.n	800854e <_svfiprintf_r+0x186>
 80084e4:	9b03      	ldr	r3, [sp, #12]
 80084e6:	1d1a      	adds	r2, r3, #4
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	9203      	str	r2, [sp, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	bfb8      	it	lt
 80084f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80084f4:	3402      	adds	r4, #2
 80084f6:	9305      	str	r3, [sp, #20]
 80084f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80085c0 <_svfiprintf_r+0x1f8>
 80084fc:	7821      	ldrb	r1, [r4, #0]
 80084fe:	2203      	movs	r2, #3
 8008500:	4650      	mov	r0, sl
 8008502:	f7f7 fe6d 	bl	80001e0 <memchr>
 8008506:	b138      	cbz	r0, 8008518 <_svfiprintf_r+0x150>
 8008508:	9b04      	ldr	r3, [sp, #16]
 800850a:	eba0 000a 	sub.w	r0, r0, sl
 800850e:	2240      	movs	r2, #64	; 0x40
 8008510:	4082      	lsls	r2, r0
 8008512:	4313      	orrs	r3, r2
 8008514:	3401      	adds	r4, #1
 8008516:	9304      	str	r3, [sp, #16]
 8008518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800851c:	4825      	ldr	r0, [pc, #148]	; (80085b4 <_svfiprintf_r+0x1ec>)
 800851e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008522:	2206      	movs	r2, #6
 8008524:	f7f7 fe5c 	bl	80001e0 <memchr>
 8008528:	2800      	cmp	r0, #0
 800852a:	d038      	beq.n	800859e <_svfiprintf_r+0x1d6>
 800852c:	4b22      	ldr	r3, [pc, #136]	; (80085b8 <_svfiprintf_r+0x1f0>)
 800852e:	bb1b      	cbnz	r3, 8008578 <_svfiprintf_r+0x1b0>
 8008530:	9b03      	ldr	r3, [sp, #12]
 8008532:	3307      	adds	r3, #7
 8008534:	f023 0307 	bic.w	r3, r3, #7
 8008538:	3308      	adds	r3, #8
 800853a:	9303      	str	r3, [sp, #12]
 800853c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800853e:	4433      	add	r3, r6
 8008540:	9309      	str	r3, [sp, #36]	; 0x24
 8008542:	e768      	b.n	8008416 <_svfiprintf_r+0x4e>
 8008544:	fb0c 3202 	mla	r2, ip, r2, r3
 8008548:	460c      	mov	r4, r1
 800854a:	2001      	movs	r0, #1
 800854c:	e7a6      	b.n	800849c <_svfiprintf_r+0xd4>
 800854e:	2300      	movs	r3, #0
 8008550:	3401      	adds	r4, #1
 8008552:	9305      	str	r3, [sp, #20]
 8008554:	4619      	mov	r1, r3
 8008556:	f04f 0c0a 	mov.w	ip, #10
 800855a:	4620      	mov	r0, r4
 800855c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008560:	3a30      	subs	r2, #48	; 0x30
 8008562:	2a09      	cmp	r2, #9
 8008564:	d903      	bls.n	800856e <_svfiprintf_r+0x1a6>
 8008566:	2b00      	cmp	r3, #0
 8008568:	d0c6      	beq.n	80084f8 <_svfiprintf_r+0x130>
 800856a:	9105      	str	r1, [sp, #20]
 800856c:	e7c4      	b.n	80084f8 <_svfiprintf_r+0x130>
 800856e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008572:	4604      	mov	r4, r0
 8008574:	2301      	movs	r3, #1
 8008576:	e7f0      	b.n	800855a <_svfiprintf_r+0x192>
 8008578:	ab03      	add	r3, sp, #12
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	462a      	mov	r2, r5
 800857e:	4b0f      	ldr	r3, [pc, #60]	; (80085bc <_svfiprintf_r+0x1f4>)
 8008580:	a904      	add	r1, sp, #16
 8008582:	4638      	mov	r0, r7
 8008584:	f3af 8000 	nop.w
 8008588:	1c42      	adds	r2, r0, #1
 800858a:	4606      	mov	r6, r0
 800858c:	d1d6      	bne.n	800853c <_svfiprintf_r+0x174>
 800858e:	89ab      	ldrh	r3, [r5, #12]
 8008590:	065b      	lsls	r3, r3, #25
 8008592:	f53f af2d 	bmi.w	80083f0 <_svfiprintf_r+0x28>
 8008596:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008598:	b01d      	add	sp, #116	; 0x74
 800859a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859e:	ab03      	add	r3, sp, #12
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	462a      	mov	r2, r5
 80085a4:	4b05      	ldr	r3, [pc, #20]	; (80085bc <_svfiprintf_r+0x1f4>)
 80085a6:	a904      	add	r1, sp, #16
 80085a8:	4638      	mov	r0, r7
 80085aa:	f000 f879 	bl	80086a0 <_printf_i>
 80085ae:	e7eb      	b.n	8008588 <_svfiprintf_r+0x1c0>
 80085b0:	08008cb8 	.word	0x08008cb8
 80085b4:	08008cc2 	.word	0x08008cc2
 80085b8:	00000000 	.word	0x00000000
 80085bc:	08008315 	.word	0x08008315
 80085c0:	08008cbe 	.word	0x08008cbe

080085c4 <_printf_common>:
 80085c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c8:	4616      	mov	r6, r2
 80085ca:	4699      	mov	r9, r3
 80085cc:	688a      	ldr	r2, [r1, #8]
 80085ce:	690b      	ldr	r3, [r1, #16]
 80085d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085d4:	4293      	cmp	r3, r2
 80085d6:	bfb8      	it	lt
 80085d8:	4613      	movlt	r3, r2
 80085da:	6033      	str	r3, [r6, #0]
 80085dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085e0:	4607      	mov	r7, r0
 80085e2:	460c      	mov	r4, r1
 80085e4:	b10a      	cbz	r2, 80085ea <_printf_common+0x26>
 80085e6:	3301      	adds	r3, #1
 80085e8:	6033      	str	r3, [r6, #0]
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	0699      	lsls	r1, r3, #26
 80085ee:	bf42      	ittt	mi
 80085f0:	6833      	ldrmi	r3, [r6, #0]
 80085f2:	3302      	addmi	r3, #2
 80085f4:	6033      	strmi	r3, [r6, #0]
 80085f6:	6825      	ldr	r5, [r4, #0]
 80085f8:	f015 0506 	ands.w	r5, r5, #6
 80085fc:	d106      	bne.n	800860c <_printf_common+0x48>
 80085fe:	f104 0a19 	add.w	sl, r4, #25
 8008602:	68e3      	ldr	r3, [r4, #12]
 8008604:	6832      	ldr	r2, [r6, #0]
 8008606:	1a9b      	subs	r3, r3, r2
 8008608:	42ab      	cmp	r3, r5
 800860a:	dc26      	bgt.n	800865a <_printf_common+0x96>
 800860c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008610:	1e13      	subs	r3, r2, #0
 8008612:	6822      	ldr	r2, [r4, #0]
 8008614:	bf18      	it	ne
 8008616:	2301      	movne	r3, #1
 8008618:	0692      	lsls	r2, r2, #26
 800861a:	d42b      	bmi.n	8008674 <_printf_common+0xb0>
 800861c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008620:	4649      	mov	r1, r9
 8008622:	4638      	mov	r0, r7
 8008624:	47c0      	blx	r8
 8008626:	3001      	adds	r0, #1
 8008628:	d01e      	beq.n	8008668 <_printf_common+0xa4>
 800862a:	6823      	ldr	r3, [r4, #0]
 800862c:	6922      	ldr	r2, [r4, #16]
 800862e:	f003 0306 	and.w	r3, r3, #6
 8008632:	2b04      	cmp	r3, #4
 8008634:	bf02      	ittt	eq
 8008636:	68e5      	ldreq	r5, [r4, #12]
 8008638:	6833      	ldreq	r3, [r6, #0]
 800863a:	1aed      	subeq	r5, r5, r3
 800863c:	68a3      	ldr	r3, [r4, #8]
 800863e:	bf0c      	ite	eq
 8008640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008644:	2500      	movne	r5, #0
 8008646:	4293      	cmp	r3, r2
 8008648:	bfc4      	itt	gt
 800864a:	1a9b      	subgt	r3, r3, r2
 800864c:	18ed      	addgt	r5, r5, r3
 800864e:	2600      	movs	r6, #0
 8008650:	341a      	adds	r4, #26
 8008652:	42b5      	cmp	r5, r6
 8008654:	d11a      	bne.n	800868c <_printf_common+0xc8>
 8008656:	2000      	movs	r0, #0
 8008658:	e008      	b.n	800866c <_printf_common+0xa8>
 800865a:	2301      	movs	r3, #1
 800865c:	4652      	mov	r2, sl
 800865e:	4649      	mov	r1, r9
 8008660:	4638      	mov	r0, r7
 8008662:	47c0      	blx	r8
 8008664:	3001      	adds	r0, #1
 8008666:	d103      	bne.n	8008670 <_printf_common+0xac>
 8008668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800866c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008670:	3501      	adds	r5, #1
 8008672:	e7c6      	b.n	8008602 <_printf_common+0x3e>
 8008674:	18e1      	adds	r1, r4, r3
 8008676:	1c5a      	adds	r2, r3, #1
 8008678:	2030      	movs	r0, #48	; 0x30
 800867a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800867e:	4422      	add	r2, r4
 8008680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008688:	3302      	adds	r3, #2
 800868a:	e7c7      	b.n	800861c <_printf_common+0x58>
 800868c:	2301      	movs	r3, #1
 800868e:	4622      	mov	r2, r4
 8008690:	4649      	mov	r1, r9
 8008692:	4638      	mov	r0, r7
 8008694:	47c0      	blx	r8
 8008696:	3001      	adds	r0, #1
 8008698:	d0e6      	beq.n	8008668 <_printf_common+0xa4>
 800869a:	3601      	adds	r6, #1
 800869c:	e7d9      	b.n	8008652 <_printf_common+0x8e>
	...

080086a0 <_printf_i>:
 80086a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086a4:	7e0f      	ldrb	r7, [r1, #24]
 80086a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086a8:	2f78      	cmp	r7, #120	; 0x78
 80086aa:	4691      	mov	r9, r2
 80086ac:	4680      	mov	r8, r0
 80086ae:	460c      	mov	r4, r1
 80086b0:	469a      	mov	sl, r3
 80086b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086b6:	d807      	bhi.n	80086c8 <_printf_i+0x28>
 80086b8:	2f62      	cmp	r7, #98	; 0x62
 80086ba:	d80a      	bhi.n	80086d2 <_printf_i+0x32>
 80086bc:	2f00      	cmp	r7, #0
 80086be:	f000 80d4 	beq.w	800886a <_printf_i+0x1ca>
 80086c2:	2f58      	cmp	r7, #88	; 0x58
 80086c4:	f000 80c0 	beq.w	8008848 <_printf_i+0x1a8>
 80086c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086d0:	e03a      	b.n	8008748 <_printf_i+0xa8>
 80086d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086d6:	2b15      	cmp	r3, #21
 80086d8:	d8f6      	bhi.n	80086c8 <_printf_i+0x28>
 80086da:	a101      	add	r1, pc, #4	; (adr r1, 80086e0 <_printf_i+0x40>)
 80086dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086e0:	08008739 	.word	0x08008739
 80086e4:	0800874d 	.word	0x0800874d
 80086e8:	080086c9 	.word	0x080086c9
 80086ec:	080086c9 	.word	0x080086c9
 80086f0:	080086c9 	.word	0x080086c9
 80086f4:	080086c9 	.word	0x080086c9
 80086f8:	0800874d 	.word	0x0800874d
 80086fc:	080086c9 	.word	0x080086c9
 8008700:	080086c9 	.word	0x080086c9
 8008704:	080086c9 	.word	0x080086c9
 8008708:	080086c9 	.word	0x080086c9
 800870c:	08008851 	.word	0x08008851
 8008710:	08008779 	.word	0x08008779
 8008714:	0800880b 	.word	0x0800880b
 8008718:	080086c9 	.word	0x080086c9
 800871c:	080086c9 	.word	0x080086c9
 8008720:	08008873 	.word	0x08008873
 8008724:	080086c9 	.word	0x080086c9
 8008728:	08008779 	.word	0x08008779
 800872c:	080086c9 	.word	0x080086c9
 8008730:	080086c9 	.word	0x080086c9
 8008734:	08008813 	.word	0x08008813
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	1d1a      	adds	r2, r3, #4
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	602a      	str	r2, [r5, #0]
 8008740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008748:	2301      	movs	r3, #1
 800874a:	e09f      	b.n	800888c <_printf_i+0x1ec>
 800874c:	6820      	ldr	r0, [r4, #0]
 800874e:	682b      	ldr	r3, [r5, #0]
 8008750:	0607      	lsls	r7, r0, #24
 8008752:	f103 0104 	add.w	r1, r3, #4
 8008756:	6029      	str	r1, [r5, #0]
 8008758:	d501      	bpl.n	800875e <_printf_i+0xbe>
 800875a:	681e      	ldr	r6, [r3, #0]
 800875c:	e003      	b.n	8008766 <_printf_i+0xc6>
 800875e:	0646      	lsls	r6, r0, #25
 8008760:	d5fb      	bpl.n	800875a <_printf_i+0xba>
 8008762:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008766:	2e00      	cmp	r6, #0
 8008768:	da03      	bge.n	8008772 <_printf_i+0xd2>
 800876a:	232d      	movs	r3, #45	; 0x2d
 800876c:	4276      	negs	r6, r6
 800876e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008772:	485a      	ldr	r0, [pc, #360]	; (80088dc <_printf_i+0x23c>)
 8008774:	230a      	movs	r3, #10
 8008776:	e012      	b.n	800879e <_printf_i+0xfe>
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	6820      	ldr	r0, [r4, #0]
 800877c:	1d19      	adds	r1, r3, #4
 800877e:	6029      	str	r1, [r5, #0]
 8008780:	0605      	lsls	r5, r0, #24
 8008782:	d501      	bpl.n	8008788 <_printf_i+0xe8>
 8008784:	681e      	ldr	r6, [r3, #0]
 8008786:	e002      	b.n	800878e <_printf_i+0xee>
 8008788:	0641      	lsls	r1, r0, #25
 800878a:	d5fb      	bpl.n	8008784 <_printf_i+0xe4>
 800878c:	881e      	ldrh	r6, [r3, #0]
 800878e:	4853      	ldr	r0, [pc, #332]	; (80088dc <_printf_i+0x23c>)
 8008790:	2f6f      	cmp	r7, #111	; 0x6f
 8008792:	bf0c      	ite	eq
 8008794:	2308      	moveq	r3, #8
 8008796:	230a      	movne	r3, #10
 8008798:	2100      	movs	r1, #0
 800879a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800879e:	6865      	ldr	r5, [r4, #4]
 80087a0:	60a5      	str	r5, [r4, #8]
 80087a2:	2d00      	cmp	r5, #0
 80087a4:	bfa2      	ittt	ge
 80087a6:	6821      	ldrge	r1, [r4, #0]
 80087a8:	f021 0104 	bicge.w	r1, r1, #4
 80087ac:	6021      	strge	r1, [r4, #0]
 80087ae:	b90e      	cbnz	r6, 80087b4 <_printf_i+0x114>
 80087b0:	2d00      	cmp	r5, #0
 80087b2:	d04b      	beq.n	800884c <_printf_i+0x1ac>
 80087b4:	4615      	mov	r5, r2
 80087b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80087ba:	fb03 6711 	mls	r7, r3, r1, r6
 80087be:	5dc7      	ldrb	r7, [r0, r7]
 80087c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087c4:	4637      	mov	r7, r6
 80087c6:	42bb      	cmp	r3, r7
 80087c8:	460e      	mov	r6, r1
 80087ca:	d9f4      	bls.n	80087b6 <_printf_i+0x116>
 80087cc:	2b08      	cmp	r3, #8
 80087ce:	d10b      	bne.n	80087e8 <_printf_i+0x148>
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	07de      	lsls	r6, r3, #31
 80087d4:	d508      	bpl.n	80087e8 <_printf_i+0x148>
 80087d6:	6923      	ldr	r3, [r4, #16]
 80087d8:	6861      	ldr	r1, [r4, #4]
 80087da:	4299      	cmp	r1, r3
 80087dc:	bfde      	ittt	le
 80087de:	2330      	movle	r3, #48	; 0x30
 80087e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087e4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80087e8:	1b52      	subs	r2, r2, r5
 80087ea:	6122      	str	r2, [r4, #16]
 80087ec:	f8cd a000 	str.w	sl, [sp]
 80087f0:	464b      	mov	r3, r9
 80087f2:	aa03      	add	r2, sp, #12
 80087f4:	4621      	mov	r1, r4
 80087f6:	4640      	mov	r0, r8
 80087f8:	f7ff fee4 	bl	80085c4 <_printf_common>
 80087fc:	3001      	adds	r0, #1
 80087fe:	d14a      	bne.n	8008896 <_printf_i+0x1f6>
 8008800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008804:	b004      	add	sp, #16
 8008806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	f043 0320 	orr.w	r3, r3, #32
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	4833      	ldr	r0, [pc, #204]	; (80088e0 <_printf_i+0x240>)
 8008814:	2778      	movs	r7, #120	; 0x78
 8008816:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	6829      	ldr	r1, [r5, #0]
 800881e:	061f      	lsls	r7, r3, #24
 8008820:	f851 6b04 	ldr.w	r6, [r1], #4
 8008824:	d402      	bmi.n	800882c <_printf_i+0x18c>
 8008826:	065f      	lsls	r7, r3, #25
 8008828:	bf48      	it	mi
 800882a:	b2b6      	uxthmi	r6, r6
 800882c:	07df      	lsls	r7, r3, #31
 800882e:	bf48      	it	mi
 8008830:	f043 0320 	orrmi.w	r3, r3, #32
 8008834:	6029      	str	r1, [r5, #0]
 8008836:	bf48      	it	mi
 8008838:	6023      	strmi	r3, [r4, #0]
 800883a:	b91e      	cbnz	r6, 8008844 <_printf_i+0x1a4>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	f023 0320 	bic.w	r3, r3, #32
 8008842:	6023      	str	r3, [r4, #0]
 8008844:	2310      	movs	r3, #16
 8008846:	e7a7      	b.n	8008798 <_printf_i+0xf8>
 8008848:	4824      	ldr	r0, [pc, #144]	; (80088dc <_printf_i+0x23c>)
 800884a:	e7e4      	b.n	8008816 <_printf_i+0x176>
 800884c:	4615      	mov	r5, r2
 800884e:	e7bd      	b.n	80087cc <_printf_i+0x12c>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	6826      	ldr	r6, [r4, #0]
 8008854:	6961      	ldr	r1, [r4, #20]
 8008856:	1d18      	adds	r0, r3, #4
 8008858:	6028      	str	r0, [r5, #0]
 800885a:	0635      	lsls	r5, r6, #24
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	d501      	bpl.n	8008864 <_printf_i+0x1c4>
 8008860:	6019      	str	r1, [r3, #0]
 8008862:	e002      	b.n	800886a <_printf_i+0x1ca>
 8008864:	0670      	lsls	r0, r6, #25
 8008866:	d5fb      	bpl.n	8008860 <_printf_i+0x1c0>
 8008868:	8019      	strh	r1, [r3, #0]
 800886a:	2300      	movs	r3, #0
 800886c:	6123      	str	r3, [r4, #16]
 800886e:	4615      	mov	r5, r2
 8008870:	e7bc      	b.n	80087ec <_printf_i+0x14c>
 8008872:	682b      	ldr	r3, [r5, #0]
 8008874:	1d1a      	adds	r2, r3, #4
 8008876:	602a      	str	r2, [r5, #0]
 8008878:	681d      	ldr	r5, [r3, #0]
 800887a:	6862      	ldr	r2, [r4, #4]
 800887c:	2100      	movs	r1, #0
 800887e:	4628      	mov	r0, r5
 8008880:	f7f7 fcae 	bl	80001e0 <memchr>
 8008884:	b108      	cbz	r0, 800888a <_printf_i+0x1ea>
 8008886:	1b40      	subs	r0, r0, r5
 8008888:	6060      	str	r0, [r4, #4]
 800888a:	6863      	ldr	r3, [r4, #4]
 800888c:	6123      	str	r3, [r4, #16]
 800888e:	2300      	movs	r3, #0
 8008890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008894:	e7aa      	b.n	80087ec <_printf_i+0x14c>
 8008896:	6923      	ldr	r3, [r4, #16]
 8008898:	462a      	mov	r2, r5
 800889a:	4649      	mov	r1, r9
 800889c:	4640      	mov	r0, r8
 800889e:	47d0      	blx	sl
 80088a0:	3001      	adds	r0, #1
 80088a2:	d0ad      	beq.n	8008800 <_printf_i+0x160>
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	079b      	lsls	r3, r3, #30
 80088a8:	d413      	bmi.n	80088d2 <_printf_i+0x232>
 80088aa:	68e0      	ldr	r0, [r4, #12]
 80088ac:	9b03      	ldr	r3, [sp, #12]
 80088ae:	4298      	cmp	r0, r3
 80088b0:	bfb8      	it	lt
 80088b2:	4618      	movlt	r0, r3
 80088b4:	e7a6      	b.n	8008804 <_printf_i+0x164>
 80088b6:	2301      	movs	r3, #1
 80088b8:	4632      	mov	r2, r6
 80088ba:	4649      	mov	r1, r9
 80088bc:	4640      	mov	r0, r8
 80088be:	47d0      	blx	sl
 80088c0:	3001      	adds	r0, #1
 80088c2:	d09d      	beq.n	8008800 <_printf_i+0x160>
 80088c4:	3501      	adds	r5, #1
 80088c6:	68e3      	ldr	r3, [r4, #12]
 80088c8:	9903      	ldr	r1, [sp, #12]
 80088ca:	1a5b      	subs	r3, r3, r1
 80088cc:	42ab      	cmp	r3, r5
 80088ce:	dcf2      	bgt.n	80088b6 <_printf_i+0x216>
 80088d0:	e7eb      	b.n	80088aa <_printf_i+0x20a>
 80088d2:	2500      	movs	r5, #0
 80088d4:	f104 0619 	add.w	r6, r4, #25
 80088d8:	e7f5      	b.n	80088c6 <_printf_i+0x226>
 80088da:	bf00      	nop
 80088dc:	08008cc9 	.word	0x08008cc9
 80088e0:	08008cda 	.word	0x08008cda

080088e4 <memmove>:
 80088e4:	4288      	cmp	r0, r1
 80088e6:	b510      	push	{r4, lr}
 80088e8:	eb01 0402 	add.w	r4, r1, r2
 80088ec:	d902      	bls.n	80088f4 <memmove+0x10>
 80088ee:	4284      	cmp	r4, r0
 80088f0:	4623      	mov	r3, r4
 80088f2:	d807      	bhi.n	8008904 <memmove+0x20>
 80088f4:	1e43      	subs	r3, r0, #1
 80088f6:	42a1      	cmp	r1, r4
 80088f8:	d008      	beq.n	800890c <memmove+0x28>
 80088fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008902:	e7f8      	b.n	80088f6 <memmove+0x12>
 8008904:	4402      	add	r2, r0
 8008906:	4601      	mov	r1, r0
 8008908:	428a      	cmp	r2, r1
 800890a:	d100      	bne.n	800890e <memmove+0x2a>
 800890c:	bd10      	pop	{r4, pc}
 800890e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008912:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008916:	e7f7      	b.n	8008908 <memmove+0x24>

08008918 <_sbrk_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4d06      	ldr	r5, [pc, #24]	; (8008934 <_sbrk_r+0x1c>)
 800891c:	2300      	movs	r3, #0
 800891e:	4604      	mov	r4, r0
 8008920:	4608      	mov	r0, r1
 8008922:	602b      	str	r3, [r5, #0]
 8008924:	f7f8 fbd6 	bl	80010d4 <_sbrk>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	d102      	bne.n	8008932 <_sbrk_r+0x1a>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	b103      	cbz	r3, 8008932 <_sbrk_r+0x1a>
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	20001d3c 	.word	0x20001d3c

08008938 <_realloc_r>:
 8008938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893c:	4680      	mov	r8, r0
 800893e:	4614      	mov	r4, r2
 8008940:	460e      	mov	r6, r1
 8008942:	b921      	cbnz	r1, 800894e <_realloc_r+0x16>
 8008944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008948:	4611      	mov	r1, r2
 800894a:	f7ff bc57 	b.w	80081fc <_malloc_r>
 800894e:	b92a      	cbnz	r2, 800895c <_realloc_r+0x24>
 8008950:	f7ff fbe8 	bl	8008124 <_free_r>
 8008954:	4625      	mov	r5, r4
 8008956:	4628      	mov	r0, r5
 8008958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800895c:	f000 f81b 	bl	8008996 <_malloc_usable_size_r>
 8008960:	4284      	cmp	r4, r0
 8008962:	4607      	mov	r7, r0
 8008964:	d802      	bhi.n	800896c <_realloc_r+0x34>
 8008966:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800896a:	d812      	bhi.n	8008992 <_realloc_r+0x5a>
 800896c:	4621      	mov	r1, r4
 800896e:	4640      	mov	r0, r8
 8008970:	f7ff fc44 	bl	80081fc <_malloc_r>
 8008974:	4605      	mov	r5, r0
 8008976:	2800      	cmp	r0, #0
 8008978:	d0ed      	beq.n	8008956 <_realloc_r+0x1e>
 800897a:	42bc      	cmp	r4, r7
 800897c:	4622      	mov	r2, r4
 800897e:	4631      	mov	r1, r6
 8008980:	bf28      	it	cs
 8008982:	463a      	movcs	r2, r7
 8008984:	f7ff fbc0 	bl	8008108 <memcpy>
 8008988:	4631      	mov	r1, r6
 800898a:	4640      	mov	r0, r8
 800898c:	f7ff fbca 	bl	8008124 <_free_r>
 8008990:	e7e1      	b.n	8008956 <_realloc_r+0x1e>
 8008992:	4635      	mov	r5, r6
 8008994:	e7df      	b.n	8008956 <_realloc_r+0x1e>

08008996 <_malloc_usable_size_r>:
 8008996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800899a:	1f18      	subs	r0, r3, #4
 800899c:	2b00      	cmp	r3, #0
 800899e:	bfbc      	itt	lt
 80089a0:	580b      	ldrlt	r3, [r1, r0]
 80089a2:	18c0      	addlt	r0, r0, r3
 80089a4:	4770      	bx	lr
	...

080089a8 <_init>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	bf00      	nop
 80089ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ae:	bc08      	pop	{r3}
 80089b0:	469e      	mov	lr, r3
 80089b2:	4770      	bx	lr

080089b4 <_fini>:
 80089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b6:	bf00      	nop
 80089b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ba:	bc08      	pop	{r3}
 80089bc:	469e      	mov	lr, r3
 80089be:	4770      	bx	lr
