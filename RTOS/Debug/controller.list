
controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007730  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  080078c0  080078c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bc0  08007bc0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08007bc0  08007bc0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007bc0  08007bc0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bc0  08007bc0  00017bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bc4  08007bc4  00017bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c80  20000060  08007c28  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ce0  08007c28  00021ce0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000197c9  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033c0  00000000  00000000  0003989c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  0003cc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5c  00000000  00000000  0003e008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035d5  00000000  00000000  0003ef64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ec9  00000000  00000000  00042539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aff61  00000000  00000000  00059402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005798  00000000  00000000  00109364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0010eafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078a8 	.word	0x080078a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080078a8 	.word	0x080078a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <osStatusToString>:
	ITM_SendChar(msg);
	ITM_SendChar('\n');

}

char* osStatusToString(osStatus_t status) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    switch (status) {
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	3305      	adds	r3, #5
 800028c:	2b05      	cmp	r3, #5
 800028e:	d81b      	bhi.n	80002c8 <osStatusToString+0x48>
 8000290:	a201      	add	r2, pc, #4	; (adr r2, 8000298 <osStatusToString+0x18>)
 8000292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000296:	bf00      	nop
 8000298:	080002c5 	.word	0x080002c5
 800029c:	080002c1 	.word	0x080002c1
 80002a0:	080002bd 	.word	0x080002bd
 80002a4:	080002b9 	.word	0x080002b9
 80002a8:	080002b5 	.word	0x080002b5
 80002ac:	080002b1 	.word	0x080002b1
        case osOK:
            return "OK: Operation completed successfully\r\n";
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <osStatusToString+0x58>)
 80002b2:	e00a      	b.n	80002ca <osStatusToString+0x4a>
        case osError:
            return "osError: Unspecified error\r\n";
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <osStatusToString+0x5c>)
 80002b6:	e008      	b.n	80002ca <osStatusToString+0x4a>
        case osErrorTimeout:
            return "Timeout: osErrorTimeout:  Operation timed out\r\n";
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <osStatusToString+0x60>)
 80002ba:	e006      	b.n	80002ca <osStatusToString+0x4a>
        case osErrorResource:
            return "Resource: osErrorResource: Resource not available\r\n";
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <osStatusToString+0x64>)
 80002be:	e004      	b.n	80002ca <osStatusToString+0x4a>
        case osErrorParameter:
            return "Parameter: osErrorParameter: Parameter error\r\n";
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <osStatusToString+0x68>)
 80002c2:	e002      	b.n	80002ca <osStatusToString+0x4a>
        case osErrorNoMemory:
            return "NoMemory: osErrorNoMemory: System is out of memory\r\n";
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <osStatusToString+0x6c>)
 80002c6:	e000      	b.n	80002ca <osStatusToString+0x4a>
        default:
            return "Unknown osStatus_t\r\n";
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <osStatusToString+0x70>)
    }
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	080078c0 	.word	0x080078c0
 80002dc:	080078e8 	.word	0x080078e8
 80002e0:	08007908 	.word	0x08007908
 80002e4:	08007938 	.word	0x08007938
 80002e8:	0800796c 	.word	0x0800796c
 80002ec:	0800799c 	.word	0x0800799c
 80002f0:	080079d4 	.word	0x080079d4

080002f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f8:	f000 fd72 	bl	8000de0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002fc:	f000 f850 	bl	80003a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000300:	f000 f92e 	bl	8000560 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000304:	f000 f8fc 	bl	8000500 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000308:	f000 f8a4 	bl	8000454 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800030c:	f003 fd90 	bl	8003e30 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Input_queue */
  Input_queueHandle = osMessageQueueNew (16, sizeof(command), &Input_queue_attributes);
 8000310:	4a16      	ldr	r2, [pc, #88]	; (800036c <main+0x78>)
 8000312:	210c      	movs	r1, #12
 8000314:	2010      	movs	r0, #16
 8000316:	f003 fefd 	bl	8004114 <osMessageQueueNew>
 800031a:	4603      	mov	r3, r0
 800031c:	4a14      	ldr	r2, [pc, #80]	; (8000370 <main+0x7c>)
 800031e:	6013      	str	r3, [r2, #0]

  /* creation of BT_send */
  BT_sendHandle = osMessageQueueNew (16, sizeof(char*), &BT_send_attributes);
 8000320:	4a14      	ldr	r2, [pc, #80]	; (8000374 <main+0x80>)
 8000322:	2104      	movs	r1, #4
 8000324:	2010      	movs	r0, #16
 8000326:	f003 fef5 	bl	8004114 <osMessageQueueNew>
 800032a:	4603      	mov	r3, r0
 800032c:	4a12      	ldr	r2, [pc, #72]	; (8000378 <main+0x84>)
 800032e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BT_reader */
  BT_readerHandle = osThreadNew(BT_reader_funct, NULL, &BT_reader_attributes);
 8000330:	4a12      	ldr	r2, [pc, #72]	; (800037c <main+0x88>)
 8000332:	2100      	movs	r1, #0
 8000334:	4812      	ldr	r0, [pc, #72]	; (8000380 <main+0x8c>)
 8000336:	f003 fde3 	bl	8003f00 <osThreadNew>
 800033a:	4603      	mov	r3, r0
 800033c:	4a11      	ldr	r2, [pc, #68]	; (8000384 <main+0x90>)
 800033e:	6013      	str	r3, [r2, #0]

  /* creation of MT_controller */
  MT_controllerHandle = osThreadNew(MT_controller_funct, NULL, &MT_controller_attributes);
 8000340:	4a11      	ldr	r2, [pc, #68]	; (8000388 <main+0x94>)
 8000342:	2100      	movs	r1, #0
 8000344:	4811      	ldr	r0, [pc, #68]	; (800038c <main+0x98>)
 8000346:	f003 fddb 	bl	8003f00 <osThreadNew>
 800034a:	4603      	mov	r3, r0
 800034c:	4a10      	ldr	r2, [pc, #64]	; (8000390 <main+0x9c>)
 800034e:	6013      	str	r3, [r2, #0]

  /* creation of Sensor_Read */
  Sensor_ReadHandle = osThreadNew(Sensor_reader_funct, NULL, &Sensor_Read_attributes);
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <main+0xa0>)
 8000352:	2100      	movs	r1, #0
 8000354:	4810      	ldr	r0, [pc, #64]	; (8000398 <main+0xa4>)
 8000356:	f003 fdd3 	bl	8003f00 <osThreadNew>
 800035a:	4603      	mov	r3, r0
 800035c:	4a0f      	ldr	r2, [pc, #60]	; (800039c <main+0xa8>)
 800035e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000360:	f003 fd9a 	bl	8003e98 <osKernelStart>
 8000364:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000366:	4618      	mov	r0, r3
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	08007b24 	.word	0x08007b24
 8000370:	2000015c 	.word	0x2000015c
 8000374:	08007b3c 	.word	0x08007b3c
 8000378:	20000160 	.word	0x20000160
 800037c:	08007ab8 	.word	0x08007ab8
 8000380:	08000759 	.word	0x08000759
 8000384:	20000150 	.word	0x20000150
 8000388:	08007adc 	.word	0x08007adc
 800038c:	0800082d 	.word	0x0800082d
 8000390:	20000154 	.word	0x20000154
 8000394:	08007b00 	.word	0x08007b00
 8000398:	08000975 	.word	0x08000975
 800039c:	20000158 	.word	0x20000158

080003a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b09c      	sub	sp, #112	; 0x70
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003aa:	2228      	movs	r2, #40	; 0x28
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f006 fda0 	bl	8006ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
 80003c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c4:	463b      	mov	r3, r7
 80003c6:	2234      	movs	r2, #52	; 0x34
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f006 fd92 	bl	8006ef4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003d0:	2301      	movs	r3, #1
 80003d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003de:	2301      	movs	r3, #1
 80003e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e2:	2302      	movs	r3, #2
 80003e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 ffac 	bl	8001354 <HAL_RCC_OscConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000402:	f000 fb17 	bl	8000a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000406:	230f      	movs	r3, #15
 8000408:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040a:	2302      	movs	r3, #2
 800040c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000416:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800041c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000420:	2102      	movs	r1, #2
 8000422:	4618      	mov	r0, r3
 8000424:	f001 ffd4 	bl	80023d0 <HAL_RCC_ClockConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800042e:	f000 fb01 	bl	8000a34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000432:	2301      	movs	r3, #1
 8000434:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000436:	2300      	movs	r3, #0
 8000438:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800043a:	463b      	mov	r3, r7
 800043c:	4618      	mov	r0, r3
 800043e:	f002 fa2f 	bl	80028a0 <HAL_RCCEx_PeriphCLKConfig>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000448:	f000 faf4 	bl	8000a34 <Error_Handler>
  }
}
 800044c:	bf00      	nop
 800044e:	3770      	adds	r7, #112	; 0x70
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b088      	sub	sp, #32
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
 8000464:	609a      	str	r2, [r3, #8]
 8000466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000472:	4b22      	ldr	r3, [pc, #136]	; (80004fc <MX_TIM2_Init+0xa8>)
 8000474:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000478:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800047a:	4b20      	ldr	r3, [pc, #128]	; (80004fc <MX_TIM2_Init+0xa8>)
 800047c:	2200      	movs	r2, #0
 800047e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000480:	4b1e      	ldr	r3, [pc, #120]	; (80004fc <MX_TIM2_Init+0xa8>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000486:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <MX_TIM2_Init+0xa8>)
 8000488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800048c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800048e:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <MX_TIM2_Init+0xa8>)
 8000490:	2200      	movs	r2, #0
 8000492:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000494:	4b19      	ldr	r3, [pc, #100]	; (80004fc <MX_TIM2_Init+0xa8>)
 8000496:	2200      	movs	r2, #0
 8000498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800049a:	4818      	ldr	r0, [pc, #96]	; (80004fc <MX_TIM2_Init+0xa8>)
 800049c:	f002 fb92 	bl	8002bc4 <HAL_TIM_Base_Init>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80004a6:	f000 fac5 	bl	8000a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80004aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ae:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 15;
 80004b8:	230f      	movs	r3, #15
 80004ba:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	4619      	mov	r1, r3
 80004c2:	480e      	ldr	r0, [pc, #56]	; (80004fc <MX_TIM2_Init+0xa8>)
 80004c4:	f002 fd49 	bl	8002f5a <HAL_TIM_ConfigClockSource>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80004ce:	f000 fab1 	bl	8000a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4619      	mov	r1, r3
 80004de:	4807      	ldr	r0, [pc, #28]	; (80004fc <MX_TIM2_Init+0xa8>)
 80004e0:	f002 ff34 	bl	800334c <HAL_TIMEx_MasterConfigSynchronization>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80004ea:	f000 faa3 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  //HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_1);
  //HAL_TIM_IC_Start(&htim2,TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim2);
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <MX_TIM2_Init+0xa8>)
 80004f0:	f002 fbc0 	bl	8002c74 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	2000007c 	.word	0x2000007c

08000500 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <MX_USART1_UART_Init+0x58>)
 8000506:	4a15      	ldr	r2, [pc, #84]	; (800055c <MX_USART1_UART_Init+0x5c>)
 8000508:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <MX_USART1_UART_Init+0x58>)
 800050c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000510:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <MX_USART1_UART_Init+0x58>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <MX_USART1_UART_Init+0x58>)
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <MX_USART1_UART_Init+0x58>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <MX_USART1_UART_Init+0x58>)
 8000526:	220c      	movs	r2, #12
 8000528:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <MX_USART1_UART_Init+0x58>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <MX_USART1_UART_Init+0x58>)
 8000532:	2200      	movs	r2, #0
 8000534:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <MX_USART1_UART_Init+0x58>)
 8000538:	2200      	movs	r2, #0
 800053a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <MX_USART1_UART_Init+0x58>)
 800053e:	2200      	movs	r2, #0
 8000540:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <MX_USART1_UART_Init+0x58>)
 8000544:	f002 ff86 	bl	8003454 <HAL_UART_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800054e:	f000 fa71 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	200000c8 	.word	0x200000c8
 800055c:	40013800 	.word	0x40013800

08000560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	; 0x28
 8000564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000576:	4b2c      	ldr	r3, [pc, #176]	; (8000628 <MX_GPIO_Init+0xc8>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a2b      	ldr	r2, [pc, #172]	; (8000628 <MX_GPIO_Init+0xc8>)
 800057c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b29      	ldr	r3, [pc, #164]	; (8000628 <MX_GPIO_Init+0xc8>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b26      	ldr	r3, [pc, #152]	; (8000628 <MX_GPIO_Init+0xc8>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a25      	ldr	r2, [pc, #148]	; (8000628 <MX_GPIO_Init+0xc8>)
 8000594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b23      	ldr	r3, [pc, #140]	; (8000628 <MX_GPIO_Init+0xc8>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	4b20      	ldr	r3, [pc, #128]	; (8000628 <MX_GPIO_Init+0xc8>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a1f      	ldr	r2, [pc, #124]	; (8000628 <MX_GPIO_Init+0xc8>)
 80005ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <MX_GPIO_Init+0xc8>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <MX_GPIO_Init+0xc8>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a19      	ldr	r2, [pc, #100]	; (8000628 <MX_GPIO_Init+0xc8>)
 80005c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <MX_GPIO_Init+0xc8>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BREAK_1_Pin */
  GPIO_InitStruct.Pin = BREAK_1_Pin;
 80005d6:	2320      	movs	r3, #32
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005da:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80005de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BREAK_1_GPIO_Port, &GPIO_InitStruct);
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4619      	mov	r1, r3
 80005ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ee:	f000 fd0f 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : BREAK_2_Pin */
  GPIO_InitStruct.Pin = BREAK_2_Pin;
 80005f2:	2340      	movs	r3, #64	; 0x40
 80005f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BREAK_2_GPIO_Port, &GPIO_InitStruct);
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4619      	mov	r1, r3
 8000606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060a:	f000 fd01 	bl	8001010 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2105      	movs	r1, #5
 8000612:	2017      	movs	r0, #23
 8000614:	f000 fcd2 	bl	8000fbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000618:	2017      	movs	r0, #23
 800061a:	f000 fceb 	bl	8000ff4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800061e:	bf00      	nop
 8000620:	3728      	adds	r7, #40	; 0x28
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000

0800062c <FON_UART_Receive>:





int FON_UART_Receive(char *received, uint16_t timeout,UART_HandleTypeDef *huartX) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	460b      	mov	r3, r1
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	817b      	strh	r3, [r7, #10]
    HAL_StatusTypeDef status;
    unsigned char receivedChar;
    int index = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]

    while (1) {
        status = HAL_UART_Receive(huartX, &receivedChar, 1, timeout);
 800063e:	897b      	ldrh	r3, [r7, #10]
 8000640:	f107 0112 	add.w	r1, r7, #18
 8000644:	2201      	movs	r2, #1
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f002 ffdc 	bl	8003604 <HAL_UART_Receive>
 800064c:	4603      	mov	r3, r0
 800064e:	74fb      	strb	r3, [r7, #19]

        if (status == HAL_OK) {
 8000650:	7cfb      	ldrb	r3, [r7, #19]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d112      	bne.n	800067c <FON_UART_Receive+0x50>
            if (receivedChar == '\n') {
 8000656:	7cbb      	ldrb	r3, [r7, #18]
 8000658:	2b0a      	cmp	r3, #10
 800065a:	d106      	bne.n	800066a <FON_UART_Receive+0x3e>
            	received[index] = '\0';
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	4413      	add	r3, r2
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]

                return 1;
 8000666:	2301      	movs	r3, #1
 8000668:	e00c      	b.n	8000684 <FON_UART_Receive+0x58>
            } else {
                received[index] = receivedChar;
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	4413      	add	r3, r2
 8000670:	7cba      	ldrb	r2, [r7, #18]
 8000672:	701a      	strb	r2, [r3, #0]
                index++;
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	3301      	adds	r3, #1
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	e7e0      	b.n	800063e <FON_UART_Receive+0x12>
            }
        } else {
            received[0] = '\0';
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
            return 0;
 8000682:	2300      	movs	r3, #0
        }
    }
}
 8000684:	4618      	mov	r0, r3
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	80fb      	strh	r3, [r7, #6]
	command com;

	if (GPIO_Pin == BREAK_1_Pin ) {
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	2b20      	cmp	r3, #32
 800069a:	d129      	bne.n	80006f0 <HAL_GPIO_EXTI_Callback+0x64>
		com.button_id 		= 1;
 800069c:	2301      	movs	r3, #1
 800069e:	617b      	str	r3, [r7, #20]
		if (HAL_GPIO_ReadPin(BREAK_1_GPIO_Port, GPIO_Pin) == GPIO_PIN_SET) {
 80006a0:	88fb      	ldrh	r3, [r7, #6]
 80006a2:	4619      	mov	r1, r3
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a8:	f000 fe24 	bl	80012f4 <HAL_GPIO_ReadPin>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d102      	bne.n	80006b8 <HAL_GPIO_EXTI_Callback+0x2c>
			// Your code for rising edge -> apertou
			com.button_status  	= 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
 80006b6:	e001      	b.n	80006bc <HAL_GPIO_EXTI_Callback+0x30>
		} else {
			// Your code for falling edge -> soltou
			com.button_status  	= 1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61bb      	str	r3, [r7, #24]
		}

		osStatus_t status 	=  osMessageQueuePut(Input_queueHandle, &com, 0, 0);
 80006bc:	4b24      	ldr	r3, [pc, #144]	; (8000750 <HAL_GPIO_EXTI_Callback+0xc4>)
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	f107 0114 	add.w	r1, r7, #20
 80006c4:	2300      	movs	r3, #0
 80006c6:	2200      	movs	r2, #0
 80006c8:	f003 fdaa 	bl	8004220 <osMessageQueuePut>
 80006cc:	6238      	str	r0, [r7, #32]
		if (status != osOK){
 80006ce:	6a3b      	ldr	r3, [r7, #32]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d039      	beq.n	8000748 <HAL_GPIO_EXTI_Callback+0xbc>
			char* str = osStatusToString(status);
 80006d4:	6a38      	ldr	r0, [r7, #32]
 80006d6:	f7ff fdd3 	bl	8000280 <osStatusToString>
 80006da:	4603      	mov	r3, r0
 80006dc:	613b      	str	r3, [r7, #16]
			osMessageQueuePut(BT_sendHandle, &str, 0, 0);
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <HAL_GPIO_EXTI_Callback+0xc8>)
 80006e0:	6818      	ldr	r0, [r3, #0]
 80006e2:	f107 0110 	add.w	r1, r7, #16
 80006e6:	2300      	movs	r3, #0
 80006e8:	2200      	movs	r2, #0
 80006ea:	f003 fd99 	bl	8004220 <osMessageQueuePut>
		if (status != osOK){
			char* str = osStatusToString(status);
			osMessageQueuePut(BT_sendHandle, &str, 0, 0);
		}
	}
}
 80006ee:	e02b      	b.n	8000748 <HAL_GPIO_EXTI_Callback+0xbc>
	else if (GPIO_Pin == BREAK_2_Pin ) {
 80006f0:	88fb      	ldrh	r3, [r7, #6]
 80006f2:	2b40      	cmp	r3, #64	; 0x40
 80006f4:	d128      	bne.n	8000748 <HAL_GPIO_EXTI_Callback+0xbc>
		com.button_id 		= 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]
		if (HAL_GPIO_ReadPin(BREAK_2_GPIO_Port, GPIO_Pin) == GPIO_PIN_SET) {
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	4619      	mov	r1, r3
 80006fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000702:	f000 fdf7 	bl	80012f4 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d102      	bne.n	8000712 <HAL_GPIO_EXTI_Callback+0x86>
			com.button_status  	= 0;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]
 8000710:	e001      	b.n	8000716 <HAL_GPIO_EXTI_Callback+0x8a>
			com.button_status  	= 1;
 8000712:	2301      	movs	r3, #1
 8000714:	61bb      	str	r3, [r7, #24]
		osStatus_t status 	=  osMessageQueuePut(Input_queueHandle, &com, 0, 0);
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000718:	6818      	ldr	r0, [r3, #0]
 800071a:	f107 0114 	add.w	r1, r7, #20
 800071e:	2300      	movs	r3, #0
 8000720:	2200      	movs	r2, #0
 8000722:	f003 fd7d 	bl	8004220 <osMessageQueuePut>
 8000726:	6278      	str	r0, [r7, #36]	; 0x24
		if (status != osOK){
 8000728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00c      	beq.n	8000748 <HAL_GPIO_EXTI_Callback+0xbc>
			char* str = osStatusToString(status);
 800072e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000730:	f7ff fda6 	bl	8000280 <osStatusToString>
 8000734:	4603      	mov	r3, r0
 8000736:	60fb      	str	r3, [r7, #12]
			osMessageQueuePut(BT_sendHandle, &str, 0, 0);
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_GPIO_EXTI_Callback+0xc8>)
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	f107 010c 	add.w	r1, r7, #12
 8000740:	2300      	movs	r3, #0
 8000742:	2200      	movs	r2, #0
 8000744:	f003 fd6c 	bl	8004220 <osMessageQueuePut>
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	; 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000015c 	.word	0x2000015c
 8000754:	20000160 	.word	0x20000160

08000758 <BT_reader_funct>:



/* USER CODE END Header_BT_reader_funct */
void BT_reader_funct(void *argument)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b093      	sub	sp, #76	; 0x4c
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	unsigned char str[14] ="\r\nIniciando \r\n";
 8000760:	4b2e      	ldr	r3, [pc, #184]	; (800081c <BT_reader_funct+0xc4>)
 8000762:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000768:	c407      	stmia	r4!, {r0, r1, r2}
 800076a:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, str, sizeof(str), 500);
 800076c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000770:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000774:	220e      	movs	r2, #14
 8000776:	482a      	ldr	r0, [pc, #168]	; (8000820 <BT_reader_funct+0xc8>)
 8000778:	f002 feba 	bl	80034f0 <HAL_UART_Transmit>
    char receivedData[32];
	command com;


	while (1) {
	        if (FON_UART_Receive(receivedData,500, &huart1)){
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4a27      	ldr	r2, [pc, #156]	; (8000820 <BT_reader_funct+0xc8>)
 8000782:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff50 	bl	800062c <FON_UART_Receive>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d01f      	beq.n	80007d2 <BT_reader_funct+0x7a>
	        	if (strlen(receivedData)==3){
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fd1a 	bl	80001d0 <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d117      	bne.n	80007d2 <BT_reader_funct+0x7a>
	        		com.button_id 		= receivedData[0] - '0';
 80007a2:	7d3b      	ldrb	r3, [r7, #20]
 80007a4:	3b30      	subs	r3, #48	; 0x30
 80007a6:	60bb      	str	r3, [r7, #8]
					com.button_status  	= 10*(receivedData[1] - '0') + (receivedData[2] - '0');
 80007a8:	7d7b      	ldrb	r3, [r7, #21]
 80007aa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80007ae:	4613      	mov	r3, r2
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4413      	add	r3, r2
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	461a      	mov	r2, r3
 80007b8:	7dbb      	ldrb	r3, [r7, #22]
 80007ba:	3b30      	subs	r3, #48	; 0x30
 80007bc:	4413      	add	r3, r2
 80007be:	60fb      	str	r3, [r7, #12]
					osMessageQueuePut(Input_queueHandle, &com, 0, 2000);
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <BT_reader_funct+0xcc>)
 80007c2:	6818      	ldr	r0, [r3, #0]
 80007c4:	f107 0108 	add.w	r1, r7, #8
 80007c8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007cc:	2200      	movs	r2, #0
 80007ce:	f003 fd27 	bl	8004220 <osMessageQueuePut>
	        	}
	        }

	        while (1){
	        	if (osMessageQueueGet(BT_sendHandle, &res, NULL, 250) == osOK) {
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <BT_reader_funct+0xd0>)
 80007d4:	6818      	ldr	r0, [r3, #0]
 80007d6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80007da:	23fa      	movs	r3, #250	; 0xfa
 80007dc:	2200      	movs	r2, #0
 80007de:	f003 fd93 	bl	8004308 <osMessageQueueGet>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d10c      	bne.n	8000802 <BT_reader_funct+0xaa>
	        	    HAL_UART_Transmit(&huart1, res, strlen(res), 1000);
 80007e8:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80007ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fcef 	bl	80001d0 <strlen>
 80007f2:	4603      	mov	r3, r0
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fa:	4621      	mov	r1, r4
 80007fc:	4808      	ldr	r0, [pc, #32]	; (8000820 <BT_reader_funct+0xc8>)
 80007fe:	f002 fe77 	bl	80034f0 <HAL_UART_Transmit>
	        	}
	        	if (osMessageQueueGetCount(BT_sendHandle)==0){
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <BT_reader_funct+0xd0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f003 fdf0 	bl	80043ec <osMessageQueueGetCount>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d000      	beq.n	8000814 <BT_reader_funct+0xbc>
	        	if (osMessageQueueGet(BT_sendHandle, &res, NULL, 250) == osOK) {
 8000812:	e7de      	b.n	80007d2 <BT_reader_funct+0x7a>
	        		break;
 8000814:	bf00      	nop
	        	}

	        }

	        //osDelay(1000);
	        osThreadYield();
 8000816:	f003 fc1d 	bl	8004054 <osThreadYield>
	        if (FON_UART_Receive(receivedData,500, &huart1)){
 800081a:	e7af      	b.n	800077c <BT_reader_funct+0x24>
 800081c:	08007a28 	.word	0x08007a28
 8000820:	200000c8 	.word	0x200000c8
 8000824:	2000015c 	.word	0x2000015c
 8000828:	20000160 	.word	0x20000160

0800082c <MT_controller_funct>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MT_controller_funct */
void MT_controller_funct(void *argument)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MT_controller_funct */
  /* Infinite loop */

	int lock = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
	int brk = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
	float freq, output = 0.0;
 800083c:	f04f 0300 	mov.w	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
	command com;
	char* input_command,decision;
	//int speed=0; // max = 255

	while(1){
		if (osMessageQueueGet(Input_queueHandle, &com, NULL, 2000)== osOK){
 8000842:	4b41      	ldr	r3, [pc, #260]	; (8000948 <MT_controller_funct+0x11c>)
 8000844:	6818      	ldr	r0, [r3, #0]
 8000846:	f107 0110 	add.w	r1, r7, #16
 800084a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800084e:	2200      	movs	r2, #0
 8000850:	f003 fd5a 	bl	8004308 <osMessageQueueGet>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d140      	bne.n	80008dc <MT_controller_funct+0xb0>
			if(com.button_id==9){
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	2b09      	cmp	r3, #9
 800085e:	d10a      	bne.n	8000876 <MT_controller_funct+0x4a>
				lock = com.button_status;
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (lock){input_command = "lock\n";}
 8000864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000866:	2b00      	cmp	r3, #0
 8000868:	d002      	beq.n	8000870 <MT_controller_funct+0x44>
 800086a:	4b38      	ldr	r3, [pc, #224]	; (800094c <MT_controller_funct+0x120>)
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	e02b      	b.n	80008c8 <MT_controller_funct+0x9c>
				else{input_command = "UNlock\n";}
 8000870:	4b37      	ldr	r3, [pc, #220]	; (8000950 <MT_controller_funct+0x124>)
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	e028      	b.n	80008c8 <MT_controller_funct+0x9c>
			}
			else if(com.button_id==1){
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d10a      	bne.n	8000892 <MT_controller_funct+0x66>
				brk = com.button_status;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
				if (brk){ input_command = "FREIOU \n";}
 8000880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000882:	2b00      	cmp	r3, #0
 8000884:	d002      	beq.n	800088c <MT_controller_funct+0x60>
 8000886:	4b33      	ldr	r3, [pc, #204]	; (8000954 <MT_controller_funct+0x128>)
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	e01d      	b.n	80008c8 <MT_controller_funct+0x9c>
				else{ input_command = "SOLTOU\n";}
 800088c:	4b32      	ldr	r3, [pc, #200]	; (8000958 <MT_controller_funct+0x12c>)
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	e01a      	b.n	80008c8 <MT_controller_funct+0x9c>
			}
			else if(com.button_id==2){
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	2b02      	cmp	r3, #2
 8000896:	d117      	bne.n	80008c8 <MT_controller_funct+0x9c>
					freq = (com.sensor_value)*1000;
 8000898:	edd7 7a06 	vldr	s15, [r7, #24]
 800089c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800095c <MT_controller_funct+0x130>
 80008a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008a4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
					input_command = "";
 80008a8:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <MT_controller_funct+0x134>)
 80008aa:	60fb      	str	r3, [r7, #12]
					freq_int = (int) freq;
 80008ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80008b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008b4:	ee17 3a90 	vmov	r3, s15
 80008b8:	61fb      	str	r3, [r7, #28]
					asprintf(&input_command, "RPM: %d\n", freq_int);
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	69fa      	ldr	r2, [r7, #28]
 80008c0:	4928      	ldr	r1, [pc, #160]	; (8000964 <MT_controller_funct+0x138>)
 80008c2:	4618      	mov	r0, r3
 80008c4:	f006 faf2 	bl	8006eac <asiprintf>
			}
			osMessageQueuePut(BT_sendHandle, &input_command, 0, 2000);
 80008c8:	4b27      	ldr	r3, [pc, #156]	; (8000968 <MT_controller_funct+0x13c>)
 80008ca:	6818      	ldr	r0, [r3, #0]
 80008cc:	f107 010c 	add.w	r1, r7, #12
 80008d0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008d4:	2200      	movs	r2, #0
 80008d6:	f003 fca3 	bl	8004220 <osMessageQueuePut>
 80008da:	e00a      	b.n	80008f2 <MT_controller_funct+0xc6>

		}
		else{
			input_command = "No new input\n";
 80008dc:	4b23      	ldr	r3, [pc, #140]	; (800096c <MT_controller_funct+0x140>)
 80008de:	60fb      	str	r3, [r7, #12]
			osMessageQueuePut(BT_sendHandle, &input_command, 0, 2000);
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <MT_controller_funct+0x13c>)
 80008e2:	6818      	ldr	r0, [r3, #0]
 80008e4:	f107 010c 	add.w	r1, r7, #12
 80008e8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008ec:	2200      	movs	r2, #0
 80008ee:	f003 fc97 	bl	8004220 <osMessageQueuePut>

		}


		if(!lock){
 80008f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d109      	bne.n	800090c <MT_controller_funct+0xe0>
			if (!brk){
 80008f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d102      	bne.n	8000904 <MT_controller_funct+0xd8>
				output = freq;
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	623b      	str	r3, [r7, #32]
 8000902:	e006      	b.n	8000912 <MT_controller_funct+0xe6>
			}
			else{
			output = 0;
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
 800090a:	e002      	b.n	8000912 <MT_controller_funct+0xe6>
			}
		}
		else{
			//call locking function
			output = 0;
 800090c:	f04f 0300 	mov.w	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
		}

		//activate motor

		//return status to phone
		asprintf(&decision, "OUTPUT: %d\n", (int)output);
 8000912:	edd7 7a08 	vldr	s15, [r7, #32]
 8000916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800091a:	f107 030b 	add.w	r3, r7, #11
 800091e:	ee17 2a90 	vmov	r2, s15
 8000922:	4913      	ldr	r1, [pc, #76]	; (8000970 <MT_controller_funct+0x144>)
 8000924:	4618      	mov	r0, r3
 8000926:	f006 fac1 	bl	8006eac <asiprintf>
		osMessageQueuePut(BT_sendHandle, &decision, 0, 2000);
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MT_controller_funct+0x13c>)
 800092c:	6818      	ldr	r0, [r3, #0]
 800092e:	f107 010b 	add.w	r1, r7, #11
 8000932:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000936:	2200      	movs	r2, #0
 8000938:	f003 fc72 	bl	8004220 <osMessageQueuePut>
        //osThreadYield();
		osDelay(1000);
 800093c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000940:	f003 fbba 	bl	80040b8 <osDelay>
	while(1){
 8000944:	e77d      	b.n	8000842 <MT_controller_funct+0x16>
 8000946:	bf00      	nop
 8000948:	2000015c 	.word	0x2000015c
 800094c:	08007a38 	.word	0x08007a38
 8000950:	08007a40 	.word	0x08007a40
 8000954:	08007a48 	.word	0x08007a48
 8000958:	08007a54 	.word	0x08007a54
 800095c:	447a0000 	.word	0x447a0000
 8000960:	08007a5c 	.word	0x08007a5c
 8000964:	08007a60 	.word	0x08007a60
 8000968:	20000160 	.word	0x20000160
 800096c:	08007a6c 	.word	0x08007a6c
 8000970:	08007a7c 	.word	0x08007a7c

08000974 <Sensor_reader_funct>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensor_reader_funct */
void Sensor_reader_funct(void *argument)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sensor_reader_funct */
  /* Infinite loop */
	int delay = 2000;
 800097c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000980:	623b      	str	r3, [r7, #32]
	float rpm_input, rpm_old = 0;
 8000982:	f04f 0300 	mov.w	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
	int counter;
	command com;
	com.button_id = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	60fb      	str	r3, [r7, #12]
	while(1){
        counter = __HAL_TIM_GET_COUNTER(&htim2);
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <Sensor_reader_funct+0x94>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000992:	61fb      	str	r3, [r7, #28]
        rpm_input =(float) counter/(PulsesPerRound*delay);
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	ee07 3a90 	vmov	s15, r3
 800099a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800099e:	6a3a      	ldr	r2, [r7, #32]
 80009a0:	4613      	mov	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	ee07 3a90 	vmov	s15, r3
 80009ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009b4:	edc7 7a06 	vstr	s15, [r7, #24]
		com.sensor_value = rpm_input;
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	617b      	str	r3, [r7, #20]
		if (counter != rpm_old){
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	ee07 3a90 	vmov	s15, r3
 80009c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009c6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80009ca:	eeb4 7a67 	vcmp.f32	s14, s15
 80009ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d2:	d008      	beq.n	80009e6 <Sensor_reader_funct+0x72>
			osMessageQueuePut(Input_queueHandle, &com, 0, 500);
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <Sensor_reader_funct+0x98>)
 80009d6:	6818      	ldr	r0, [r3, #0]
 80009d8:	f107 010c 	add.w	r1, r7, #12
 80009dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009e0:	2200      	movs	r2, #0
 80009e2:	f003 fc1d 	bl	8004220 <osMessageQueuePut>
		}
		__HAL_TIM_SET_COUNTER(&htim2,0);
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <Sensor_reader_funct+0x94>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2200      	movs	r2, #0
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24

		rpm_old = counter;
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	ee07 3a90 	vmov	s15, r3
 80009f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		osDelay(delay);
 80009fc:	6a3b      	ldr	r3, [r7, #32]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f003 fb5a 	bl	80040b8 <osDelay>
        counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000a04:	e7c2      	b.n	800098c <Sensor_reader_funct+0x18>
 8000a06:	bf00      	nop
 8000a08:	2000007c 	.word	0x2000007c
 8000a0c:	2000015c 	.word	0x2000015c

08000a10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d101      	bne.n	8000a26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a22:	f000 f9f3 	bl	8000e0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40001000 	.word	0x40001000

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	char* str = "ERROR_HANDLER CALLED";
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <Error_Handler+0x20>)
 8000a3c:	607b      	str	r3, [r7, #4]
	osMessageQueuePut(BT_sendHandle, &str, 0, 0);
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <Error_Handler+0x24>)
 8000a40:	6818      	ldr	r0, [r3, #0]
 8000a42:	1d39      	adds	r1, r7, #4
 8000a44:	2300      	movs	r3, #0
 8000a46:	2200      	movs	r2, #0
 8000a48:	f003 fbea 	bl	8004220 <osMessageQueuePut>
  /* USER CODE END Error_Handler_Debug */
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	08007a88 	.word	0x08007a88
 8000a58:	20000160 	.word	0x20000160

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6193      	str	r3, [r2, #24]
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	61d3      	str	r3, [r2, #28]
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	210f      	movs	r1, #15
 8000a96:	f06f 0001 	mvn.w	r0, #1
 8000a9a:	f000 fa8f 	bl	8000fbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000acc:	d128      	bne.n	8000b20 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <HAL_TIM_Base_MspInit+0x7c>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	4a15      	ldr	r2, [pc, #84]	; (8000b28 <HAL_TIM_Base_MspInit+0x7c>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	61d3      	str	r3, [r2, #28]
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <HAL_TIM_Base_MspInit+0x7c>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <HAL_TIM_Base_MspInit+0x7c>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	4a0f      	ldr	r2, [pc, #60]	; (8000b28 <HAL_TIM_Base_MspInit+0x7c>)
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	6153      	str	r3, [r2, #20]
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <HAL_TIM_Base_MspInit+0x7c>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000afe:	2301      	movs	r3, #1
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1c:	f000 fa78 	bl	8001010 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a17      	ldr	r2, [pc, #92]	; (8000ba8 <HAL_UART_MspInit+0x7c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d127      	bne.n	8000b9e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b4e:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_UART_MspInit+0x80>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	4a16      	ldr	r2, [pc, #88]	; (8000bac <HAL_UART_MspInit+0x80>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b58:	6193      	str	r3, [r2, #24]
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_UART_MspInit+0x80>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_UART_MspInit+0x80>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	4a10      	ldr	r2, [pc, #64]	; (8000bac <HAL_UART_MspInit+0x80>)
 8000b6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b70:	6153      	str	r3, [r2, #20]
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_UART_MspInit+0x80>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b7e:	2330      	movs	r3, #48	; 0x30
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <HAL_UART_MspInit+0x84>)
 8000b9a:	f000 fa39 	bl	8001010 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40013800 	.word	0x40013800
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	48000800 	.word	0x48000800

08000bb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	; 0x38
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bc4:	4b33      	ldr	r3, [pc, #204]	; (8000c94 <HAL_InitTick+0xe0>)
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	4a32      	ldr	r2, [pc, #200]	; (8000c94 <HAL_InitTick+0xe0>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	61d3      	str	r3, [r2, #28]
 8000bd0:	4b30      	ldr	r3, [pc, #192]	; (8000c94 <HAL_InitTick+0xe0>)
 8000bd2:	69db      	ldr	r3, [r3, #28]
 8000bd4:	f003 0310 	and.w	r3, r3, #16
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bdc:	f107 0210 	add.w	r2, r7, #16
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 fe28 	bl	800283c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bec:	6a3b      	ldr	r3, [r7, #32]
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d103      	bne.n	8000bfe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bf6:	f001 fddd 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 8000bfa:	6378      	str	r0, [r7, #52]	; 0x34
 8000bfc:	e004      	b.n	8000c08 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bfe:	f001 fdd9 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 8000c02:	4603      	mov	r3, r0
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0a:	4a23      	ldr	r2, [pc, #140]	; (8000c98 <HAL_InitTick+0xe4>)
 8000c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c10:	0c9b      	lsrs	r3, r3, #18
 8000c12:	3b01      	subs	r3, #1
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <HAL_InitTick+0xe8>)
 8000c18:	4a21      	ldr	r2, [pc, #132]	; (8000ca0 <HAL_InitTick+0xec>)
 8000c1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <HAL_InitTick+0xe8>)
 8000c1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c22:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c24:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <HAL_InitTick+0xe8>)
 8000c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c28:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <HAL_InitTick+0xe8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <HAL_InitTick+0xe8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c36:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_InitTick+0xe8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c3c:	4817      	ldr	r0, [pc, #92]	; (8000c9c <HAL_InitTick+0xe8>)
 8000c3e:	f001 ffc1 	bl	8002bc4 <HAL_TIM_Base_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d11b      	bne.n	8000c88 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c50:	4812      	ldr	r0, [pc, #72]	; (8000c9c <HAL_InitTick+0xe8>)
 8000c52:	f002 f80f 	bl	8002c74 <HAL_TIM_Base_Start_IT>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d111      	bne.n	8000c88 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c64:	2036      	movs	r0, #54	; 0x36
 8000c66:	f000 f9c5 	bl	8000ff4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d808      	bhi.n	8000c82 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	2036      	movs	r0, #54	; 0x36
 8000c76:	f000 f9a1 	bl	8000fbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_InitTick+0xf0>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	e002      	b.n	8000c88 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3738      	adds	r7, #56	; 0x38
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40021000 	.word	0x40021000
 8000c98:	431bde83 	.word	0x431bde83
 8000c9c:	20000164 	.word	0x20000164
 8000ca0:	40001000 	.word	0x40001000
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BREAK_1_Pin);
 8000cd8:	2020      	movs	r0, #32
 8000cda:	f000 fb23 	bl	8001324 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BREAK_2_Pin);
 8000cde:	2040      	movs	r0, #64	; 0x40
 8000ce0:	f000 fb20 	bl	8001324 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <TIM6_DAC_IRQHandler+0x10>)
 8000cee:	f002 f815 	bl	8002d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000164 	.word	0x20000164

08000cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d04:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <_sbrk+0x5c>)
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <_sbrk+0x60>)
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <_sbrk+0x64>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <_sbrk+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d207      	bcs.n	8000d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d2c:	f006 f940 	bl	8006fb0 <__errno>
 8000d30:	4603      	mov	r3, r0
 8000d32:	220c      	movs	r2, #12
 8000d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d3a:	e009      	b.n	8000d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <_sbrk+0x64>)
 8000d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20004000 	.word	0x20004000
 8000d5c:	00000400 	.word	0x00000400
 8000d60:	200001b0 	.word	0x200001b0
 8000d64:	20001ce0 	.word	0x20001ce0

08000d68 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d90:	f7ff ffea 	bl	8000d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	; (8000dcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <LoopForever+0xe>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	; (8000dd8 <LoopForever+0x16>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dba:	f006 f8ff 	bl	8006fbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dbe:	f7ff fa99 	bl	80002f4 <main>

08000dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc2:	e7fe      	b.n	8000dc2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dc4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000dd0:	08007bc8 	.word	0x08007bc8
  ldr r2, =_sbss
 8000dd4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000dd8:	20001ce0 	.word	0x20001ce0

08000ddc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_Init+0x28>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <HAL_Init+0x28>)
 8000dea:	f043 0310 	orr.w	r3, r3, #16
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df0:	2003      	movs	r0, #3
 8000df2:	f000 f8d8 	bl	8000fa6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df6:	200f      	movs	r0, #15
 8000df8:	f7ff fedc 	bl	8000bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dfc:	f7ff fe2e 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40022000 	.word	0x40022000

08000e0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	200001b4 	.word	0x200001b4

08000e34 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200001b4 	.word	0x200001b4

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db0b      	blt.n	8000eda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 021f 	and.w	r2, r3, #31
 8000ec8:	4907      	ldr	r1, [pc, #28]	; (8000ee8 <__NVIC_EnableIRQ+0x38>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	; (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	bf28      	it	cs
 8000f5e:	2304      	movcs	r3, #4
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3304      	adds	r3, #4
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b03      	subs	r3, #3
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
         );
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ff4c 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fce:	f7ff ff61 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8000fd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	68b9      	ldr	r1, [r7, #8]
 8000fd8:	6978      	ldr	r0, [r7, #20]
 8000fda:	f7ff ffb1 	bl	8000f40 <NVIC_EncodePriority>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff80 	bl	8000eec <__NVIC_SetPriority>
}
 8000fec:	bf00      	nop
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ff54 	bl	8000eb0 <__NVIC_EnableIRQ>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001010:	b480      	push	{r7}
 8001012:	b087      	sub	sp, #28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101e:	e14e      	b.n	80012be <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	2101      	movs	r1, #1
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	4013      	ands	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 8140 	beq.w	80012b8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b01      	cmp	r3, #1
 8001042:	d005      	beq.n	8001050 <HAL_GPIO_Init+0x40>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d130      	bne.n	80010b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68da      	ldr	r2, [r3, #12]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001086:	2201      	movs	r2, #1
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	091b      	lsrs	r3, r3, #4
 800109c:	f003 0201 	and.w	r2, r3, #1
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d017      	beq.n	80010ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2203      	movs	r2, #3
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d123      	bne.n	8001142 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3208      	adds	r2, #8
 8001102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	691a      	ldr	r2, [r3, #16]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	08da      	lsrs	r2, r3, #3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3208      	adds	r2, #8
 800113c:	6939      	ldr	r1, [r7, #16]
 800113e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2203      	movs	r2, #3
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0203 	and.w	r2, r3, #3
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 809a 	beq.w	80012b8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001184:	4b55      	ldr	r3, [pc, #340]	; (80012dc <HAL_GPIO_Init+0x2cc>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a54      	ldr	r2, [pc, #336]	; (80012dc <HAL_GPIO_Init+0x2cc>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b52      	ldr	r3, [pc, #328]	; (80012dc <HAL_GPIO_Init+0x2cc>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800119c:	4a50      	ldr	r2, [pc, #320]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	220f      	movs	r2, #15
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011c6:	d013      	beq.n	80011f0 <HAL_GPIO_Init+0x1e0>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a46      	ldr	r2, [pc, #280]	; (80012e4 <HAL_GPIO_Init+0x2d4>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d00d      	beq.n	80011ec <HAL_GPIO_Init+0x1dc>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a45      	ldr	r2, [pc, #276]	; (80012e8 <HAL_GPIO_Init+0x2d8>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d007      	beq.n	80011e8 <HAL_GPIO_Init+0x1d8>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a44      	ldr	r2, [pc, #272]	; (80012ec <HAL_GPIO_Init+0x2dc>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d101      	bne.n	80011e4 <HAL_GPIO_Init+0x1d4>
 80011e0:	2303      	movs	r3, #3
 80011e2:	e006      	b.n	80011f2 <HAL_GPIO_Init+0x1e2>
 80011e4:	2305      	movs	r3, #5
 80011e6:	e004      	b.n	80011f2 <HAL_GPIO_Init+0x1e2>
 80011e8:	2302      	movs	r3, #2
 80011ea:	e002      	b.n	80011f2 <HAL_GPIO_Init+0x1e2>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <HAL_GPIO_Init+0x1e2>
 80011f0:	2300      	movs	r3, #0
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	f002 0203 	and.w	r2, r2, #3
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	4093      	lsls	r3, r2
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001202:	4937      	ldr	r1, [pc, #220]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001210:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <HAL_GPIO_Init+0x2e0>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001234:	4a2e      	ldr	r2, [pc, #184]	; (80012f0 <HAL_GPIO_Init+0x2e0>)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_GPIO_Init+0x2e0>)
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800125e:	4a24      	ldr	r2, [pc, #144]	; (80012f0 <HAL_GPIO_Init+0x2e0>)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <HAL_GPIO_Init+0x2e0>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001288:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <HAL_GPIO_Init+0x2e0>)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_GPIO_Init+0x2e0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012b2:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <HAL_GPIO_Init+0x2e0>)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3301      	adds	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	fa22 f303 	lsr.w	r3, r2, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f47f aea9 	bne.w	8001020 <HAL_GPIO_Init+0x10>
  }
}
 80012ce:	bf00      	nop
 80012d0:	bf00      	nop
 80012d2:	371c      	adds	r7, #28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010000 	.word	0x40010000
 80012e4:	48000400 	.word	0x48000400
 80012e8:	48000800 	.word	0x48000800
 80012ec:	48000c00 	.word	0x48000c00
 80012f0:	40010400 	.word	0x40010400

080012f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e001      	b.n	8001316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001316:	7bfb      	ldrb	r3, [r7, #15]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	4013      	ands	r3, r2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d006      	beq.n	8001348 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f9a2 	bl	800068c <HAL_GPIO_EXTI_Callback>
  }
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40010400 	.word	0x40010400

08001354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800135a:	af00      	add	r7, sp, #0
 800135c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001360:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001364:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800136a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d102      	bne.n	800137a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	f001 b823 	b.w	80023c0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 817d 	beq.w	800168a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001390:	4bbc      	ldr	r3, [pc, #752]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	2b04      	cmp	r3, #4
 800139a:	d00c      	beq.n	80013b6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800139c:	4bb9      	ldr	r3, [pc, #740]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 030c 	and.w	r3, r3, #12
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d15c      	bne.n	8001462 <HAL_RCC_OscConfig+0x10e>
 80013a8:	4bb6      	ldr	r3, [pc, #728]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b4:	d155      	bne.n	8001462 <HAL_RCC_OscConfig+0x10e>
 80013b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ba:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013be:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80013c2:	fa93 f3a3 	rbit	r3, r3
 80013c6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ce:	fab3 f383 	clz	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	095b      	lsrs	r3, r3, #5
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d102      	bne.n	80013e8 <HAL_RCC_OscConfig+0x94>
 80013e2:	4ba8      	ldr	r3, [pc, #672]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	e015      	b.n	8001414 <HAL_RCC_OscConfig+0xc0>
 80013e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80013f4:	fa93 f3a3 	rbit	r3, r3
 80013f8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001400:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001404:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001408:	fa93 f3a3 	rbit	r3, r3
 800140c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001410:	4b9c      	ldr	r3, [pc, #624]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001418:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800141c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001420:	fa92 f2a2 	rbit	r2, r2
 8001424:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001428:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800142c:	fab2 f282 	clz	r2, r2
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	f042 0220 	orr.w	r2, r2, #32
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	f002 021f 	and.w	r2, r2, #31
 800143c:	2101      	movs	r1, #1
 800143e:	fa01 f202 	lsl.w	r2, r1, r2
 8001442:	4013      	ands	r3, r2
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 811f 	beq.w	8001688 <HAL_RCC_OscConfig+0x334>
 800144a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 8116 	bne.w	8001688 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	f000 bfaf 	b.w	80023c0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001466:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001472:	d106      	bne.n	8001482 <HAL_RCC_OscConfig+0x12e>
 8001474:	4b83      	ldr	r3, [pc, #524]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a82      	ldr	r2, [pc, #520]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 800147a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	e036      	b.n	80014f0 <HAL_RCC_OscConfig+0x19c>
 8001482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001486:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x158>
 8001492:	4b7c      	ldr	r3, [pc, #496]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a7b      	ldr	r2, [pc, #492]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b79      	ldr	r3, [pc, #484]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a78      	ldr	r2, [pc, #480]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80014a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e021      	b.n	80014f0 <HAL_RCC_OscConfig+0x19c>
 80014ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x184>
 80014be:	4b71      	ldr	r3, [pc, #452]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a70      	ldr	r2, [pc, #448]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80014c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b6e      	ldr	r3, [pc, #440]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a6d      	ldr	r2, [pc, #436]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e00b      	b.n	80014f0 <HAL_RCC_OscConfig+0x19c>
 80014d8:	4b6a      	ldr	r3, [pc, #424]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a69      	ldr	r2, [pc, #420]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80014de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b67      	ldr	r3, [pc, #412]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a66      	ldr	r2, [pc, #408]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80014ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ee:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014f0:	4b64      	ldr	r3, [pc, #400]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f4:	f023 020f 	bic.w	r2, r3, #15
 80014f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	495f      	ldr	r1, [pc, #380]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001506:	4313      	orrs	r3, r2
 8001508:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800150a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d059      	beq.n	80015ce <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff fc8b 	bl	8000e34 <HAL_GetTick>
 800151e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	e00a      	b.n	800153a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fc86 	bl	8000e34 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b64      	cmp	r3, #100	; 0x64
 8001532:	d902      	bls.n	800153a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	f000 bf43 	b.w	80023c0 <HAL_RCC_OscConfig+0x106c>
 800153a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800153e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001542:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001546:	fa93 f3a3 	rbit	r3, r3
 800154a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800154e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	fab3 f383 	clz	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	095b      	lsrs	r3, r3, #5
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d102      	bne.n	800156c <HAL_RCC_OscConfig+0x218>
 8001566:	4b47      	ldr	r3, [pc, #284]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	e015      	b.n	8001598 <HAL_RCC_OscConfig+0x244>
 800156c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001570:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001574:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001578:	fa93 f3a3 	rbit	r3, r3
 800157c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001580:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001584:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001588:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800158c:	fa93 f3a3 	rbit	r3, r3
 8001590:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001594:	4b3b      	ldr	r3, [pc, #236]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800159c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80015a0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80015a4:	fa92 f2a2 	rbit	r2, r2
 80015a8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80015ac:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80015b0:	fab2 f282 	clz	r2, r2
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	f042 0220 	orr.w	r2, r2, #32
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	f002 021f 	and.w	r2, r2, #31
 80015c0:	2101      	movs	r1, #1
 80015c2:	fa01 f202 	lsl.w	r2, r1, r2
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0ab      	beq.n	8001524 <HAL_RCC_OscConfig+0x1d0>
 80015cc:	e05d      	b.n	800168a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fc31 	bl	8000e34 <HAL_GetTick>
 80015d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fc2c 	bl	8000e34 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b64      	cmp	r3, #100	; 0x64
 80015e6:	d902      	bls.n	80015ee <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	f000 bee9 	b.w	80023c0 <HAL_RCC_OscConfig+0x106c>
 80015ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80015fa:	fa93 f3a3 	rbit	r3, r3
 80015fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001602:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	095b      	lsrs	r3, r3, #5
 800160e:	b2db      	uxtb	r3, r3
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d102      	bne.n	8001620 <HAL_RCC_OscConfig+0x2cc>
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	e015      	b.n	800164c <HAL_RCC_OscConfig+0x2f8>
 8001620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001624:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001628:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800162c:	fa93 f3a3 	rbit	r3, r3
 8001630:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001638:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800163c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001640:	fa93 f3a3 	rbit	r3, r3
 8001644:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001650:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001654:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001658:	fa92 f2a2 	rbit	r2, r2
 800165c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001660:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001664:	fab2 f282 	clz	r2, r2
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	f042 0220 	orr.w	r2, r2, #32
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	f002 021f 	and.w	r2, r2, #31
 8001674:	2101      	movs	r1, #1
 8001676:	fa01 f202 	lsl.w	r2, r1, r2
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1ab      	bne.n	80015d8 <HAL_RCC_OscConfig+0x284>
 8001680:	e003      	b.n	800168a <HAL_RCC_OscConfig+0x336>
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 817d 	beq.w	800199a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016a0:	4ba6      	ldr	r3, [pc, #664]	; (800193c <HAL_RCC_OscConfig+0x5e8>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00b      	beq.n	80016c4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016ac:	4ba3      	ldr	r3, [pc, #652]	; (800193c <HAL_RCC_OscConfig+0x5e8>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d172      	bne.n	800179e <HAL_RCC_OscConfig+0x44a>
 80016b8:	4ba0      	ldr	r3, [pc, #640]	; (800193c <HAL_RCC_OscConfig+0x5e8>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d16c      	bne.n	800179e <HAL_RCC_OscConfig+0x44a>
 80016c4:	2302      	movs	r3, #2
 80016c6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80016d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016da:	fab3 f383 	clz	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	095b      	lsrs	r3, r3, #5
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d102      	bne.n	80016f4 <HAL_RCC_OscConfig+0x3a0>
 80016ee:	4b93      	ldr	r3, [pc, #588]	; (800193c <HAL_RCC_OscConfig+0x5e8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	e013      	b.n	800171c <HAL_RCC_OscConfig+0x3c8>
 80016f4:	2302      	movs	r3, #2
 80016f6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80016fe:	fa93 f3a3 	rbit	r3, r3
 8001702:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001706:	2302      	movs	r3, #2
 8001708:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800170c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001710:	fa93 f3a3 	rbit	r3, r3
 8001714:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001718:	4b88      	ldr	r3, [pc, #544]	; (800193c <HAL_RCC_OscConfig+0x5e8>)
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	2202      	movs	r2, #2
 800171e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001722:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001726:	fa92 f2a2 	rbit	r2, r2
 800172a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800172e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001732:	fab2 f282 	clz	r2, r2
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	f042 0220 	orr.w	r2, r2, #32
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	f002 021f 	and.w	r2, r2, #31
 8001742:	2101      	movs	r1, #1
 8001744:	fa01 f202 	lsl.w	r2, r1, r2
 8001748:	4013      	ands	r3, r2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00a      	beq.n	8001764 <HAL_RCC_OscConfig+0x410>
 800174e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d002      	beq.n	8001764 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	f000 be2e 	b.w	80023c0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b75      	ldr	r3, [pc, #468]	; (800193c <HAL_RCC_OscConfig+0x5e8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800176c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001770:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	21f8      	movs	r1, #248	; 0xf8
 800177a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001782:	fa91 f1a1 	rbit	r1, r1
 8001786:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800178a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800178e:	fab1 f181 	clz	r1, r1
 8001792:	b2c9      	uxtb	r1, r1
 8001794:	408b      	lsls	r3, r1
 8001796:	4969      	ldr	r1, [pc, #420]	; (800193c <HAL_RCC_OscConfig+0x5e8>)
 8001798:	4313      	orrs	r3, r2
 800179a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179c:	e0fd      	b.n	800199a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800179e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 8088 	beq.w	80018c0 <HAL_RCC_OscConfig+0x56c>
 80017b0:	2301      	movs	r3, #1
 80017b2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80017ba:	fa93 f3a3 	rbit	r3, r3
 80017be:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80017c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	461a      	mov	r2, r3
 80017d8:	2301      	movs	r3, #1
 80017da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fb2a 	bl	8000e34 <HAL_GetTick>
 80017e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e6:	f7ff fb25 	bl	8000e34 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d902      	bls.n	80017fc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	f000 bde2 	b.w	80023c0 <HAL_RCC_OscConfig+0x106c>
 80017fc:	2302      	movs	r3, #2
 80017fe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001802:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001806:	fa93 f3a3 	rbit	r3, r3
 800180a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800180e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	095b      	lsrs	r3, r3, #5
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d102      	bne.n	800182c <HAL_RCC_OscConfig+0x4d8>
 8001826:	4b45      	ldr	r3, [pc, #276]	; (800193c <HAL_RCC_OscConfig+0x5e8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	e013      	b.n	8001854 <HAL_RCC_OscConfig+0x500>
 800182c:	2302      	movs	r3, #2
 800182e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800183e:	2302      	movs	r3, #2
 8001840:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001844:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001848:	fa93 f3a3 	rbit	r3, r3
 800184c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001850:	4b3a      	ldr	r3, [pc, #232]	; (800193c <HAL_RCC_OscConfig+0x5e8>)
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	2202      	movs	r2, #2
 8001856:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800185a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800185e:	fa92 f2a2 	rbit	r2, r2
 8001862:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001866:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800186a:	fab2 f282 	clz	r2, r2
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	f042 0220 	orr.w	r2, r2, #32
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	f002 021f 	and.w	r2, r2, #31
 800187a:	2101      	movs	r1, #1
 800187c:	fa01 f202 	lsl.w	r2, r1, r2
 8001880:	4013      	ands	r3, r2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0af      	beq.n	80017e6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001886:	4b2d      	ldr	r3, [pc, #180]	; (800193c <HAL_RCC_OscConfig+0x5e8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800188e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001892:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	21f8      	movs	r1, #248	; 0xf8
 800189c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80018a4:	fa91 f1a1 	rbit	r1, r1
 80018a8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80018ac:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80018b0:	fab1 f181 	clz	r1, r1
 80018b4:	b2c9      	uxtb	r1, r1
 80018b6:	408b      	lsls	r3, r1
 80018b8:	4920      	ldr	r1, [pc, #128]	; (800193c <HAL_RCC_OscConfig+0x5e8>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
 80018be:	e06c      	b.n	800199a <HAL_RCC_OscConfig+0x646>
 80018c0:	2301      	movs	r3, #1
 80018c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80018d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	461a      	mov	r2, r3
 80018e8:	2300      	movs	r3, #0
 80018ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff faa2 	bl	8000e34 <HAL_GetTick>
 80018f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f4:	e00a      	b.n	800190c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f6:	f7ff fa9d 	bl	8000e34 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d902      	bls.n	800190c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	f000 bd5a 	b.w	80023c0 <HAL_RCC_OscConfig+0x106c>
 800190c:	2302      	movs	r3, #2
 800190e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800191e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001922:	fab3 f383 	clz	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	095b      	lsrs	r3, r3, #5
 800192a:	b2db      	uxtb	r3, r3
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b01      	cmp	r3, #1
 8001934:	d104      	bne.n	8001940 <HAL_RCC_OscConfig+0x5ec>
 8001936:	4b01      	ldr	r3, [pc, #4]	; (800193c <HAL_RCC_OscConfig+0x5e8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	e015      	b.n	8001968 <HAL_RCC_OscConfig+0x614>
 800193c:	40021000 	.word	0x40021000
 8001940:	2302      	movs	r3, #2
 8001942:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800194a:	fa93 f3a3 	rbit	r3, r3
 800194e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001952:	2302      	movs	r3, #2
 8001954:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001958:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800195c:	fa93 f3a3 	rbit	r3, r3
 8001960:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001964:	4bc8      	ldr	r3, [pc, #800]	; (8001c88 <HAL_RCC_OscConfig+0x934>)
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	2202      	movs	r2, #2
 800196a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800196e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001972:	fa92 f2a2 	rbit	r2, r2
 8001976:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800197a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800197e:	fab2 f282 	clz	r2, r2
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	f042 0220 	orr.w	r2, r2, #32
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	f002 021f 	and.w	r2, r2, #31
 800198e:	2101      	movs	r1, #1
 8001990:	fa01 f202 	lsl.w	r2, r1, r2
 8001994:	4013      	ands	r3, r2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1ad      	bne.n	80018f6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800199a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 8110 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d079      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x760>
 80019c0:	2301      	movs	r3, #1
 80019c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019ca:	fa93 f3a3 	rbit	r3, r3
 80019ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80019d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d6:	fab3 f383 	clz	r3, r3
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	4bab      	ldr	r3, [pc, #684]	; (8001c8c <HAL_RCC_OscConfig+0x938>)
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	461a      	mov	r2, r3
 80019e6:	2301      	movs	r3, #1
 80019e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ea:	f7ff fa23 	bl	8000e34 <HAL_GetTick>
 80019ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f4:	f7ff fa1e 	bl	8000e34 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d902      	bls.n	8001a0a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	f000 bcdb 	b.w	80023c0 <HAL_RCC_OscConfig+0x106c>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a20:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a24:	2202      	movs	r2, #2
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	fa93 f2a3 	rbit	r2, r3
 8001a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a48:	2202      	movs	r2, #2
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	fa93 f2a3 	rbit	r2, r3
 8001a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a62:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a64:	4b88      	ldr	r3, [pc, #544]	; (8001c88 <HAL_RCC_OscConfig+0x934>)
 8001a66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a70:	2102      	movs	r1, #2
 8001a72:	6019      	str	r1, [r3, #0]
 8001a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	fa93 f1a3 	rbit	r1, r3
 8001a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a8a:	6019      	str	r1, [r3, #0]
  return result;
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	f003 031f 	and.w	r3, r3, #31
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0a0      	beq.n	80019f4 <HAL_RCC_OscConfig+0x6a0>
 8001ab2:	e08d      	b.n	8001bd0 <HAL_RCC_OscConfig+0x87c>
 8001ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001abc:	2201      	movs	r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fa93 f2a3 	rbit	r2, r3
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ad6:	601a      	str	r2, [r3, #0]
  return result;
 8001ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001adc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ae0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae2:	fab3 f383 	clz	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b68      	ldr	r3, [pc, #416]	; (8001c8c <HAL_RCC_OscConfig+0x938>)
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	461a      	mov	r2, r3
 8001af2:	2300      	movs	r3, #0
 8001af4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af6:	f7ff f99d 	bl	8000e34 <HAL_GetTick>
 8001afa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b00:	f7ff f998 	bl	8000e34 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d902      	bls.n	8001b16 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	f000 bc55 	b.w	80023c0 <HAL_RCC_OscConfig+0x106c>
 8001b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b1e:	2202      	movs	r2, #2
 8001b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b26:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	fa93 f2a3 	rbit	r2, r3
 8001b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b34:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b42:	2202      	movs	r2, #2
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	fa93 f2a3 	rbit	r2, r3
 8001b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b66:	2202      	movs	r2, #2
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	fa93 f2a3 	rbit	r2, r3
 8001b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b80:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b82:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <HAL_RCC_OscConfig+0x934>)
 8001b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b8e:	2102      	movs	r1, #2
 8001b90:	6019      	str	r1, [r3, #0]
 8001b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b96:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	fa93 f1a3 	rbit	r1, r3
 8001ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ba8:	6019      	str	r1, [r3, #0]
  return result;
 8001baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bae:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d197      	bne.n	8001b00 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 81a1 	beq.w	8001f28 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bec:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <HAL_RCC_OscConfig+0x934>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d116      	bne.n	8001c26 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf8:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <HAL_RCC_OscConfig+0x934>)
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	4a22      	ldr	r2, [pc, #136]	; (8001c88 <HAL_RCC_OscConfig+0x934>)
 8001bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c02:	61d3      	str	r3, [r2, #28]
 8001c04:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <HAL_RCC_OscConfig+0x934>)
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c10:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001c1e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <HAL_RCC_OscConfig+0x93c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d11a      	bne.n	8001c68 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <HAL_RCC_OscConfig+0x93c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a16      	ldr	r2, [pc, #88]	; (8001c90 <HAL_RCC_OscConfig+0x93c>)
 8001c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff f8f9 	bl	8000e34 <HAL_GetTick>
 8001c42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c46:	e009      	b.n	8001c5c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c48:	f7ff f8f4 	bl	8000e34 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b64      	cmp	r3, #100	; 0x64
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e3b1      	b.n	80023c0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <HAL_RCC_OscConfig+0x93c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0ef      	beq.n	8001c48 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d10d      	bne.n	8001c94 <HAL_RCC_OscConfig+0x940>
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_RCC_OscConfig+0x934>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4a02      	ldr	r2, [pc, #8]	; (8001c88 <HAL_RCC_OscConfig+0x934>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6213      	str	r3, [r2, #32]
 8001c84:	e03c      	b.n	8001d00 <HAL_RCC_OscConfig+0x9ac>
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	10908120 	.word	0x10908120
 8001c90:	40007000 	.word	0x40007000
 8001c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10c      	bne.n	8001cbe <HAL_RCC_OscConfig+0x96a>
 8001ca4:	4bc1      	ldr	r3, [pc, #772]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4ac0      	ldr	r2, [pc, #768]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001caa:	f023 0301 	bic.w	r3, r3, #1
 8001cae:	6213      	str	r3, [r2, #32]
 8001cb0:	4bbe      	ldr	r3, [pc, #760]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4abd      	ldr	r2, [pc, #756]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001cb6:	f023 0304 	bic.w	r3, r3, #4
 8001cba:	6213      	str	r3, [r2, #32]
 8001cbc:	e020      	b.n	8001d00 <HAL_RCC_OscConfig+0x9ac>
 8001cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x994>
 8001cce:	4bb7      	ldr	r3, [pc, #732]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	4ab6      	ldr	r2, [pc, #728]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6213      	str	r3, [r2, #32]
 8001cda:	4bb4      	ldr	r3, [pc, #720]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4ab3      	ldr	r2, [pc, #716]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6213      	str	r3, [r2, #32]
 8001ce6:	e00b      	b.n	8001d00 <HAL_RCC_OscConfig+0x9ac>
 8001ce8:	4bb0      	ldr	r3, [pc, #704]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4aaf      	ldr	r2, [pc, #700]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	6213      	str	r3, [r2, #32]
 8001cf4:	4bad      	ldr	r3, [pc, #692]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4aac      	ldr	r2, [pc, #688]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001cfa:	f023 0304 	bic.w	r3, r3, #4
 8001cfe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 8081 	beq.w	8001e14 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d12:	f7ff f88f 	bl	8000e34 <HAL_GetTick>
 8001d16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d1c:	f7ff f88a 	bl	8000e34 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e345      	b.n	80023c0 <HAL_RCC_OscConfig+0x106c>
 8001d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d38:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d44:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fa93 f2a3 	rbit	r2, r3
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d60:	2202      	movs	r2, #2
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	fa93 f2a3 	rbit	r2, r3
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d7a:	601a      	str	r2, [r3, #0]
  return result;
 8001d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d80:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d84:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	095b      	lsrs	r3, r3, #5
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d102      	bne.n	8001da0 <HAL_RCC_OscConfig+0xa4c>
 8001d9a:	4b84      	ldr	r3, [pc, #528]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	e013      	b.n	8001dc8 <HAL_RCC_OscConfig+0xa74>
 8001da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001da8:	2202      	movs	r2, #2
 8001daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	fa93 f2a3 	rbit	r2, r3
 8001dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	4b79      	ldr	r3, [pc, #484]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dcc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	6011      	str	r1, [r2, #0]
 8001dd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dd8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	fa92 f1a2 	rbit	r1, r2
 8001de2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001de6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001dea:	6011      	str	r1, [r2, #0]
  return result;
 8001dec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001df0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	fab2 f282 	clz	r2, r2
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	f002 021f 	and.w	r2, r2, #31
 8001e06:	2101      	movs	r1, #1
 8001e08:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d084      	beq.n	8001d1c <HAL_RCC_OscConfig+0x9c8>
 8001e12:	e07f      	b.n	8001f14 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e14:	f7ff f80e 	bl	8000e34 <HAL_GetTick>
 8001e18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1c:	e00b      	b.n	8001e36 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7ff f809 	bl	8000e34 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e2c4      	b.n	80023c0 <HAL_RCC_OscConfig+0x106c>
 8001e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001e3e:	2202      	movs	r2, #2
 8001e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e46:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	fa93 f2a3 	rbit	r2, r3
 8001e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e54:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e62:	2202      	movs	r2, #2
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	fa93 f2a3 	rbit	r2, r3
 8001e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e78:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e7c:	601a      	str	r2, [r3, #0]
  return result;
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e86:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	f043 0302 	orr.w	r3, r3, #2
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d102      	bne.n	8001ea2 <HAL_RCC_OscConfig+0xb4e>
 8001e9c:	4b43      	ldr	r3, [pc, #268]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	e013      	b.n	8001eca <HAL_RCC_OscConfig+0xb76>
 8001ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001eaa:	2202      	movs	r2, #2
 8001eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	fa93 f2a3 	rbit	r2, r3
 8001ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	4b39      	ldr	r3, [pc, #228]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ece:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001ed2:	2102      	movs	r1, #2
 8001ed4:	6011      	str	r1, [r2, #0]
 8001ed6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eda:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	fa92 f1a2 	rbit	r1, r2
 8001ee4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ee8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001eec:	6011      	str	r1, [r2, #0]
  return result;
 8001eee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ef2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	fab2 f282 	clz	r2, r2
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	f002 021f 	and.w	r2, r2, #31
 8001f08:	2101      	movs	r1, #1
 8001f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d184      	bne.n	8001e1e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f14:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d105      	bne.n	8001f28 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f1c:	4b23      	ldr	r3, [pc, #140]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	4a22      	ldr	r2, [pc, #136]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f26:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 8242 	beq.w	80023be <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <HAL_RCC_OscConfig+0xc58>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	f000 8213 	beq.w	800236e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	f040 8162 	bne.w	800221e <HAL_RCC_OscConfig+0xeca>
 8001f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001f62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	fa93 f2a3 	rbit	r2, r3
 8001f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f7e:	601a      	str	r2, [r3, #0]
  return result;
 8001f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f84:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f88:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8a:	fab3 f383 	clz	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7fe ff48 	bl	8000e34 <HAL_GetTick>
 8001fa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa8:	e00c      	b.n	8001fc4 <HAL_RCC_OscConfig+0xc70>
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7fe ff40 	bl	8000e34 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e1fd      	b.n	80023c0 <HAL_RCC_OscConfig+0x106c>
 8001fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	fa93 f2a3 	rbit	r2, r3
 8001fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fe8:	601a      	str	r2, [r3, #0]
  return result;
 8001fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fee:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ff2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff4:	fab3 f383 	clz	r3, r3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b01      	cmp	r3, #1
 8002006:	d102      	bne.n	800200e <HAL_RCC_OscConfig+0xcba>
 8002008:	4bb0      	ldr	r3, [pc, #704]	; (80022cc <HAL_RCC_OscConfig+0xf78>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	e027      	b.n	800205e <HAL_RCC_OscConfig+0xd0a>
 800200e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002012:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002016:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800201a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002020:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	fa93 f2a3 	rbit	r2, r3
 800202a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002038:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800203c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002046:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	fa93 f2a3 	rbit	r2, r3
 8002050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002054:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	4b9c      	ldr	r3, [pc, #624]	; (80022cc <HAL_RCC_OscConfig+0xf78>)
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002062:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002066:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800206a:	6011      	str	r1, [r2, #0]
 800206c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002070:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	fa92 f1a2 	rbit	r1, r2
 800207a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800207e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002082:	6011      	str	r1, [r2, #0]
  return result;
 8002084:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002088:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	fab2 f282 	clz	r2, r2
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	f042 0220 	orr.w	r2, r2, #32
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	f002 021f 	and.w	r2, r2, #31
 800209e:	2101      	movs	r1, #1
 80020a0:	fa01 f202 	lsl.w	r2, r1, r2
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d182      	bne.n	8001fb0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020aa:	4b88      	ldr	r3, [pc, #544]	; (80022cc <HAL_RCC_OscConfig+0xf78>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80020be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	430b      	orrs	r3, r1
 80020cc:	497f      	ldr	r1, [pc, #508]	; (80022cc <HAL_RCC_OscConfig+0xf78>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
 80020d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80020da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	fa93 f2a3 	rbit	r2, r3
 80020ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020f6:	601a      	str	r2, [r3, #0]
  return result;
 80020f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002100:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800210c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	461a      	mov	r2, r3
 8002114:	2301      	movs	r3, #1
 8002116:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7fe fe8c 	bl	8000e34 <HAL_GetTick>
 800211c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002120:	e009      	b.n	8002136 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002122:	f7fe fe87 	bl	8000e34 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e144      	b.n	80023c0 <HAL_RCC_OscConfig+0x106c>
 8002136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800213e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002148:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	fa93 f2a3 	rbit	r2, r3
 8002152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002156:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800215a:	601a      	str	r2, [r3, #0]
  return result;
 800215c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002160:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002164:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d102      	bne.n	8002180 <HAL_RCC_OscConfig+0xe2c>
 800217a:	4b54      	ldr	r3, [pc, #336]	; (80022cc <HAL_RCC_OscConfig+0xf78>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	e027      	b.n	80021d0 <HAL_RCC_OscConfig+0xe7c>
 8002180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002184:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002188:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800218c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002192:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	fa93 f2a3 	rbit	r2, r3
 800219c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021aa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80021ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	fa93 f2a3 	rbit	r2, r3
 80021c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <HAL_RCC_OscConfig+0xf78>)
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021d4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80021d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021dc:	6011      	str	r1, [r2, #0]
 80021de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021e2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	fa92 f1a2 	rbit	r1, r2
 80021ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021f0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80021f4:	6011      	str	r1, [r2, #0]
  return result;
 80021f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021fa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	fab2 f282 	clz	r2, r2
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	f042 0220 	orr.w	r2, r2, #32
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	f002 021f 	and.w	r2, r2, #31
 8002210:	2101      	movs	r1, #1
 8002212:	fa01 f202 	lsl.w	r2, r1, r2
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d082      	beq.n	8002122 <HAL_RCC_OscConfig+0xdce>
 800221c:	e0cf      	b.n	80023be <HAL_RCC_OscConfig+0x106a>
 800221e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002222:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002226:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800222a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002230:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	fa93 f2a3 	rbit	r2, r3
 800223a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002242:	601a      	str	r2, [r3, #0]
  return result;
 8002244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002248:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800224c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002258:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	461a      	mov	r2, r3
 8002260:	2300      	movs	r3, #0
 8002262:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe fde6 	bl	8000e34 <HAL_GetTick>
 8002268:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226c:	e009      	b.n	8002282 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226e:	f7fe fde1 	bl	8000e34 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e09e      	b.n	80023c0 <HAL_RCC_OscConfig+0x106c>
 8002282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002286:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800228a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800228e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002294:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	fa93 f2a3 	rbit	r2, r3
 800229e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80022a6:	601a      	str	r2, [r3, #0]
  return result;
 80022a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80022b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d104      	bne.n	80022d0 <HAL_RCC_OscConfig+0xf7c>
 80022c6:	4b01      	ldr	r3, [pc, #4]	; (80022cc <HAL_RCC_OscConfig+0xf78>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	e029      	b.n	8002320 <HAL_RCC_OscConfig+0xfcc>
 80022cc:	40021000 	.word	0x40021000
 80022d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	fa93 f2a3 	rbit	r2, r3
 80022ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80022fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002308:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	fa93 f2a3 	rbit	r2, r3
 8002312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002316:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	4b2b      	ldr	r3, [pc, #172]	; (80023cc <HAL_RCC_OscConfig+0x1078>)
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002324:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002328:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800232c:	6011      	str	r1, [r2, #0]
 800232e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002332:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	fa92 f1a2 	rbit	r1, r2
 800233c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002340:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002344:	6011      	str	r1, [r2, #0]
  return result;
 8002346:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800234a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	fab2 f282 	clz	r2, r2
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f042 0220 	orr.w	r2, r2, #32
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	f002 021f 	and.w	r2, r2, #31
 8002360:	2101      	movs	r1, #1
 8002362:	fa01 f202 	lsl.w	r2, r1, r2
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d180      	bne.n	800226e <HAL_RCC_OscConfig+0xf1a>
 800236c:	e027      	b.n	80023be <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800236e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002372:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e01e      	b.n	80023c0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <HAL_RCC_OscConfig+0x1078>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800238a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800238e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002396:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d10b      	bne.n	80023ba <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80023a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80023a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d001      	beq.n	80023be <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000

080023d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b09e      	sub	sp, #120	; 0x78
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e162      	b.n	80026ae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023e8:	4b90      	ldr	r3, [pc, #576]	; (800262c <HAL_RCC_ClockConfig+0x25c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d910      	bls.n	8002418 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b8d      	ldr	r3, [pc, #564]	; (800262c <HAL_RCC_ClockConfig+0x25c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 0207 	bic.w	r2, r3, #7
 80023fe:	498b      	ldr	r1, [pc, #556]	; (800262c <HAL_RCC_ClockConfig+0x25c>)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b89      	ldr	r3, [pc, #548]	; (800262c <HAL_RCC_ClockConfig+0x25c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e14a      	b.n	80026ae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002424:	4b82      	ldr	r3, [pc, #520]	; (8002630 <HAL_RCC_ClockConfig+0x260>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	497f      	ldr	r1, [pc, #508]	; (8002630 <HAL_RCC_ClockConfig+0x260>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 80dc 	beq.w	80025fc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d13c      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xf6>
 800244c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002450:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800245a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b01      	cmp	r3, #1
 800246e:	d102      	bne.n	8002476 <HAL_RCC_ClockConfig+0xa6>
 8002470:	4b6f      	ldr	r3, [pc, #444]	; (8002630 <HAL_RCC_ClockConfig+0x260>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	e00f      	b.n	8002496 <HAL_RCC_ClockConfig+0xc6>
 8002476:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800247a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	667b      	str	r3, [r7, #100]	; 0x64
 8002484:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002488:	663b      	str	r3, [r7, #96]	; 0x60
 800248a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002492:	4b67      	ldr	r3, [pc, #412]	; (8002630 <HAL_RCC_ClockConfig+0x260>)
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800249a:	65ba      	str	r2, [r7, #88]	; 0x58
 800249c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800249e:	fa92 f2a2 	rbit	r2, r2
 80024a2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80024a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024a6:	fab2 f282 	clz	r2, r2
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	f042 0220 	orr.w	r2, r2, #32
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	f002 021f 	and.w	r2, r2, #31
 80024b6:	2101      	movs	r1, #1
 80024b8:	fa01 f202 	lsl.w	r2, r1, r2
 80024bc:	4013      	ands	r3, r2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d17b      	bne.n	80025ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0f3      	b.n	80026ae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d13c      	bne.n	8002548 <HAL_RCC_ClockConfig+0x178>
 80024ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	095b      	lsrs	r3, r3, #5
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d102      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x128>
 80024f2:	4b4f      	ldr	r3, [pc, #316]	; (8002630 <HAL_RCC_ClockConfig+0x260>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	e00f      	b.n	8002518 <HAL_RCC_ClockConfig+0x148>
 80024f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	647b      	str	r3, [r7, #68]	; 0x44
 8002506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800250a:	643b      	str	r3, [r7, #64]	; 0x40
 800250c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002514:	4b46      	ldr	r3, [pc, #280]	; (8002630 <HAL_RCC_ClockConfig+0x260>)
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800251c:	63ba      	str	r2, [r7, #56]	; 0x38
 800251e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002520:	fa92 f2a2 	rbit	r2, r2
 8002524:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002528:	fab2 f282 	clz	r2, r2
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	f042 0220 	orr.w	r2, r2, #32
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	f002 021f 	and.w	r2, r2, #31
 8002538:	2101      	movs	r1, #1
 800253a:	fa01 f202 	lsl.w	r2, r1, r2
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d13a      	bne.n	80025ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0b2      	b.n	80026ae <HAL_RCC_ClockConfig+0x2de>
 8002548:	2302      	movs	r3, #2
 800254a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	095b      	lsrs	r3, r3, #5
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b01      	cmp	r3, #1
 8002568:	d102      	bne.n	8002570 <HAL_RCC_ClockConfig+0x1a0>
 800256a:	4b31      	ldr	r3, [pc, #196]	; (8002630 <HAL_RCC_ClockConfig+0x260>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	e00d      	b.n	800258c <HAL_RCC_ClockConfig+0x1bc>
 8002570:	2302      	movs	r3, #2
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
 800257c:	2302      	movs	r3, #2
 800257e:	623b      	str	r3, [r7, #32]
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	4b29      	ldr	r3, [pc, #164]	; (8002630 <HAL_RCC_ClockConfig+0x260>)
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	2202      	movs	r2, #2
 800258e:	61ba      	str	r2, [r7, #24]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	fa92 f2a2 	rbit	r2, r2
 8002596:	617a      	str	r2, [r7, #20]
  return result;
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	fab2 f282 	clz	r2, r2
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	f042 0220 	orr.w	r2, r2, #32
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	f002 021f 	and.w	r2, r2, #31
 80025aa:	2101      	movs	r1, #1
 80025ac:	fa01 f202 	lsl.w	r2, r1, r2
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e079      	b.n	80026ae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_RCC_ClockConfig+0x260>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f023 0203 	bic.w	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	491a      	ldr	r1, [pc, #104]	; (8002630 <HAL_RCC_ClockConfig+0x260>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025cc:	f7fe fc32 	bl	8000e34 <HAL_GetTick>
 80025d0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d4:	f7fe fc2e 	bl	8000e34 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e061      	b.n	80026ae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <HAL_RCC_ClockConfig+0x260>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 020c 	and.w	r2, r3, #12
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d1eb      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_ClockConfig+0x25c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d214      	bcs.n	8002634 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b08      	ldr	r3, [pc, #32]	; (800262c <HAL_RCC_ClockConfig+0x25c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 0207 	bic.w	r2, r3, #7
 8002612:	4906      	ldr	r1, [pc, #24]	; (800262c <HAL_RCC_ClockConfig+0x25c>)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <HAL_RCC_ClockConfig+0x25c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e040      	b.n	80026ae <HAL_RCC_ClockConfig+0x2de>
 800262c:	40022000 	.word	0x40022000
 8002630:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002640:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_RCC_ClockConfig+0x2e8>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	491a      	ldr	r1, [pc, #104]	; (80026b8 <HAL_RCC_ClockConfig+0x2e8>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800265e:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <HAL_RCC_ClockConfig+0x2e8>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4912      	ldr	r1, [pc, #72]	; (80026b8 <HAL_RCC_ClockConfig+0x2e8>)
 800266e:	4313      	orrs	r3, r2
 8002670:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002672:	f000 f829 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8002676:	4601      	mov	r1, r0
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <HAL_RCC_ClockConfig+0x2e8>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002680:	22f0      	movs	r2, #240	; 0xf0
 8002682:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	fa92 f2a2 	rbit	r2, r2
 800268a:	60fa      	str	r2, [r7, #12]
  return result;
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	fab2 f282 	clz	r2, r2
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	40d3      	lsrs	r3, r2
 8002696:	4a09      	ldr	r2, [pc, #36]	; (80026bc <HAL_RCC_ClockConfig+0x2ec>)
 8002698:	5cd3      	ldrb	r3, [r2, r3]
 800269a:	fa21 f303 	lsr.w	r3, r1, r3
 800269e:	4a08      	ldr	r2, [pc, #32]	; (80026c0 <HAL_RCC_ClockConfig+0x2f0>)
 80026a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_RCC_ClockConfig+0x2f4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe fa84 	bl	8000bb4 <HAL_InitTick>
  
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3778      	adds	r7, #120	; 0x78
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000
 80026bc:	08007b54 	.word	0x08007b54
 80026c0:	20000000 	.word	0x20000000
 80026c4:	20000004 	.word	0x20000004

080026c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b08b      	sub	sp, #44	; 0x2c
 80026cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
 80026d2:	2300      	movs	r3, #0
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80026e2:	4b29      	ldr	r3, [pc, #164]	; (8002788 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d002      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x30>
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_GetSysClockFreq+0x36>
 80026f6:	e03c      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026f8:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_RCC_GetSysClockFreq+0xc4>)
 80026fa:	623b      	str	r3, [r7, #32]
      break;
 80026fc:	e03c      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002704:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002708:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	fa92 f2a2 	rbit	r2, r2
 8002710:	607a      	str	r2, [r7, #4]
  return result;
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	fab2 f282 	clz	r2, r2
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	40d3      	lsrs	r3, r2
 800271c:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <HAL_RCC_GetSysClockFreq+0xc8>)
 800271e:	5cd3      	ldrb	r3, [r2, r3]
 8002720:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002722:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	220f      	movs	r2, #15
 800272c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	fa92 f2a2 	rbit	r2, r2
 8002734:	60fa      	str	r2, [r7, #12]
  return result;
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	fab2 f282 	clz	r2, r2
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	40d3      	lsrs	r3, r2
 8002740:	4a14      	ldr	r2, [pc, #80]	; (8002794 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002742:	5cd3      	ldrb	r3, [r2, r3]
 8002744:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002750:	4a0e      	ldr	r2, [pc, #56]	; (800278c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	fbb2 f2f3 	udiv	r2, r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
 8002760:	e004      	b.n	800276c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	623b      	str	r3, [r7, #32]
      break;
 8002770:	e002      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002774:	623b      	str	r3, [r7, #32]
      break;
 8002776:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002778:	6a3b      	ldr	r3, [r7, #32]
}
 800277a:	4618      	mov	r0, r3
 800277c:	372c      	adds	r7, #44	; 0x2c
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
 800278c:	007a1200 	.word	0x007a1200
 8002790:	08007b6c 	.word	0x08007b6c
 8002794:	08007b7c 	.word	0x08007b7c
 8002798:	003d0900 	.word	0x003d0900

0800279c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20000000 	.word	0x20000000

080027b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80027ba:	f7ff ffef 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027be:	4601      	mov	r1, r0
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027c8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80027cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	fa92 f2a2 	rbit	r2, r2
 80027d4:	603a      	str	r2, [r7, #0]
  return result;
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	fab2 f282 	clz	r2, r2
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	40d3      	lsrs	r3, r2
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80027e2:	5cd3      	ldrb	r3, [r2, r3]
 80027e4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40021000 	.word	0x40021000
 80027f4:	08007b64 	.word	0x08007b64

080027f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80027fe:	f7ff ffcd 	bl	800279c <HAL_RCC_GetHCLKFreq>
 8002802:	4601      	mov	r1, r0
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800280c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002810:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	fa92 f2a2 	rbit	r2, r2
 8002818:	603a      	str	r2, [r7, #0]
  return result;
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	fab2 f282 	clz	r2, r2
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	40d3      	lsrs	r3, r2
 8002824:	4a04      	ldr	r2, [pc, #16]	; (8002838 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002826:	5cd3      	ldrb	r3, [r2, r3]
 8002828:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	08007b64 	.word	0x08007b64

0800283c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	220f      	movs	r2, #15
 800284a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_RCC_GetClockConfig+0x5c>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0203 	and.w	r2, r3, #3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <HAL_RCC_GetClockConfig+0x5c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <HAL_RCC_GetClockConfig+0x5c>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_RCC_GetClockConfig+0x5c>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	08db      	lsrs	r3, r3, #3
 8002876:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800287e:	4b07      	ldr	r3, [pc, #28]	; (800289c <HAL_RCC_GetClockConfig+0x60>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0207 	and.w	r2, r3, #7
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	601a      	str	r2, [r3, #0]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	40022000 	.word	0x40022000

080028a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b092      	sub	sp, #72	; 0x48
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80028b0:	2300      	movs	r3, #0
 80028b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 80d4 	beq.w	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c4:	4b4e      	ldr	r3, [pc, #312]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10e      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d0:	4b4b      	ldr	r3, [pc, #300]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	4a4a      	ldr	r2, [pc, #296]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028da:	61d3      	str	r3, [r2, #28]
 80028dc:	4b48      	ldr	r3, [pc, #288]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e8:	2301      	movs	r3, #1
 80028ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ee:	4b45      	ldr	r3, [pc, #276]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d118      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028fa:	4b42      	ldr	r3, [pc, #264]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a41      	ldr	r2, [pc, #260]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002904:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002906:	f7fe fa95 	bl	8000e34 <HAL_GetTick>
 800290a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290c:	e008      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290e:	f7fe fa91 	bl	8000e34 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b64      	cmp	r3, #100	; 0x64
 800291a:	d901      	bls.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e14b      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002920:	4b38      	ldr	r3, [pc, #224]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f0      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800292c:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002934:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 8084 	beq.w	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002946:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002948:	429a      	cmp	r2, r3
 800294a:	d07c      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800294c:	4b2c      	ldr	r3, [pc, #176]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800295a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	461a      	mov	r2, r3
 8002976:	2301      	movs	r3, #1
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800297e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	461a      	mov	r2, r3
 800299a:	2300      	movs	r3, #0
 800299c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800299e:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029a2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d04b      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ae:	f7fe fa41 	bl	8000e34 <HAL_GetTick>
 80029b2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b4:	e00a      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b6:	f7fe fa3d 	bl	8000e34 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d901      	bls.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e0f5      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80029cc:	2302      	movs	r3, #2
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
 80029d8:	2302      	movs	r3, #2
 80029da:	623b      	str	r3, [r7, #32]
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	61fb      	str	r3, [r7, #28]
  return result;
 80029e4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e6:	fab3 f383 	clz	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	095b      	lsrs	r3, r3, #5
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d108      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80029fa:	4b01      	ldr	r3, [pc, #4]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	e00d      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40007000 	.word	0x40007000
 8002a08:	10908100 	.word	0x10908100
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	4b69      	ldr	r3, [pc, #420]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	613a      	str	r2, [r7, #16]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	fa92 f2a2 	rbit	r2, r2
 8002a26:	60fa      	str	r2, [r7, #12]
  return result;
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	fab2 f282 	clz	r2, r2
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	f002 021f 	and.w	r2, r2, #31
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0b7      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a46:	4b5e      	ldr	r3, [pc, #376]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	495b      	ldr	r1, [pc, #364]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d105      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a60:	4b57      	ldr	r3, [pc, #348]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	4a56      	ldr	r2, [pc, #344]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a78:	4b51      	ldr	r3, [pc, #324]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	f023 0203 	bic.w	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	494e      	ldr	r1, [pc, #312]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d008      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a96:	4b4a      	ldr	r3, [pc, #296]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f023 0210 	bic.w	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	4947      	ldr	r1, [pc, #284]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ab4:	4b42      	ldr	r3, [pc, #264]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	493f      	ldr	r1, [pc, #252]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d008      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ad2:	4b3b      	ldr	r3, [pc, #236]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f023 0220 	bic.w	r2, r3, #32
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	4938      	ldr	r1, [pc, #224]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002af0:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	4930      	ldr	r1, [pc, #192]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d008      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b0e:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	4929      	ldr	r1, [pc, #164]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d008      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002b2c:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	4921      	ldr	r1, [pc, #132]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d008      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	491a      	ldr	r1, [pc, #104]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002b68:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	4912      	ldr	r1, [pc, #72]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d008      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002b86:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	490b      	ldr	r1, [pc, #44]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	4903      	ldr	r1, [pc, #12]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3748      	adds	r7, #72	; 0x48
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e049      	b.n	8002c6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fd ff5e 	bl	8000aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4610      	mov	r0, r2
 8002c04:	f000 fa9a 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d001      	beq.n	8002c8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e03b      	b.n	8002d04 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a19      	ldr	r2, [pc, #100]	; (8002d10 <HAL_TIM_Base_Start_IT+0x9c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d009      	beq.n	8002cc2 <HAL_TIM_Base_Start_IT+0x4e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb6:	d004      	beq.n	8002cc2 <HAL_TIM_Base_Start_IT+0x4e>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <HAL_TIM_Base_Start_IT+0xa0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d115      	bne.n	8002cee <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <HAL_TIM_Base_Start_IT+0xa4>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b06      	cmp	r3, #6
 8002cd2:	d015      	beq.n	8002d00 <HAL_TIM_Base_Start_IT+0x8c>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cda:	d011      	beq.n	8002d00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cec:	e008      	b.n	8002d00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0201 	orr.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	e000      	b.n	8002d02 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	40012c00 	.word	0x40012c00
 8002d14:	40014000 	.word	0x40014000
 8002d18:	00010007 	.word	0x00010007

08002d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d122      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d11b      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0202 	mvn.w	r2, #2
 8002d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f9ce 	bl	8003100 <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f9c0 	bl	80030ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f9d1 	bl	8003114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d122      	bne.n	8002dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d11b      	bne.n	8002dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0204 	mvn.w	r2, #4
 8002d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f9a4 	bl	8003100 <HAL_TIM_IC_CaptureCallback>
 8002db8:	e005      	b.n	8002dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f996 	bl	80030ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f9a7 	bl	8003114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d122      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d11b      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0208 	mvn.w	r2, #8
 8002df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2204      	movs	r2, #4
 8002df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f97a 	bl	8003100 <HAL_TIM_IC_CaptureCallback>
 8002e0c:	e005      	b.n	8002e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f96c 	bl	80030ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f97d 	bl	8003114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d122      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b10      	cmp	r3, #16
 8002e3a:	d11b      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0210 	mvn.w	r2, #16
 8002e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2208      	movs	r2, #8
 8002e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f950 	bl	8003100 <HAL_TIM_IC_CaptureCallback>
 8002e60:	e005      	b.n	8002e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f942 	bl	80030ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f953 	bl	8003114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d10e      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d107      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0201 	mvn.w	r2, #1
 8002e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd fdb8 	bl	8000a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eaa:	2b80      	cmp	r3, #128	; 0x80
 8002eac:	d10e      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb8:	2b80      	cmp	r3, #128	; 0x80
 8002eba:	d107      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fab0 	bl	800342c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eda:	d10e      	bne.n	8002efa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee6:	2b80      	cmp	r3, #128	; 0x80
 8002ee8:	d107      	bne.n	8002efa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 faa3 	bl	8003440 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f04:	2b40      	cmp	r3, #64	; 0x40
 8002f06:	d10e      	bne.n	8002f26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b40      	cmp	r3, #64	; 0x40
 8002f14:	d107      	bne.n	8002f26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f901 	bl	8003128 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d10e      	bne.n	8002f52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d107      	bne.n	8002f52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f06f 0220 	mvn.w	r2, #32
 8002f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fa63 	bl	8003418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_TIM_ConfigClockSource+0x1c>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e0b6      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x18a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2202      	movs	r2, #2
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f94:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f98:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fa0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb2:	d03e      	beq.n	8003032 <HAL_TIM_ConfigClockSource+0xd8>
 8002fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb8:	f200 8087 	bhi.w	80030ca <HAL_TIM_ConfigClockSource+0x170>
 8002fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc0:	f000 8086 	beq.w	80030d0 <HAL_TIM_ConfigClockSource+0x176>
 8002fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc8:	d87f      	bhi.n	80030ca <HAL_TIM_ConfigClockSource+0x170>
 8002fca:	2b70      	cmp	r3, #112	; 0x70
 8002fcc:	d01a      	beq.n	8003004 <HAL_TIM_ConfigClockSource+0xaa>
 8002fce:	2b70      	cmp	r3, #112	; 0x70
 8002fd0:	d87b      	bhi.n	80030ca <HAL_TIM_ConfigClockSource+0x170>
 8002fd2:	2b60      	cmp	r3, #96	; 0x60
 8002fd4:	d050      	beq.n	8003078 <HAL_TIM_ConfigClockSource+0x11e>
 8002fd6:	2b60      	cmp	r3, #96	; 0x60
 8002fd8:	d877      	bhi.n	80030ca <HAL_TIM_ConfigClockSource+0x170>
 8002fda:	2b50      	cmp	r3, #80	; 0x50
 8002fdc:	d03c      	beq.n	8003058 <HAL_TIM_ConfigClockSource+0xfe>
 8002fde:	2b50      	cmp	r3, #80	; 0x50
 8002fe0:	d873      	bhi.n	80030ca <HAL_TIM_ConfigClockSource+0x170>
 8002fe2:	2b40      	cmp	r3, #64	; 0x40
 8002fe4:	d058      	beq.n	8003098 <HAL_TIM_ConfigClockSource+0x13e>
 8002fe6:	2b40      	cmp	r3, #64	; 0x40
 8002fe8:	d86f      	bhi.n	80030ca <HAL_TIM_ConfigClockSource+0x170>
 8002fea:	2b30      	cmp	r3, #48	; 0x30
 8002fec:	d064      	beq.n	80030b8 <HAL_TIM_ConfigClockSource+0x15e>
 8002fee:	2b30      	cmp	r3, #48	; 0x30
 8002ff0:	d86b      	bhi.n	80030ca <HAL_TIM_ConfigClockSource+0x170>
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d060      	beq.n	80030b8 <HAL_TIM_ConfigClockSource+0x15e>
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	d867      	bhi.n	80030ca <HAL_TIM_ConfigClockSource+0x170>
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d05c      	beq.n	80030b8 <HAL_TIM_ConfigClockSource+0x15e>
 8002ffe:	2b10      	cmp	r3, #16
 8003000:	d05a      	beq.n	80030b8 <HAL_TIM_ConfigClockSource+0x15e>
 8003002:	e062      	b.n	80030ca <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003014:	f000 f97a 	bl	800330c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003026:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	609a      	str	r2, [r3, #8]
      break;
 8003030:	e04f      	b.n	80030d2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003042:	f000 f963 	bl	800330c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003054:	609a      	str	r2, [r3, #8]
      break;
 8003056:	e03c      	b.n	80030d2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003064:	461a      	mov	r2, r3
 8003066:	f000 f8d7 	bl	8003218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2150      	movs	r1, #80	; 0x50
 8003070:	4618      	mov	r0, r3
 8003072:	f000 f930 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 8003076:	e02c      	b.n	80030d2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003084:	461a      	mov	r2, r3
 8003086:	f000 f8f6 	bl	8003276 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2160      	movs	r1, #96	; 0x60
 8003090:	4618      	mov	r0, r3
 8003092:	f000 f920 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 8003096:	e01c      	b.n	80030d2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a4:	461a      	mov	r2, r3
 80030a6:	f000 f8b7 	bl	8003218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2140      	movs	r1, #64	; 0x40
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 f910 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 80030b6:	e00c      	b.n	80030d2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4619      	mov	r1, r3
 80030c2:	4610      	mov	r0, r2
 80030c4:	f000 f907 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 80030c8:	e003      	b.n	80030d2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
      break;
 80030ce:	e000      	b.n	80030d2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80030d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a2e      	ldr	r2, [pc, #184]	; (8003208 <TIM_Base_SetConfig+0xcc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d003      	beq.n	800315c <TIM_Base_SetConfig+0x20>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315a:	d108      	bne.n	800316e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a25      	ldr	r2, [pc, #148]	; (8003208 <TIM_Base_SetConfig+0xcc>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00f      	beq.n	8003196 <TIM_Base_SetConfig+0x5a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317c:	d00b      	beq.n	8003196 <TIM_Base_SetConfig+0x5a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a22      	ldr	r2, [pc, #136]	; (800320c <TIM_Base_SetConfig+0xd0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d007      	beq.n	8003196 <TIM_Base_SetConfig+0x5a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a21      	ldr	r2, [pc, #132]	; (8003210 <TIM_Base_SetConfig+0xd4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d003      	beq.n	8003196 <TIM_Base_SetConfig+0x5a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a20      	ldr	r2, [pc, #128]	; (8003214 <TIM_Base_SetConfig+0xd8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d108      	bne.n	80031a8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a0e      	ldr	r2, [pc, #56]	; (8003208 <TIM_Base_SetConfig+0xcc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00b      	beq.n	80031ec <TIM_Base_SetConfig+0xb0>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a0d      	ldr	r2, [pc, #52]	; (800320c <TIM_Base_SetConfig+0xd0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d007      	beq.n	80031ec <TIM_Base_SetConfig+0xb0>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a0c      	ldr	r2, [pc, #48]	; (8003210 <TIM_Base_SetConfig+0xd4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d003      	beq.n	80031ec <TIM_Base_SetConfig+0xb0>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <TIM_Base_SetConfig+0xd8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d103      	bne.n	80031f4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	615a      	str	r2, [r3, #20]
}
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40012c00 	.word	0x40012c00
 800320c:	40014000 	.word	0x40014000
 8003210:	40014400 	.word	0x40014400
 8003214:	40014800 	.word	0x40014800

08003218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	f023 0201 	bic.w	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f023 030a 	bic.w	r3, r3, #10
 8003254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	621a      	str	r2, [r3, #32]
}
 800326a:	bf00      	nop
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003276:	b480      	push	{r7}
 8003278:	b087      	sub	sp, #28
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f023 0210 	bic.w	r2, r3, #16
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	031b      	lsls	r3, r3, #12
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	621a      	str	r2, [r3, #32]
}
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b085      	sub	sp, #20
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f043 0307 	orr.w	r3, r3, #7
 80032f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	609a      	str	r2, [r3, #8]
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003326:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	021a      	lsls	r2, r3, #8
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	431a      	orrs	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4313      	orrs	r3, r2
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4313      	orrs	r3, r2
 8003338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	609a      	str	r2, [r3, #8]
}
 8003340:	bf00      	nop
 8003342:	371c      	adds	r7, #28
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003360:	2302      	movs	r3, #2
 8003362:	e04f      	b.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a21      	ldr	r2, [pc, #132]	; (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d108      	bne.n	80033a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003394:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a14      	ldr	r2, [pc, #80]	; (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d009      	beq.n	80033d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033cc:	d004      	beq.n	80033d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a10      	ldr	r2, [pc, #64]	; (8003414 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d10c      	bne.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40014000 	.word	0x40014000

08003418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e040      	b.n	80034e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fd fb58 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2224      	movs	r2, #36	; 0x24
 8003480:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f980 	bl	8003798 <UART_SetConfig>
 8003498:	4603      	mov	r3, r0
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e022      	b.n	80034e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 faaa 	bl	8003a04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 fb31 	bl	8003b48 <UART_CheckIdleState>
 80034e6:	4603      	mov	r3, r0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	; 0x28
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	4613      	mov	r3, r2
 80034fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003504:	2b20      	cmp	r3, #32
 8003506:	d178      	bne.n	80035fa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_UART_Transmit+0x24>
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e071      	b.n	80035fc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2221      	movs	r2, #33	; 0x21
 8003524:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003526:	f7fd fc85 	bl	8000e34 <HAL_GetTick>
 800352a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	88fa      	ldrh	r2, [r7, #6]
 8003530:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	88fa      	ldrh	r2, [r7, #6]
 8003538:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003544:	d108      	bne.n	8003558 <HAL_UART_Transmit+0x68>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d104      	bne.n	8003558 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	e003      	b.n	8003560 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800355c:	2300      	movs	r3, #0
 800355e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003560:	e030      	b.n	80035c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2200      	movs	r2, #0
 800356a:	2180      	movs	r1, #128	; 0x80
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fb93 	bl	8003c98 <UART_WaitOnFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d004      	beq.n	8003582 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e03c      	b.n	80035fc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10b      	bne.n	80035a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	881a      	ldrh	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003594:	b292      	uxth	r2, r2
 8003596:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	3302      	adds	r3, #2
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	e008      	b.n	80035b2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	781a      	ldrb	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	b292      	uxth	r2, r2
 80035aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	3301      	adds	r3, #1
 80035b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1c8      	bne.n	8003562 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2200      	movs	r2, #0
 80035d8:	2140      	movs	r1, #64	; 0x40
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 fb5c 	bl	8003c98 <UART_WaitOnFlagUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d004      	beq.n	80035f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e005      	b.n	80035fc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	e000      	b.n	80035fc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80035fa:	2302      	movs	r3, #2
  }
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3720      	adds	r7, #32
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	; 0x28
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800361a:	2b20      	cmp	r3, #32
 800361c:	f040 80b6 	bne.w	800378c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_UART_Receive+0x28>
 8003626:	88fb      	ldrh	r3, [r7, #6]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0ae      	b.n	800378e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2222      	movs	r2, #34	; 0x22
 800363c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003646:	f7fd fbf5 	bl	8000e34 <HAL_GetTick>
 800364a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	88fa      	ldrh	r2, [r7, #6]
 8003650:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	88fa      	ldrh	r2, [r7, #6]
 8003658:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003664:	d10e      	bne.n	8003684 <HAL_UART_Receive+0x80>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d105      	bne.n	800367a <HAL_UART_Receive+0x76>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003674:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003678:	e02d      	b.n	80036d6 <HAL_UART_Receive+0xd2>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	22ff      	movs	r2, #255	; 0xff
 800367e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003682:	e028      	b.n	80036d6 <HAL_UART_Receive+0xd2>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10d      	bne.n	80036a8 <HAL_UART_Receive+0xa4>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d104      	bne.n	800369e <HAL_UART_Receive+0x9a>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	22ff      	movs	r2, #255	; 0xff
 8003698:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800369c:	e01b      	b.n	80036d6 <HAL_UART_Receive+0xd2>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	227f      	movs	r2, #127	; 0x7f
 80036a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036a6:	e016      	b.n	80036d6 <HAL_UART_Receive+0xd2>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036b0:	d10d      	bne.n	80036ce <HAL_UART_Receive+0xca>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d104      	bne.n	80036c4 <HAL_UART_Receive+0xc0>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	227f      	movs	r2, #127	; 0x7f
 80036be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036c2:	e008      	b.n	80036d6 <HAL_UART_Receive+0xd2>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	223f      	movs	r2, #63	; 0x3f
 80036c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036cc:	e003      	b.n	80036d6 <HAL_UART_Receive+0xd2>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80036dc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e6:	d108      	bne.n	80036fa <HAL_UART_Receive+0xf6>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d104      	bne.n	80036fa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	61bb      	str	r3, [r7, #24]
 80036f8:	e003      	b.n	8003702 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003702:	e037      	b.n	8003774 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2200      	movs	r2, #0
 800370c:	2120      	movs	r1, #32
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 fac2 	bl	8003c98 <UART_WaitOnFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e033      	b.n	800378e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10c      	bne.n	8003746 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003732:	b29a      	uxth	r2, r3
 8003734:	8a7b      	ldrh	r3, [r7, #18]
 8003736:	4013      	ands	r3, r2
 8003738:	b29a      	uxth	r2, r3
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	3302      	adds	r3, #2
 8003742:	61bb      	str	r3, [r7, #24]
 8003744:	e00d      	b.n	8003762 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800374c:	b29b      	uxth	r3, r3
 800374e:	b2da      	uxtb	r2, r3
 8003750:	8a7b      	ldrh	r3, [r7, #18]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	4013      	ands	r3, r2
 8003756:	b2da      	uxtb	r2, r3
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	3301      	adds	r3, #1
 8003760:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1c1      	bne.n	8003704 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	e000      	b.n	800378e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800378c:	2302      	movs	r3, #2
  }
}
 800378e:	4618      	mov	r0, r3
 8003790:	3720      	adds	r7, #32
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	4b8a      	ldr	r3, [pc, #552]	; (80039ec <UART_SetConfig+0x254>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	6979      	ldr	r1, [r7, #20]
 80037cc:	430b      	orrs	r3, r1
 80037ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	430a      	orrs	r2, r1
 8003808:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a78      	ldr	r2, [pc, #480]	; (80039f0 <UART_SetConfig+0x258>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d120      	bne.n	8003856 <UART_SetConfig+0xbe>
 8003814:	4b77      	ldr	r3, [pc, #476]	; (80039f4 <UART_SetConfig+0x25c>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	2b03      	cmp	r3, #3
 800381e:	d817      	bhi.n	8003850 <UART_SetConfig+0xb8>
 8003820:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <UART_SetConfig+0x90>)
 8003822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003826:	bf00      	nop
 8003828:	08003839 	.word	0x08003839
 800382c:	08003845 	.word	0x08003845
 8003830:	0800384b 	.word	0x0800384b
 8003834:	0800383f 	.word	0x0800383f
 8003838:	2300      	movs	r3, #0
 800383a:	77fb      	strb	r3, [r7, #31]
 800383c:	e01d      	b.n	800387a <UART_SetConfig+0xe2>
 800383e:	2302      	movs	r3, #2
 8003840:	77fb      	strb	r3, [r7, #31]
 8003842:	e01a      	b.n	800387a <UART_SetConfig+0xe2>
 8003844:	2304      	movs	r3, #4
 8003846:	77fb      	strb	r3, [r7, #31]
 8003848:	e017      	b.n	800387a <UART_SetConfig+0xe2>
 800384a:	2308      	movs	r3, #8
 800384c:	77fb      	strb	r3, [r7, #31]
 800384e:	e014      	b.n	800387a <UART_SetConfig+0xe2>
 8003850:	2310      	movs	r3, #16
 8003852:	77fb      	strb	r3, [r7, #31]
 8003854:	e011      	b.n	800387a <UART_SetConfig+0xe2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a67      	ldr	r2, [pc, #412]	; (80039f8 <UART_SetConfig+0x260>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d102      	bne.n	8003866 <UART_SetConfig+0xce>
 8003860:	2300      	movs	r3, #0
 8003862:	77fb      	strb	r3, [r7, #31]
 8003864:	e009      	b.n	800387a <UART_SetConfig+0xe2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a64      	ldr	r2, [pc, #400]	; (80039fc <UART_SetConfig+0x264>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d102      	bne.n	8003876 <UART_SetConfig+0xde>
 8003870:	2300      	movs	r3, #0
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	e001      	b.n	800387a <UART_SetConfig+0xe2>
 8003876:	2310      	movs	r3, #16
 8003878:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003882:	d15a      	bne.n	800393a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003884:	7ffb      	ldrb	r3, [r7, #31]
 8003886:	2b08      	cmp	r3, #8
 8003888:	d827      	bhi.n	80038da <UART_SetConfig+0x142>
 800388a:	a201      	add	r2, pc, #4	; (adr r2, 8003890 <UART_SetConfig+0xf8>)
 800388c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003890:	080038b5 	.word	0x080038b5
 8003894:	080038bd 	.word	0x080038bd
 8003898:	080038c5 	.word	0x080038c5
 800389c:	080038db 	.word	0x080038db
 80038a0:	080038cb 	.word	0x080038cb
 80038a4:	080038db 	.word	0x080038db
 80038a8:	080038db 	.word	0x080038db
 80038ac:	080038db 	.word	0x080038db
 80038b0:	080038d3 	.word	0x080038d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b4:	f7fe ff7e 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 80038b8:	61b8      	str	r0, [r7, #24]
        break;
 80038ba:	e013      	b.n	80038e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038bc:	f7fe ff9c 	bl	80027f8 <HAL_RCC_GetPCLK2Freq>
 80038c0:	61b8      	str	r0, [r7, #24]
        break;
 80038c2:	e00f      	b.n	80038e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c4:	4b4e      	ldr	r3, [pc, #312]	; (8003a00 <UART_SetConfig+0x268>)
 80038c6:	61bb      	str	r3, [r7, #24]
        break;
 80038c8:	e00c      	b.n	80038e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ca:	f7fe fefd 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 80038ce:	61b8      	str	r0, [r7, #24]
        break;
 80038d0:	e008      	b.n	80038e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d6:	61bb      	str	r3, [r7, #24]
        break;
 80038d8:	e004      	b.n	80038e4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	77bb      	strb	r3, [r7, #30]
        break;
 80038e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d074      	beq.n	80039d4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	005a      	lsls	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	085b      	lsrs	r3, r3, #1
 80038f4:	441a      	add	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b0f      	cmp	r3, #15
 8003904:	d916      	bls.n	8003934 <UART_SetConfig+0x19c>
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390c:	d212      	bcs.n	8003934 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	b29b      	uxth	r3, r3
 8003912:	f023 030f 	bic.w	r3, r3, #15
 8003916:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	085b      	lsrs	r3, r3, #1
 800391c:	b29b      	uxth	r3, r3
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	b29a      	uxth	r2, r3
 8003924:	89fb      	ldrh	r3, [r7, #14]
 8003926:	4313      	orrs	r3, r2
 8003928:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	89fa      	ldrh	r2, [r7, #14]
 8003930:	60da      	str	r2, [r3, #12]
 8003932:	e04f      	b.n	80039d4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	77bb      	strb	r3, [r7, #30]
 8003938:	e04c      	b.n	80039d4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800393a:	7ffb      	ldrb	r3, [r7, #31]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d828      	bhi.n	8003992 <UART_SetConfig+0x1fa>
 8003940:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <UART_SetConfig+0x1b0>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	0800396d 	.word	0x0800396d
 800394c:	08003975 	.word	0x08003975
 8003950:	0800397d 	.word	0x0800397d
 8003954:	08003993 	.word	0x08003993
 8003958:	08003983 	.word	0x08003983
 800395c:	08003993 	.word	0x08003993
 8003960:	08003993 	.word	0x08003993
 8003964:	08003993 	.word	0x08003993
 8003968:	0800398b 	.word	0x0800398b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800396c:	f7fe ff22 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 8003970:	61b8      	str	r0, [r7, #24]
        break;
 8003972:	e013      	b.n	800399c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003974:	f7fe ff40 	bl	80027f8 <HAL_RCC_GetPCLK2Freq>
 8003978:	61b8      	str	r0, [r7, #24]
        break;
 800397a:	e00f      	b.n	800399c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800397c:	4b20      	ldr	r3, [pc, #128]	; (8003a00 <UART_SetConfig+0x268>)
 800397e:	61bb      	str	r3, [r7, #24]
        break;
 8003980:	e00c      	b.n	800399c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003982:	f7fe fea1 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8003986:	61b8      	str	r0, [r7, #24]
        break;
 8003988:	e008      	b.n	800399c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800398a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800398e:	61bb      	str	r3, [r7, #24]
        break;
 8003990:	e004      	b.n	800399c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	77bb      	strb	r3, [r7, #30]
        break;
 800399a:	bf00      	nop
    }

    if (pclk != 0U)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d018      	beq.n	80039d4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	085a      	lsrs	r2, r3, #1
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	441a      	add	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b0f      	cmp	r3, #15
 80039ba:	d909      	bls.n	80039d0 <UART_SetConfig+0x238>
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c2:	d205      	bcs.n	80039d0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60da      	str	r2, [r3, #12]
 80039ce:	e001      	b.n	80039d4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80039e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3720      	adds	r7, #32
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	efff69f3 	.word	0xefff69f3
 80039f0:	40013800 	.word	0x40013800
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40004400 	.word	0x40004400
 80039fc:	40004800 	.word	0x40004800
 8003a00:	007a1200 	.word	0x007a1200

08003a04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01a      	beq.n	8003b1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b02:	d10a      	bne.n	8003b1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	605a      	str	r2, [r3, #4]
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b098      	sub	sp, #96	; 0x60
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b58:	f7fd f96c 	bl	8000e34 <HAL_GetTick>
 8003b5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d12e      	bne.n	8003bca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b74:	2200      	movs	r2, #0
 8003b76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f88c 	bl	8003c98 <UART_WaitOnFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d021      	beq.n	8003bca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	e853 3f00 	ldrex	r3, [r3]
 8003b92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b9a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ba6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e6      	bne.n	8003b86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e062      	b.n	8003c90 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d149      	bne.n	8003c6c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be0:	2200      	movs	r2, #0
 8003be2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f856 	bl	8003c98 <UART_WaitOnFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d03c      	beq.n	8003c6c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	623b      	str	r3, [r7, #32]
   return(result);
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c10:	633b      	str	r3, [r7, #48]	; 0x30
 8003c12:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c18:	e841 2300 	strex	r3, r2, [r1]
 8003c1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e6      	bne.n	8003bf2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3308      	adds	r3, #8
 8003c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3308      	adds	r3, #8
 8003c42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c44:	61fa      	str	r2, [r7, #28]
 8003c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	69b9      	ldr	r1, [r7, #24]
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	617b      	str	r3, [r7, #20]
   return(result);
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e5      	bne.n	8003c24 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e011      	b.n	8003c90 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3758      	adds	r7, #88	; 0x58
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca8:	e049      	b.n	8003d3e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cb0:	d045      	beq.n	8003d3e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb2:	f7fd f8bf 	bl	8000e34 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d302      	bcc.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e048      	b.n	8003d5e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d031      	beq.n	8003d3e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d110      	bne.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2208      	movs	r2, #8
 8003cee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f838 	bl	8003d66 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e029      	b.n	8003d5e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d18:	d111      	bne.n	8003d3e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f81e 	bl	8003d66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e00f      	b.n	8003d5e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	69da      	ldr	r2, [r3, #28]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4013      	ands	r3, r2
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	bf0c      	ite	eq
 8003d4e:	2301      	moveq	r3, #1
 8003d50:	2300      	movne	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	461a      	mov	r2, r3
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d0a6      	beq.n	8003caa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b095      	sub	sp, #84	; 0x54
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d8e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e6      	bne.n	8003d6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3308      	adds	r3, #8
 8003da6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dc8:	e841 2300 	strex	r3, r2, [r1]
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e5      	bne.n	8003da0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d118      	bne.n	8003e0e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f023 0310 	bic.w	r3, r3, #16
 8003df0:	647b      	str	r3, [r7, #68]	; 0x44
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dfa:	61bb      	str	r3, [r7, #24]
 8003dfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	6979      	ldr	r1, [r7, #20]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	613b      	str	r3, [r7, #16]
   return(result);
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e6      	bne.n	8003ddc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e22:	bf00      	nop
 8003e24:	3754      	adds	r7, #84	; 0x54
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e36:	f3ef 8305 	mrs	r3, IPSR
 8003e3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10f      	bne.n	8003e62 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e42:	f3ef 8310 	mrs	r3, PRIMASK
 8003e46:	607b      	str	r3, [r7, #4]
  return(result);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <osKernelInitialize+0x32>
 8003e4e:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <osKernelInitialize+0x64>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d109      	bne.n	8003e6a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e56:	f3ef 8311 	mrs	r3, BASEPRI
 8003e5a:	603b      	str	r3, [r7, #0]
  return(result);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003e62:	f06f 0305 	mvn.w	r3, #5
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	e00c      	b.n	8003e84 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <osKernelInitialize+0x64>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d105      	bne.n	8003e7e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003e72:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <osKernelInitialize+0x64>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	e002      	b.n	8003e84 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e82:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003e84:	68fb      	ldr	r3, [r7, #12]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	200001b8 	.word	0x200001b8

08003e98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e9e:	f3ef 8305 	mrs	r3, IPSR
 8003ea2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10f      	bne.n	8003eca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8003eae:	607b      	str	r3, [r7, #4]
  return(result);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <osKernelStart+0x32>
 8003eb6:	4b11      	ldr	r3, [pc, #68]	; (8003efc <osKernelStart+0x64>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d109      	bne.n	8003ed2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ebe:	f3ef 8311 	mrs	r3, BASEPRI
 8003ec2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003eca:	f06f 0305 	mvn.w	r3, #5
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	e00e      	b.n	8003ef0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <osKernelStart+0x64>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d107      	bne.n	8003eea <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003eda:	4b08      	ldr	r3, [pc, #32]	; (8003efc <osKernelStart+0x64>)
 8003edc:	2202      	movs	r2, #2
 8003ede:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003ee0:	f001 fb60 	bl	80055a4 <vTaskStartScheduler>
      stat = osOK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	e002      	b.n	8003ef0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003eee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	200001b8 	.word	0x200001b8

08003f00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b092      	sub	sp, #72	; 0x48
 8003f04:	af04      	add	r7, sp, #16
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f10:	f3ef 8305 	mrs	r3, IPSR
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f040 8094 	bne.w	8004046 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f22:	623b      	str	r3, [r7, #32]
  return(result);
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f040 808d 	bne.w	8004046 <osThreadNew+0x146>
 8003f2c:	4b48      	ldr	r3, [pc, #288]	; (8004050 <osThreadNew+0x150>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d106      	bne.n	8003f42 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f34:	f3ef 8311 	mrs	r3, BASEPRI
 8003f38:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f040 8082 	bne.w	8004046 <osThreadNew+0x146>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d07e      	beq.n	8004046 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003f4c:	2318      	movs	r3, #24
 8003f4e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003f50:	2300      	movs	r3, #0
 8003f52:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003f54:	f107 031b 	add.w	r3, r7, #27
 8003f58:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f5e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d045      	beq.n	8003ff2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <osThreadNew+0x74>
        name = attr->name;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <osThreadNew+0x9a>
 8003f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8a:	2b38      	cmp	r3, #56	; 0x38
 8003f8c:	d805      	bhi.n	8003f9a <osThreadNew+0x9a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <osThreadNew+0x9e>
        return (NULL);
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e054      	b.n	8004048 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	089b      	lsrs	r3, r3, #2
 8003fac:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00e      	beq.n	8003fd4 <osThreadNew+0xd4>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	2ba7      	cmp	r3, #167	; 0xa7
 8003fbc:	d90a      	bls.n	8003fd4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d006      	beq.n	8003fd4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <osThreadNew+0xd4>
        mem = 1;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd2:	e010      	b.n	8003ff6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10c      	bne.n	8003ff6 <osThreadNew+0xf6>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d108      	bne.n	8003ff6 <osThreadNew+0xf6>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d104      	bne.n	8003ff6 <osThreadNew+0xf6>
          mem = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff0:	e001      	b.n	8003ff6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d110      	bne.n	800401e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004004:	9202      	str	r2, [sp, #8]
 8004006:	9301      	str	r3, [sp, #4]
 8004008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004010:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f001 f8e2 	bl	80051dc <xTaskCreateStatic>
 8004018:	4603      	mov	r3, r0
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	e013      	b.n	8004046 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	2b00      	cmp	r3, #0
 8004022:	d110      	bne.n	8004046 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004026:	b29a      	uxth	r2, r3
 8004028:	f107 0314 	add.w	r3, r7, #20
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f001 f92c 	bl	8005294 <xTaskCreate>
 800403c:	4603      	mov	r3, r0
 800403e:	2b01      	cmp	r3, #1
 8004040:	d001      	beq.n	8004046 <osThreadNew+0x146>
          hTask = NULL;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004046:	697b      	ldr	r3, [r7, #20]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3738      	adds	r7, #56	; 0x38
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	200001b8 	.word	0x200001b8

08004054 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800405a:	f3ef 8305 	mrs	r3, IPSR
 800405e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004060:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10f      	bne.n	8004086 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004066:	f3ef 8310 	mrs	r3, PRIMASK
 800406a:	607b      	str	r3, [r7, #4]
  return(result);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <osThreadYield+0x32>
 8004072:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <osThreadYield+0x5c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d109      	bne.n	800408e <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800407a:	f3ef 8311 	mrs	r3, BASEPRI
 800407e:	603b      	str	r3, [r7, #0]
  return(result);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <osThreadYield+0x3a>
    stat = osErrorISR;
 8004086:	f06f 0305 	mvn.w	r3, #5
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	e009      	b.n	80040a2 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8004092:	4b08      	ldr	r3, [pc, #32]	; (80040b4 <osThreadYield+0x60>)
 8004094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80040a2:	68fb      	ldr	r3, [r7, #12]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	200001b8 	.word	0x200001b8
 80040b4:	e000ed04 	.word	0xe000ed04

080040b8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040c0:	f3ef 8305 	mrs	r3, IPSR
 80040c4:	613b      	str	r3, [r7, #16]
  return(result);
 80040c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10f      	bne.n	80040ec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040cc:	f3ef 8310 	mrs	r3, PRIMASK
 80040d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d109      	bne.n	80040ec <osDelay+0x34>
 80040d8:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <osDelay+0x58>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d109      	bne.n	80040f4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040e0:	f3ef 8311 	mrs	r3, BASEPRI
 80040e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <osDelay+0x3c>
    stat = osErrorISR;
 80040ec:	f06f 0305 	mvn.w	r3, #5
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	e007      	b.n	8004104 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <osDelay+0x4c>
      vTaskDelay(ticks);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f001 fa1c 	bl	800553c <vTaskDelay>
    }
  }

  return (stat);
 8004104:	697b      	ldr	r3, [r7, #20]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	200001b8 	.word	0x200001b8

08004114 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004114:	b580      	push	{r7, lr}
 8004116:	b08c      	sub	sp, #48	; 0x30
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004120:	2300      	movs	r3, #0
 8004122:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004124:	f3ef 8305 	mrs	r3, IPSR
 8004128:	61bb      	str	r3, [r7, #24]
  return(result);
 800412a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800412c:	2b00      	cmp	r3, #0
 800412e:	d16f      	bne.n	8004210 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004130:	f3ef 8310 	mrs	r3, PRIMASK
 8004134:	617b      	str	r3, [r7, #20]
  return(result);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d169      	bne.n	8004210 <osMessageQueueNew+0xfc>
 800413c:	4b37      	ldr	r3, [pc, #220]	; (800421c <osMessageQueueNew+0x108>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d105      	bne.n	8004150 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004144:	f3ef 8311 	mrs	r3, BASEPRI
 8004148:	613b      	str	r3, [r7, #16]
  return(result);
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d15f      	bne.n	8004210 <osMessageQueueNew+0xfc>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d05c      	beq.n	8004210 <osMessageQueueNew+0xfc>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d059      	beq.n	8004210 <osMessageQueueNew+0xfc>
    mem = -1;
 800415c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004160:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d029      	beq.n	80041bc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d012      	beq.n	8004196 <osMessageQueueNew+0x82>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b4f      	cmp	r3, #79	; 0x4f
 8004176:	d90e      	bls.n	8004196 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	429a      	cmp	r2, r3
 800418e:	d302      	bcc.n	8004196 <osMessageQueueNew+0x82>
        mem = 1;
 8004190:	2301      	movs	r3, #1
 8004192:	623b      	str	r3, [r7, #32]
 8004194:	e014      	b.n	80041c0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d110      	bne.n	80041c0 <osMessageQueueNew+0xac>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10c      	bne.n	80041c0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d108      	bne.n	80041c0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d104      	bne.n	80041c0 <osMessageQueueNew+0xac>
          mem = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	623b      	str	r3, [r7, #32]
 80041ba:	e001      	b.n	80041c0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d10b      	bne.n	80041de <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2100      	movs	r1, #0
 80041d0:	9100      	str	r1, [sp, #0]
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fa8b 	bl	80046f0 <xQueueGenericCreateStatic>
 80041da:	6278      	str	r0, [r7, #36]	; 0x24
 80041dc:	e008      	b.n	80041f0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d105      	bne.n	80041f0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80041e4:	2200      	movs	r2, #0
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 faf8 	bl	80047de <xQueueGenericCreate>
 80041ee:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00c      	beq.n	8004210 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <osMessageQueueNew+0xf0>
        name = attr->name;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	e001      	b.n	8004208 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004204:	2300      	movs	r3, #0
 8004206:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004208:	69f9      	ldr	r1, [r7, #28]
 800420a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800420c:	f000 ff88 	bl	8005120 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004212:	4618      	mov	r0, r3
 8004214:	3728      	adds	r7, #40	; 0x28
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	200001b8 	.word	0x200001b8

08004220 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004220:	b580      	push	{r7, lr}
 8004222:	b08a      	sub	sp, #40	; 0x28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004234:	2300      	movs	r3, #0
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004238:	f3ef 8305 	mrs	r3, IPSR
 800423c:	61fb      	str	r3, [r7, #28]
  return(result);
 800423e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10f      	bne.n	8004264 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004244:	f3ef 8310 	mrs	r3, PRIMASK
 8004248:	61bb      	str	r3, [r7, #24]
  return(result);
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d109      	bne.n	8004264 <osMessageQueuePut+0x44>
 8004250:	4b2b      	ldr	r3, [pc, #172]	; (8004300 <osMessageQueuePut+0xe0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d12e      	bne.n	80042b6 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004258:	f3ef 8311 	mrs	r3, BASEPRI
 800425c:	617b      	str	r3, [r7, #20]
  return(result);
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d028      	beq.n	80042b6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d005      	beq.n	8004276 <osMessageQueuePut+0x56>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <osMessageQueuePut+0x56>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004276:	f06f 0303 	mvn.w	r3, #3
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800427c:	e039      	b.n	80042f2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800427e:	2300      	movs	r3, #0
 8004280:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004282:	f107 0210 	add.w	r2, r7, #16
 8004286:	2300      	movs	r3, #0
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	6a38      	ldr	r0, [r7, #32]
 800428c:	f000 fc06 	bl	8004a9c <xQueueGenericSendFromISR>
 8004290:	4603      	mov	r3, r0
 8004292:	2b01      	cmp	r3, #1
 8004294:	d003      	beq.n	800429e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004296:	f06f 0302 	mvn.w	r3, #2
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800429c:	e029      	b.n	80042f2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d026      	beq.n	80042f2 <osMessageQueuePut+0xd2>
 80042a4:	4b17      	ldr	r3, [pc, #92]	; (8004304 <osMessageQueuePut+0xe4>)
 80042a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80042b4:	e01d      	b.n	80042f2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <osMessageQueuePut+0xa2>
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d103      	bne.n	80042ca <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80042c2:	f06f 0303 	mvn.w	r3, #3
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
 80042c8:	e014      	b.n	80042f4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80042ca:	2300      	movs	r3, #0
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	68b9      	ldr	r1, [r7, #8]
 80042d0:	6a38      	ldr	r0, [r7, #32]
 80042d2:	f000 fae5 	bl	80048a0 <xQueueGenericSend>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d00b      	beq.n	80042f4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80042e2:	f06f 0301 	mvn.w	r3, #1
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
 80042e8:	e004      	b.n	80042f4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80042ea:	f06f 0302 	mvn.w	r3, #2
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
 80042f0:	e000      	b.n	80042f4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80042f2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3728      	adds	r7, #40	; 0x28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	200001b8 	.word	0x200001b8
 8004304:	e000ed04 	.word	0xe000ed04

08004308 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004308:	b580      	push	{r7, lr}
 800430a:	b08a      	sub	sp, #40	; 0x28
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800431a:	2300      	movs	r3, #0
 800431c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800431e:	f3ef 8305 	mrs	r3, IPSR
 8004322:	61fb      	str	r3, [r7, #28]
  return(result);
 8004324:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10f      	bne.n	800434a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800432a:	f3ef 8310 	mrs	r3, PRIMASK
 800432e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <osMessageQueueGet+0x42>
 8004336:	4b2b      	ldr	r3, [pc, #172]	; (80043e4 <osMessageQueueGet+0xdc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d12e      	bne.n	800439c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800433e:	f3ef 8311 	mrs	r3, BASEPRI
 8004342:	617b      	str	r3, [r7, #20]
  return(result);
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d028      	beq.n	800439c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <osMessageQueueGet+0x54>
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <osMessageQueueGet+0x54>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800435c:	f06f 0303 	mvn.w	r3, #3
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004362:	e038      	b.n	80043d6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004364:	2300      	movs	r3, #0
 8004366:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004368:	f107 0310 	add.w	r3, r7, #16
 800436c:	461a      	mov	r2, r3
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	6a38      	ldr	r0, [r7, #32]
 8004372:	f000 fd0b 	bl	8004d8c <xQueueReceiveFromISR>
 8004376:	4603      	mov	r3, r0
 8004378:	2b01      	cmp	r3, #1
 800437a:	d003      	beq.n	8004384 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800437c:	f06f 0302 	mvn.w	r3, #2
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004382:	e028      	b.n	80043d6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d025      	beq.n	80043d6 <osMessageQueueGet+0xce>
 800438a:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <osMessageQueueGet+0xe0>)
 800438c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800439a:	e01c      	b.n	80043d6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <osMessageQueueGet+0xa0>
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d103      	bne.n	80043b0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80043a8:	f06f 0303 	mvn.w	r3, #3
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
 80043ae:	e013      	b.n	80043d8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	68b9      	ldr	r1, [r7, #8]
 80043b4:	6a38      	ldr	r0, [r7, #32]
 80043b6:	f000 fc09 	bl	8004bcc <xQueueReceive>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d00b      	beq.n	80043d8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80043c6:	f06f 0301 	mvn.w	r3, #1
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
 80043cc:	e004      	b.n	80043d8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80043ce:	f06f 0302 	mvn.w	r3, #2
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
 80043d4:	e000      	b.n	80043d8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80043d6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3728      	adds	r7, #40	; 0x28
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	200001b8 	.word	0x200001b8
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d102      	bne.n	8004404 <osMessageQueueGetCount+0x18>
    count = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
 8004402:	e01e      	b.n	8004442 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004404:	f3ef 8305 	mrs	r3, IPSR
 8004408:	617b      	str	r3, [r7, #20]
  return(result);
 800440a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10f      	bne.n	8004430 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004410:	f3ef 8310 	mrs	r3, PRIMASK
 8004414:	613b      	str	r3, [r7, #16]
  return(result);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d109      	bne.n	8004430 <osMessageQueueGetCount+0x44>
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <osMessageQueueGetCount+0x60>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d10a      	bne.n	800443a <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004424:	f3ef 8311 	mrs	r3, BASEPRI
 8004428:	60fb      	str	r3, [r7, #12]
  return(result);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d004      	beq.n	800443a <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8004430:	69b8      	ldr	r0, [r7, #24]
 8004432:	f000 fd49 	bl	8004ec8 <uxQueueMessagesWaitingFromISR>
 8004436:	61f8      	str	r0, [r7, #28]
 8004438:	e003      	b.n	8004442 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800443a:	69b8      	ldr	r0, [r7, #24]
 800443c:	f000 fd26 	bl	8004e8c <uxQueueMessagesWaiting>
 8004440:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8004442:	69fb      	ldr	r3, [r7, #28]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3720      	adds	r7, #32
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	200001b8 	.word	0x200001b8

08004450 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4a07      	ldr	r2, [pc, #28]	; (800447c <vApplicationGetIdleTaskMemory+0x2c>)
 8004460:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4a06      	ldr	r2, [pc, #24]	; (8004480 <vApplicationGetIdleTaskMemory+0x30>)
 8004466:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2280      	movs	r2, #128	; 0x80
 800446c:	601a      	str	r2, [r3, #0]
}
 800446e:	bf00      	nop
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	200001bc 	.word	0x200001bc
 8004480:	20000264 	.word	0x20000264

08004484 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4a07      	ldr	r2, [pc, #28]	; (80044b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004494:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4a06      	ldr	r2, [pc, #24]	; (80044b4 <vApplicationGetTimerTaskMemory+0x30>)
 800449a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044a2:	601a      	str	r2, [r3, #0]
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	20000464 	.word	0x20000464
 80044b4:	2000050c 	.word	0x2000050c

080044b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f103 0208 	add.w	r2, r3, #8
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f103 0208 	add.w	r2, r3, #8
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f103 0208 	add.w	r2, r3, #8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004512:	b480      	push	{r7}
 8004514:	b085      	sub	sp, #20
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	601a      	str	r2, [r3, #0]
}
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800455a:	b480      	push	{r7}
 800455c:	b085      	sub	sp, #20
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004570:	d103      	bne.n	800457a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	e00c      	b.n	8004594 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3308      	adds	r3, #8
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	e002      	b.n	8004588 <vListInsert+0x2e>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	429a      	cmp	r2, r3
 8004592:	d2f6      	bcs.n	8004582 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	601a      	str	r2, [r3, #0]
}
 80045c0:	bf00      	nop
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6892      	ldr	r2, [r2, #8]
 80045e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6852      	ldr	r2, [r2, #4]
 80045ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d103      	bne.n	8004600 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	1e5a      	subs	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10a      	bne.n	800464a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004646:	bf00      	nop
 8004648:	e7fe      	b.n	8004648 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800464a:	f002 f933 	bl	80068b4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004656:	68f9      	ldr	r1, [r7, #12]
 8004658:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800465a:	fb01 f303 	mul.w	r3, r1, r3
 800465e:	441a      	add	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467a:	3b01      	subs	r3, #1
 800467c:	68f9      	ldr	r1, [r7, #12]
 800467e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004680:	fb01 f303 	mul.w	r3, r1, r3
 8004684:	441a      	add	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	22ff      	movs	r2, #255	; 0xff
 800468e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	22ff      	movs	r2, #255	; 0xff
 8004696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d114      	bne.n	80046ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01a      	beq.n	80046de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3310      	adds	r3, #16
 80046ac:	4618      	mov	r0, r3
 80046ae:	f001 fa17 	bl	8005ae0 <xTaskRemoveFromEventList>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d012      	beq.n	80046de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80046b8:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <xQueueGenericReset+0xcc>)
 80046ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	e009      	b.n	80046de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3310      	adds	r3, #16
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff fef2 	bl	80044b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	3324      	adds	r3, #36	; 0x24
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff feed 	bl	80044b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80046de:	f002 f919 	bl	8006914 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80046e2:	2301      	movs	r3, #1
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	e000ed04 	.word	0xe000ed04

080046f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08e      	sub	sp, #56	; 0x38
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10a      	bne.n	800471a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004716:	bf00      	nop
 8004718:	e7fe      	b.n	8004718 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10a      	bne.n	8004736 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004732:	bf00      	nop
 8004734:	e7fe      	b.n	8004734 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <xQueueGenericCreateStatic+0x52>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <xQueueGenericCreateStatic+0x56>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <xQueueGenericCreateStatic+0x58>
 8004746:	2300      	movs	r3, #0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	623b      	str	r3, [r7, #32]
}
 800475e:	bf00      	nop
 8004760:	e7fe      	b.n	8004760 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d102      	bne.n	800476e <xQueueGenericCreateStatic+0x7e>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <xQueueGenericCreateStatic+0x82>
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <xQueueGenericCreateStatic+0x84>
 8004772:	2300      	movs	r3, #0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10a      	bne.n	800478e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	61fb      	str	r3, [r7, #28]
}
 800478a:	bf00      	nop
 800478c:	e7fe      	b.n	800478c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800478e:	2350      	movs	r3, #80	; 0x50
 8004790:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b50      	cmp	r3, #80	; 0x50
 8004796:	d00a      	beq.n	80047ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	61bb      	str	r3, [r7, #24]
}
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00d      	beq.n	80047d4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80047b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047c0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	4613      	mov	r3, r2
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	68b9      	ldr	r1, [r7, #8]
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f843 	bl	800485a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3730      	adds	r7, #48	; 0x30
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b08a      	sub	sp, #40	; 0x28
 80047e2:	af02      	add	r7, sp, #8
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	4613      	mov	r3, r2
 80047ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10a      	bne.n	8004808 <xQueueGenericCreate+0x2a>
	__asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	613b      	str	r3, [r7, #16]
}
 8004804:	bf00      	nop
 8004806:	e7fe      	b.n	8004806 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d102      	bne.n	8004814 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
 8004812:	e004      	b.n	800481e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	fb02 f303 	mul.w	r3, r2, r3
 800481c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	3350      	adds	r3, #80	; 0x50
 8004822:	4618      	mov	r0, r3
 8004824:	f002 f968 	bl	8006af8 <pvPortMalloc>
 8004828:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00f      	beq.n	8004850 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	3350      	adds	r3, #80	; 0x50
 8004834:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800483e:	79fa      	ldrb	r2, [r7, #7]
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	4613      	mov	r3, r2
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 f805 	bl	800485a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004850:	69bb      	ldr	r3, [r7, #24]
	}
 8004852:	4618      	mov	r0, r3
 8004854:	3720      	adds	r7, #32
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b084      	sub	sp, #16
 800485e:	af00      	add	r7, sp, #0
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	607a      	str	r2, [r7, #4]
 8004866:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d103      	bne.n	8004876 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	e002      	b.n	800487c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004888:	2101      	movs	r1, #1
 800488a:	69b8      	ldr	r0, [r7, #24]
 800488c:	f7ff fec8 	bl	8004620 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	78fa      	ldrb	r2, [r7, #3]
 8004894:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004898:	bf00      	nop
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08e      	sub	sp, #56	; 0x38
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048ae:	2300      	movs	r3, #0
 80048b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10a      	bne.n	80048d2 <xQueueGenericSend+0x32>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048ce:	bf00      	nop
 80048d0:	e7fe      	b.n	80048d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d103      	bne.n	80048e0 <xQueueGenericSend+0x40>
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <xQueueGenericSend+0x44>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <xQueueGenericSend+0x46>
 80048e4:	2300      	movs	r3, #0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10a      	bne.n	8004900 <xQueueGenericSend+0x60>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048fc:	bf00      	nop
 80048fe:	e7fe      	b.n	80048fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d103      	bne.n	800490e <xQueueGenericSend+0x6e>
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <xQueueGenericSend+0x72>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <xQueueGenericSend+0x74>
 8004912:	2300      	movs	r3, #0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <xQueueGenericSend+0x8e>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	623b      	str	r3, [r7, #32]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800492e:	f001 fa9f 	bl	8005e70 <xTaskGetSchedulerState>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d102      	bne.n	800493e <xQueueGenericSend+0x9e>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <xQueueGenericSend+0xa2>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <xQueueGenericSend+0xa4>
 8004942:	2300      	movs	r3, #0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <xQueueGenericSend+0xbe>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	61fb      	str	r3, [r7, #28]
}
 800495a:	bf00      	nop
 800495c:	e7fe      	b.n	800495c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800495e:	f001 ffa9 	bl	80068b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	429a      	cmp	r2, r3
 800496c:	d302      	bcc.n	8004974 <xQueueGenericSend+0xd4>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d129      	bne.n	80049c8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800497a:	f000 fac1 	bl	8004f00 <prvCopyDataToQueue>
 800497e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	2b00      	cmp	r3, #0
 8004986:	d010      	beq.n	80049aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	3324      	adds	r3, #36	; 0x24
 800498c:	4618      	mov	r0, r3
 800498e:	f001 f8a7 	bl	8005ae0 <xTaskRemoveFromEventList>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d013      	beq.n	80049c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004998:	4b3f      	ldr	r3, [pc, #252]	; (8004a98 <xQueueGenericSend+0x1f8>)
 800499a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	e00a      	b.n	80049c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049b0:	4b39      	ldr	r3, [pc, #228]	; (8004a98 <xQueueGenericSend+0x1f8>)
 80049b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049c0:	f001 ffa8 	bl	8006914 <vPortExitCritical>
				return pdPASS;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e063      	b.n	8004a90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d103      	bne.n	80049d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049ce:	f001 ffa1 	bl	8006914 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e05c      	b.n	8004a90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049dc:	f107 0314 	add.w	r3, r7, #20
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 f8e1 	bl	8005ba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049e6:	2301      	movs	r3, #1
 80049e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049ea:	f001 ff93 	bl	8006914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049ee:	f000 fe49 	bl	8005684 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049f2:	f001 ff5f 	bl	80068b4 <vPortEnterCritical>
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049fc:	b25b      	sxtb	r3, r3
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a02:	d103      	bne.n	8004a0c <xQueueGenericSend+0x16c>
 8004a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a12:	b25b      	sxtb	r3, r3
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a18:	d103      	bne.n	8004a22 <xQueueGenericSend+0x182>
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a22:	f001 ff77 	bl	8006914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a26:	1d3a      	adds	r2, r7, #4
 8004a28:	f107 0314 	add.w	r3, r7, #20
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f001 f8d0 	bl	8005bd4 <xTaskCheckForTimeOut>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d124      	bne.n	8004a84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a3c:	f000 fb58 	bl	80050f0 <prvIsQueueFull>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d018      	beq.n	8004a78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	3310      	adds	r3, #16
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fff6 	bl	8005a40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a56:	f000 fae3 	bl	8005020 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a5a:	f000 fe21 	bl	80056a0 <xTaskResumeAll>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f47f af7c 	bne.w	800495e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004a66:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <xQueueGenericSend+0x1f8>)
 8004a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	e772      	b.n	800495e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a7a:	f000 fad1 	bl	8005020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a7e:	f000 fe0f 	bl	80056a0 <xTaskResumeAll>
 8004a82:	e76c      	b.n	800495e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a86:	f000 facb 	bl	8005020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a8a:	f000 fe09 	bl	80056a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a8e:	2300      	movs	r3, #0
		}
	}
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3738      	adds	r7, #56	; 0x38
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	e000ed04 	.word	0xe000ed04

08004a9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08e      	sub	sp, #56	; 0x38
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10a      	bne.n	8004aca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d103      	bne.n	8004ad8 <xQueueGenericSendFromISR+0x3c>
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <xQueueGenericSendFromISR+0x40>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <xQueueGenericSendFromISR+0x42>
 8004adc:	2300      	movs	r3, #0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10a      	bne.n	8004af8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	623b      	str	r3, [r7, #32]
}
 8004af4:	bf00      	nop
 8004af6:	e7fe      	b.n	8004af6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d103      	bne.n	8004b06 <xQueueGenericSendFromISR+0x6a>
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <xQueueGenericSendFromISR+0x6e>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <xQueueGenericSendFromISR+0x70>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	61fb      	str	r3, [r7, #28]
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b26:	f001 ffa7 	bl	8006a78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b2a:	f3ef 8211 	mrs	r2, BASEPRI
 8004b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	61ba      	str	r2, [r7, #24]
 8004b40:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b42:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d302      	bcc.n	8004b58 <xQueueGenericSendFromISR+0xbc>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d12c      	bne.n	8004bb2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b68:	f000 f9ca 	bl	8004f00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b6c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b74:	d112      	bne.n	8004b9c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d016      	beq.n	8004bac <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	3324      	adds	r3, #36	; 0x24
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 ffac 	bl	8005ae0 <xTaskRemoveFromEventList>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00e      	beq.n	8004bac <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00b      	beq.n	8004bac <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	e007      	b.n	8004bac <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	b25a      	sxtb	r2, r3
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004bac:	2301      	movs	r3, #1
 8004bae:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004bb0:	e001      	b.n	8004bb6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3738      	adds	r7, #56	; 0x38
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08c      	sub	sp, #48	; 0x30
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10a      	bne.n	8004bfc <xQueueReceive+0x30>
	__asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	623b      	str	r3, [r7, #32]
}
 8004bf8:	bf00      	nop
 8004bfa:	e7fe      	b.n	8004bfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d103      	bne.n	8004c0a <xQueueReceive+0x3e>
 8004c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <xQueueReceive+0x42>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <xQueueReceive+0x44>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <xQueueReceive+0x5e>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	61fb      	str	r3, [r7, #28]
}
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c2a:	f001 f921 	bl	8005e70 <xTaskGetSchedulerState>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d102      	bne.n	8004c3a <xQueueReceive+0x6e>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <xQueueReceive+0x72>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <xQueueReceive+0x74>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10a      	bne.n	8004c5a <xQueueReceive+0x8e>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	61bb      	str	r3, [r7, #24]
}
 8004c56:	bf00      	nop
 8004c58:	e7fe      	b.n	8004c58 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c5a:	f001 fe2b 	bl	80068b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01f      	beq.n	8004caa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c6e:	f000 f9b1 	bl	8004fd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	1e5a      	subs	r2, r3, #1
 8004c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00f      	beq.n	8004ca2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	3310      	adds	r3, #16
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 ff2a 	bl	8005ae0 <xTaskRemoveFromEventList>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c92:	4b3d      	ldr	r3, [pc, #244]	; (8004d88 <xQueueReceive+0x1bc>)
 8004c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ca2:	f001 fe37 	bl	8006914 <vPortExitCritical>
				return pdPASS;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e069      	b.n	8004d7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d103      	bne.n	8004cb8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cb0:	f001 fe30 	bl	8006914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e062      	b.n	8004d7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cbe:	f107 0310 	add.w	r3, r7, #16
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 ff70 	bl	8005ba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ccc:	f001 fe22 	bl	8006914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cd0:	f000 fcd8 	bl	8005684 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cd4:	f001 fdee 	bl	80068b4 <vPortEnterCritical>
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cde:	b25b      	sxtb	r3, r3
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ce4:	d103      	bne.n	8004cee <xQueueReceive+0x122>
 8004ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cf4:	b25b      	sxtb	r3, r3
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cfa:	d103      	bne.n	8004d04 <xQueueReceive+0x138>
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d04:	f001 fe06 	bl	8006914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d08:	1d3a      	adds	r2, r7, #4
 8004d0a:	f107 0310 	add.w	r3, r7, #16
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 ff5f 	bl	8005bd4 <xTaskCheckForTimeOut>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d123      	bne.n	8004d64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d1e:	f000 f9d1 	bl	80050c4 <prvIsQueueEmpty>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d017      	beq.n	8004d58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	3324      	adds	r3, #36	; 0x24
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	4611      	mov	r1, r2
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fe85 	bl	8005a40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d38:	f000 f972 	bl	8005020 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d3c:	f000 fcb0 	bl	80056a0 <xTaskResumeAll>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d189      	bne.n	8004c5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004d46:	4b10      	ldr	r3, [pc, #64]	; (8004d88 <xQueueReceive+0x1bc>)
 8004d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	e780      	b.n	8004c5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d5a:	f000 f961 	bl	8005020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d5e:	f000 fc9f 	bl	80056a0 <xTaskResumeAll>
 8004d62:	e77a      	b.n	8004c5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d66:	f000 f95b 	bl	8005020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d6a:	f000 fc99 	bl	80056a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d70:	f000 f9a8 	bl	80050c4 <prvIsQueueEmpty>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f43f af6f 	beq.w	8004c5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3730      	adds	r7, #48	; 0x30
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	e000ed04 	.word	0xe000ed04

08004d8c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08e      	sub	sp, #56	; 0x38
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	623b      	str	r3, [r7, #32]
}
 8004db4:	bf00      	nop
 8004db6:	e7fe      	b.n	8004db6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d103      	bne.n	8004dc6 <xQueueReceiveFromISR+0x3a>
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <xQueueReceiveFromISR+0x3e>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <xQueueReceiveFromISR+0x40>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10a      	bne.n	8004de6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	61fb      	str	r3, [r7, #28]
}
 8004de2:	bf00      	nop
 8004de4:	e7fe      	b.n	8004de4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004de6:	f001 fe47 	bl	8006a78 <vPortValidateInterruptPriority>
	__asm volatile
 8004dea:	f3ef 8211 	mrs	r2, BASEPRI
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	61ba      	str	r2, [r7, #24]
 8004e00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004e02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d02f      	beq.n	8004e72 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e20:	f000 f8d8 	bl	8004fd4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	1e5a      	subs	r2, r3, #1
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004e2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e34:	d112      	bne.n	8004e5c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d016      	beq.n	8004e6c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e40:	3310      	adds	r3, #16
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fe4c 	bl	8005ae0 <xTaskRemoveFromEventList>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00e      	beq.n	8004e6c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00b      	beq.n	8004e6c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	e007      	b.n	8004e6c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e60:	3301      	adds	r3, #1
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	b25a      	sxtb	r2, r3
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e70:	e001      	b.n	8004e76 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004e72:	2300      	movs	r3, #0
 8004e74:	637b      	str	r3, [r7, #52]	; 0x34
 8004e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f383 8811 	msr	BASEPRI, r3
}
 8004e80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3738      	adds	r7, #56	; 0x38
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8004e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	60bb      	str	r3, [r7, #8]
}
 8004eac:	bf00      	nop
 8004eae:	e7fe      	b.n	8004eae <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8004eb0:	f001 fd00 	bl	80068b4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004eba:	f001 fd2b 	bl	8006914 <vPortExitCritical>

	return uxReturn;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10a      	bne.n	8004eec <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	60bb      	str	r3, [r7, #8]
}
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10d      	bne.n	8004f3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d14d      	bne.n	8004fc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 ffbe 	bl	8005eac <xTaskPriorityDisinherit>
 8004f30:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	605a      	str	r2, [r3, #4]
 8004f38:	e043      	b.n	8004fc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d119      	bne.n	8004f74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6898      	ldr	r0, [r3, #8]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	461a      	mov	r2, r3
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	f002 f85c 	bl	8007008 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	441a      	add	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d32b      	bcc.n	8004fc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	609a      	str	r2, [r3, #8]
 8004f72:	e026      	b.n	8004fc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	68d8      	ldr	r0, [r3, #12]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	f002 f842 	bl	8007008 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8c:	425b      	negs	r3, r3
 8004f8e:	441a      	add	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d207      	bcs.n	8004fb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	425b      	negs	r3, r3
 8004faa:	441a      	add	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d105      	bne.n	8004fc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004fca:	697b      	ldr	r3, [r7, #20]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d018      	beq.n	8005018 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	441a      	add	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d303      	bcc.n	8005008 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68d9      	ldr	r1, [r3, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	461a      	mov	r2, r3
 8005012:	6838      	ldr	r0, [r7, #0]
 8005014:	f001 fff8 	bl	8007008 <memcpy>
	}
}
 8005018:	bf00      	nop
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005028:	f001 fc44 	bl	80068b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005032:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005034:	e011      	b.n	800505a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	2b00      	cmp	r3, #0
 800503c:	d012      	beq.n	8005064 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3324      	adds	r3, #36	; 0x24
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fd4c 	bl	8005ae0 <xTaskRemoveFromEventList>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800504e:	f000 fe23 	bl	8005c98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	3b01      	subs	r3, #1
 8005056:	b2db      	uxtb	r3, r3
 8005058:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800505a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800505e:	2b00      	cmp	r3, #0
 8005060:	dce9      	bgt.n	8005036 <prvUnlockQueue+0x16>
 8005062:	e000      	b.n	8005066 <prvUnlockQueue+0x46>
					break;
 8005064:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	22ff      	movs	r2, #255	; 0xff
 800506a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800506e:	f001 fc51 	bl	8006914 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005072:	f001 fc1f 	bl	80068b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800507c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800507e:	e011      	b.n	80050a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d012      	beq.n	80050ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3310      	adds	r3, #16
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fd27 	bl	8005ae0 <xTaskRemoveFromEventList>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005098:	f000 fdfe 	bl	8005c98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800509c:	7bbb      	ldrb	r3, [r7, #14]
 800509e:	3b01      	subs	r3, #1
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	dce9      	bgt.n	8005080 <prvUnlockQueue+0x60>
 80050ac:	e000      	b.n	80050b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	22ff      	movs	r2, #255	; 0xff
 80050b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80050b8:	f001 fc2c 	bl	8006914 <vPortExitCritical>
}
 80050bc:	bf00      	nop
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050cc:	f001 fbf2 	bl	80068b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050d8:	2301      	movs	r3, #1
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	e001      	b.n	80050e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050e2:	f001 fc17 	bl	8006914 <vPortExitCritical>

	return xReturn;
 80050e6:	68fb      	ldr	r3, [r7, #12]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050f8:	f001 fbdc 	bl	80068b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005104:	429a      	cmp	r2, r3
 8005106:	d102      	bne.n	800510e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005108:	2301      	movs	r3, #1
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e001      	b.n	8005112 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005112:	f001 fbff 	bl	8006914 <vPortExitCritical>

	return xReturn;
 8005116:	68fb      	ldr	r3, [r7, #12]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	e014      	b.n	800515a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005130:	4a0f      	ldr	r2, [pc, #60]	; (8005170 <vQueueAddToRegistry+0x50>)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10b      	bne.n	8005154 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800513c:	490c      	ldr	r1, [pc, #48]	; (8005170 <vQueueAddToRegistry+0x50>)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005146:	4a0a      	ldr	r2, [pc, #40]	; (8005170 <vQueueAddToRegistry+0x50>)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	4413      	add	r3, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005152:	e006      	b.n	8005162 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3301      	adds	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b07      	cmp	r3, #7
 800515e:	d9e7      	bls.n	8005130 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005160:	bf00      	nop
 8005162:	bf00      	nop
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	2000090c 	.word	0x2000090c

08005174 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005184:	f001 fb96 	bl	80068b4 <vPortEnterCritical>
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800518e:	b25b      	sxtb	r3, r3
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005194:	d103      	bne.n	800519e <vQueueWaitForMessageRestricted+0x2a>
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051a4:	b25b      	sxtb	r3, r3
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051aa:	d103      	bne.n	80051b4 <vQueueWaitForMessageRestricted+0x40>
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051b4:	f001 fbae 	bl	8006914 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d106      	bne.n	80051ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	3324      	adds	r3, #36	; 0x24
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fc5d 	bl	8005a88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80051ce:	6978      	ldr	r0, [r7, #20]
 80051d0:	f7ff ff26 	bl	8005020 <prvUnlockQueue>
	}
 80051d4:	bf00      	nop
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08e      	sub	sp, #56	; 0x38
 80051e0:	af04      	add	r7, sp, #16
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <xTaskCreateStatic+0x2a>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	623b      	str	r3, [r7, #32]
}
 8005202:	bf00      	nop
 8005204:	e7fe      	b.n	8005204 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10a      	bne.n	8005222 <xTaskCreateStatic+0x46>
	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	61fb      	str	r3, [r7, #28]
}
 800521e:	bf00      	nop
 8005220:	e7fe      	b.n	8005220 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005222:	23a8      	movs	r3, #168	; 0xa8
 8005224:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2ba8      	cmp	r3, #168	; 0xa8
 800522a:	d00a      	beq.n	8005242 <xTaskCreateStatic+0x66>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	61bb      	str	r3, [r7, #24]
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01e      	beq.n	8005286 <xTaskCreateStatic+0xaa>
 8005248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524a:	2b00      	cmp	r3, #0
 800524c:	d01b      	beq.n	8005286 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800524e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005256:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	2202      	movs	r2, #2
 800525c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005260:	2300      	movs	r3, #0
 8005262:	9303      	str	r3, [sp, #12]
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	9302      	str	r3, [sp, #8]
 8005268:	f107 0314 	add.w	r3, r7, #20
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 f851 	bl	8005320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800527e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005280:	f000 f8ec 	bl	800545c <prvAddNewTaskToReadyList>
 8005284:	e001      	b.n	800528a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800528a:	697b      	ldr	r3, [r7, #20]
	}
 800528c:	4618      	mov	r0, r3
 800528e:	3728      	adds	r7, #40	; 0x28
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08c      	sub	sp, #48	; 0x30
 8005298:	af04      	add	r7, sp, #16
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	4613      	mov	r3, r2
 80052a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a4:	88fb      	ldrh	r3, [r7, #6]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4618      	mov	r0, r3
 80052aa:	f001 fc25 	bl	8006af8 <pvPortMalloc>
 80052ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00e      	beq.n	80052d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80052b6:	20a8      	movs	r0, #168	; 0xa8
 80052b8:	f001 fc1e 	bl	8006af8 <pvPortMalloc>
 80052bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	631a      	str	r2, [r3, #48]	; 0x30
 80052ca:	e005      	b.n	80052d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052cc:	6978      	ldr	r0, [r7, #20]
 80052ce:	f001 fcd7 	bl	8006c80 <vPortFree>
 80052d2:	e001      	b.n	80052d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d017      	beq.n	800530e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052e6:	88fa      	ldrh	r2, [r7, #6]
 80052e8:	2300      	movs	r3, #0
 80052ea:	9303      	str	r3, [sp, #12]
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	9302      	str	r3, [sp, #8]
 80052f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 f80f 	bl	8005320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005302:	69f8      	ldr	r0, [r7, #28]
 8005304:	f000 f8aa 	bl	800545c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005308:	2301      	movs	r3, #1
 800530a:	61bb      	str	r3, [r7, #24]
 800530c:	e002      	b.n	8005314 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800530e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005312:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005314:	69bb      	ldr	r3, [r7, #24]
	}
 8005316:	4618      	mov	r0, r3
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	461a      	mov	r2, r3
 8005338:	21a5      	movs	r1, #165	; 0xa5
 800533a:	f001 fddb 	bl	8006ef4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005348:	3b01      	subs	r3, #1
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	f023 0307 	bic.w	r3, r3, #7
 8005356:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	617b      	str	r3, [r7, #20]
}
 8005374:	bf00      	nop
 8005376:	e7fe      	b.n	8005376 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005378:	2300      	movs	r3, #0
 800537a:	61fb      	str	r3, [r7, #28]
 800537c:	e012      	b.n	80053a4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	7819      	ldrb	r1, [r3, #0]
 8005386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	4413      	add	r3, r2
 800538c:	3334      	adds	r3, #52	; 0x34
 800538e:	460a      	mov	r2, r1
 8005390:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	4413      	add	r3, r2
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d006      	beq.n	80053ac <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	3301      	adds	r3, #1
 80053a2:	61fb      	str	r3, [r7, #28]
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	2b0f      	cmp	r3, #15
 80053a8:	d9e9      	bls.n	800537e <prvInitialiseNewTask+0x5e>
 80053aa:	e000      	b.n	80053ae <prvInitialiseNewTask+0x8e>
		{
			break;
 80053ac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	2b37      	cmp	r3, #55	; 0x37
 80053ba:	d901      	bls.n	80053c0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053bc:	2337      	movs	r3, #55	; 0x37
 80053be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	2200      	movs	r2, #0
 80053d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	3304      	adds	r3, #4
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff f88e 	bl	80044f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	3318      	adds	r3, #24
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7ff f889 	bl	80044f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	2200      	movs	r2, #0
 8005400:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005406:	2200      	movs	r2, #0
 8005408:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	3354      	adds	r3, #84	; 0x54
 8005410:	224c      	movs	r2, #76	; 0x4c
 8005412:	2100      	movs	r1, #0
 8005414:	4618      	mov	r0, r3
 8005416:	f001 fd6d 	bl	8006ef4 <memset>
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	4a0c      	ldr	r2, [pc, #48]	; (8005450 <prvInitialiseNewTask+0x130>)
 800541e:	659a      	str	r2, [r3, #88]	; 0x58
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	4a0c      	ldr	r2, [pc, #48]	; (8005454 <prvInitialiseNewTask+0x134>)
 8005424:	65da      	str	r2, [r3, #92]	; 0x5c
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	4a0b      	ldr	r2, [pc, #44]	; (8005458 <prvInitialiseNewTask+0x138>)
 800542a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	68f9      	ldr	r1, [r7, #12]
 8005430:	69b8      	ldr	r0, [r7, #24]
 8005432:	f001 f90f 	bl	8006654 <pxPortInitialiseStack>
 8005436:	4602      	mov	r2, r0
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005446:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005448:	bf00      	nop
 800544a:	3720      	adds	r7, #32
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	20001b98 	.word	0x20001b98
 8005454:	20001c00 	.word	0x20001c00
 8005458:	20001c68 	.word	0x20001c68

0800545c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005464:	f001 fa26 	bl	80068b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005468:	4b2d      	ldr	r3, [pc, #180]	; (8005520 <prvAddNewTaskToReadyList+0xc4>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3301      	adds	r3, #1
 800546e:	4a2c      	ldr	r2, [pc, #176]	; (8005520 <prvAddNewTaskToReadyList+0xc4>)
 8005470:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005472:	4b2c      	ldr	r3, [pc, #176]	; (8005524 <prvAddNewTaskToReadyList+0xc8>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d109      	bne.n	800548e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800547a:	4a2a      	ldr	r2, [pc, #168]	; (8005524 <prvAddNewTaskToReadyList+0xc8>)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005480:	4b27      	ldr	r3, [pc, #156]	; (8005520 <prvAddNewTaskToReadyList+0xc4>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d110      	bne.n	80054aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005488:	f000 fc2a 	bl	8005ce0 <prvInitialiseTaskLists>
 800548c:	e00d      	b.n	80054aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800548e:	4b26      	ldr	r3, [pc, #152]	; (8005528 <prvAddNewTaskToReadyList+0xcc>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d109      	bne.n	80054aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005496:	4b23      	ldr	r3, [pc, #140]	; (8005524 <prvAddNewTaskToReadyList+0xc8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d802      	bhi.n	80054aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054a4:	4a1f      	ldr	r2, [pc, #124]	; (8005524 <prvAddNewTaskToReadyList+0xc8>)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054aa:	4b20      	ldr	r3, [pc, #128]	; (800552c <prvAddNewTaskToReadyList+0xd0>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3301      	adds	r3, #1
 80054b0:	4a1e      	ldr	r2, [pc, #120]	; (800552c <prvAddNewTaskToReadyList+0xd0>)
 80054b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80054b4:	4b1d      	ldr	r3, [pc, #116]	; (800552c <prvAddNewTaskToReadyList+0xd0>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c0:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <prvAddNewTaskToReadyList+0xd4>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d903      	bls.n	80054d0 <prvAddNewTaskToReadyList+0x74>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	4a18      	ldr	r2, [pc, #96]	; (8005530 <prvAddNewTaskToReadyList+0xd4>)
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4a15      	ldr	r2, [pc, #84]	; (8005534 <prvAddNewTaskToReadyList+0xd8>)
 80054de:	441a      	add	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3304      	adds	r3, #4
 80054e4:	4619      	mov	r1, r3
 80054e6:	4610      	mov	r0, r2
 80054e8:	f7ff f813 	bl	8004512 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054ec:	f001 fa12 	bl	8006914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054f0:	4b0d      	ldr	r3, [pc, #52]	; (8005528 <prvAddNewTaskToReadyList+0xcc>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00e      	beq.n	8005516 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <prvAddNewTaskToReadyList+0xc8>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	429a      	cmp	r2, r3
 8005504:	d207      	bcs.n	8005516 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005506:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <prvAddNewTaskToReadyList+0xdc>)
 8005508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005516:	bf00      	nop
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20000e20 	.word	0x20000e20
 8005524:	2000094c 	.word	0x2000094c
 8005528:	20000e2c 	.word	0x20000e2c
 800552c:	20000e3c 	.word	0x20000e3c
 8005530:	20000e28 	.word	0x20000e28
 8005534:	20000950 	.word	0x20000950
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d017      	beq.n	800557e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800554e:	4b13      	ldr	r3, [pc, #76]	; (800559c <vTaskDelay+0x60>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <vTaskDelay+0x30>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	60bb      	str	r3, [r7, #8]
}
 8005568:	bf00      	nop
 800556a:	e7fe      	b.n	800556a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800556c:	f000 f88a 	bl	8005684 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005570:	2100      	movs	r1, #0
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fd08 	bl	8005f88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005578:	f000 f892 	bl	80056a0 <xTaskResumeAll>
 800557c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d107      	bne.n	8005594 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005584:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <vTaskDelay+0x64>)
 8005586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005594:	bf00      	nop
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	20000e48 	.word	0x20000e48
 80055a0:	e000ed04 	.word	0xe000ed04

080055a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08a      	sub	sp, #40	; 0x28
 80055a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055ae:	2300      	movs	r3, #0
 80055b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055b2:	463a      	mov	r2, r7
 80055b4:	1d39      	adds	r1, r7, #4
 80055b6:	f107 0308 	add.w	r3, r7, #8
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe ff48 	bl	8004450 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055c0:	6839      	ldr	r1, [r7, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	9202      	str	r2, [sp, #8]
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	2300      	movs	r3, #0
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	2300      	movs	r3, #0
 80055d0:	460a      	mov	r2, r1
 80055d2:	4924      	ldr	r1, [pc, #144]	; (8005664 <vTaskStartScheduler+0xc0>)
 80055d4:	4824      	ldr	r0, [pc, #144]	; (8005668 <vTaskStartScheduler+0xc4>)
 80055d6:	f7ff fe01 	bl	80051dc <xTaskCreateStatic>
 80055da:	4603      	mov	r3, r0
 80055dc:	4a23      	ldr	r2, [pc, #140]	; (800566c <vTaskStartScheduler+0xc8>)
 80055de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055e0:	4b22      	ldr	r3, [pc, #136]	; (800566c <vTaskStartScheduler+0xc8>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055e8:	2301      	movs	r3, #1
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	e001      	b.n	80055f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d102      	bne.n	80055fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80055f8:	f000 fd1a 	bl	8006030 <xTimerCreateTimerTask>
 80055fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d11b      	bne.n	800563c <vTaskStartScheduler+0x98>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	613b      	str	r3, [r7, #16]
}
 8005616:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005618:	4b15      	ldr	r3, [pc, #84]	; (8005670 <vTaskStartScheduler+0xcc>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3354      	adds	r3, #84	; 0x54
 800561e:	4a15      	ldr	r2, [pc, #84]	; (8005674 <vTaskStartScheduler+0xd0>)
 8005620:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005622:	4b15      	ldr	r3, [pc, #84]	; (8005678 <vTaskStartScheduler+0xd4>)
 8005624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005628:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800562a:	4b14      	ldr	r3, [pc, #80]	; (800567c <vTaskStartScheduler+0xd8>)
 800562c:	2201      	movs	r2, #1
 800562e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005630:	4b13      	ldr	r3, [pc, #76]	; (8005680 <vTaskStartScheduler+0xdc>)
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005636:	f001 f89b 	bl	8006770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800563a:	e00e      	b.n	800565a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005642:	d10a      	bne.n	800565a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	60fb      	str	r3, [r7, #12]
}
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <vTaskStartScheduler+0xb4>
}
 800565a:	bf00      	nop
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	08007aa0 	.word	0x08007aa0
 8005668:	08005cb1 	.word	0x08005cb1
 800566c:	20000e44 	.word	0x20000e44
 8005670:	2000094c 	.word	0x2000094c
 8005674:	2000005c 	.word	0x2000005c
 8005678:	20000e40 	.word	0x20000e40
 800567c:	20000e2c 	.word	0x20000e2c
 8005680:	20000e24 	.word	0x20000e24

08005684 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005688:	4b04      	ldr	r3, [pc, #16]	; (800569c <vTaskSuspendAll+0x18>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3301      	adds	r3, #1
 800568e:	4a03      	ldr	r2, [pc, #12]	; (800569c <vTaskSuspendAll+0x18>)
 8005690:	6013      	str	r3, [r2, #0]
}
 8005692:	bf00      	nop
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	20000e48 	.word	0x20000e48

080056a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056ae:	4b42      	ldr	r3, [pc, #264]	; (80057b8 <xTaskResumeAll+0x118>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10a      	bne.n	80056cc <xTaskResumeAll+0x2c>
	__asm volatile
 80056b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	603b      	str	r3, [r7, #0]
}
 80056c8:	bf00      	nop
 80056ca:	e7fe      	b.n	80056ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056cc:	f001 f8f2 	bl	80068b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056d0:	4b39      	ldr	r3, [pc, #228]	; (80057b8 <xTaskResumeAll+0x118>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	4a38      	ldr	r2, [pc, #224]	; (80057b8 <xTaskResumeAll+0x118>)
 80056d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056da:	4b37      	ldr	r3, [pc, #220]	; (80057b8 <xTaskResumeAll+0x118>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d162      	bne.n	80057a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056e2:	4b36      	ldr	r3, [pc, #216]	; (80057bc <xTaskResumeAll+0x11c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d05e      	beq.n	80057a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056ea:	e02f      	b.n	800574c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80056ec:	4b34      	ldr	r3, [pc, #208]	; (80057c0 <xTaskResumeAll+0x120>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3318      	adds	r3, #24
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fe ff67 	bl	80045cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3304      	adds	r3, #4
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe ff62 	bl	80045cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570c:	4b2d      	ldr	r3, [pc, #180]	; (80057c4 <xTaskResumeAll+0x124>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d903      	bls.n	800571c <xTaskResumeAll+0x7c>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	4a2a      	ldr	r2, [pc, #168]	; (80057c4 <xTaskResumeAll+0x124>)
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4a27      	ldr	r2, [pc, #156]	; (80057c8 <xTaskResumeAll+0x128>)
 800572a:	441a      	add	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3304      	adds	r3, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f7fe feed 	bl	8004512 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573c:	4b23      	ldr	r3, [pc, #140]	; (80057cc <xTaskResumeAll+0x12c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	429a      	cmp	r2, r3
 8005744:	d302      	bcc.n	800574c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005746:	4b22      	ldr	r3, [pc, #136]	; (80057d0 <xTaskResumeAll+0x130>)
 8005748:	2201      	movs	r2, #1
 800574a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800574c:	4b1c      	ldr	r3, [pc, #112]	; (80057c0 <xTaskResumeAll+0x120>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1cb      	bne.n	80056ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800575a:	f000 fb63 	bl	8005e24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800575e:	4b1d      	ldr	r3, [pc, #116]	; (80057d4 <xTaskResumeAll+0x134>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d010      	beq.n	800578c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800576a:	f000 f847 	bl	80057fc <xTaskIncrementTick>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005774:	4b16      	ldr	r3, [pc, #88]	; (80057d0 <xTaskResumeAll+0x130>)
 8005776:	2201      	movs	r2, #1
 8005778:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3b01      	subs	r3, #1
 800577e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f1      	bne.n	800576a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005786:	4b13      	ldr	r3, [pc, #76]	; (80057d4 <xTaskResumeAll+0x134>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800578c:	4b10      	ldr	r3, [pc, #64]	; (80057d0 <xTaskResumeAll+0x130>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d009      	beq.n	80057a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005794:	2301      	movs	r3, #1
 8005796:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005798:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <xTaskResumeAll+0x138>)
 800579a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057a8:	f001 f8b4 	bl	8006914 <vPortExitCritical>

	return xAlreadyYielded;
 80057ac:	68bb      	ldr	r3, [r7, #8]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20000e48 	.word	0x20000e48
 80057bc:	20000e20 	.word	0x20000e20
 80057c0:	20000de0 	.word	0x20000de0
 80057c4:	20000e28 	.word	0x20000e28
 80057c8:	20000950 	.word	0x20000950
 80057cc:	2000094c 	.word	0x2000094c
 80057d0:	20000e34 	.word	0x20000e34
 80057d4:	20000e30 	.word	0x20000e30
 80057d8:	e000ed04 	.word	0xe000ed04

080057dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80057e2:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <xTaskGetTickCount+0x1c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80057e8:	687b      	ldr	r3, [r7, #4]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	20000e24 	.word	0x20000e24

080057fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005806:	4b51      	ldr	r3, [pc, #324]	; (800594c <xTaskIncrementTick+0x150>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	f040 808e 	bne.w	800592c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005810:	4b4f      	ldr	r3, [pc, #316]	; (8005950 <xTaskIncrementTick+0x154>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3301      	adds	r3, #1
 8005816:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005818:	4a4d      	ldr	r2, [pc, #308]	; (8005950 <xTaskIncrementTick+0x154>)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d120      	bne.n	8005866 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005824:	4b4b      	ldr	r3, [pc, #300]	; (8005954 <xTaskIncrementTick+0x158>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <xTaskIncrementTick+0x48>
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	603b      	str	r3, [r7, #0]
}
 8005840:	bf00      	nop
 8005842:	e7fe      	b.n	8005842 <xTaskIncrementTick+0x46>
 8005844:	4b43      	ldr	r3, [pc, #268]	; (8005954 <xTaskIncrementTick+0x158>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	4b43      	ldr	r3, [pc, #268]	; (8005958 <xTaskIncrementTick+0x15c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a41      	ldr	r2, [pc, #260]	; (8005954 <xTaskIncrementTick+0x158>)
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	4a41      	ldr	r2, [pc, #260]	; (8005958 <xTaskIncrementTick+0x15c>)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	4b40      	ldr	r3, [pc, #256]	; (800595c <xTaskIncrementTick+0x160>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3301      	adds	r3, #1
 800585e:	4a3f      	ldr	r2, [pc, #252]	; (800595c <xTaskIncrementTick+0x160>)
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	f000 fadf 	bl	8005e24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005866:	4b3e      	ldr	r3, [pc, #248]	; (8005960 <xTaskIncrementTick+0x164>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	429a      	cmp	r2, r3
 800586e:	d34e      	bcc.n	800590e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005870:	4b38      	ldr	r3, [pc, #224]	; (8005954 <xTaskIncrementTick+0x158>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <xTaskIncrementTick+0x82>
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <xTaskIncrementTick+0x84>
 800587e:	2300      	movs	r3, #0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d004      	beq.n	800588e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005884:	4b36      	ldr	r3, [pc, #216]	; (8005960 <xTaskIncrementTick+0x164>)
 8005886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800588a:	601a      	str	r2, [r3, #0]
					break;
 800588c:	e03f      	b.n	800590e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800588e:	4b31      	ldr	r3, [pc, #196]	; (8005954 <xTaskIncrementTick+0x158>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d203      	bcs.n	80058ae <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058a6:	4a2e      	ldr	r2, [pc, #184]	; (8005960 <xTaskIncrementTick+0x164>)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6013      	str	r3, [r2, #0]
						break;
 80058ac:	e02f      	b.n	800590e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	3304      	adds	r3, #4
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fe fe8a 	bl	80045cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d004      	beq.n	80058ca <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	3318      	adds	r3, #24
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fe fe81 	bl	80045cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ce:	4b25      	ldr	r3, [pc, #148]	; (8005964 <xTaskIncrementTick+0x168>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d903      	bls.n	80058de <xTaskIncrementTick+0xe2>
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	4a22      	ldr	r2, [pc, #136]	; (8005964 <xTaskIncrementTick+0x168>)
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e2:	4613      	mov	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4a1f      	ldr	r2, [pc, #124]	; (8005968 <xTaskIncrementTick+0x16c>)
 80058ec:	441a      	add	r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	3304      	adds	r3, #4
 80058f2:	4619      	mov	r1, r3
 80058f4:	4610      	mov	r0, r2
 80058f6:	f7fe fe0c 	bl	8004512 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fe:	4b1b      	ldr	r3, [pc, #108]	; (800596c <xTaskIncrementTick+0x170>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005904:	429a      	cmp	r2, r3
 8005906:	d3b3      	bcc.n	8005870 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005908:	2301      	movs	r3, #1
 800590a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800590c:	e7b0      	b.n	8005870 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800590e:	4b17      	ldr	r3, [pc, #92]	; (800596c <xTaskIncrementTick+0x170>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005914:	4914      	ldr	r1, [pc, #80]	; (8005968 <xTaskIncrementTick+0x16c>)
 8005916:	4613      	mov	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	440b      	add	r3, r1
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d907      	bls.n	8005936 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005926:	2301      	movs	r3, #1
 8005928:	617b      	str	r3, [r7, #20]
 800592a:	e004      	b.n	8005936 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800592c:	4b10      	ldr	r3, [pc, #64]	; (8005970 <xTaskIncrementTick+0x174>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3301      	adds	r3, #1
 8005932:	4a0f      	ldr	r2, [pc, #60]	; (8005970 <xTaskIncrementTick+0x174>)
 8005934:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005936:	4b0f      	ldr	r3, [pc, #60]	; (8005974 <xTaskIncrementTick+0x178>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800593e:	2301      	movs	r3, #1
 8005940:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005942:	697b      	ldr	r3, [r7, #20]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20000e48 	.word	0x20000e48
 8005950:	20000e24 	.word	0x20000e24
 8005954:	20000dd8 	.word	0x20000dd8
 8005958:	20000ddc 	.word	0x20000ddc
 800595c:	20000e38 	.word	0x20000e38
 8005960:	20000e40 	.word	0x20000e40
 8005964:	20000e28 	.word	0x20000e28
 8005968:	20000950 	.word	0x20000950
 800596c:	2000094c 	.word	0x2000094c
 8005970:	20000e30 	.word	0x20000e30
 8005974:	20000e34 	.word	0x20000e34

08005978 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800597e:	4b2a      	ldr	r3, [pc, #168]	; (8005a28 <vTaskSwitchContext+0xb0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005986:	4b29      	ldr	r3, [pc, #164]	; (8005a2c <vTaskSwitchContext+0xb4>)
 8005988:	2201      	movs	r2, #1
 800598a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800598c:	e046      	b.n	8005a1c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800598e:	4b27      	ldr	r3, [pc, #156]	; (8005a2c <vTaskSwitchContext+0xb4>)
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005994:	4b26      	ldr	r3, [pc, #152]	; (8005a30 <vTaskSwitchContext+0xb8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	e010      	b.n	80059be <vTaskSwitchContext+0x46>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10a      	bne.n	80059b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	607b      	str	r3, [r7, #4]
}
 80059b4:	bf00      	nop
 80059b6:	e7fe      	b.n	80059b6 <vTaskSwitchContext+0x3e>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	491d      	ldr	r1, [pc, #116]	; (8005a34 <vTaskSwitchContext+0xbc>)
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4613      	mov	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	440b      	add	r3, r1
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0e4      	beq.n	800599c <vTaskSwitchContext+0x24>
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4613      	mov	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4a15      	ldr	r2, [pc, #84]	; (8005a34 <vTaskSwitchContext+0xbc>)
 80059de:	4413      	add	r3, r2
 80059e0:	60bb      	str	r3, [r7, #8]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	605a      	str	r2, [r3, #4]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	3308      	adds	r3, #8
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d104      	bne.n	8005a02 <vTaskSwitchContext+0x8a>
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	605a      	str	r2, [r3, #4]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	4a0b      	ldr	r2, [pc, #44]	; (8005a38 <vTaskSwitchContext+0xc0>)
 8005a0a:	6013      	str	r3, [r2, #0]
 8005a0c:	4a08      	ldr	r2, [pc, #32]	; (8005a30 <vTaskSwitchContext+0xb8>)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a12:	4b09      	ldr	r3, [pc, #36]	; (8005a38 <vTaskSwitchContext+0xc0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3354      	adds	r3, #84	; 0x54
 8005a18:	4a08      	ldr	r2, [pc, #32]	; (8005a3c <vTaskSwitchContext+0xc4>)
 8005a1a:	6013      	str	r3, [r2, #0]
}
 8005a1c:	bf00      	nop
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	20000e48 	.word	0x20000e48
 8005a2c:	20000e34 	.word	0x20000e34
 8005a30:	20000e28 	.word	0x20000e28
 8005a34:	20000950 	.word	0x20000950
 8005a38:	2000094c 	.word	0x2000094c
 8005a3c:	2000005c 	.word	0x2000005c

08005a40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	60fb      	str	r3, [r7, #12]
}
 8005a62:	bf00      	nop
 8005a64:	e7fe      	b.n	8005a64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a66:	4b07      	ldr	r3, [pc, #28]	; (8005a84 <vTaskPlaceOnEventList+0x44>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3318      	adds	r3, #24
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7fe fd73 	bl	800455a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a74:	2101      	movs	r1, #1
 8005a76:	6838      	ldr	r0, [r7, #0]
 8005a78:	f000 fa86 	bl	8005f88 <prvAddCurrentTaskToDelayedList>
}
 8005a7c:	bf00      	nop
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	2000094c 	.word	0x2000094c

08005a88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10a      	bne.n	8005ab0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	617b      	str	r3, [r7, #20]
}
 8005aac:	bf00      	nop
 8005aae:	e7fe      	b.n	8005aae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <vTaskPlaceOnEventListRestricted+0x54>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3318      	adds	r3, #24
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f7fe fd2a 	bl	8004512 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ac8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	68b8      	ldr	r0, [r7, #8]
 8005ace:	f000 fa5b 	bl	8005f88 <prvAddCurrentTaskToDelayedList>
	}
 8005ad2:	bf00      	nop
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	2000094c 	.word	0x2000094c

08005ae0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10a      	bne.n	8005b0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	60fb      	str	r3, [r7, #12]
}
 8005b08:	bf00      	nop
 8005b0a:	e7fe      	b.n	8005b0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	3318      	adds	r3, #24
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fe fd5b 	bl	80045cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b16:	4b1e      	ldr	r3, [pc, #120]	; (8005b90 <xTaskRemoveFromEventList+0xb0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d11d      	bne.n	8005b5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	3304      	adds	r3, #4
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fe fd52 	bl	80045cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2c:	4b19      	ldr	r3, [pc, #100]	; (8005b94 <xTaskRemoveFromEventList+0xb4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d903      	bls.n	8005b3c <xTaskRemoveFromEventList+0x5c>
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	4a16      	ldr	r2, [pc, #88]	; (8005b94 <xTaskRemoveFromEventList+0xb4>)
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4a13      	ldr	r2, [pc, #76]	; (8005b98 <xTaskRemoveFromEventList+0xb8>)
 8005b4a:	441a      	add	r2, r3
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	3304      	adds	r3, #4
 8005b50:	4619      	mov	r1, r3
 8005b52:	4610      	mov	r0, r2
 8005b54:	f7fe fcdd 	bl	8004512 <vListInsertEnd>
 8005b58:	e005      	b.n	8005b66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	3318      	adds	r3, #24
 8005b5e:	4619      	mov	r1, r3
 8005b60:	480e      	ldr	r0, [pc, #56]	; (8005b9c <xTaskRemoveFromEventList+0xbc>)
 8005b62:	f7fe fcd6 	bl	8004512 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <xTaskRemoveFromEventList+0xc0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d905      	bls.n	8005b80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b74:	2301      	movs	r3, #1
 8005b76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b78:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <xTaskRemoveFromEventList+0xc4>)
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	e001      	b.n	8005b84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005b84:	697b      	ldr	r3, [r7, #20]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000e48 	.word	0x20000e48
 8005b94:	20000e28 	.word	0x20000e28
 8005b98:	20000950 	.word	0x20000950
 8005b9c:	20000de0 	.word	0x20000de0
 8005ba0:	2000094c 	.word	0x2000094c
 8005ba4:	20000e34 	.word	0x20000e34

08005ba8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005bb0:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <vTaskInternalSetTimeOutState+0x24>)
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005bb8:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <vTaskInternalSetTimeOutState+0x28>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	605a      	str	r2, [r3, #4]
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	20000e38 	.word	0x20000e38
 8005bd0:	20000e24 	.word	0x20000e24

08005bd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	613b      	str	r3, [r7, #16]
}
 8005bf6:	bf00      	nop
 8005bf8:	e7fe      	b.n	8005bf8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10a      	bne.n	8005c16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	60fb      	str	r3, [r7, #12]
}
 8005c12:	bf00      	nop
 8005c14:	e7fe      	b.n	8005c14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c16:	f000 fe4d 	bl	80068b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c1a:	4b1d      	ldr	r3, [pc, #116]	; (8005c90 <xTaskCheckForTimeOut+0xbc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c32:	d102      	bne.n	8005c3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61fb      	str	r3, [r7, #28]
 8005c38:	e023      	b.n	8005c82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4b15      	ldr	r3, [pc, #84]	; (8005c94 <xTaskCheckForTimeOut+0xc0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d007      	beq.n	8005c56 <xTaskCheckForTimeOut+0x82>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d302      	bcc.n	8005c56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c50:	2301      	movs	r3, #1
 8005c52:	61fb      	str	r3, [r7, #28]
 8005c54:	e015      	b.n	8005c82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d20b      	bcs.n	8005c78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	1ad2      	subs	r2, r2, r3
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff ff9b 	bl	8005ba8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c72:	2300      	movs	r3, #0
 8005c74:	61fb      	str	r3, [r7, #28]
 8005c76:	e004      	b.n	8005c82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c82:	f000 fe47 	bl	8006914 <vPortExitCritical>

	return xReturn;
 8005c86:	69fb      	ldr	r3, [r7, #28]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3720      	adds	r7, #32
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	20000e24 	.word	0x20000e24
 8005c94:	20000e38 	.word	0x20000e38

08005c98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c9c:	4b03      	ldr	r3, [pc, #12]	; (8005cac <vTaskMissedYield+0x14>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]
}
 8005ca2:	bf00      	nop
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	20000e34 	.word	0x20000e34

08005cb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005cb8:	f000 f852 	bl	8005d60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005cbc:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <prvIdleTask+0x28>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d9f9      	bls.n	8005cb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005cc4:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <prvIdleTask+0x2c>)
 8005cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005cd4:	e7f0      	b.n	8005cb8 <prvIdleTask+0x8>
 8005cd6:	bf00      	nop
 8005cd8:	20000950 	.word	0x20000950
 8005cdc:	e000ed04 	.word	0xe000ed04

08005ce0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	607b      	str	r3, [r7, #4]
 8005cea:	e00c      	b.n	8005d06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4a12      	ldr	r2, [pc, #72]	; (8005d40 <prvInitialiseTaskLists+0x60>)
 8005cf8:	4413      	add	r3, r2
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fe fbdc 	bl	80044b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3301      	adds	r3, #1
 8005d04:	607b      	str	r3, [r7, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b37      	cmp	r3, #55	; 0x37
 8005d0a:	d9ef      	bls.n	8005cec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d0c:	480d      	ldr	r0, [pc, #52]	; (8005d44 <prvInitialiseTaskLists+0x64>)
 8005d0e:	f7fe fbd3 	bl	80044b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d12:	480d      	ldr	r0, [pc, #52]	; (8005d48 <prvInitialiseTaskLists+0x68>)
 8005d14:	f7fe fbd0 	bl	80044b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d18:	480c      	ldr	r0, [pc, #48]	; (8005d4c <prvInitialiseTaskLists+0x6c>)
 8005d1a:	f7fe fbcd 	bl	80044b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d1e:	480c      	ldr	r0, [pc, #48]	; (8005d50 <prvInitialiseTaskLists+0x70>)
 8005d20:	f7fe fbca 	bl	80044b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d24:	480b      	ldr	r0, [pc, #44]	; (8005d54 <prvInitialiseTaskLists+0x74>)
 8005d26:	f7fe fbc7 	bl	80044b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d2a:	4b0b      	ldr	r3, [pc, #44]	; (8005d58 <prvInitialiseTaskLists+0x78>)
 8005d2c:	4a05      	ldr	r2, [pc, #20]	; (8005d44 <prvInitialiseTaskLists+0x64>)
 8005d2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d30:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <prvInitialiseTaskLists+0x7c>)
 8005d32:	4a05      	ldr	r2, [pc, #20]	; (8005d48 <prvInitialiseTaskLists+0x68>)
 8005d34:	601a      	str	r2, [r3, #0]
}
 8005d36:	bf00      	nop
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000950 	.word	0x20000950
 8005d44:	20000db0 	.word	0x20000db0
 8005d48:	20000dc4 	.word	0x20000dc4
 8005d4c:	20000de0 	.word	0x20000de0
 8005d50:	20000df4 	.word	0x20000df4
 8005d54:	20000e0c 	.word	0x20000e0c
 8005d58:	20000dd8 	.word	0x20000dd8
 8005d5c:	20000ddc 	.word	0x20000ddc

08005d60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d66:	e019      	b.n	8005d9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d68:	f000 fda4 	bl	80068b4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005d6c:	4b10      	ldr	r3, [pc, #64]	; (8005db0 <prvCheckTasksWaitingTermination+0x50>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fe fc27 	bl	80045cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	; (8005db4 <prvCheckTasksWaitingTermination+0x54>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	4a0b      	ldr	r2, [pc, #44]	; (8005db4 <prvCheckTasksWaitingTermination+0x54>)
 8005d86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d88:	4b0b      	ldr	r3, [pc, #44]	; (8005db8 <prvCheckTasksWaitingTermination+0x58>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	4a0a      	ldr	r2, [pc, #40]	; (8005db8 <prvCheckTasksWaitingTermination+0x58>)
 8005d90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d92:	f000 fdbf 	bl	8006914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f810 	bl	8005dbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d9c:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <prvCheckTasksWaitingTermination+0x58>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e1      	bne.n	8005d68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20000df4 	.word	0x20000df4
 8005db4:	20000e20 	.word	0x20000e20
 8005db8:	20000e08 	.word	0x20000e08

08005dbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3354      	adds	r3, #84	; 0x54
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f001 f89b 	bl	8006f04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d108      	bne.n	8005dea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 ff4f 	bl	8006c80 <vPortFree>
				vPortFree( pxTCB );
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 ff4c 	bl	8006c80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005de8:	e018      	b.n	8005e1c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d103      	bne.n	8005dfc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 ff43 	bl	8006c80 <vPortFree>
	}
 8005dfa:	e00f      	b.n	8005e1c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d00a      	beq.n	8005e1c <prvDeleteTCB+0x60>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	60fb      	str	r3, [r7, #12]
}
 8005e18:	bf00      	nop
 8005e1a:	e7fe      	b.n	8005e1a <prvDeleteTCB+0x5e>
	}
 8005e1c:	bf00      	nop
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e2a:	4b0f      	ldr	r3, [pc, #60]	; (8005e68 <prvResetNextTaskUnblockTime+0x44>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <prvResetNextTaskUnblockTime+0x14>
 8005e34:	2301      	movs	r3, #1
 8005e36:	e000      	b.n	8005e3a <prvResetNextTaskUnblockTime+0x16>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d004      	beq.n	8005e48 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e3e:	4b0b      	ldr	r3, [pc, #44]	; (8005e6c <prvResetNextTaskUnblockTime+0x48>)
 8005e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e44:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e46:	e008      	b.n	8005e5a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e48:	4b07      	ldr	r3, [pc, #28]	; (8005e68 <prvResetNextTaskUnblockTime+0x44>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	4a05      	ldr	r2, [pc, #20]	; (8005e6c <prvResetNextTaskUnblockTime+0x48>)
 8005e58:	6013      	str	r3, [r2, #0]
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	20000dd8 	.word	0x20000dd8
 8005e6c:	20000e40 	.word	0x20000e40

08005e70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e76:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <xTaskGetSchedulerState+0x34>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d102      	bne.n	8005e84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	607b      	str	r3, [r7, #4]
 8005e82:	e008      	b.n	8005e96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e84:	4b08      	ldr	r3, [pc, #32]	; (8005ea8 <xTaskGetSchedulerState+0x38>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d102      	bne.n	8005e92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	607b      	str	r3, [r7, #4]
 8005e90:	e001      	b.n	8005e96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e92:	2300      	movs	r3, #0
 8005e94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e96:	687b      	ldr	r3, [r7, #4]
	}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	20000e2c 	.word	0x20000e2c
 8005ea8:	20000e48 	.word	0x20000e48

08005eac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d056      	beq.n	8005f70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ec2:	4b2e      	ldr	r3, [pc, #184]	; (8005f7c <xTaskPriorityDisinherit+0xd0>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d00a      	beq.n	8005ee2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	60fb      	str	r3, [r7, #12]
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10a      	bne.n	8005f00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	60bb      	str	r3, [r7, #8]
}
 8005efc:	bf00      	nop
 8005efe:	e7fe      	b.n	8005efe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f04:	1e5a      	subs	r2, r3, #1
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d02c      	beq.n	8005f70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d128      	bne.n	8005f70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	3304      	adds	r3, #4
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe fb52 	bl	80045cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f40:	4b0f      	ldr	r3, [pc, #60]	; (8005f80 <xTaskPriorityDisinherit+0xd4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d903      	bls.n	8005f50 <xTaskPriorityDisinherit+0xa4>
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	4a0c      	ldr	r2, [pc, #48]	; (8005f80 <xTaskPriorityDisinherit+0xd4>)
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4a09      	ldr	r2, [pc, #36]	; (8005f84 <xTaskPriorityDisinherit+0xd8>)
 8005f5e:	441a      	add	r2, r3
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	3304      	adds	r3, #4
 8005f64:	4619      	mov	r1, r3
 8005f66:	4610      	mov	r0, r2
 8005f68:	f7fe fad3 	bl	8004512 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f70:	697b      	ldr	r3, [r7, #20]
	}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	2000094c 	.word	0x2000094c
 8005f80:	20000e28 	.word	0x20000e28
 8005f84:	20000950 	.word	0x20000950

08005f88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f92:	4b21      	ldr	r3, [pc, #132]	; (8006018 <prvAddCurrentTaskToDelayedList+0x90>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f98:	4b20      	ldr	r3, [pc, #128]	; (800601c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fe fb14 	bl	80045cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005faa:	d10a      	bne.n	8005fc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d007      	beq.n	8005fc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fb2:	4b1a      	ldr	r3, [pc, #104]	; (800601c <prvAddCurrentTaskToDelayedList+0x94>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4819      	ldr	r0, [pc, #100]	; (8006020 <prvAddCurrentTaskToDelayedList+0x98>)
 8005fbc:	f7fe faa9 	bl	8004512 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005fc0:	e026      	b.n	8006010 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005fca:	4b14      	ldr	r3, [pc, #80]	; (800601c <prvAddCurrentTaskToDelayedList+0x94>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d209      	bcs.n	8005fee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fda:	4b12      	ldr	r3, [pc, #72]	; (8006024 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4b0f      	ldr	r3, [pc, #60]	; (800601c <prvAddCurrentTaskToDelayedList+0x94>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	f7fe fab7 	bl	800455a <vListInsert>
}
 8005fec:	e010      	b.n	8006010 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fee:	4b0e      	ldr	r3, [pc, #56]	; (8006028 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4b0a      	ldr	r3, [pc, #40]	; (800601c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	f7fe faad 	bl	800455a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006000:	4b0a      	ldr	r3, [pc, #40]	; (800602c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	429a      	cmp	r2, r3
 8006008:	d202      	bcs.n	8006010 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800600a:	4a08      	ldr	r2, [pc, #32]	; (800602c <prvAddCurrentTaskToDelayedList+0xa4>)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	6013      	str	r3, [r2, #0]
}
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	20000e24 	.word	0x20000e24
 800601c:	2000094c 	.word	0x2000094c
 8006020:	20000e0c 	.word	0x20000e0c
 8006024:	20000ddc 	.word	0x20000ddc
 8006028:	20000dd8 	.word	0x20000dd8
 800602c:	20000e40 	.word	0x20000e40

08006030 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08a      	sub	sp, #40	; 0x28
 8006034:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006036:	2300      	movs	r3, #0
 8006038:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800603a:	f000 facb 	bl	80065d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800603e:	4b1c      	ldr	r3, [pc, #112]	; (80060b0 <xTimerCreateTimerTask+0x80>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d021      	beq.n	800608a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800604a:	2300      	movs	r3, #0
 800604c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800604e:	1d3a      	adds	r2, r7, #4
 8006050:	f107 0108 	add.w	r1, r7, #8
 8006054:	f107 030c 	add.w	r3, r7, #12
 8006058:	4618      	mov	r0, r3
 800605a:	f7fe fa13 	bl	8004484 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	9202      	str	r2, [sp, #8]
 8006066:	9301      	str	r3, [sp, #4]
 8006068:	2302      	movs	r3, #2
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	2300      	movs	r3, #0
 800606e:	460a      	mov	r2, r1
 8006070:	4910      	ldr	r1, [pc, #64]	; (80060b4 <xTimerCreateTimerTask+0x84>)
 8006072:	4811      	ldr	r0, [pc, #68]	; (80060b8 <xTimerCreateTimerTask+0x88>)
 8006074:	f7ff f8b2 	bl	80051dc <xTaskCreateStatic>
 8006078:	4603      	mov	r3, r0
 800607a:	4a10      	ldr	r2, [pc, #64]	; (80060bc <xTimerCreateTimerTask+0x8c>)
 800607c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800607e:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <xTimerCreateTimerTask+0x8c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006086:	2301      	movs	r3, #1
 8006088:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10a      	bne.n	80060a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	613b      	str	r3, [r7, #16]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80060a6:	697b      	ldr	r3, [r7, #20]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20000e7c 	.word	0x20000e7c
 80060b4:	08007aa8 	.word	0x08007aa8
 80060b8:	080061dd 	.word	0x080061dd
 80060bc:	20000e80 	.word	0x20000e80

080060c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08a      	sub	sp, #40	; 0x28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80060ce:	2300      	movs	r3, #0
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10a      	bne.n	80060ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	623b      	str	r3, [r7, #32]
}
 80060ea:	bf00      	nop
 80060ec:	e7fe      	b.n	80060ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80060ee:	4b1a      	ldr	r3, [pc, #104]	; (8006158 <xTimerGenericCommand+0x98>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d02a      	beq.n	800614c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2b05      	cmp	r3, #5
 8006106:	dc18      	bgt.n	800613a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006108:	f7ff feb2 	bl	8005e70 <xTaskGetSchedulerState>
 800610c:	4603      	mov	r3, r0
 800610e:	2b02      	cmp	r3, #2
 8006110:	d109      	bne.n	8006126 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006112:	4b11      	ldr	r3, [pc, #68]	; (8006158 <xTimerGenericCommand+0x98>)
 8006114:	6818      	ldr	r0, [r3, #0]
 8006116:	f107 0110 	add.w	r1, r7, #16
 800611a:	2300      	movs	r3, #0
 800611c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800611e:	f7fe fbbf 	bl	80048a0 <xQueueGenericSend>
 8006122:	6278      	str	r0, [r7, #36]	; 0x24
 8006124:	e012      	b.n	800614c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006126:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <xTimerGenericCommand+0x98>)
 8006128:	6818      	ldr	r0, [r3, #0]
 800612a:	f107 0110 	add.w	r1, r7, #16
 800612e:	2300      	movs	r3, #0
 8006130:	2200      	movs	r2, #0
 8006132:	f7fe fbb5 	bl	80048a0 <xQueueGenericSend>
 8006136:	6278      	str	r0, [r7, #36]	; 0x24
 8006138:	e008      	b.n	800614c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800613a:	4b07      	ldr	r3, [pc, #28]	; (8006158 <xTimerGenericCommand+0x98>)
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	f107 0110 	add.w	r1, r7, #16
 8006142:	2300      	movs	r3, #0
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	f7fe fca9 	bl	8004a9c <xQueueGenericSendFromISR>
 800614a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800614e:	4618      	mov	r0, r3
 8006150:	3728      	adds	r7, #40	; 0x28
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20000e7c 	.word	0x20000e7c

0800615c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b088      	sub	sp, #32
 8006160:	af02      	add	r7, sp, #8
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006166:	4b1c      	ldr	r3, [pc, #112]	; (80061d8 <prvProcessExpiredTimer+0x7c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	3304      	adds	r3, #4
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe fa29 	bl	80045cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d122      	bne.n	80061c8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	18d1      	adds	r1, r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	6978      	ldr	r0, [r7, #20]
 8006190:	f000 f8c8 	bl	8006324 <prvInsertTimerInActiveList>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d016      	beq.n	80061c8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800619a:	2300      	movs	r3, #0
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	2300      	movs	r3, #0
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	2100      	movs	r1, #0
 80061a4:	6978      	ldr	r0, [r7, #20]
 80061a6:	f7ff ff8b 	bl	80060c0 <xTimerGenericCommand>
 80061aa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10a      	bne.n	80061c8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	60fb      	str	r3, [r7, #12]
}
 80061c4:	bf00      	nop
 80061c6:	e7fe      	b.n	80061c6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	6978      	ldr	r0, [r7, #20]
 80061ce:	4798      	blx	r3
}
 80061d0:	bf00      	nop
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20000e74 	.word	0x20000e74

080061dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061e4:	f107 0308 	add.w	r3, r7, #8
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 f857 	bl	800629c <prvGetNextExpireTime>
 80061ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4619      	mov	r1, r3
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 f803 	bl	8006200 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80061fa:	f000 f8d5 	bl	80063a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061fe:	e7f1      	b.n	80061e4 <prvTimerTask+0x8>

08006200 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800620a:	f7ff fa3b 	bl	8005684 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800620e:	f107 0308 	add.w	r3, r7, #8
 8006212:	4618      	mov	r0, r3
 8006214:	f000 f866 	bl	80062e4 <prvSampleTimeNow>
 8006218:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d130      	bne.n	8006282 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10a      	bne.n	800623c <prvProcessTimerOrBlockTask+0x3c>
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	429a      	cmp	r2, r3
 800622c:	d806      	bhi.n	800623c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800622e:	f7ff fa37 	bl	80056a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006232:	68f9      	ldr	r1, [r7, #12]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff ff91 	bl	800615c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800623a:	e024      	b.n	8006286 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d008      	beq.n	8006254 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006242:	4b13      	ldr	r3, [pc, #76]	; (8006290 <prvProcessTimerOrBlockTask+0x90>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	bf0c      	ite	eq
 800624c:	2301      	moveq	r3, #1
 800624e:	2300      	movne	r3, #0
 8006250:	b2db      	uxtb	r3, r3
 8006252:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006254:	4b0f      	ldr	r3, [pc, #60]	; (8006294 <prvProcessTimerOrBlockTask+0x94>)
 8006256:	6818      	ldr	r0, [r3, #0]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	4619      	mov	r1, r3
 8006262:	f7fe ff87 	bl	8005174 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006266:	f7ff fa1b 	bl	80056a0 <xTaskResumeAll>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006270:	4b09      	ldr	r3, [pc, #36]	; (8006298 <prvProcessTimerOrBlockTask+0x98>)
 8006272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	f3bf 8f6f 	isb	sy
}
 8006280:	e001      	b.n	8006286 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006282:	f7ff fa0d 	bl	80056a0 <xTaskResumeAll>
}
 8006286:	bf00      	nop
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20000e78 	.word	0x20000e78
 8006294:	20000e7c 	.word	0x20000e7c
 8006298:	e000ed04 	.word	0xe000ed04

0800629c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80062a4:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <prvGetNextExpireTime+0x44>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	bf0c      	ite	eq
 80062ae:	2301      	moveq	r3, #1
 80062b0:	2300      	movne	r3, #0
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d105      	bne.n	80062ce <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062c2:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <prvGetNextExpireTime+0x44>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	e001      	b.n	80062d2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80062d2:	68fb      	ldr	r3, [r7, #12]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	20000e74 	.word	0x20000e74

080062e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80062ec:	f7ff fa76 	bl	80057dc <xTaskGetTickCount>
 80062f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80062f2:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <prvSampleTimeNow+0x3c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d205      	bcs.n	8006308 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80062fc:	f000 f908 	bl	8006510 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	e002      	b.n	800630e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800630e:	4a04      	ldr	r2, [pc, #16]	; (8006320 <prvSampleTimeNow+0x3c>)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006314:	68fb      	ldr	r3, [r7, #12]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000e84 	.word	0x20000e84

08006324 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	429a      	cmp	r2, r3
 8006348:	d812      	bhi.n	8006370 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	1ad2      	subs	r2, r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	429a      	cmp	r2, r3
 8006356:	d302      	bcc.n	800635e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006358:	2301      	movs	r3, #1
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	e01b      	b.n	8006396 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800635e:	4b10      	ldr	r3, [pc, #64]	; (80063a0 <prvInsertTimerInActiveList+0x7c>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3304      	adds	r3, #4
 8006366:	4619      	mov	r1, r3
 8006368:	4610      	mov	r0, r2
 800636a:	f7fe f8f6 	bl	800455a <vListInsert>
 800636e:	e012      	b.n	8006396 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	429a      	cmp	r2, r3
 8006376:	d206      	bcs.n	8006386 <prvInsertTimerInActiveList+0x62>
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	429a      	cmp	r2, r3
 800637e:	d302      	bcc.n	8006386 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006380:	2301      	movs	r3, #1
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	e007      	b.n	8006396 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006386:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <prvInsertTimerInActiveList+0x80>)
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3304      	adds	r3, #4
 800638e:	4619      	mov	r1, r3
 8006390:	4610      	mov	r0, r2
 8006392:	f7fe f8e2 	bl	800455a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006396:	697b      	ldr	r3, [r7, #20]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	20000e78 	.word	0x20000e78
 80063a4:	20000e74 	.word	0x20000e74

080063a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08e      	sub	sp, #56	; 0x38
 80063ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063ae:	e09d      	b.n	80064ec <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	da18      	bge.n	80063e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80063b6:	1d3b      	adds	r3, r7, #4
 80063b8:	3304      	adds	r3, #4
 80063ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10a      	bne.n	80063d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	61fb      	str	r3, [r7, #28]
}
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063de:	6850      	ldr	r0, [r2, #4]
 80063e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063e2:	6892      	ldr	r2, [r2, #8]
 80063e4:	4611      	mov	r1, r2
 80063e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	db7e      	blt.n	80064ec <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d004      	beq.n	8006404 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	3304      	adds	r3, #4
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fe f8e4 	bl	80045cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006404:	463b      	mov	r3, r7
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff ff6c 	bl	80062e4 <prvSampleTimeNow>
 800640c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b09      	cmp	r3, #9
 8006412:	d86a      	bhi.n	80064ea <prvProcessReceivedCommands+0x142>
 8006414:	a201      	add	r2, pc, #4	; (adr r2, 800641c <prvProcessReceivedCommands+0x74>)
 8006416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641a:	bf00      	nop
 800641c:	08006445 	.word	0x08006445
 8006420:	08006445 	.word	0x08006445
 8006424:	08006445 	.word	0x08006445
 8006428:	080064ed 	.word	0x080064ed
 800642c:	080064a1 	.word	0x080064a1
 8006430:	080064d9 	.word	0x080064d9
 8006434:	08006445 	.word	0x08006445
 8006438:	08006445 	.word	0x08006445
 800643c:	080064ed 	.word	0x080064ed
 8006440:	080064a1 	.word	0x080064a1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	18d1      	adds	r1, r2, r3
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006452:	f7ff ff67 	bl	8006324 <prvInsertTimerInActiveList>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d047      	beq.n	80064ec <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006462:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d13f      	bne.n	80064ec <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	441a      	add	r2, r3
 8006474:	2300      	movs	r3, #0
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	2300      	movs	r3, #0
 800647a:	2100      	movs	r1, #0
 800647c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800647e:	f7ff fe1f 	bl	80060c0 <xTimerGenericCommand>
 8006482:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d130      	bne.n	80064ec <prvProcessReceivedCommands+0x144>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	61bb      	str	r3, [r7, #24]
}
 800649c:	bf00      	nop
 800649e:	e7fe      	b.n	800649e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80064a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	617b      	str	r3, [r7, #20]
}
 80064c0:	bf00      	nop
 80064c2:	e7fe      	b.n	80064c2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	699a      	ldr	r2, [r3, #24]
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	18d1      	adds	r1, r2, r3
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064d2:	f7ff ff27 	bl	8006324 <prvInsertTimerInActiveList>
					break;
 80064d6:	e009      	b.n	80064ec <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d104      	bne.n	80064ec <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80064e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064e4:	f000 fbcc 	bl	8006c80 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80064e8:	e000      	b.n	80064ec <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80064ea:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064ec:	4b07      	ldr	r3, [pc, #28]	; (800650c <prvProcessReceivedCommands+0x164>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	1d39      	adds	r1, r7, #4
 80064f2:	2200      	movs	r2, #0
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fe fb69 	bl	8004bcc <xQueueReceive>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f47f af57 	bne.w	80063b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006502:	bf00      	nop
 8006504:	bf00      	nop
 8006506:	3730      	adds	r7, #48	; 0x30
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	20000e7c 	.word	0x20000e7c

08006510 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006516:	e045      	b.n	80065a4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006518:	4b2c      	ldr	r3, [pc, #176]	; (80065cc <prvSwitchTimerLists+0xbc>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006522:	4b2a      	ldr	r3, [pc, #168]	; (80065cc <prvSwitchTimerLists+0xbc>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3304      	adds	r3, #4
 8006530:	4618      	mov	r0, r3
 8006532:	f7fe f84b 	bl	80045cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d12e      	bne.n	80065a4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4413      	add	r3, r2
 800654e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	429a      	cmp	r2, r3
 8006556:	d90e      	bls.n	8006576 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006564:	4b19      	ldr	r3, [pc, #100]	; (80065cc <prvSwitchTimerLists+0xbc>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3304      	adds	r3, #4
 800656c:	4619      	mov	r1, r3
 800656e:	4610      	mov	r0, r2
 8006570:	f7fd fff3 	bl	800455a <vListInsert>
 8006574:	e016      	b.n	80065a4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006576:	2300      	movs	r3, #0
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	2300      	movs	r3, #0
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	2100      	movs	r1, #0
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f7ff fd9d 	bl	80060c0 <xTimerGenericCommand>
 8006586:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10a      	bne.n	80065a4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	603b      	str	r3, [r7, #0]
}
 80065a0:	bf00      	nop
 80065a2:	e7fe      	b.n	80065a2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065a4:	4b09      	ldr	r3, [pc, #36]	; (80065cc <prvSwitchTimerLists+0xbc>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1b4      	bne.n	8006518 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065ae:	4b07      	ldr	r3, [pc, #28]	; (80065cc <prvSwitchTimerLists+0xbc>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80065b4:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <prvSwitchTimerLists+0xc0>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a04      	ldr	r2, [pc, #16]	; (80065cc <prvSwitchTimerLists+0xbc>)
 80065ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80065bc:	4a04      	ldr	r2, [pc, #16]	; (80065d0 <prvSwitchTimerLists+0xc0>)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	6013      	str	r3, [r2, #0]
}
 80065c2:	bf00      	nop
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20000e74 	.word	0x20000e74
 80065d0:	20000e78 	.word	0x20000e78

080065d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80065da:	f000 f96b 	bl	80068b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80065de:	4b15      	ldr	r3, [pc, #84]	; (8006634 <prvCheckForValidListAndQueue+0x60>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d120      	bne.n	8006628 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80065e6:	4814      	ldr	r0, [pc, #80]	; (8006638 <prvCheckForValidListAndQueue+0x64>)
 80065e8:	f7fd ff66 	bl	80044b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80065ec:	4813      	ldr	r0, [pc, #76]	; (800663c <prvCheckForValidListAndQueue+0x68>)
 80065ee:	f7fd ff63 	bl	80044b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80065f2:	4b13      	ldr	r3, [pc, #76]	; (8006640 <prvCheckForValidListAndQueue+0x6c>)
 80065f4:	4a10      	ldr	r2, [pc, #64]	; (8006638 <prvCheckForValidListAndQueue+0x64>)
 80065f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80065f8:	4b12      	ldr	r3, [pc, #72]	; (8006644 <prvCheckForValidListAndQueue+0x70>)
 80065fa:	4a10      	ldr	r2, [pc, #64]	; (800663c <prvCheckForValidListAndQueue+0x68>)
 80065fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80065fe:	2300      	movs	r3, #0
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	4b11      	ldr	r3, [pc, #68]	; (8006648 <prvCheckForValidListAndQueue+0x74>)
 8006604:	4a11      	ldr	r2, [pc, #68]	; (800664c <prvCheckForValidListAndQueue+0x78>)
 8006606:	2110      	movs	r1, #16
 8006608:	200a      	movs	r0, #10
 800660a:	f7fe f871 	bl	80046f0 <xQueueGenericCreateStatic>
 800660e:	4603      	mov	r3, r0
 8006610:	4a08      	ldr	r2, [pc, #32]	; (8006634 <prvCheckForValidListAndQueue+0x60>)
 8006612:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006614:	4b07      	ldr	r3, [pc, #28]	; (8006634 <prvCheckForValidListAndQueue+0x60>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d005      	beq.n	8006628 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800661c:	4b05      	ldr	r3, [pc, #20]	; (8006634 <prvCheckForValidListAndQueue+0x60>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	490b      	ldr	r1, [pc, #44]	; (8006650 <prvCheckForValidListAndQueue+0x7c>)
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe fd7c 	bl	8005120 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006628:	f000 f974 	bl	8006914 <vPortExitCritical>
}
 800662c:	bf00      	nop
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20000e7c 	.word	0x20000e7c
 8006638:	20000e4c 	.word	0x20000e4c
 800663c:	20000e60 	.word	0x20000e60
 8006640:	20000e74 	.word	0x20000e74
 8006644:	20000e78 	.word	0x20000e78
 8006648:	20000f28 	.word	0x20000f28
 800664c:	20000e88 	.word	0x20000e88
 8006650:	08007ab0 	.word	0x08007ab0

08006654 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3b04      	subs	r3, #4
 8006664:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800666c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3b04      	subs	r3, #4
 8006672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f023 0201 	bic.w	r2, r3, #1
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3b04      	subs	r3, #4
 8006682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006684:	4a0c      	ldr	r2, [pc, #48]	; (80066b8 <pxPortInitialiseStack+0x64>)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3b14      	subs	r3, #20
 800668e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3b04      	subs	r3, #4
 800669a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f06f 0202 	mvn.w	r2, #2
 80066a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3b20      	subs	r3, #32
 80066a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066aa:	68fb      	ldr	r3, [r7, #12]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	080066bd 	.word	0x080066bd

080066bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066c6:	4b12      	ldr	r3, [pc, #72]	; (8006710 <prvTaskExitError+0x54>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066ce:	d00a      	beq.n	80066e6 <prvTaskExitError+0x2a>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	60fb      	str	r3, [r7, #12]
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <prvTaskExitError+0x28>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	60bb      	str	r3, [r7, #8]
}
 80066f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066fa:	bf00      	nop
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0fc      	beq.n	80066fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006702:	bf00      	nop
 8006704:	bf00      	nop
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	2000000c 	.word	0x2000000c
	...

08006720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006720:	4b07      	ldr	r3, [pc, #28]	; (8006740 <pxCurrentTCBConst2>)
 8006722:	6819      	ldr	r1, [r3, #0]
 8006724:	6808      	ldr	r0, [r1, #0]
 8006726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672a:	f380 8809 	msr	PSP, r0
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f04f 0000 	mov.w	r0, #0
 8006736:	f380 8811 	msr	BASEPRI, r0
 800673a:	4770      	bx	lr
 800673c:	f3af 8000 	nop.w

08006740 <pxCurrentTCBConst2>:
 8006740:	2000094c 	.word	0x2000094c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop

08006748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006748:	4808      	ldr	r0, [pc, #32]	; (800676c <prvPortStartFirstTask+0x24>)
 800674a:	6800      	ldr	r0, [r0, #0]
 800674c:	6800      	ldr	r0, [r0, #0]
 800674e:	f380 8808 	msr	MSP, r0
 8006752:	f04f 0000 	mov.w	r0, #0
 8006756:	f380 8814 	msr	CONTROL, r0
 800675a:	b662      	cpsie	i
 800675c:	b661      	cpsie	f
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	df00      	svc	0
 8006768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800676a:	bf00      	nop
 800676c:	e000ed08 	.word	0xe000ed08

08006770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006776:	4b46      	ldr	r3, [pc, #280]	; (8006890 <xPortStartScheduler+0x120>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a46      	ldr	r2, [pc, #280]	; (8006894 <xPortStartScheduler+0x124>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d10a      	bne.n	8006796 <xPortStartScheduler+0x26>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	613b      	str	r3, [r7, #16]
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006796:	4b3e      	ldr	r3, [pc, #248]	; (8006890 <xPortStartScheduler+0x120>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a3f      	ldr	r2, [pc, #252]	; (8006898 <xPortStartScheduler+0x128>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d10a      	bne.n	80067b6 <xPortStartScheduler+0x46>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	60fb      	str	r3, [r7, #12]
}
 80067b2:	bf00      	nop
 80067b4:	e7fe      	b.n	80067b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067b6:	4b39      	ldr	r3, [pc, #228]	; (800689c <xPortStartScheduler+0x12c>)
 80067b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	22ff      	movs	r2, #255	; 0xff
 80067c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	4b31      	ldr	r3, [pc, #196]	; (80068a0 <xPortStartScheduler+0x130>)
 80067dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067de:	4b31      	ldr	r3, [pc, #196]	; (80068a4 <xPortStartScheduler+0x134>)
 80067e0:	2207      	movs	r2, #7
 80067e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067e4:	e009      	b.n	80067fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80067e6:	4b2f      	ldr	r3, [pc, #188]	; (80068a4 <xPortStartScheduler+0x134>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	4a2d      	ldr	r2, [pc, #180]	; (80068a4 <xPortStartScheduler+0x134>)
 80067ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067f0:	78fb      	ldrb	r3, [r7, #3]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006802:	2b80      	cmp	r3, #128	; 0x80
 8006804:	d0ef      	beq.n	80067e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006806:	4b27      	ldr	r3, [pc, #156]	; (80068a4 <xPortStartScheduler+0x134>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f1c3 0307 	rsb	r3, r3, #7
 800680e:	2b04      	cmp	r3, #4
 8006810:	d00a      	beq.n	8006828 <xPortStartScheduler+0xb8>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	60bb      	str	r3, [r7, #8]
}
 8006824:	bf00      	nop
 8006826:	e7fe      	b.n	8006826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006828:	4b1e      	ldr	r3, [pc, #120]	; (80068a4 <xPortStartScheduler+0x134>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	021b      	lsls	r3, r3, #8
 800682e:	4a1d      	ldr	r2, [pc, #116]	; (80068a4 <xPortStartScheduler+0x134>)
 8006830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006832:	4b1c      	ldr	r3, [pc, #112]	; (80068a4 <xPortStartScheduler+0x134>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800683a:	4a1a      	ldr	r2, [pc, #104]	; (80068a4 <xPortStartScheduler+0x134>)
 800683c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	b2da      	uxtb	r2, r3
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006846:	4b18      	ldr	r3, [pc, #96]	; (80068a8 <xPortStartScheduler+0x138>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a17      	ldr	r2, [pc, #92]	; (80068a8 <xPortStartScheduler+0x138>)
 800684c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006852:	4b15      	ldr	r3, [pc, #84]	; (80068a8 <xPortStartScheduler+0x138>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a14      	ldr	r2, [pc, #80]	; (80068a8 <xPortStartScheduler+0x138>)
 8006858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800685c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800685e:	f000 f8dd 	bl	8006a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006862:	4b12      	ldr	r3, [pc, #72]	; (80068ac <xPortStartScheduler+0x13c>)
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006868:	f000 f8fc 	bl	8006a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800686c:	4b10      	ldr	r3, [pc, #64]	; (80068b0 <xPortStartScheduler+0x140>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a0f      	ldr	r2, [pc, #60]	; (80068b0 <xPortStartScheduler+0x140>)
 8006872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006878:	f7ff ff66 	bl	8006748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800687c:	f7ff f87c 	bl	8005978 <vTaskSwitchContext>
	prvTaskExitError();
 8006880:	f7ff ff1c 	bl	80066bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	e000ed00 	.word	0xe000ed00
 8006894:	410fc271 	.word	0x410fc271
 8006898:	410fc270 	.word	0x410fc270
 800689c:	e000e400 	.word	0xe000e400
 80068a0:	20000f78 	.word	0x20000f78
 80068a4:	20000f7c 	.word	0x20000f7c
 80068a8:	e000ed20 	.word	0xe000ed20
 80068ac:	2000000c 	.word	0x2000000c
 80068b0:	e000ef34 	.word	0xe000ef34

080068b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
	__asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	607b      	str	r3, [r7, #4]
}
 80068cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068ce:	4b0f      	ldr	r3, [pc, #60]	; (800690c <vPortEnterCritical+0x58>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3301      	adds	r3, #1
 80068d4:	4a0d      	ldr	r2, [pc, #52]	; (800690c <vPortEnterCritical+0x58>)
 80068d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068d8:	4b0c      	ldr	r3, [pc, #48]	; (800690c <vPortEnterCritical+0x58>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d10f      	bne.n	8006900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068e0:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <vPortEnterCritical+0x5c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <vPortEnterCritical+0x4c>
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	603b      	str	r3, [r7, #0]
}
 80068fc:	bf00      	nop
 80068fe:	e7fe      	b.n	80068fe <vPortEnterCritical+0x4a>
	}
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	2000000c 	.word	0x2000000c
 8006910:	e000ed04 	.word	0xe000ed04

08006914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800691a:	4b12      	ldr	r3, [pc, #72]	; (8006964 <vPortExitCritical+0x50>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10a      	bne.n	8006938 <vPortExitCritical+0x24>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	607b      	str	r3, [r7, #4]
}
 8006934:	bf00      	nop
 8006936:	e7fe      	b.n	8006936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006938:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <vPortExitCritical+0x50>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3b01      	subs	r3, #1
 800693e:	4a09      	ldr	r2, [pc, #36]	; (8006964 <vPortExitCritical+0x50>)
 8006940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006942:	4b08      	ldr	r3, [pc, #32]	; (8006964 <vPortExitCritical+0x50>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d105      	bne.n	8006956 <vPortExitCritical+0x42>
 800694a:	2300      	movs	r3, #0
 800694c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	f383 8811 	msr	BASEPRI, r3
}
 8006954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	2000000c 	.word	0x2000000c
	...

08006970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006970:	f3ef 8009 	mrs	r0, PSP
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	4b15      	ldr	r3, [pc, #84]	; (80069d0 <pxCurrentTCBConst>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	f01e 0f10 	tst.w	lr, #16
 8006980:	bf08      	it	eq
 8006982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698a:	6010      	str	r0, [r2, #0]
 800698c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006994:	f380 8811 	msr	BASEPRI, r0
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f7fe ffea 	bl	8005978 <vTaskSwitchContext>
 80069a4:	f04f 0000 	mov.w	r0, #0
 80069a8:	f380 8811 	msr	BASEPRI, r0
 80069ac:	bc09      	pop	{r0, r3}
 80069ae:	6819      	ldr	r1, [r3, #0]
 80069b0:	6808      	ldr	r0, [r1, #0]
 80069b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b6:	f01e 0f10 	tst.w	lr, #16
 80069ba:	bf08      	it	eq
 80069bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069c0:	f380 8809 	msr	PSP, r0
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	f3af 8000 	nop.w

080069d0 <pxCurrentTCBConst>:
 80069d0:	2000094c 	.word	0x2000094c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop

080069d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	607b      	str	r3, [r7, #4]
}
 80069f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069f2:	f7fe ff03 	bl	80057fc <xTaskIncrementTick>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069fc:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <SysTick_Handler+0x40>)
 80069fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	2300      	movs	r3, #0
 8006a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	f383 8811 	msr	BASEPRI, r3
}
 8006a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a10:	bf00      	nop
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	e000ed04 	.word	0xe000ed04

08006a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a20:	4b0b      	ldr	r3, [pc, #44]	; (8006a50 <vPortSetupTimerInterrupt+0x34>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a26:	4b0b      	ldr	r3, [pc, #44]	; (8006a54 <vPortSetupTimerInterrupt+0x38>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a2c:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <vPortSetupTimerInterrupt+0x3c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a0a      	ldr	r2, [pc, #40]	; (8006a5c <vPortSetupTimerInterrupt+0x40>)
 8006a32:	fba2 2303 	umull	r2, r3, r2, r3
 8006a36:	099b      	lsrs	r3, r3, #6
 8006a38:	4a09      	ldr	r2, [pc, #36]	; (8006a60 <vPortSetupTimerInterrupt+0x44>)
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a3e:	4b04      	ldr	r3, [pc, #16]	; (8006a50 <vPortSetupTimerInterrupt+0x34>)
 8006a40:	2207      	movs	r2, #7
 8006a42:	601a      	str	r2, [r3, #0]
}
 8006a44:	bf00      	nop
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	e000e010 	.word	0xe000e010
 8006a54:	e000e018 	.word	0xe000e018
 8006a58:	20000000 	.word	0x20000000
 8006a5c:	10624dd3 	.word	0x10624dd3
 8006a60:	e000e014 	.word	0xe000e014

08006a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a74 <vPortEnableVFP+0x10>
 8006a68:	6801      	ldr	r1, [r0, #0]
 8006a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a6e:	6001      	str	r1, [r0, #0]
 8006a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a72:	bf00      	nop
 8006a74:	e000ed88 	.word	0xe000ed88

08006a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a7e:	f3ef 8305 	mrs	r3, IPSR
 8006a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2b0f      	cmp	r3, #15
 8006a88:	d914      	bls.n	8006ab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a8a:	4a17      	ldr	r2, [pc, #92]	; (8006ae8 <vPortValidateInterruptPriority+0x70>)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a94:	4b15      	ldr	r3, [pc, #84]	; (8006aec <vPortValidateInterruptPriority+0x74>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	7afa      	ldrb	r2, [r7, #11]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d20a      	bcs.n	8006ab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	607b      	str	r3, [r7, #4]
}
 8006ab0:	bf00      	nop
 8006ab2:	e7fe      	b.n	8006ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ab4:	4b0e      	ldr	r3, [pc, #56]	; (8006af0 <vPortValidateInterruptPriority+0x78>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006abc:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <vPortValidateInterruptPriority+0x7c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d90a      	bls.n	8006ada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	603b      	str	r3, [r7, #0]
}
 8006ad6:	bf00      	nop
 8006ad8:	e7fe      	b.n	8006ad8 <vPortValidateInterruptPriority+0x60>
	}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	e000e3f0 	.word	0xe000e3f0
 8006aec:	20000f78 	.word	0x20000f78
 8006af0:	e000ed0c 	.word	0xe000ed0c
 8006af4:	20000f7c 	.word	0x20000f7c

08006af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08a      	sub	sp, #40	; 0x28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b04:	f7fe fdbe 	bl	8005684 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b08:	4b58      	ldr	r3, [pc, #352]	; (8006c6c <pvPortMalloc+0x174>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b10:	f000 f910 	bl	8006d34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b14:	4b56      	ldr	r3, [pc, #344]	; (8006c70 <pvPortMalloc+0x178>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f040 808e 	bne.w	8006c3e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d01d      	beq.n	8006b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b28:	2208      	movs	r2, #8
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d014      	beq.n	8006b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f023 0307 	bic.w	r3, r3, #7
 8006b40:	3308      	adds	r3, #8
 8006b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <pvPortMalloc+0x6c>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	617b      	str	r3, [r7, #20]
}
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d069      	beq.n	8006c3e <pvPortMalloc+0x146>
 8006b6a:	4b42      	ldr	r3, [pc, #264]	; (8006c74 <pvPortMalloc+0x17c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d864      	bhi.n	8006c3e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b74:	4b40      	ldr	r3, [pc, #256]	; (8006c78 <pvPortMalloc+0x180>)
 8006b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b78:	4b3f      	ldr	r3, [pc, #252]	; (8006c78 <pvPortMalloc+0x180>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b7e:	e004      	b.n	8006b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d903      	bls.n	8006b9c <pvPortMalloc+0xa4>
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f1      	bne.n	8006b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b9c:	4b33      	ldr	r3, [pc, #204]	; (8006c6c <pvPortMalloc+0x174>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d04b      	beq.n	8006c3e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2208      	movs	r2, #8
 8006bac:	4413      	add	r3, r2
 8006bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	1ad2      	subs	r2, r2, r3
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d91f      	bls.n	8006c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4413      	add	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00a      	beq.n	8006bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	613b      	str	r3, [r7, #16]
}
 8006bec:	bf00      	nop
 8006bee:	e7fe      	b.n	8006bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	1ad2      	subs	r2, r2, r3
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c02:	69b8      	ldr	r0, [r7, #24]
 8006c04:	f000 f8f8 	bl	8006df8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c08:	4b1a      	ldr	r3, [pc, #104]	; (8006c74 <pvPortMalloc+0x17c>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	4a18      	ldr	r2, [pc, #96]	; (8006c74 <pvPortMalloc+0x17c>)
 8006c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c16:	4b17      	ldr	r3, [pc, #92]	; (8006c74 <pvPortMalloc+0x17c>)
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	4b18      	ldr	r3, [pc, #96]	; (8006c7c <pvPortMalloc+0x184>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d203      	bcs.n	8006c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c22:	4b14      	ldr	r3, [pc, #80]	; (8006c74 <pvPortMalloc+0x17c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a15      	ldr	r2, [pc, #84]	; (8006c7c <pvPortMalloc+0x184>)
 8006c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	4b10      	ldr	r3, [pc, #64]	; (8006c70 <pvPortMalloc+0x178>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	431a      	orrs	r2, r3
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c3e:	f7fe fd2f 	bl	80056a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	f003 0307 	and.w	r3, r3, #7
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00a      	beq.n	8006c62 <pvPortMalloc+0x16a>
	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	60fb      	str	r3, [r7, #12]
}
 8006c5e:	bf00      	nop
 8006c60:	e7fe      	b.n	8006c60 <pvPortMalloc+0x168>
	return pvReturn;
 8006c62:	69fb      	ldr	r3, [r7, #28]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3728      	adds	r7, #40	; 0x28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20001b88 	.word	0x20001b88
 8006c70:	20001b94 	.word	0x20001b94
 8006c74:	20001b8c 	.word	0x20001b8c
 8006c78:	20001b80 	.word	0x20001b80
 8006c7c:	20001b90 	.word	0x20001b90

08006c80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d048      	beq.n	8006d24 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c92:	2308      	movs	r3, #8
 8006c94:	425b      	negs	r3, r3
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4413      	add	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	4b21      	ldr	r3, [pc, #132]	; (8006d2c <vPortFree+0xac>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <vPortFree+0x44>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	60fb      	str	r3, [r7, #12]
}
 8006cc0:	bf00      	nop
 8006cc2:	e7fe      	b.n	8006cc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00a      	beq.n	8006ce2 <vPortFree+0x62>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	60bb      	str	r3, [r7, #8]
}
 8006cde:	bf00      	nop
 8006ce0:	e7fe      	b.n	8006ce0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <vPortFree+0xac>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d019      	beq.n	8006d24 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d115      	bne.n	8006d24 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	4b0b      	ldr	r3, [pc, #44]	; (8006d2c <vPortFree+0xac>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	43db      	mvns	r3, r3
 8006d02:	401a      	ands	r2, r3
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d08:	f7fe fcbc 	bl	8005684 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	4b07      	ldr	r3, [pc, #28]	; (8006d30 <vPortFree+0xb0>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4413      	add	r3, r2
 8006d16:	4a06      	ldr	r2, [pc, #24]	; (8006d30 <vPortFree+0xb0>)
 8006d18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d1a:	6938      	ldr	r0, [r7, #16]
 8006d1c:	f000 f86c 	bl	8006df8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006d20:	f7fe fcbe 	bl	80056a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d24:	bf00      	nop
 8006d26:	3718      	adds	r7, #24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	20001b94 	.word	0x20001b94
 8006d30:	20001b8c 	.word	0x20001b8c

08006d34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006d3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d40:	4b27      	ldr	r3, [pc, #156]	; (8006de0 <prvHeapInit+0xac>)
 8006d42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f003 0307 	and.w	r3, r3, #7
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00c      	beq.n	8006d68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3307      	adds	r3, #7
 8006d52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f023 0307 	bic.w	r3, r3, #7
 8006d5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	4a1f      	ldr	r2, [pc, #124]	; (8006de0 <prvHeapInit+0xac>)
 8006d64:	4413      	add	r3, r2
 8006d66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d6c:	4a1d      	ldr	r2, [pc, #116]	; (8006de4 <prvHeapInit+0xb0>)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d72:	4b1c      	ldr	r3, [pc, #112]	; (8006de4 <prvHeapInit+0xb0>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d80:	2208      	movs	r2, #8
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	1a9b      	subs	r3, r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0307 	bic.w	r3, r3, #7
 8006d8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4a15      	ldr	r2, [pc, #84]	; (8006de8 <prvHeapInit+0xb4>)
 8006d94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d96:	4b14      	ldr	r3, [pc, #80]	; (8006de8 <prvHeapInit+0xb4>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d9e:	4b12      	ldr	r3, [pc, #72]	; (8006de8 <prvHeapInit+0xb4>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2200      	movs	r2, #0
 8006da4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	1ad2      	subs	r2, r2, r3
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006db4:	4b0c      	ldr	r3, [pc, #48]	; (8006de8 <prvHeapInit+0xb4>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	4a0a      	ldr	r2, [pc, #40]	; (8006dec <prvHeapInit+0xb8>)
 8006dc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	4a09      	ldr	r2, [pc, #36]	; (8006df0 <prvHeapInit+0xbc>)
 8006dca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dcc:	4b09      	ldr	r3, [pc, #36]	; (8006df4 <prvHeapInit+0xc0>)
 8006dce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006dd2:	601a      	str	r2, [r3, #0]
}
 8006dd4:	bf00      	nop
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	20000f80 	.word	0x20000f80
 8006de4:	20001b80 	.word	0x20001b80
 8006de8:	20001b88 	.word	0x20001b88
 8006dec:	20001b90 	.word	0x20001b90
 8006df0:	20001b8c 	.word	0x20001b8c
 8006df4:	20001b94 	.word	0x20001b94

08006df8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e00:	4b28      	ldr	r3, [pc, #160]	; (8006ea4 <prvInsertBlockIntoFreeList+0xac>)
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	e002      	b.n	8006e0c <prvInsertBlockIntoFreeList+0x14>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d8f7      	bhi.n	8006e06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	4413      	add	r3, r2
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d108      	bne.n	8006e3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	441a      	add	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	441a      	add	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d118      	bne.n	8006e80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4b15      	ldr	r3, [pc, #84]	; (8006ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d00d      	beq.n	8006e76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	441a      	add	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	e008      	b.n	8006e88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e76:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	e003      	b.n	8006e88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d002      	beq.n	8006e96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e96:	bf00      	nop
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	20001b80 	.word	0x20001b80
 8006ea8:	20001b88 	.word	0x20001b88

08006eac <asiprintf>:
 8006eac:	b40e      	push	{r1, r2, r3}
 8006eae:	b530      	push	{r4, r5, lr}
 8006eb0:	b09c      	sub	sp, #112	; 0x70
 8006eb2:	ab1f      	add	r3, sp, #124	; 0x7c
 8006eb4:	4605      	mov	r5, r0
 8006eb6:	490d      	ldr	r1, [pc, #52]	; (8006eec <asiprintf+0x40>)
 8006eb8:	480d      	ldr	r0, [pc, #52]	; (8006ef0 <asiprintf+0x44>)
 8006eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ebe:	6800      	ldr	r0, [r0, #0]
 8006ec0:	9301      	str	r3, [sp, #4]
 8006ec2:	2400      	movs	r4, #0
 8006ec4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8006ec8:	a902      	add	r1, sp, #8
 8006eca:	9402      	str	r4, [sp, #8]
 8006ecc:	9404      	str	r4, [sp, #16]
 8006ece:	9407      	str	r4, [sp, #28]
 8006ed0:	f000 f9fa 	bl	80072c8 <_svfiprintf_r>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	bfa1      	itttt	ge
 8006ed8:	9b02      	ldrge	r3, [sp, #8]
 8006eda:	701c      	strbge	r4, [r3, #0]
 8006edc:	9b06      	ldrge	r3, [sp, #24]
 8006ede:	602b      	strge	r3, [r5, #0]
 8006ee0:	b01c      	add	sp, #112	; 0x70
 8006ee2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ee6:	b003      	add	sp, #12
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	ffff0288 	.word	0xffff0288
 8006ef0:	2000005c 	.word	0x2000005c

08006ef4 <memset>:
 8006ef4:	4402      	add	r2, r0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d100      	bne.n	8006efe <memset+0xa>
 8006efc:	4770      	bx	lr
 8006efe:	f803 1b01 	strb.w	r1, [r3], #1
 8006f02:	e7f9      	b.n	8006ef8 <memset+0x4>

08006f04 <_reclaim_reent>:
 8006f04:	4b29      	ldr	r3, [pc, #164]	; (8006fac <_reclaim_reent+0xa8>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4283      	cmp	r3, r0
 8006f0a:	b570      	push	{r4, r5, r6, lr}
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	d04b      	beq.n	8006fa8 <_reclaim_reent+0xa4>
 8006f10:	69c3      	ldr	r3, [r0, #28]
 8006f12:	b143      	cbz	r3, 8006f26 <_reclaim_reent+0x22>
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d144      	bne.n	8006fa4 <_reclaim_reent+0xa0>
 8006f1a:	69e3      	ldr	r3, [r4, #28]
 8006f1c:	6819      	ldr	r1, [r3, #0]
 8006f1e:	b111      	cbz	r1, 8006f26 <_reclaim_reent+0x22>
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 f87f 	bl	8007024 <_free_r>
 8006f26:	6961      	ldr	r1, [r4, #20]
 8006f28:	b111      	cbz	r1, 8006f30 <_reclaim_reent+0x2c>
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f000 f87a 	bl	8007024 <_free_r>
 8006f30:	69e1      	ldr	r1, [r4, #28]
 8006f32:	b111      	cbz	r1, 8006f3a <_reclaim_reent+0x36>
 8006f34:	4620      	mov	r0, r4
 8006f36:	f000 f875 	bl	8007024 <_free_r>
 8006f3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006f3c:	b111      	cbz	r1, 8006f44 <_reclaim_reent+0x40>
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f000 f870 	bl	8007024 <_free_r>
 8006f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f46:	b111      	cbz	r1, 8006f4e <_reclaim_reent+0x4a>
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f000 f86b 	bl	8007024 <_free_r>
 8006f4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f50:	b111      	cbz	r1, 8006f58 <_reclaim_reent+0x54>
 8006f52:	4620      	mov	r0, r4
 8006f54:	f000 f866 	bl	8007024 <_free_r>
 8006f58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006f5a:	b111      	cbz	r1, 8006f62 <_reclaim_reent+0x5e>
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f000 f861 	bl	8007024 <_free_r>
 8006f62:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006f64:	b111      	cbz	r1, 8006f6c <_reclaim_reent+0x68>
 8006f66:	4620      	mov	r0, r4
 8006f68:	f000 f85c 	bl	8007024 <_free_r>
 8006f6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006f6e:	b111      	cbz	r1, 8006f76 <_reclaim_reent+0x72>
 8006f70:	4620      	mov	r0, r4
 8006f72:	f000 f857 	bl	8007024 <_free_r>
 8006f76:	6a23      	ldr	r3, [r4, #32]
 8006f78:	b1b3      	cbz	r3, 8006fa8 <_reclaim_reent+0xa4>
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f80:	4718      	bx	r3
 8006f82:	5949      	ldr	r1, [r1, r5]
 8006f84:	b941      	cbnz	r1, 8006f98 <_reclaim_reent+0x94>
 8006f86:	3504      	adds	r5, #4
 8006f88:	69e3      	ldr	r3, [r4, #28]
 8006f8a:	2d80      	cmp	r5, #128	; 0x80
 8006f8c:	68d9      	ldr	r1, [r3, #12]
 8006f8e:	d1f8      	bne.n	8006f82 <_reclaim_reent+0x7e>
 8006f90:	4620      	mov	r0, r4
 8006f92:	f000 f847 	bl	8007024 <_free_r>
 8006f96:	e7c0      	b.n	8006f1a <_reclaim_reent+0x16>
 8006f98:	680e      	ldr	r6, [r1, #0]
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f000 f842 	bl	8007024 <_free_r>
 8006fa0:	4631      	mov	r1, r6
 8006fa2:	e7ef      	b.n	8006f84 <_reclaim_reent+0x80>
 8006fa4:	2500      	movs	r5, #0
 8006fa6:	e7ef      	b.n	8006f88 <_reclaim_reent+0x84>
 8006fa8:	bd70      	pop	{r4, r5, r6, pc}
 8006faa:	bf00      	nop
 8006fac:	2000005c 	.word	0x2000005c

08006fb0 <__errno>:
 8006fb0:	4b01      	ldr	r3, [pc, #4]	; (8006fb8 <__errno+0x8>)
 8006fb2:	6818      	ldr	r0, [r3, #0]
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	2000005c 	.word	0x2000005c

08006fbc <__libc_init_array>:
 8006fbc:	b570      	push	{r4, r5, r6, lr}
 8006fbe:	4d0d      	ldr	r5, [pc, #52]	; (8006ff4 <__libc_init_array+0x38>)
 8006fc0:	4c0d      	ldr	r4, [pc, #52]	; (8006ff8 <__libc_init_array+0x3c>)
 8006fc2:	1b64      	subs	r4, r4, r5
 8006fc4:	10a4      	asrs	r4, r4, #2
 8006fc6:	2600      	movs	r6, #0
 8006fc8:	42a6      	cmp	r6, r4
 8006fca:	d109      	bne.n	8006fe0 <__libc_init_array+0x24>
 8006fcc:	4d0b      	ldr	r5, [pc, #44]	; (8006ffc <__libc_init_array+0x40>)
 8006fce:	4c0c      	ldr	r4, [pc, #48]	; (8007000 <__libc_init_array+0x44>)
 8006fd0:	f000 fc6a 	bl	80078a8 <_init>
 8006fd4:	1b64      	subs	r4, r4, r5
 8006fd6:	10a4      	asrs	r4, r4, #2
 8006fd8:	2600      	movs	r6, #0
 8006fda:	42a6      	cmp	r6, r4
 8006fdc:	d105      	bne.n	8006fea <__libc_init_array+0x2e>
 8006fde:	bd70      	pop	{r4, r5, r6, pc}
 8006fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fe4:	4798      	blx	r3
 8006fe6:	3601      	adds	r6, #1
 8006fe8:	e7ee      	b.n	8006fc8 <__libc_init_array+0xc>
 8006fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fee:	4798      	blx	r3
 8006ff0:	3601      	adds	r6, #1
 8006ff2:	e7f2      	b.n	8006fda <__libc_init_array+0x1e>
 8006ff4:	08007bc0 	.word	0x08007bc0
 8006ff8:	08007bc0 	.word	0x08007bc0
 8006ffc:	08007bc0 	.word	0x08007bc0
 8007000:	08007bc4 	.word	0x08007bc4

08007004 <__retarget_lock_acquire_recursive>:
 8007004:	4770      	bx	lr

08007006 <__retarget_lock_release_recursive>:
 8007006:	4770      	bx	lr

08007008 <memcpy>:
 8007008:	440a      	add	r2, r1
 800700a:	4291      	cmp	r1, r2
 800700c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007010:	d100      	bne.n	8007014 <memcpy+0xc>
 8007012:	4770      	bx	lr
 8007014:	b510      	push	{r4, lr}
 8007016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800701a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800701e:	4291      	cmp	r1, r2
 8007020:	d1f9      	bne.n	8007016 <memcpy+0xe>
 8007022:	bd10      	pop	{r4, pc}

08007024 <_free_r>:
 8007024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007026:	2900      	cmp	r1, #0
 8007028:	d044      	beq.n	80070b4 <_free_r+0x90>
 800702a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800702e:	9001      	str	r0, [sp, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	f1a1 0404 	sub.w	r4, r1, #4
 8007036:	bfb8      	it	lt
 8007038:	18e4      	addlt	r4, r4, r3
 800703a:	f000 f8df 	bl	80071fc <__malloc_lock>
 800703e:	4a1e      	ldr	r2, [pc, #120]	; (80070b8 <_free_r+0x94>)
 8007040:	9801      	ldr	r0, [sp, #4]
 8007042:	6813      	ldr	r3, [r2, #0]
 8007044:	b933      	cbnz	r3, 8007054 <_free_r+0x30>
 8007046:	6063      	str	r3, [r4, #4]
 8007048:	6014      	str	r4, [r2, #0]
 800704a:	b003      	add	sp, #12
 800704c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007050:	f000 b8da 	b.w	8007208 <__malloc_unlock>
 8007054:	42a3      	cmp	r3, r4
 8007056:	d908      	bls.n	800706a <_free_r+0x46>
 8007058:	6825      	ldr	r5, [r4, #0]
 800705a:	1961      	adds	r1, r4, r5
 800705c:	428b      	cmp	r3, r1
 800705e:	bf01      	itttt	eq
 8007060:	6819      	ldreq	r1, [r3, #0]
 8007062:	685b      	ldreq	r3, [r3, #4]
 8007064:	1949      	addeq	r1, r1, r5
 8007066:	6021      	streq	r1, [r4, #0]
 8007068:	e7ed      	b.n	8007046 <_free_r+0x22>
 800706a:	461a      	mov	r2, r3
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	b10b      	cbz	r3, 8007074 <_free_r+0x50>
 8007070:	42a3      	cmp	r3, r4
 8007072:	d9fa      	bls.n	800706a <_free_r+0x46>
 8007074:	6811      	ldr	r1, [r2, #0]
 8007076:	1855      	adds	r5, r2, r1
 8007078:	42a5      	cmp	r5, r4
 800707a:	d10b      	bne.n	8007094 <_free_r+0x70>
 800707c:	6824      	ldr	r4, [r4, #0]
 800707e:	4421      	add	r1, r4
 8007080:	1854      	adds	r4, r2, r1
 8007082:	42a3      	cmp	r3, r4
 8007084:	6011      	str	r1, [r2, #0]
 8007086:	d1e0      	bne.n	800704a <_free_r+0x26>
 8007088:	681c      	ldr	r4, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	6053      	str	r3, [r2, #4]
 800708e:	440c      	add	r4, r1
 8007090:	6014      	str	r4, [r2, #0]
 8007092:	e7da      	b.n	800704a <_free_r+0x26>
 8007094:	d902      	bls.n	800709c <_free_r+0x78>
 8007096:	230c      	movs	r3, #12
 8007098:	6003      	str	r3, [r0, #0]
 800709a:	e7d6      	b.n	800704a <_free_r+0x26>
 800709c:	6825      	ldr	r5, [r4, #0]
 800709e:	1961      	adds	r1, r4, r5
 80070a0:	428b      	cmp	r3, r1
 80070a2:	bf04      	itt	eq
 80070a4:	6819      	ldreq	r1, [r3, #0]
 80070a6:	685b      	ldreq	r3, [r3, #4]
 80070a8:	6063      	str	r3, [r4, #4]
 80070aa:	bf04      	itt	eq
 80070ac:	1949      	addeq	r1, r1, r5
 80070ae:	6021      	streq	r1, [r4, #0]
 80070b0:	6054      	str	r4, [r2, #4]
 80070b2:	e7ca      	b.n	800704a <_free_r+0x26>
 80070b4:	b003      	add	sp, #12
 80070b6:	bd30      	pop	{r4, r5, pc}
 80070b8:	20001cd8 	.word	0x20001cd8

080070bc <sbrk_aligned>:
 80070bc:	b570      	push	{r4, r5, r6, lr}
 80070be:	4e0e      	ldr	r6, [pc, #56]	; (80070f8 <sbrk_aligned+0x3c>)
 80070c0:	460c      	mov	r4, r1
 80070c2:	6831      	ldr	r1, [r6, #0]
 80070c4:	4605      	mov	r5, r0
 80070c6:	b911      	cbnz	r1, 80070ce <sbrk_aligned+0x12>
 80070c8:	f000 fba6 	bl	8007818 <_sbrk_r>
 80070cc:	6030      	str	r0, [r6, #0]
 80070ce:	4621      	mov	r1, r4
 80070d0:	4628      	mov	r0, r5
 80070d2:	f000 fba1 	bl	8007818 <_sbrk_r>
 80070d6:	1c43      	adds	r3, r0, #1
 80070d8:	d00a      	beq.n	80070f0 <sbrk_aligned+0x34>
 80070da:	1cc4      	adds	r4, r0, #3
 80070dc:	f024 0403 	bic.w	r4, r4, #3
 80070e0:	42a0      	cmp	r0, r4
 80070e2:	d007      	beq.n	80070f4 <sbrk_aligned+0x38>
 80070e4:	1a21      	subs	r1, r4, r0
 80070e6:	4628      	mov	r0, r5
 80070e8:	f000 fb96 	bl	8007818 <_sbrk_r>
 80070ec:	3001      	adds	r0, #1
 80070ee:	d101      	bne.n	80070f4 <sbrk_aligned+0x38>
 80070f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80070f4:	4620      	mov	r0, r4
 80070f6:	bd70      	pop	{r4, r5, r6, pc}
 80070f8:	20001cdc 	.word	0x20001cdc

080070fc <_malloc_r>:
 80070fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007100:	1ccd      	adds	r5, r1, #3
 8007102:	f025 0503 	bic.w	r5, r5, #3
 8007106:	3508      	adds	r5, #8
 8007108:	2d0c      	cmp	r5, #12
 800710a:	bf38      	it	cc
 800710c:	250c      	movcc	r5, #12
 800710e:	2d00      	cmp	r5, #0
 8007110:	4607      	mov	r7, r0
 8007112:	db01      	blt.n	8007118 <_malloc_r+0x1c>
 8007114:	42a9      	cmp	r1, r5
 8007116:	d905      	bls.n	8007124 <_malloc_r+0x28>
 8007118:	230c      	movs	r3, #12
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	2600      	movs	r6, #0
 800711e:	4630      	mov	r0, r6
 8007120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007124:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80071f8 <_malloc_r+0xfc>
 8007128:	f000 f868 	bl	80071fc <__malloc_lock>
 800712c:	f8d8 3000 	ldr.w	r3, [r8]
 8007130:	461c      	mov	r4, r3
 8007132:	bb5c      	cbnz	r4, 800718c <_malloc_r+0x90>
 8007134:	4629      	mov	r1, r5
 8007136:	4638      	mov	r0, r7
 8007138:	f7ff ffc0 	bl	80070bc <sbrk_aligned>
 800713c:	1c43      	adds	r3, r0, #1
 800713e:	4604      	mov	r4, r0
 8007140:	d155      	bne.n	80071ee <_malloc_r+0xf2>
 8007142:	f8d8 4000 	ldr.w	r4, [r8]
 8007146:	4626      	mov	r6, r4
 8007148:	2e00      	cmp	r6, #0
 800714a:	d145      	bne.n	80071d8 <_malloc_r+0xdc>
 800714c:	2c00      	cmp	r4, #0
 800714e:	d048      	beq.n	80071e2 <_malloc_r+0xe6>
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	4631      	mov	r1, r6
 8007154:	4638      	mov	r0, r7
 8007156:	eb04 0903 	add.w	r9, r4, r3
 800715a:	f000 fb5d 	bl	8007818 <_sbrk_r>
 800715e:	4581      	cmp	r9, r0
 8007160:	d13f      	bne.n	80071e2 <_malloc_r+0xe6>
 8007162:	6821      	ldr	r1, [r4, #0]
 8007164:	1a6d      	subs	r5, r5, r1
 8007166:	4629      	mov	r1, r5
 8007168:	4638      	mov	r0, r7
 800716a:	f7ff ffa7 	bl	80070bc <sbrk_aligned>
 800716e:	3001      	adds	r0, #1
 8007170:	d037      	beq.n	80071e2 <_malloc_r+0xe6>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	442b      	add	r3, r5
 8007176:	6023      	str	r3, [r4, #0]
 8007178:	f8d8 3000 	ldr.w	r3, [r8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d038      	beq.n	80071f2 <_malloc_r+0xf6>
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	42a2      	cmp	r2, r4
 8007184:	d12b      	bne.n	80071de <_malloc_r+0xe2>
 8007186:	2200      	movs	r2, #0
 8007188:	605a      	str	r2, [r3, #4]
 800718a:	e00f      	b.n	80071ac <_malloc_r+0xb0>
 800718c:	6822      	ldr	r2, [r4, #0]
 800718e:	1b52      	subs	r2, r2, r5
 8007190:	d41f      	bmi.n	80071d2 <_malloc_r+0xd6>
 8007192:	2a0b      	cmp	r2, #11
 8007194:	d917      	bls.n	80071c6 <_malloc_r+0xca>
 8007196:	1961      	adds	r1, r4, r5
 8007198:	42a3      	cmp	r3, r4
 800719a:	6025      	str	r5, [r4, #0]
 800719c:	bf18      	it	ne
 800719e:	6059      	strne	r1, [r3, #4]
 80071a0:	6863      	ldr	r3, [r4, #4]
 80071a2:	bf08      	it	eq
 80071a4:	f8c8 1000 	streq.w	r1, [r8]
 80071a8:	5162      	str	r2, [r4, r5]
 80071aa:	604b      	str	r3, [r1, #4]
 80071ac:	4638      	mov	r0, r7
 80071ae:	f104 060b 	add.w	r6, r4, #11
 80071b2:	f000 f829 	bl	8007208 <__malloc_unlock>
 80071b6:	f026 0607 	bic.w	r6, r6, #7
 80071ba:	1d23      	adds	r3, r4, #4
 80071bc:	1af2      	subs	r2, r6, r3
 80071be:	d0ae      	beq.n	800711e <_malloc_r+0x22>
 80071c0:	1b9b      	subs	r3, r3, r6
 80071c2:	50a3      	str	r3, [r4, r2]
 80071c4:	e7ab      	b.n	800711e <_malloc_r+0x22>
 80071c6:	42a3      	cmp	r3, r4
 80071c8:	6862      	ldr	r2, [r4, #4]
 80071ca:	d1dd      	bne.n	8007188 <_malloc_r+0x8c>
 80071cc:	f8c8 2000 	str.w	r2, [r8]
 80071d0:	e7ec      	b.n	80071ac <_malloc_r+0xb0>
 80071d2:	4623      	mov	r3, r4
 80071d4:	6864      	ldr	r4, [r4, #4]
 80071d6:	e7ac      	b.n	8007132 <_malloc_r+0x36>
 80071d8:	4634      	mov	r4, r6
 80071da:	6876      	ldr	r6, [r6, #4]
 80071dc:	e7b4      	b.n	8007148 <_malloc_r+0x4c>
 80071de:	4613      	mov	r3, r2
 80071e0:	e7cc      	b.n	800717c <_malloc_r+0x80>
 80071e2:	230c      	movs	r3, #12
 80071e4:	603b      	str	r3, [r7, #0]
 80071e6:	4638      	mov	r0, r7
 80071e8:	f000 f80e 	bl	8007208 <__malloc_unlock>
 80071ec:	e797      	b.n	800711e <_malloc_r+0x22>
 80071ee:	6025      	str	r5, [r4, #0]
 80071f0:	e7dc      	b.n	80071ac <_malloc_r+0xb0>
 80071f2:	605b      	str	r3, [r3, #4]
 80071f4:	deff      	udf	#255	; 0xff
 80071f6:	bf00      	nop
 80071f8:	20001cd8 	.word	0x20001cd8

080071fc <__malloc_lock>:
 80071fc:	4801      	ldr	r0, [pc, #4]	; (8007204 <__malloc_lock+0x8>)
 80071fe:	f7ff bf01 	b.w	8007004 <__retarget_lock_acquire_recursive>
 8007202:	bf00      	nop
 8007204:	20001cd4 	.word	0x20001cd4

08007208 <__malloc_unlock>:
 8007208:	4801      	ldr	r0, [pc, #4]	; (8007210 <__malloc_unlock+0x8>)
 800720a:	f7ff befc 	b.w	8007006 <__retarget_lock_release_recursive>
 800720e:	bf00      	nop
 8007210:	20001cd4 	.word	0x20001cd4

08007214 <__ssputs_r>:
 8007214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007218:	688e      	ldr	r6, [r1, #8]
 800721a:	461f      	mov	r7, r3
 800721c:	42be      	cmp	r6, r7
 800721e:	680b      	ldr	r3, [r1, #0]
 8007220:	4682      	mov	sl, r0
 8007222:	460c      	mov	r4, r1
 8007224:	4690      	mov	r8, r2
 8007226:	d82c      	bhi.n	8007282 <__ssputs_r+0x6e>
 8007228:	898a      	ldrh	r2, [r1, #12]
 800722a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800722e:	d026      	beq.n	800727e <__ssputs_r+0x6a>
 8007230:	6965      	ldr	r5, [r4, #20]
 8007232:	6909      	ldr	r1, [r1, #16]
 8007234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007238:	eba3 0901 	sub.w	r9, r3, r1
 800723c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007240:	1c7b      	adds	r3, r7, #1
 8007242:	444b      	add	r3, r9
 8007244:	106d      	asrs	r5, r5, #1
 8007246:	429d      	cmp	r5, r3
 8007248:	bf38      	it	cc
 800724a:	461d      	movcc	r5, r3
 800724c:	0553      	lsls	r3, r2, #21
 800724e:	d527      	bpl.n	80072a0 <__ssputs_r+0x8c>
 8007250:	4629      	mov	r1, r5
 8007252:	f7ff ff53 	bl	80070fc <_malloc_r>
 8007256:	4606      	mov	r6, r0
 8007258:	b360      	cbz	r0, 80072b4 <__ssputs_r+0xa0>
 800725a:	6921      	ldr	r1, [r4, #16]
 800725c:	464a      	mov	r2, r9
 800725e:	f7ff fed3 	bl	8007008 <memcpy>
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726c:	81a3      	strh	r3, [r4, #12]
 800726e:	6126      	str	r6, [r4, #16]
 8007270:	6165      	str	r5, [r4, #20]
 8007272:	444e      	add	r6, r9
 8007274:	eba5 0509 	sub.w	r5, r5, r9
 8007278:	6026      	str	r6, [r4, #0]
 800727a:	60a5      	str	r5, [r4, #8]
 800727c:	463e      	mov	r6, r7
 800727e:	42be      	cmp	r6, r7
 8007280:	d900      	bls.n	8007284 <__ssputs_r+0x70>
 8007282:	463e      	mov	r6, r7
 8007284:	6820      	ldr	r0, [r4, #0]
 8007286:	4632      	mov	r2, r6
 8007288:	4641      	mov	r1, r8
 800728a:	f000 faab 	bl	80077e4 <memmove>
 800728e:	68a3      	ldr	r3, [r4, #8]
 8007290:	1b9b      	subs	r3, r3, r6
 8007292:	60a3      	str	r3, [r4, #8]
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	4433      	add	r3, r6
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	2000      	movs	r0, #0
 800729c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a0:	462a      	mov	r2, r5
 80072a2:	f000 fac9 	bl	8007838 <_realloc_r>
 80072a6:	4606      	mov	r6, r0
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d1e0      	bne.n	800726e <__ssputs_r+0x5a>
 80072ac:	6921      	ldr	r1, [r4, #16]
 80072ae:	4650      	mov	r0, sl
 80072b0:	f7ff feb8 	bl	8007024 <_free_r>
 80072b4:	230c      	movs	r3, #12
 80072b6:	f8ca 3000 	str.w	r3, [sl]
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072c0:	81a3      	strh	r3, [r4, #12]
 80072c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072c6:	e7e9      	b.n	800729c <__ssputs_r+0x88>

080072c8 <_svfiprintf_r>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	4698      	mov	r8, r3
 80072ce:	898b      	ldrh	r3, [r1, #12]
 80072d0:	061b      	lsls	r3, r3, #24
 80072d2:	b09d      	sub	sp, #116	; 0x74
 80072d4:	4607      	mov	r7, r0
 80072d6:	460d      	mov	r5, r1
 80072d8:	4614      	mov	r4, r2
 80072da:	d50e      	bpl.n	80072fa <_svfiprintf_r+0x32>
 80072dc:	690b      	ldr	r3, [r1, #16]
 80072de:	b963      	cbnz	r3, 80072fa <_svfiprintf_r+0x32>
 80072e0:	2140      	movs	r1, #64	; 0x40
 80072e2:	f7ff ff0b 	bl	80070fc <_malloc_r>
 80072e6:	6028      	str	r0, [r5, #0]
 80072e8:	6128      	str	r0, [r5, #16]
 80072ea:	b920      	cbnz	r0, 80072f6 <_svfiprintf_r+0x2e>
 80072ec:	230c      	movs	r3, #12
 80072ee:	603b      	str	r3, [r7, #0]
 80072f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072f4:	e0d0      	b.n	8007498 <_svfiprintf_r+0x1d0>
 80072f6:	2340      	movs	r3, #64	; 0x40
 80072f8:	616b      	str	r3, [r5, #20]
 80072fa:	2300      	movs	r3, #0
 80072fc:	9309      	str	r3, [sp, #36]	; 0x24
 80072fe:	2320      	movs	r3, #32
 8007300:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007304:	f8cd 800c 	str.w	r8, [sp, #12]
 8007308:	2330      	movs	r3, #48	; 0x30
 800730a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80074b0 <_svfiprintf_r+0x1e8>
 800730e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007312:	f04f 0901 	mov.w	r9, #1
 8007316:	4623      	mov	r3, r4
 8007318:	469a      	mov	sl, r3
 800731a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800731e:	b10a      	cbz	r2, 8007324 <_svfiprintf_r+0x5c>
 8007320:	2a25      	cmp	r2, #37	; 0x25
 8007322:	d1f9      	bne.n	8007318 <_svfiprintf_r+0x50>
 8007324:	ebba 0b04 	subs.w	fp, sl, r4
 8007328:	d00b      	beq.n	8007342 <_svfiprintf_r+0x7a>
 800732a:	465b      	mov	r3, fp
 800732c:	4622      	mov	r2, r4
 800732e:	4629      	mov	r1, r5
 8007330:	4638      	mov	r0, r7
 8007332:	f7ff ff6f 	bl	8007214 <__ssputs_r>
 8007336:	3001      	adds	r0, #1
 8007338:	f000 80a9 	beq.w	800748e <_svfiprintf_r+0x1c6>
 800733c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800733e:	445a      	add	r2, fp
 8007340:	9209      	str	r2, [sp, #36]	; 0x24
 8007342:	f89a 3000 	ldrb.w	r3, [sl]
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 80a1 	beq.w	800748e <_svfiprintf_r+0x1c6>
 800734c:	2300      	movs	r3, #0
 800734e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007356:	f10a 0a01 	add.w	sl, sl, #1
 800735a:	9304      	str	r3, [sp, #16]
 800735c:	9307      	str	r3, [sp, #28]
 800735e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007362:	931a      	str	r3, [sp, #104]	; 0x68
 8007364:	4654      	mov	r4, sl
 8007366:	2205      	movs	r2, #5
 8007368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800736c:	4850      	ldr	r0, [pc, #320]	; (80074b0 <_svfiprintf_r+0x1e8>)
 800736e:	f7f8 ff37 	bl	80001e0 <memchr>
 8007372:	9a04      	ldr	r2, [sp, #16]
 8007374:	b9d8      	cbnz	r0, 80073ae <_svfiprintf_r+0xe6>
 8007376:	06d0      	lsls	r0, r2, #27
 8007378:	bf44      	itt	mi
 800737a:	2320      	movmi	r3, #32
 800737c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007380:	0711      	lsls	r1, r2, #28
 8007382:	bf44      	itt	mi
 8007384:	232b      	movmi	r3, #43	; 0x2b
 8007386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800738a:	f89a 3000 	ldrb.w	r3, [sl]
 800738e:	2b2a      	cmp	r3, #42	; 0x2a
 8007390:	d015      	beq.n	80073be <_svfiprintf_r+0xf6>
 8007392:	9a07      	ldr	r2, [sp, #28]
 8007394:	4654      	mov	r4, sl
 8007396:	2000      	movs	r0, #0
 8007398:	f04f 0c0a 	mov.w	ip, #10
 800739c:	4621      	mov	r1, r4
 800739e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073a2:	3b30      	subs	r3, #48	; 0x30
 80073a4:	2b09      	cmp	r3, #9
 80073a6:	d94d      	bls.n	8007444 <_svfiprintf_r+0x17c>
 80073a8:	b1b0      	cbz	r0, 80073d8 <_svfiprintf_r+0x110>
 80073aa:	9207      	str	r2, [sp, #28]
 80073ac:	e014      	b.n	80073d8 <_svfiprintf_r+0x110>
 80073ae:	eba0 0308 	sub.w	r3, r0, r8
 80073b2:	fa09 f303 	lsl.w	r3, r9, r3
 80073b6:	4313      	orrs	r3, r2
 80073b8:	9304      	str	r3, [sp, #16]
 80073ba:	46a2      	mov	sl, r4
 80073bc:	e7d2      	b.n	8007364 <_svfiprintf_r+0x9c>
 80073be:	9b03      	ldr	r3, [sp, #12]
 80073c0:	1d19      	adds	r1, r3, #4
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	9103      	str	r1, [sp, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	bfbb      	ittet	lt
 80073ca:	425b      	neglt	r3, r3
 80073cc:	f042 0202 	orrlt.w	r2, r2, #2
 80073d0:	9307      	strge	r3, [sp, #28]
 80073d2:	9307      	strlt	r3, [sp, #28]
 80073d4:	bfb8      	it	lt
 80073d6:	9204      	strlt	r2, [sp, #16]
 80073d8:	7823      	ldrb	r3, [r4, #0]
 80073da:	2b2e      	cmp	r3, #46	; 0x2e
 80073dc:	d10c      	bne.n	80073f8 <_svfiprintf_r+0x130>
 80073de:	7863      	ldrb	r3, [r4, #1]
 80073e0:	2b2a      	cmp	r3, #42	; 0x2a
 80073e2:	d134      	bne.n	800744e <_svfiprintf_r+0x186>
 80073e4:	9b03      	ldr	r3, [sp, #12]
 80073e6:	1d1a      	adds	r2, r3, #4
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	9203      	str	r2, [sp, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	bfb8      	it	lt
 80073f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80073f4:	3402      	adds	r4, #2
 80073f6:	9305      	str	r3, [sp, #20]
 80073f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80074c0 <_svfiprintf_r+0x1f8>
 80073fc:	7821      	ldrb	r1, [r4, #0]
 80073fe:	2203      	movs	r2, #3
 8007400:	4650      	mov	r0, sl
 8007402:	f7f8 feed 	bl	80001e0 <memchr>
 8007406:	b138      	cbz	r0, 8007418 <_svfiprintf_r+0x150>
 8007408:	9b04      	ldr	r3, [sp, #16]
 800740a:	eba0 000a 	sub.w	r0, r0, sl
 800740e:	2240      	movs	r2, #64	; 0x40
 8007410:	4082      	lsls	r2, r0
 8007412:	4313      	orrs	r3, r2
 8007414:	3401      	adds	r4, #1
 8007416:	9304      	str	r3, [sp, #16]
 8007418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800741c:	4825      	ldr	r0, [pc, #148]	; (80074b4 <_svfiprintf_r+0x1ec>)
 800741e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007422:	2206      	movs	r2, #6
 8007424:	f7f8 fedc 	bl	80001e0 <memchr>
 8007428:	2800      	cmp	r0, #0
 800742a:	d038      	beq.n	800749e <_svfiprintf_r+0x1d6>
 800742c:	4b22      	ldr	r3, [pc, #136]	; (80074b8 <_svfiprintf_r+0x1f0>)
 800742e:	bb1b      	cbnz	r3, 8007478 <_svfiprintf_r+0x1b0>
 8007430:	9b03      	ldr	r3, [sp, #12]
 8007432:	3307      	adds	r3, #7
 8007434:	f023 0307 	bic.w	r3, r3, #7
 8007438:	3308      	adds	r3, #8
 800743a:	9303      	str	r3, [sp, #12]
 800743c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800743e:	4433      	add	r3, r6
 8007440:	9309      	str	r3, [sp, #36]	; 0x24
 8007442:	e768      	b.n	8007316 <_svfiprintf_r+0x4e>
 8007444:	fb0c 3202 	mla	r2, ip, r2, r3
 8007448:	460c      	mov	r4, r1
 800744a:	2001      	movs	r0, #1
 800744c:	e7a6      	b.n	800739c <_svfiprintf_r+0xd4>
 800744e:	2300      	movs	r3, #0
 8007450:	3401      	adds	r4, #1
 8007452:	9305      	str	r3, [sp, #20]
 8007454:	4619      	mov	r1, r3
 8007456:	f04f 0c0a 	mov.w	ip, #10
 800745a:	4620      	mov	r0, r4
 800745c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007460:	3a30      	subs	r2, #48	; 0x30
 8007462:	2a09      	cmp	r2, #9
 8007464:	d903      	bls.n	800746e <_svfiprintf_r+0x1a6>
 8007466:	2b00      	cmp	r3, #0
 8007468:	d0c6      	beq.n	80073f8 <_svfiprintf_r+0x130>
 800746a:	9105      	str	r1, [sp, #20]
 800746c:	e7c4      	b.n	80073f8 <_svfiprintf_r+0x130>
 800746e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007472:	4604      	mov	r4, r0
 8007474:	2301      	movs	r3, #1
 8007476:	e7f0      	b.n	800745a <_svfiprintf_r+0x192>
 8007478:	ab03      	add	r3, sp, #12
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	462a      	mov	r2, r5
 800747e:	4b0f      	ldr	r3, [pc, #60]	; (80074bc <_svfiprintf_r+0x1f4>)
 8007480:	a904      	add	r1, sp, #16
 8007482:	4638      	mov	r0, r7
 8007484:	f3af 8000 	nop.w
 8007488:	1c42      	adds	r2, r0, #1
 800748a:	4606      	mov	r6, r0
 800748c:	d1d6      	bne.n	800743c <_svfiprintf_r+0x174>
 800748e:	89ab      	ldrh	r3, [r5, #12]
 8007490:	065b      	lsls	r3, r3, #25
 8007492:	f53f af2d 	bmi.w	80072f0 <_svfiprintf_r+0x28>
 8007496:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007498:	b01d      	add	sp, #116	; 0x74
 800749a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800749e:	ab03      	add	r3, sp, #12
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	462a      	mov	r2, r5
 80074a4:	4b05      	ldr	r3, [pc, #20]	; (80074bc <_svfiprintf_r+0x1f4>)
 80074a6:	a904      	add	r1, sp, #16
 80074a8:	4638      	mov	r0, r7
 80074aa:	f000 f879 	bl	80075a0 <_printf_i>
 80074ae:	e7eb      	b.n	8007488 <_svfiprintf_r+0x1c0>
 80074b0:	08007b8c 	.word	0x08007b8c
 80074b4:	08007b96 	.word	0x08007b96
 80074b8:	00000000 	.word	0x00000000
 80074bc:	08007215 	.word	0x08007215
 80074c0:	08007b92 	.word	0x08007b92

080074c4 <_printf_common>:
 80074c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c8:	4616      	mov	r6, r2
 80074ca:	4699      	mov	r9, r3
 80074cc:	688a      	ldr	r2, [r1, #8]
 80074ce:	690b      	ldr	r3, [r1, #16]
 80074d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074d4:	4293      	cmp	r3, r2
 80074d6:	bfb8      	it	lt
 80074d8:	4613      	movlt	r3, r2
 80074da:	6033      	str	r3, [r6, #0]
 80074dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074e0:	4607      	mov	r7, r0
 80074e2:	460c      	mov	r4, r1
 80074e4:	b10a      	cbz	r2, 80074ea <_printf_common+0x26>
 80074e6:	3301      	adds	r3, #1
 80074e8:	6033      	str	r3, [r6, #0]
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	0699      	lsls	r1, r3, #26
 80074ee:	bf42      	ittt	mi
 80074f0:	6833      	ldrmi	r3, [r6, #0]
 80074f2:	3302      	addmi	r3, #2
 80074f4:	6033      	strmi	r3, [r6, #0]
 80074f6:	6825      	ldr	r5, [r4, #0]
 80074f8:	f015 0506 	ands.w	r5, r5, #6
 80074fc:	d106      	bne.n	800750c <_printf_common+0x48>
 80074fe:	f104 0a19 	add.w	sl, r4, #25
 8007502:	68e3      	ldr	r3, [r4, #12]
 8007504:	6832      	ldr	r2, [r6, #0]
 8007506:	1a9b      	subs	r3, r3, r2
 8007508:	42ab      	cmp	r3, r5
 800750a:	dc26      	bgt.n	800755a <_printf_common+0x96>
 800750c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007510:	1e13      	subs	r3, r2, #0
 8007512:	6822      	ldr	r2, [r4, #0]
 8007514:	bf18      	it	ne
 8007516:	2301      	movne	r3, #1
 8007518:	0692      	lsls	r2, r2, #26
 800751a:	d42b      	bmi.n	8007574 <_printf_common+0xb0>
 800751c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007520:	4649      	mov	r1, r9
 8007522:	4638      	mov	r0, r7
 8007524:	47c0      	blx	r8
 8007526:	3001      	adds	r0, #1
 8007528:	d01e      	beq.n	8007568 <_printf_common+0xa4>
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	6922      	ldr	r2, [r4, #16]
 800752e:	f003 0306 	and.w	r3, r3, #6
 8007532:	2b04      	cmp	r3, #4
 8007534:	bf02      	ittt	eq
 8007536:	68e5      	ldreq	r5, [r4, #12]
 8007538:	6833      	ldreq	r3, [r6, #0]
 800753a:	1aed      	subeq	r5, r5, r3
 800753c:	68a3      	ldr	r3, [r4, #8]
 800753e:	bf0c      	ite	eq
 8007540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007544:	2500      	movne	r5, #0
 8007546:	4293      	cmp	r3, r2
 8007548:	bfc4      	itt	gt
 800754a:	1a9b      	subgt	r3, r3, r2
 800754c:	18ed      	addgt	r5, r5, r3
 800754e:	2600      	movs	r6, #0
 8007550:	341a      	adds	r4, #26
 8007552:	42b5      	cmp	r5, r6
 8007554:	d11a      	bne.n	800758c <_printf_common+0xc8>
 8007556:	2000      	movs	r0, #0
 8007558:	e008      	b.n	800756c <_printf_common+0xa8>
 800755a:	2301      	movs	r3, #1
 800755c:	4652      	mov	r2, sl
 800755e:	4649      	mov	r1, r9
 8007560:	4638      	mov	r0, r7
 8007562:	47c0      	blx	r8
 8007564:	3001      	adds	r0, #1
 8007566:	d103      	bne.n	8007570 <_printf_common+0xac>
 8007568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800756c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007570:	3501      	adds	r5, #1
 8007572:	e7c6      	b.n	8007502 <_printf_common+0x3e>
 8007574:	18e1      	adds	r1, r4, r3
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	2030      	movs	r0, #48	; 0x30
 800757a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800757e:	4422      	add	r2, r4
 8007580:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007584:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007588:	3302      	adds	r3, #2
 800758a:	e7c7      	b.n	800751c <_printf_common+0x58>
 800758c:	2301      	movs	r3, #1
 800758e:	4622      	mov	r2, r4
 8007590:	4649      	mov	r1, r9
 8007592:	4638      	mov	r0, r7
 8007594:	47c0      	blx	r8
 8007596:	3001      	adds	r0, #1
 8007598:	d0e6      	beq.n	8007568 <_printf_common+0xa4>
 800759a:	3601      	adds	r6, #1
 800759c:	e7d9      	b.n	8007552 <_printf_common+0x8e>
	...

080075a0 <_printf_i>:
 80075a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075a4:	7e0f      	ldrb	r7, [r1, #24]
 80075a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075a8:	2f78      	cmp	r7, #120	; 0x78
 80075aa:	4691      	mov	r9, r2
 80075ac:	4680      	mov	r8, r0
 80075ae:	460c      	mov	r4, r1
 80075b0:	469a      	mov	sl, r3
 80075b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075b6:	d807      	bhi.n	80075c8 <_printf_i+0x28>
 80075b8:	2f62      	cmp	r7, #98	; 0x62
 80075ba:	d80a      	bhi.n	80075d2 <_printf_i+0x32>
 80075bc:	2f00      	cmp	r7, #0
 80075be:	f000 80d4 	beq.w	800776a <_printf_i+0x1ca>
 80075c2:	2f58      	cmp	r7, #88	; 0x58
 80075c4:	f000 80c0 	beq.w	8007748 <_printf_i+0x1a8>
 80075c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075d0:	e03a      	b.n	8007648 <_printf_i+0xa8>
 80075d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075d6:	2b15      	cmp	r3, #21
 80075d8:	d8f6      	bhi.n	80075c8 <_printf_i+0x28>
 80075da:	a101      	add	r1, pc, #4	; (adr r1, 80075e0 <_printf_i+0x40>)
 80075dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075e0:	08007639 	.word	0x08007639
 80075e4:	0800764d 	.word	0x0800764d
 80075e8:	080075c9 	.word	0x080075c9
 80075ec:	080075c9 	.word	0x080075c9
 80075f0:	080075c9 	.word	0x080075c9
 80075f4:	080075c9 	.word	0x080075c9
 80075f8:	0800764d 	.word	0x0800764d
 80075fc:	080075c9 	.word	0x080075c9
 8007600:	080075c9 	.word	0x080075c9
 8007604:	080075c9 	.word	0x080075c9
 8007608:	080075c9 	.word	0x080075c9
 800760c:	08007751 	.word	0x08007751
 8007610:	08007679 	.word	0x08007679
 8007614:	0800770b 	.word	0x0800770b
 8007618:	080075c9 	.word	0x080075c9
 800761c:	080075c9 	.word	0x080075c9
 8007620:	08007773 	.word	0x08007773
 8007624:	080075c9 	.word	0x080075c9
 8007628:	08007679 	.word	0x08007679
 800762c:	080075c9 	.word	0x080075c9
 8007630:	080075c9 	.word	0x080075c9
 8007634:	08007713 	.word	0x08007713
 8007638:	682b      	ldr	r3, [r5, #0]
 800763a:	1d1a      	adds	r2, r3, #4
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	602a      	str	r2, [r5, #0]
 8007640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007648:	2301      	movs	r3, #1
 800764a:	e09f      	b.n	800778c <_printf_i+0x1ec>
 800764c:	6820      	ldr	r0, [r4, #0]
 800764e:	682b      	ldr	r3, [r5, #0]
 8007650:	0607      	lsls	r7, r0, #24
 8007652:	f103 0104 	add.w	r1, r3, #4
 8007656:	6029      	str	r1, [r5, #0]
 8007658:	d501      	bpl.n	800765e <_printf_i+0xbe>
 800765a:	681e      	ldr	r6, [r3, #0]
 800765c:	e003      	b.n	8007666 <_printf_i+0xc6>
 800765e:	0646      	lsls	r6, r0, #25
 8007660:	d5fb      	bpl.n	800765a <_printf_i+0xba>
 8007662:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007666:	2e00      	cmp	r6, #0
 8007668:	da03      	bge.n	8007672 <_printf_i+0xd2>
 800766a:	232d      	movs	r3, #45	; 0x2d
 800766c:	4276      	negs	r6, r6
 800766e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007672:	485a      	ldr	r0, [pc, #360]	; (80077dc <_printf_i+0x23c>)
 8007674:	230a      	movs	r3, #10
 8007676:	e012      	b.n	800769e <_printf_i+0xfe>
 8007678:	682b      	ldr	r3, [r5, #0]
 800767a:	6820      	ldr	r0, [r4, #0]
 800767c:	1d19      	adds	r1, r3, #4
 800767e:	6029      	str	r1, [r5, #0]
 8007680:	0605      	lsls	r5, r0, #24
 8007682:	d501      	bpl.n	8007688 <_printf_i+0xe8>
 8007684:	681e      	ldr	r6, [r3, #0]
 8007686:	e002      	b.n	800768e <_printf_i+0xee>
 8007688:	0641      	lsls	r1, r0, #25
 800768a:	d5fb      	bpl.n	8007684 <_printf_i+0xe4>
 800768c:	881e      	ldrh	r6, [r3, #0]
 800768e:	4853      	ldr	r0, [pc, #332]	; (80077dc <_printf_i+0x23c>)
 8007690:	2f6f      	cmp	r7, #111	; 0x6f
 8007692:	bf0c      	ite	eq
 8007694:	2308      	moveq	r3, #8
 8007696:	230a      	movne	r3, #10
 8007698:	2100      	movs	r1, #0
 800769a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800769e:	6865      	ldr	r5, [r4, #4]
 80076a0:	60a5      	str	r5, [r4, #8]
 80076a2:	2d00      	cmp	r5, #0
 80076a4:	bfa2      	ittt	ge
 80076a6:	6821      	ldrge	r1, [r4, #0]
 80076a8:	f021 0104 	bicge.w	r1, r1, #4
 80076ac:	6021      	strge	r1, [r4, #0]
 80076ae:	b90e      	cbnz	r6, 80076b4 <_printf_i+0x114>
 80076b0:	2d00      	cmp	r5, #0
 80076b2:	d04b      	beq.n	800774c <_printf_i+0x1ac>
 80076b4:	4615      	mov	r5, r2
 80076b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80076ba:	fb03 6711 	mls	r7, r3, r1, r6
 80076be:	5dc7      	ldrb	r7, [r0, r7]
 80076c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076c4:	4637      	mov	r7, r6
 80076c6:	42bb      	cmp	r3, r7
 80076c8:	460e      	mov	r6, r1
 80076ca:	d9f4      	bls.n	80076b6 <_printf_i+0x116>
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	d10b      	bne.n	80076e8 <_printf_i+0x148>
 80076d0:	6823      	ldr	r3, [r4, #0]
 80076d2:	07de      	lsls	r6, r3, #31
 80076d4:	d508      	bpl.n	80076e8 <_printf_i+0x148>
 80076d6:	6923      	ldr	r3, [r4, #16]
 80076d8:	6861      	ldr	r1, [r4, #4]
 80076da:	4299      	cmp	r1, r3
 80076dc:	bfde      	ittt	le
 80076de:	2330      	movle	r3, #48	; 0x30
 80076e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076e4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80076e8:	1b52      	subs	r2, r2, r5
 80076ea:	6122      	str	r2, [r4, #16]
 80076ec:	f8cd a000 	str.w	sl, [sp]
 80076f0:	464b      	mov	r3, r9
 80076f2:	aa03      	add	r2, sp, #12
 80076f4:	4621      	mov	r1, r4
 80076f6:	4640      	mov	r0, r8
 80076f8:	f7ff fee4 	bl	80074c4 <_printf_common>
 80076fc:	3001      	adds	r0, #1
 80076fe:	d14a      	bne.n	8007796 <_printf_i+0x1f6>
 8007700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007704:	b004      	add	sp, #16
 8007706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	f043 0320 	orr.w	r3, r3, #32
 8007710:	6023      	str	r3, [r4, #0]
 8007712:	4833      	ldr	r0, [pc, #204]	; (80077e0 <_printf_i+0x240>)
 8007714:	2778      	movs	r7, #120	; 0x78
 8007716:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	6829      	ldr	r1, [r5, #0]
 800771e:	061f      	lsls	r7, r3, #24
 8007720:	f851 6b04 	ldr.w	r6, [r1], #4
 8007724:	d402      	bmi.n	800772c <_printf_i+0x18c>
 8007726:	065f      	lsls	r7, r3, #25
 8007728:	bf48      	it	mi
 800772a:	b2b6      	uxthmi	r6, r6
 800772c:	07df      	lsls	r7, r3, #31
 800772e:	bf48      	it	mi
 8007730:	f043 0320 	orrmi.w	r3, r3, #32
 8007734:	6029      	str	r1, [r5, #0]
 8007736:	bf48      	it	mi
 8007738:	6023      	strmi	r3, [r4, #0]
 800773a:	b91e      	cbnz	r6, 8007744 <_printf_i+0x1a4>
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	f023 0320 	bic.w	r3, r3, #32
 8007742:	6023      	str	r3, [r4, #0]
 8007744:	2310      	movs	r3, #16
 8007746:	e7a7      	b.n	8007698 <_printf_i+0xf8>
 8007748:	4824      	ldr	r0, [pc, #144]	; (80077dc <_printf_i+0x23c>)
 800774a:	e7e4      	b.n	8007716 <_printf_i+0x176>
 800774c:	4615      	mov	r5, r2
 800774e:	e7bd      	b.n	80076cc <_printf_i+0x12c>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	6826      	ldr	r6, [r4, #0]
 8007754:	6961      	ldr	r1, [r4, #20]
 8007756:	1d18      	adds	r0, r3, #4
 8007758:	6028      	str	r0, [r5, #0]
 800775a:	0635      	lsls	r5, r6, #24
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	d501      	bpl.n	8007764 <_printf_i+0x1c4>
 8007760:	6019      	str	r1, [r3, #0]
 8007762:	e002      	b.n	800776a <_printf_i+0x1ca>
 8007764:	0670      	lsls	r0, r6, #25
 8007766:	d5fb      	bpl.n	8007760 <_printf_i+0x1c0>
 8007768:	8019      	strh	r1, [r3, #0]
 800776a:	2300      	movs	r3, #0
 800776c:	6123      	str	r3, [r4, #16]
 800776e:	4615      	mov	r5, r2
 8007770:	e7bc      	b.n	80076ec <_printf_i+0x14c>
 8007772:	682b      	ldr	r3, [r5, #0]
 8007774:	1d1a      	adds	r2, r3, #4
 8007776:	602a      	str	r2, [r5, #0]
 8007778:	681d      	ldr	r5, [r3, #0]
 800777a:	6862      	ldr	r2, [r4, #4]
 800777c:	2100      	movs	r1, #0
 800777e:	4628      	mov	r0, r5
 8007780:	f7f8 fd2e 	bl	80001e0 <memchr>
 8007784:	b108      	cbz	r0, 800778a <_printf_i+0x1ea>
 8007786:	1b40      	subs	r0, r0, r5
 8007788:	6060      	str	r0, [r4, #4]
 800778a:	6863      	ldr	r3, [r4, #4]
 800778c:	6123      	str	r3, [r4, #16]
 800778e:	2300      	movs	r3, #0
 8007790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007794:	e7aa      	b.n	80076ec <_printf_i+0x14c>
 8007796:	6923      	ldr	r3, [r4, #16]
 8007798:	462a      	mov	r2, r5
 800779a:	4649      	mov	r1, r9
 800779c:	4640      	mov	r0, r8
 800779e:	47d0      	blx	sl
 80077a0:	3001      	adds	r0, #1
 80077a2:	d0ad      	beq.n	8007700 <_printf_i+0x160>
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	079b      	lsls	r3, r3, #30
 80077a8:	d413      	bmi.n	80077d2 <_printf_i+0x232>
 80077aa:	68e0      	ldr	r0, [r4, #12]
 80077ac:	9b03      	ldr	r3, [sp, #12]
 80077ae:	4298      	cmp	r0, r3
 80077b0:	bfb8      	it	lt
 80077b2:	4618      	movlt	r0, r3
 80077b4:	e7a6      	b.n	8007704 <_printf_i+0x164>
 80077b6:	2301      	movs	r3, #1
 80077b8:	4632      	mov	r2, r6
 80077ba:	4649      	mov	r1, r9
 80077bc:	4640      	mov	r0, r8
 80077be:	47d0      	blx	sl
 80077c0:	3001      	adds	r0, #1
 80077c2:	d09d      	beq.n	8007700 <_printf_i+0x160>
 80077c4:	3501      	adds	r5, #1
 80077c6:	68e3      	ldr	r3, [r4, #12]
 80077c8:	9903      	ldr	r1, [sp, #12]
 80077ca:	1a5b      	subs	r3, r3, r1
 80077cc:	42ab      	cmp	r3, r5
 80077ce:	dcf2      	bgt.n	80077b6 <_printf_i+0x216>
 80077d0:	e7eb      	b.n	80077aa <_printf_i+0x20a>
 80077d2:	2500      	movs	r5, #0
 80077d4:	f104 0619 	add.w	r6, r4, #25
 80077d8:	e7f5      	b.n	80077c6 <_printf_i+0x226>
 80077da:	bf00      	nop
 80077dc:	08007b9d 	.word	0x08007b9d
 80077e0:	08007bae 	.word	0x08007bae

080077e4 <memmove>:
 80077e4:	4288      	cmp	r0, r1
 80077e6:	b510      	push	{r4, lr}
 80077e8:	eb01 0402 	add.w	r4, r1, r2
 80077ec:	d902      	bls.n	80077f4 <memmove+0x10>
 80077ee:	4284      	cmp	r4, r0
 80077f0:	4623      	mov	r3, r4
 80077f2:	d807      	bhi.n	8007804 <memmove+0x20>
 80077f4:	1e43      	subs	r3, r0, #1
 80077f6:	42a1      	cmp	r1, r4
 80077f8:	d008      	beq.n	800780c <memmove+0x28>
 80077fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007802:	e7f8      	b.n	80077f6 <memmove+0x12>
 8007804:	4402      	add	r2, r0
 8007806:	4601      	mov	r1, r0
 8007808:	428a      	cmp	r2, r1
 800780a:	d100      	bne.n	800780e <memmove+0x2a>
 800780c:	bd10      	pop	{r4, pc}
 800780e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007812:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007816:	e7f7      	b.n	8007808 <memmove+0x24>

08007818 <_sbrk_r>:
 8007818:	b538      	push	{r3, r4, r5, lr}
 800781a:	4d06      	ldr	r5, [pc, #24]	; (8007834 <_sbrk_r+0x1c>)
 800781c:	2300      	movs	r3, #0
 800781e:	4604      	mov	r4, r0
 8007820:	4608      	mov	r0, r1
 8007822:	602b      	str	r3, [r5, #0]
 8007824:	f7f9 fa6a 	bl	8000cfc <_sbrk>
 8007828:	1c43      	adds	r3, r0, #1
 800782a:	d102      	bne.n	8007832 <_sbrk_r+0x1a>
 800782c:	682b      	ldr	r3, [r5, #0]
 800782e:	b103      	cbz	r3, 8007832 <_sbrk_r+0x1a>
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	bd38      	pop	{r3, r4, r5, pc}
 8007834:	20001cd0 	.word	0x20001cd0

08007838 <_realloc_r>:
 8007838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800783c:	4680      	mov	r8, r0
 800783e:	4614      	mov	r4, r2
 8007840:	460e      	mov	r6, r1
 8007842:	b921      	cbnz	r1, 800784e <_realloc_r+0x16>
 8007844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007848:	4611      	mov	r1, r2
 800784a:	f7ff bc57 	b.w	80070fc <_malloc_r>
 800784e:	b92a      	cbnz	r2, 800785c <_realloc_r+0x24>
 8007850:	f7ff fbe8 	bl	8007024 <_free_r>
 8007854:	4625      	mov	r5, r4
 8007856:	4628      	mov	r0, r5
 8007858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800785c:	f000 f81b 	bl	8007896 <_malloc_usable_size_r>
 8007860:	4284      	cmp	r4, r0
 8007862:	4607      	mov	r7, r0
 8007864:	d802      	bhi.n	800786c <_realloc_r+0x34>
 8007866:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800786a:	d812      	bhi.n	8007892 <_realloc_r+0x5a>
 800786c:	4621      	mov	r1, r4
 800786e:	4640      	mov	r0, r8
 8007870:	f7ff fc44 	bl	80070fc <_malloc_r>
 8007874:	4605      	mov	r5, r0
 8007876:	2800      	cmp	r0, #0
 8007878:	d0ed      	beq.n	8007856 <_realloc_r+0x1e>
 800787a:	42bc      	cmp	r4, r7
 800787c:	4622      	mov	r2, r4
 800787e:	4631      	mov	r1, r6
 8007880:	bf28      	it	cs
 8007882:	463a      	movcs	r2, r7
 8007884:	f7ff fbc0 	bl	8007008 <memcpy>
 8007888:	4631      	mov	r1, r6
 800788a:	4640      	mov	r0, r8
 800788c:	f7ff fbca 	bl	8007024 <_free_r>
 8007890:	e7e1      	b.n	8007856 <_realloc_r+0x1e>
 8007892:	4635      	mov	r5, r6
 8007894:	e7df      	b.n	8007856 <_realloc_r+0x1e>

08007896 <_malloc_usable_size_r>:
 8007896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800789a:	1f18      	subs	r0, r3, #4
 800789c:	2b00      	cmp	r3, #0
 800789e:	bfbc      	itt	lt
 80078a0:	580b      	ldrlt	r3, [r1, r0]
 80078a2:	18c0      	addlt	r0, r0, r3
 80078a4:	4770      	bx	lr
	...

080078a8 <_init>:
 80078a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078aa:	bf00      	nop
 80078ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ae:	bc08      	pop	{r3}
 80078b0:	469e      	mov	lr, r3
 80078b2:	4770      	bx	lr

080078b4 <_fini>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	bf00      	nop
 80078b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ba:	bc08      	pop	{r3}
 80078bc:	469e      	mov	lr, r3
 80078be:	4770      	bx	lr
