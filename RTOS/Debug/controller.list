
controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009640  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  080097d0  080097d0  000197d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b50  08009b50  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08009b50  08009b50  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b50  08009b50  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b50  08009b50  00019b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b54  08009b54  00019b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf0  20000060  08009bb8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d50  08009bb8  00021d50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c867  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000397b  00000000  00000000  0003c93a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001670  00000000  00000000  000402b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000117d  00000000  00000000  00041928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003cb5  00000000  00000000  00042aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a00f  00000000  00000000  0004675a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6416  00000000  00000000  00060769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006370  00000000  00000000  00116b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0011cef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080097b8 	.word	0x080097b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080097b8 	.word	0x080097b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <osStatusToString>:

/**
This function is to convert the status mesages from FreeRTOS
into strings to be sent via bluetooth in case of error
*/
char* osStatusToString(osStatus_t status) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    switch (status) {
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	3305      	adds	r3, #5
 800028c:	2b05      	cmp	r3, #5
 800028e:	d81b      	bhi.n	80002c8 <osStatusToString+0x48>
 8000290:	a201      	add	r2, pc, #4	; (adr r2, 8000298 <osStatusToString+0x18>)
 8000292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000296:	bf00      	nop
 8000298:	080002c5 	.word	0x080002c5
 800029c:	080002c1 	.word	0x080002c1
 80002a0:	080002bd 	.word	0x080002bd
 80002a4:	080002b9 	.word	0x080002b9
 80002a8:	080002b5 	.word	0x080002b5
 80002ac:	080002b1 	.word	0x080002b1
        case osOK:
            return "OK: Operation completed successfully\r\n";
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <osStatusToString+0x58>)
 80002b2:	e00a      	b.n	80002ca <osStatusToString+0x4a>
        case osError:
            return "osError: Unspecified error\r\n";
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <osStatusToString+0x5c>)
 80002b6:	e008      	b.n	80002ca <osStatusToString+0x4a>
        case osErrorTimeout:
            return "Timeout: osErrorTimeout:  Operation timed out\r\n";
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <osStatusToString+0x60>)
 80002ba:	e006      	b.n	80002ca <osStatusToString+0x4a>
        case osErrorResource:
            return "Resource: osErrorResource: Resource not available\r\n";
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <osStatusToString+0x64>)
 80002be:	e004      	b.n	80002ca <osStatusToString+0x4a>
        case osErrorParameter:
            return "Parameter: osErrorParameter: Parameter error\r\n";
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <osStatusToString+0x68>)
 80002c2:	e002      	b.n	80002ca <osStatusToString+0x4a>
        case osErrorNoMemory:
            return "NoMemory: osErrorNoMemory: System is out of memory\r\n";
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <osStatusToString+0x6c>)
 80002c6:	e000      	b.n	80002ca <osStatusToString+0x4a>
        default:
            return "Unknown osStatus_t\r\n";
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <osStatusToString+0x70>)
    }
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	080097d0 	.word	0x080097d0
 80002dc:	080097f8 	.word	0x080097f8
 80002e0:	08009818 	.word	0x08009818
 80002e4:	08009848 	.word	0x08009848
 80002e8:	0800987c 	.word	0x0800987c
 80002ec:	080098ac 	.word	0x080098ac
 80002f0:	080098e4 	.word	0x080098e4

080002f4 <MAP>:

The constants used in this function are defined in the main.h file
but should be edited via the controller.ioc file
*/
float MAP(float int_IN)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	ed87 0a01 	vstr	s0, [r7, #4]
	 if (int_IN < pedal_min){return pwm_min;}
 80002fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000302:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800030a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800030e:	d502      	bpl.n	8000316 <MAP+0x22>
 8000310:	eddf 7a13 	vldr	s15, [pc, #76]	; 8000360 <MAP+0x6c>
 8000314:	e01d      	b.n	8000352 <MAP+0x5e>
	 else if (int_IN > pedal_max){return pwm_max;}
 8000316:	edd7 7a01 	vldr	s15, [r7, #4]
 800031a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800031e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000326:	dd02      	ble.n	800032e <MAP+0x3a>
 8000328:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8000364 <MAP+0x70>
 800032c:	e011      	b.n	8000352 <MAP+0x5e>
	 else{
		return ((((int_IN - pedal_min)*(pwm_max - pwm_min))/(pedal_max - pedal_min)) + pwm_min);
 800032e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000332:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000336:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800033a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000360 <MAP+0x6c>
 800033e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000342:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8000346:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800034a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000360 <MAP+0x6c>
 800034e:	ee77 7a87 	vadd.f32	s15, s15, s14
	 }
}
 8000352:	eeb0 0a67 	vmov.f32	s0, s15
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	42c80000 	.word	0x42c80000
 8000364:	43480000 	.word	0x43480000

08000368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800036c:	f001 f868 	bl	8001440 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000370:	f000 f862 	bl	8000438 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000374:	f000 fa56 	bl	8000824 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000378:	f000 fa24 	bl	80007c4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800037c:	f000 f94c 	bl	8000618 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000380:	f000 f9a8 	bl	80006d4 <MX_TIM2_Init>
  MX_RTC_Init();
 8000384:	f000 f8bc 	bl	8000500 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000388:	f005 fae6 	bl	8005958 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of timer_trava */
  timer_travaHandle = osTimerNew(callback_timer_trava, osTimerOnce, NULL, &timer_trava_attributes);
 800038c:	4b1a      	ldr	r3, [pc, #104]	; (80003f8 <main+0x90>)
 800038e:	2200      	movs	r2, #0
 8000390:	2100      	movs	r1, #0
 8000392:	481a      	ldr	r0, [pc, #104]	; (80003fc <main+0x94>)
 8000394:	f005 fc68 	bl	8005c68 <osTimerNew>
 8000398:	4603      	mov	r3, r0
 800039a:	4a19      	ldr	r2, [pc, #100]	; (8000400 <main+0x98>)
 800039c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of input_queue */
  input_queueHandle = osMessageQueueNew (16, sizeof(command), &input_queue_attributes);
 800039e:	4a19      	ldr	r2, [pc, #100]	; (8000404 <main+0x9c>)
 80003a0:	210c      	movs	r1, #12
 80003a2:	2010      	movs	r0, #16
 80003a4:	f005 fd6e 	bl	8005e84 <osMessageQueueNew>
 80003a8:	4603      	mov	r3, r0
 80003aa:	4a17      	ldr	r2, [pc, #92]	; (8000408 <main+0xa0>)
 80003ac:	6013      	str	r3, [r2, #0]

  /* creation of bluetooth_queue */
  bluetooth_queueHandle = osMessageQueueNew (16, sizeof(char*), &bluetooth_queue_attributes);
 80003ae:	4a17      	ldr	r2, [pc, #92]	; (800040c <main+0xa4>)
 80003b0:	2104      	movs	r1, #4
 80003b2:	2010      	movs	r0, #16
 80003b4:	f005 fd66 	bl	8005e84 <osMessageQueueNew>
 80003b8:	4603      	mov	r3, r0
 80003ba:	4a15      	ldr	r2, [pc, #84]	; (8000410 <main+0xa8>)
 80003bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of bluetooth_task */
  bluetooth_taskHandle = osThreadNew(BT_reader_funct, NULL, &bluetooth_task_attributes);
 80003be:	4a15      	ldr	r2, [pc, #84]	; (8000414 <main+0xac>)
 80003c0:	2100      	movs	r1, #0
 80003c2:	4815      	ldr	r0, [pc, #84]	; (8000418 <main+0xb0>)
 80003c4:	f005 fb30 	bl	8005a28 <osThreadNew>
 80003c8:	4603      	mov	r3, r0
 80003ca:	4a14      	ldr	r2, [pc, #80]	; (800041c <main+0xb4>)
 80003cc:	6013      	str	r3, [r2, #0]

  /* creation of motor_ctrl */
  motor_ctrlHandle = osThreadNew(MT_controller_funct, NULL, &motor_ctrl_attributes);
 80003ce:	4a14      	ldr	r2, [pc, #80]	; (8000420 <main+0xb8>)
 80003d0:	2100      	movs	r1, #0
 80003d2:	4814      	ldr	r0, [pc, #80]	; (8000424 <main+0xbc>)
 80003d4:	f005 fb28 	bl	8005a28 <osThreadNew>
 80003d8:	4603      	mov	r3, r0
 80003da:	4a13      	ldr	r2, [pc, #76]	; (8000428 <main+0xc0>)
 80003dc:	6013      	str	r3, [r2, #0]

  /* creation of sensors_task */
  sensors_taskHandle = osThreadNew(Sensor_reader_funct, NULL, &sensors_task_attributes);
 80003de:	4a13      	ldr	r2, [pc, #76]	; (800042c <main+0xc4>)
 80003e0:	2100      	movs	r1, #0
 80003e2:	4813      	ldr	r0, [pc, #76]	; (8000430 <main+0xc8>)
 80003e4:	f005 fb20 	bl	8005a28 <osThreadNew>
 80003e8:	4603      	mov	r3, r0
 80003ea:	4a12      	ldr	r2, [pc, #72]	; (8000434 <main+0xcc>)
 80003ec:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80003ee:	f005 fae7 	bl	80059c0 <osKernelStart>
 80003f2:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	08009ad4 	.word	0x08009ad4
 80003fc:	08000ef9 	.word	0x08000ef9
 8000400:	200001d0 	.word	0x200001d0
 8000404:	08009aa4 	.word	0x08009aa4
 8000408:	200001c8 	.word	0x200001c8
 800040c:	08009abc 	.word	0x08009abc
 8000410:	200001cc 	.word	0x200001cc
 8000414:	08009a38 	.word	0x08009a38
 8000418:	08000a89 	.word	0x08000a89
 800041c:	200001bc 	.word	0x200001bc
 8000420:	08009a5c 	.word	0x08009a5c
 8000424:	08000b65 	.word	0x08000b65
 8000428:	200001c0 	.word	0x200001c0
 800042c:	08009a80 	.word	0x08009a80
 8000430:	08000e5d 	.word	0x08000e5d
 8000434:	200001c4 	.word	0x200001c4

08000438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b09c      	sub	sp, #112	; 0x70
 800043c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000442:	2228      	movs	r2, #40	; 0x28
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f008 fcdc 	bl	8008e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800045c:	463b      	mov	r3, r7
 800045e:	2234      	movs	r2, #52	; 0x34
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f008 fcce 	bl	8008e04 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000468:	2309      	movs	r3, #9
 800046a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800046c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000470:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000476:	2301      	movs	r3, #1
 8000478:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800047a:	2301      	movs	r3, #1
 800047c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047e:	2302      	movs	r3, #2
 8000480:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000486:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000488:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800048c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000492:	4618      	mov	r0, r3
 8000494:	f001 fac6 	bl	8001a24 <HAL_RCC_OscConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800049e:	f000 fd61 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a2:	230f      	movs	r3, #15
 80004a4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a6:	2302      	movs	r3, #2
 80004a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004aa:	2300      	movs	r3, #0
 80004ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004bc:	2102      	movs	r1, #2
 80004be:	4618      	mov	r0, r3
 80004c0:	f002 faee 	bl	8002aa0 <HAL_RCC_ClockConfig>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004ca:	f000 fd4b 	bl	8000f64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC
 80004ce:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <SystemClock_Config+0xc4>)
 80004d0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80004d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004dc:	2300      	movs	r3, #0
 80004de:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004e0:	463b      	mov	r3, r7
 80004e2:	4618      	mov	r0, r3
 80004e4:	f002 fd44 	bl	8002f70 <HAL_RCCEx_PeriphCLKConfig>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80004ee:	f000 fd39 	bl	8000f64 <Error_Handler>
  }
}
 80004f2:	bf00      	nop
 80004f4:	3770      	adds	r7, #112	; 0x70
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	00011001 	.word	0x00011001

08000500 <MX_RTC_Init>:
  * @param None
  * @retval None
  */

static void MX_RTC_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b090      	sub	sp, #64	; 0x40
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000516:	2300      	movs	r3, #0
 8000518:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800051a:	463b      	mov	r3, r7
 800051c:	2228      	movs	r2, #40	; 0x28
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f008 fc6f 	bl	8008e04 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000526:	4b3a      	ldr	r3, [pc, #232]	; (8000610 <MX_RTC_Init+0x110>)
 8000528:	4a3a      	ldr	r2, [pc, #232]	; (8000614 <MX_RTC_Init+0x114>)
 800052a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800052c:	4b38      	ldr	r3, [pc, #224]	; (8000610 <MX_RTC_Init+0x110>)
 800052e:	2200      	movs	r2, #0
 8000530:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000532:	4b37      	ldr	r3, [pc, #220]	; (8000610 <MX_RTC_Init+0x110>)
 8000534:	227f      	movs	r2, #127	; 0x7f
 8000536:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000538:	4b35      	ldr	r3, [pc, #212]	; (8000610 <MX_RTC_Init+0x110>)
 800053a:	22ff      	movs	r2, #255	; 0xff
 800053c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800053e:	4b34      	ldr	r3, [pc, #208]	; (8000610 <MX_RTC_Init+0x110>)
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000544:	4b32      	ldr	r3, [pc, #200]	; (8000610 <MX_RTC_Init+0x110>)
 8000546:	2200      	movs	r2, #0
 8000548:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800054a:	4b31      	ldr	r3, [pc, #196]	; (8000610 <MX_RTC_Init+0x110>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000550:	482f      	ldr	r0, [pc, #188]	; (8000610 <MX_RTC_Init+0x110>)
 8000552:	f002 fe9f 	bl	8003294 <HAL_RTC_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800055c:	f000 fd02 	bl	8000f64 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000560:	2300      	movs	r3, #0
 8000562:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000566:	2300      	movs	r3, #0
 8000568:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800056c:	2300      	movs	r3, #0
 800056e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000572:	2300      	movs	r3, #0
 8000574:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000576:	2300      	movs	r3, #0
 8000578:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800057a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800057e:	2201      	movs	r2, #1
 8000580:	4619      	mov	r1, r3
 8000582:	4823      	ldr	r0, [pc, #140]	; (8000610 <MX_RTC_Init+0x110>)
 8000584:	f002 ff09 	bl	800339a <HAL_RTC_SetTime>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800058e:	f000 fce9 	bl	8000f64 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000592:	2301      	movs	r3, #1
 8000594:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000598:	2301      	movs	r3, #1
 800059a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800059e:	2301      	movs	r3, #1
 80005a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80005aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ae:	2201      	movs	r2, #1
 80005b0:	4619      	mov	r1, r3
 80005b2:	4817      	ldr	r0, [pc, #92]	; (8000610 <MX_RTC_Init+0x110>)
 80005b4:	f002 ff8b 	bl	80034ce <HAL_RTC_SetDate>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80005be:	f000 fcd1 	bl	8000f64 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x23;
 80005c2:	2323      	movs	r3, #35	; 0x23
 80005c4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x59;
 80005c6:	2359      	movs	r3, #89	; 0x59
 80005c8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x59;
 80005ca:	2359      	movs	r3, #89	; 0x59
 80005cc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x7;
 80005e6:	2307      	movs	r3, #7
 80005e8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80005ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	2201      	movs	r2, #1
 80005f6:	4619      	mov	r1, r3
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_RTC_Init+0x110>)
 80005fa:	f003 f83b 	bl	8003674 <HAL_RTC_SetAlarm_IT>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000604:	f000 fcae 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* USER CODE END RTC_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	3740      	adds	r7, #64	; 0x40
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	2000007c 	.word	0x2000007c
 8000614:	40002800 	.word	0x40002800

08000618 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <MX_TIM1_Init+0xb4>)
 8000638:	4a25      	ldr	r2, [pc, #148]	; (80006d0 <MX_TIM1_Init+0xb8>)
 800063a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <MX_TIM1_Init+0xb4>)
 800063e:	2200      	movs	r2, #0
 8000640:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000642:	4b22      	ldr	r3, [pc, #136]	; (80006cc <MX_TIM1_Init+0xb4>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000648:	4b20      	ldr	r3, [pc, #128]	; (80006cc <MX_TIM1_Init+0xb4>)
 800064a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800064e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_TIM1_Init+0xb4>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000656:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_TIM1_Init+0xb4>)
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_TIM1_Init+0xb4>)
 800065e:	2200      	movs	r2, #0
 8000660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000662:	481a      	ldr	r0, [pc, #104]	; (80006cc <MX_TIM1_Init+0xb4>)
 8000664:	f003 fb18 	bl	8003c98 <HAL_TIM_Base_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800066e:	f000 fc79 	bl	8000f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000676:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_INVERTED;
 8000678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800067c:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 15;
 8000682:	230f      	movs	r3, #15
 8000684:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	4619      	mov	r1, r3
 800068c:	480f      	ldr	r0, [pc, #60]	; (80006cc <MX_TIM1_Init+0xb4>)
 800068e:	f003 ff2b 	bl	80044e8 <HAL_TIM_ConfigClockSource>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000698:	f000 fc64 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4619      	mov	r1, r3
 80006ac:	4807      	ldr	r0, [pc, #28]	; (80006cc <MX_TIM1_Init+0xb4>)
 80006ae:	f004 fbe1 	bl	8004e74 <HAL_TIMEx_MasterConfigSynchronization>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80006b8:	f000 fc54 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <MX_TIM1_Init+0xb4>)
 80006be:	f003 fb43 	bl	8003d48 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3720      	adds	r7, #32
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000009c 	.word	0x2000009c
 80006d0:	40012c00 	.word	0x40012c00

080006d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08e      	sub	sp, #56	; 0x38
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f4:	463b      	mov	r3, r7
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
 8000702:	615a      	str	r2, [r3, #20]
 8000704:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000706:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <MX_TIM2_Init+0xec>)
 8000708:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800070c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 800070e:	4b2c      	ldr	r3, [pc, #176]	; (80007c0 <MX_TIM2_Init+0xec>)
 8000710:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8000714:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000716:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <MX_TIM2_Init+0xec>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <MX_TIM2_Init+0xec>)
 800071e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000722:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000724:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <MX_TIM2_Init+0xec>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072a:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <MX_TIM2_Init+0xec>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000730:	4823      	ldr	r0, [pc, #140]	; (80007c0 <MX_TIM2_Init+0xec>)
 8000732:	f003 fab1 	bl	8003c98 <HAL_TIM_Base_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800073c:	f000 fc12 	bl	8000f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000746:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800074a:	4619      	mov	r1, r3
 800074c:	481c      	ldr	r0, [pc, #112]	; (80007c0 <MX_TIM2_Init+0xec>)
 800074e:	f003 fecb 	bl	80044e8 <HAL_TIM_ConfigClockSource>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000758:	f000 fc04 	bl	8000f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800075c:	4818      	ldr	r0, [pc, #96]	; (80007c0 <MX_TIM2_Init+0xec>)
 800075e:	f003 fb47 	bl	8003df0 <HAL_TIM_PWM_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000768:	f000 fbfc 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	4811      	ldr	r0, [pc, #68]	; (80007c0 <MX_TIM2_Init+0xec>)
 800077c:	f004 fb7a 	bl	8004e74 <HAL_TIMEx_MasterConfigSynchronization>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000786:	f000 fbed 	bl	8000f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800078a:	2360      	movs	r3, #96	; 0x60
 800078c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	4619      	mov	r1, r3
 80007a0:	4807      	ldr	r0, [pc, #28]	; (80007c0 <MX_TIM2_Init+0xec>)
 80007a2:	f003 fd8d 	bl	80042c0 <HAL_TIM_PWM_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80007ac:	f000 fbda 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007b0:	4803      	ldr	r0, [pc, #12]	; (80007c0 <MX_TIM2_Init+0xec>)
 80007b2:	f000 fc95 	bl	80010e0 <HAL_TIM_MspPostInit>

}
 80007b6:	bf00      	nop
 80007b8:	3738      	adds	r7, #56	; 0x38
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000e8 	.word	0x200000e8

080007c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_USART1_UART_Init+0x58>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <MX_USART1_UART_Init+0x5c>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_USART1_UART_Init+0x58>)
 80007d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_USART1_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART1_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART1_UART_Init+0x58>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART1_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART1_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART1_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART1_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART1_UART_Init+0x58>)
 8000808:	f004 fbb8 	bl	8004f7c <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 fba7 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000134 	.word	0x20000134
 8000820:	40013800 	.word	0x40013800

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800083a:	4b36      	ldr	r3, [pc, #216]	; (8000914 <MX_GPIO_Init+0xf0>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	4a35      	ldr	r2, [pc, #212]	; (8000914 <MX_GPIO_Init+0xf0>)
 8000840:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000844:	6153      	str	r3, [r2, #20]
 8000846:	4b33      	ldr	r3, [pc, #204]	; (8000914 <MX_GPIO_Init+0xf0>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b30      	ldr	r3, [pc, #192]	; (8000914 <MX_GPIO_Init+0xf0>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	4a2f      	ldr	r2, [pc, #188]	; (8000914 <MX_GPIO_Init+0xf0>)
 8000858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085c:	6153      	str	r3, [r2, #20]
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <MX_GPIO_Init+0xf0>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b2a      	ldr	r3, [pc, #168]	; (8000914 <MX_GPIO_Init+0xf0>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a29      	ldr	r2, [pc, #164]	; (8000914 <MX_GPIO_Init+0xf0>)
 8000870:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000874:	6153      	str	r3, [r2, #20]
 8000876:	4b27      	ldr	r3, [pc, #156]	; (8000914 <MX_GPIO_Init+0xf0>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b24      	ldr	r3, [pc, #144]	; (8000914 <MX_GPIO_Init+0xf0>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a23      	ldr	r2, [pc, #140]	; (8000914 <MX_GPIO_Init+0xf0>)
 8000888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800088c:	6153      	str	r3, [r2, #20]
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_GPIO_Init+0xf0>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rele_ctrl_GPIO_Port, rele_ctrl_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a0:	481d      	ldr	r0, [pc, #116]	; (8000918 <MX_GPIO_Init+0xf4>)
 80008a2:	f001 f86f 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BREAK_1_Pin */
  GPIO_InitStruct.Pin = BREAK_1_Pin;
 80008a6:	2320      	movs	r3, #32
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008aa:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BREAK_1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f000 fed7 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : BREAK_2_Pin */
  GPIO_InitStruct.Pin = BREAK_2_Pin;
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BREAK_2_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f000 fec9 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : rele_ctrl_Pin */
  GPIO_InitStruct.Pin = rele_ctrl_Pin;
 80008de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(rele_ctrl_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	4808      	ldr	r0, [pc, #32]	; (8000918 <MX_GPIO_Init+0xf4>)
 80008f8:	f000 feba 	bl	8001670 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2105      	movs	r1, #5
 8000900:	2017      	movs	r0, #23
 8000902:	f000 fe8b 	bl	800161c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000906:	2017      	movs	r0, #23
 8000908:	f000 fea4 	bl	8001654 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021000 	.word	0x40021000
 8000918:	48000800 	.word	0x48000800

0800091c <HAL_RTC_AlarmAEventCallback>:





void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	command com;
	com.button_id = 3;
 8000924:	2303      	movs	r3, #3
 8000926:	60fb      	str	r3, [r7, #12]
	com.button_status=1;
 8000928:	2301      	movs	r3, #1
 800092a:	613b      	str	r3, [r7, #16]
	osMessageQueuePut(input_queueHandle, &com, 0, 0);
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <HAL_RTC_AlarmAEventCallback+0x3c>)
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	f107 010c 	add.w	r1, r7, #12
 8000934:	2300      	movs	r3, #0
 8000936:	2200      	movs	r2, #0
 8000938:	f005 fb2a 	bl	8005f90 <osMessageQueuePut>

	char* input_command = "End of the week\n";
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <HAL_RTC_AlarmAEventCallback+0x40>)
 800093e:	60bb      	str	r3, [r7, #8]
	osMessageQueuePut(bluetooth_queueHandle, &input_command, 0, 0);
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <HAL_RTC_AlarmAEventCallback+0x44>)
 8000942:	6818      	ldr	r0, [r3, #0]
 8000944:	f107 0108 	add.w	r1, r7, #8
 8000948:	2300      	movs	r3, #0
 800094a:	2200      	movs	r2, #0
 800094c:	f005 fb20 	bl	8005f90 <osMessageQueuePut>
}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200001c8 	.word	0x200001c8
 800095c:	08009950 	.word	0x08009950
 8000960:	200001cc 	.word	0x200001cc

08000964 <FON_UART_Receive>:

/*
 * Since the available function HAL_UART_Receive reads a predetermined amount of bytes
 * this function  was developt to try to read until finds the \n char
*/
int FON_UART_Receive(char *received, uint16_t timeout,UART_HandleTypeDef *huartX) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	460b      	mov	r3, r1
 800096e:	607a      	str	r2, [r7, #4]
 8000970:	817b      	strh	r3, [r7, #10]
    HAL_StatusTypeDef status;
    unsigned char receivedChar;
    int index = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
    while (1) {
        status = HAL_UART_Receive(huartX, &receivedChar, 1, timeout); //tries to read next availabe byte in the buffer
 8000976:	897b      	ldrh	r3, [r7, #10]
 8000978:	f107 0112 	add.w	r1, r7, #18
 800097c:	2201      	movs	r2, #1
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f004 fbd4 	bl	800512c <HAL_UART_Receive>
 8000984:	4603      	mov	r3, r0
 8000986:	74fb      	strb	r3, [r7, #19]

        if (status == HAL_OK) { //verifies if the read was succesfull
 8000988:	7cfb      	ldrb	r3, [r7, #19]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d112      	bne.n	80009b4 <FON_UART_Receive+0x50>
            if (receivedChar == '\n') {
 800098e:	7cbb      	ldrb	r3, [r7, #18]
 8000990:	2b0a      	cmp	r3, #10
 8000992:	d106      	bne.n	80009a2 <FON_UART_Receive+0x3e>
            	received[index] = '\0';
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	4413      	add	r3, r2
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
                return 1; //returns success value
 800099e:	2301      	movs	r3, #1
 80009a0:	e00c      	b.n	80009bc <FON_UART_Receive+0x58>
            }
            else {
                received[index] = receivedChar;
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	4413      	add	r3, r2
 80009a8:	7cba      	ldrb	r2, [r7, #18]
 80009aa:	701a      	strb	r2, [r3, #0]
                index++; //keeps reading
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	3301      	adds	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	e7e0      	b.n	8000976 <FON_UART_Receive+0x12>
            }
        }
        else {
            received[0] = '\0';
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
            return 0; //returns error value
 80009ba:	2300      	movs	r3, #0
        }
    }
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <HAL_GPIO_EXTI_Callback>:
 * In our case, both brake handles are dealt with here
 * by simmply adding the correct  command in the queue
 *
 * Import to note that in interruptions, the waittime argument for queues MUST be 0
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	80fb      	strh	r3, [r7, #6]
	command com;

	if (GPIO_Pin == BREAK_1_Pin ) {
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	2b20      	cmp	r3, #32
 80009d2:	d110      	bne.n	80009f6 <HAL_GPIO_EXTI_Callback+0x32>
		com.button_id 		= 1;
 80009d4:	2301      	movs	r3, #1
 80009d6:	613b      	str	r3, [r7, #16]
		if (HAL_GPIO_ReadPin(BREAK_1_GPIO_Port, GPIO_Pin) == GPIO_PIN_SET) { //because of this line, it was necessary to split both pins
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	4619      	mov	r1, r3
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f000 ffb8 	bl	8001954 <HAL_GPIO_ReadPin>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d102      	bne.n	80009f0 <HAL_GPIO_EXTI_Callback+0x2c>
			// Your code for rising edge -> released
			com.button_status  	= 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	e015      	b.n	8000a1c <HAL_GPIO_EXTI_Callback+0x58>
		}
		else {
			// Your code for falling edge -> pressed
			com.button_status  	= 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	e012      	b.n	8000a1c <HAL_GPIO_EXTI_Callback+0x58>
		}
	}
	else if (GPIO_Pin == BREAK_2_Pin ) {
 80009f6:	88fb      	ldrh	r3, [r7, #6]
 80009f8:	2b40      	cmp	r3, #64	; 0x40
 80009fa:	d10f      	bne.n	8000a1c <HAL_GPIO_EXTI_Callback+0x58>
		com.button_id 		= 1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	613b      	str	r3, [r7, #16]
		if (HAL_GPIO_ReadPin(BREAK_2_GPIO_Port, GPIO_Pin) == GPIO_PIN_SET) {
 8000a00:	88fb      	ldrh	r3, [r7, #6]
 8000a02:	4619      	mov	r1, r3
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a08:	f000 ffa4 	bl	8001954 <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d102      	bne.n	8000a18 <HAL_GPIO_EXTI_Callback+0x54>
			// Your code for rising edge -> released
			com.button_status  	= 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	e001      	b.n	8000a1c <HAL_GPIO_EXTI_Callback+0x58>
		} else {
			// Your code for falling edge -> pressed
			com.button_status  	= 1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
		}
	}

	osStatus_t status 	=  osMessageQueuePut(input_queueHandle, &com, 0, 0); //this block tries to sent to the  input_queue
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_GPIO_EXTI_Callback+0x94>)
 8000a1e:	6818      	ldr	r0, [r3, #0]
 8000a20:	f107 0110 	add.w	r1, r7, #16
 8000a24:	2300      	movs	r3, #0
 8000a26:	2200      	movs	r2, #0
 8000a28:	f005 fab2 	bl	8005f90 <osMessageQueuePut>
 8000a2c:	61f8      	str	r0, [r7, #28]
	if (status != osOK){													 // in case it  fails,
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d00c      	beq.n	8000a4e <HAL_GPIO_EXTI_Callback+0x8a>
		char* str = osStatusToString(status);								 // then sent the error to the bluetooth_queue
 8000a34:	69f8      	ldr	r0, [r7, #28]
 8000a36:	f7ff fc23 	bl	8000280 <osStatusToString>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	60fb      	str	r3, [r7, #12]
		osMessageQueuePut(bluetooth_queueHandle, &str, 0, 0);
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <HAL_GPIO_EXTI_Callback+0x98>)
 8000a40:	6818      	ldr	r0, [r3, #0]
 8000a42:	f107 010c 	add.w	r1, r7, #12
 8000a46:	2300      	movs	r3, #0
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f005 faa1 	bl	8005f90 <osMessageQueuePut>
	}
}
 8000a4e:	bf00      	nop
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200001c8 	.word	0x200001c8
 8000a5c:	200001cc 	.word	0x200001cc

08000a60 <backup_write>:



void backup_write(uint32_t reg){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	   HAL_PWR_EnableBkUpAccess();
 8000a68:	f000 ffbc 	bl	80019e4 <HAL_PWR_EnableBkUpAccess>
	   // Writes a data in a RTC Backup data Register 1
	   HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, reg);
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <backup_write+0x24>)
 8000a72:	f003 f8d5 	bl	8003c20 <HAL_RTCEx_BKUPWrite>
	   HAL_PWR_DisableBkUpAccess();
 8000a76:	f000 ffc5 	bl	8001a04 <HAL_PWR_DisableBkUpAccess>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2000007c 	.word	0x2000007c

08000a88 <BT_reader_funct>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BT_reader_funct */
void BT_reader_funct(void *argument)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b091      	sub	sp, #68	; 0x44
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	unsigned char str[8] ="\r\nInit\r\n";  //initial post to confirm
 8000a90:	4a30      	ldr	r2, [pc, #192]	; (8000b54 <BT_reader_funct+0xcc>)
 8000a92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a9a:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_UART_Transmit(&huart1, str, sizeof(str), 500);
 8000a9e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000aa2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000aa6:	2208      	movs	r2, #8
 8000aa8:	482b      	ldr	r0, [pc, #172]	; (8000b58 <BT_reader_funct+0xd0>)
 8000aaa:	f004 fab5 	bl	8005018 <HAL_UART_Transmit>

	char* res;
    char receivedData[32];
	command com;
	while (1) {
	        if (FON_UART_Receive(receivedData,500, &huart1)){
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4a29      	ldr	r2, [pc, #164]	; (8000b58 <BT_reader_funct+0xd0>)
 8000ab4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff53 	bl	8000964 <FON_UART_Receive>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d01f      	beq.n	8000b04 <BT_reader_funct+0x7c>
	        	if (strlen(receivedData)==3){ //strlen function returns the "used" len of a string, not the allocated size
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fb81 	bl	80001d0 <strlen>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	d117      	bne.n	8000b04 <BT_reader_funct+0x7c>
	        		com.button_id 		= receivedData[0] - '0'; //the commands come in the form of 3 digits, so this 2 lines turn
 8000ad4:	7d3b      	ldrb	r3, [r7, #20]
 8000ad6:	3b30      	subs	r3, #48	; 0x30
 8000ad8:	60bb      	str	r3, [r7, #8]
					com.button_status  	= 10*(receivedData[1] - '0') + (receivedData[2] - '0'); //the string of len3 into 2 ints
 8000ada:	7d7b      	ldrb	r3, [r7, #21]
 8000adc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4413      	add	r3, r2
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	461a      	mov	r2, r3
 8000aea:	7dbb      	ldrb	r3, [r7, #22]
 8000aec:	3b30      	subs	r3, #48	; 0x30
 8000aee:	4413      	add	r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]
					osMessageQueuePut(input_queueHandle, &com, 0, 2000);
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <BT_reader_funct+0xd4>)
 8000af4:	6818      	ldr	r0, [r3, #0]
 8000af6:	f107 0108 	add.w	r1, r7, #8
 8000afa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000afe:	2200      	movs	r2, #0
 8000b00:	f005 fa46 	bl	8005f90 <osMessageQueuePut>
	        	}
	        }

	        while (1){
	        	if (osMessageQueueGet(bluetooth_queueHandle, &res, NULL, 250) == osOK) {
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <BT_reader_funct+0xd8>)
 8000b06:	6818      	ldr	r0, [r3, #0]
 8000b08:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000b0c:	23fa      	movs	r3, #250	; 0xfa
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f005 fab2 	bl	8006078 <osMessageQueueGet>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d10c      	bne.n	8000b34 <BT_reader_funct+0xac>
	        	    HAL_UART_Transmit(&huart1, res, strlen(res), 1000);
 8000b1a:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8000b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fb56 	bl	80001d0 <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2c:	4621      	mov	r1, r4
 8000b2e:	480a      	ldr	r0, [pc, #40]	; (8000b58 <BT_reader_funct+0xd0>)
 8000b30:	f004 fa72 	bl	8005018 <HAL_UART_Transmit>
	        	}
	        	if (osMessageQueueGetCount(bluetooth_queueHandle)==0){
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <BT_reader_funct+0xd8>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f005 fb0f 	bl	800615c <osMessageQueueGetCount>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d000      	beq.n	8000b46 <BT_reader_funct+0xbe>
	        	if (osMessageQueueGet(bluetooth_queueHandle, &res, NULL, 250) == osOK) {
 8000b44:	e7de      	b.n	8000b04 <BT_reader_funct+0x7c>
	        		break;
 8000b46:	bf00      	nop
	        	}

	        }

	        osDelay(500);
 8000b48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b4c:	f005 f848 	bl	8005be0 <osDelay>
	        if (FON_UART_Receive(receivedData,500, &huart1)){
 8000b50:	e7ad      	b.n	8000aae <BT_reader_funct+0x26>
 8000b52:	bf00      	nop
 8000b54:	08009964 	.word	0x08009964
 8000b58:	20000134 	.word	0x20000134
 8000b5c:	200001c8 	.word	0x200001c8
 8000b60:	200001cc 	.word	0x200001cc

08000b64 <MT_controller_funct>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MT_controller_funct */
void MT_controller_funct(void *argument)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b09a      	sub	sp, #104	; 0x68
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MT_controller_funct */
  /* Infinite loop */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	48a6      	ldr	r0, [pc, #664]	; (8000e08 <MT_controller_funct+0x2a4>)
 8000b70:	f003 f9a0 	bl	8003eb4 <HAL_TIM_PWM_Start>

	//variables for the finite state machine
	int lock = 0; 		//binary indicator for the  locking
 8000b74:	2300      	movs	r3, #0
 8000b76:	667b      	str	r3, [r7, #100]	; 0x64
	int onhold=0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	663b      	str	r3, [r7, #96]	; 0x60
	int brk = 0;  		//binary indicator for the  brake
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
	int stationary = 0; //binaryh indicator the bike has fully stopped
 8000b80:	2300      	movs	r3, #0
 8000b82:	65bb      	str	r3, [r7, #88]	; 0x58
	float freq = 0.0; 	//float for the  frequencie sent by the sensor
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	657b      	str	r3, [r7, #84]	; 0x54
	float output = 0.0; //float for the  frequencie post MAP function
 8000b8a:	f04f 0300 	mov.w	r3, #0
 8000b8e:	653b      	str	r3, [r7, #80]	; 0x50
	int freq_int; 		//int  to sent to the bluetooth the value of  freq (I had issues formating string with float)

	command com;
	char* input_command,decision;
	uint32_t reg = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0);
 8000b90:	2100      	movs	r1, #0
 8000b92:	489e      	ldr	r0, [pc, #632]	; (8000e0c <MT_controller_funct+0x2a8>)
 8000b94:	f003 f85e 	bl	8003c54 <HAL_RTCEx_BKUPRead>
 8000b98:	64f8      	str	r0, [r7, #76]	; 0x4c
	osTimerStart(timer_travaHandle, minute*0.5);
 8000b9a:	4b9d      	ldr	r3, [pc, #628]	; (8000e10 <MT_controller_funct+0x2ac>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f247 5130 	movw	r1, #30000	; 0x7530
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f005 f8e4 	bl	8005d70 <osTimerStart>

	 if ((reg != 0) && (reg != 1) ){
 8000ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d016      	beq.n	8000bdc <MT_controller_funct+0x78>
 8000bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d013      	beq.n	8000bdc <MT_controller_funct+0x78>
			   // Write Back Up Register 1 Data
		 	   backup_write(0);
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff ff53 	bl	8000a60 <backup_write>
			   asprintf(&input_command, "Starting value: %d\n", 0);
 8000bba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4994      	ldr	r1, [pc, #592]	; (8000e14 <MT_controller_funct+0x2b0>)
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f008 f8fa 	bl	8008dbc <asiprintf>
			   osMessageQueuePut(bluetooth_queueHandle, &input_command, 0, 2000);
 8000bc8:	4b93      	ldr	r3, [pc, #588]	; (8000e18 <MT_controller_funct+0x2b4>)
 8000bca:	6818      	ldr	r0, [r3, #0]
 8000bcc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000bd0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f005 f9db 	bl	8005f90 <osMessageQueuePut>
	 if ((reg != 0) && (reg != 1) ){
 8000bda:	e011      	b.n	8000c00 <MT_controller_funct+0x9c>
	 }
	 else{
			 lock = (int) reg;
 8000bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bde:	667b      	str	r3, [r7, #100]	; 0x64
			 asprintf(&input_command, "MEM read: %d\n", lock);
 8000be0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000be4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000be6:	498d      	ldr	r1, [pc, #564]	; (8000e1c <MT_controller_funct+0x2b8>)
 8000be8:	4618      	mov	r0, r3
 8000bea:	f008 f8e7 	bl	8008dbc <asiprintf>
			 osMessageQueuePut(bluetooth_queueHandle, &input_command, 0, 2000);
 8000bee:	4b8a      	ldr	r3, [pc, #552]	; (8000e18 <MT_controller_funct+0x2b4>)
 8000bf0:	6818      	ldr	r0, [r3, #0]
 8000bf2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000bf6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f005 f9c8 	bl	8005f90 <osMessageQueuePut>

	 }


	while(1){
		if (osMessageQueueGet(input_queueHandle, &com, NULL, 2000)== osOK){
 8000c00:	4b87      	ldr	r3, [pc, #540]	; (8000e20 <MT_controller_funct+0x2bc>)
 8000c02:	6818      	ldr	r0, [r3, #0]
 8000c04:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000c08:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f005 fa33 	bl	8006078 <osMessageQueueGet>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f040 80a4 	bne.w	8000d62 <MT_controller_funct+0x1fe>
			if(com.button_id==1){
 8000c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d10a      	bne.n	8000c36 <MT_controller_funct+0xd2>
				brk = com.button_status;
 8000c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c22:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (brk){ input_command = "FREIOU \n";} //this lines just return the action to the bluetooth
 8000c24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d002      	beq.n	8000c30 <MT_controller_funct+0xcc>
 8000c2a:	4b7e      	ldr	r3, [pc, #504]	; (8000e24 <MT_controller_funct+0x2c0>)
 8000c2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c2e:	e08e      	b.n	8000d4e <MT_controller_funct+0x1ea>
				else{ input_command = "SOLTOU\n";}		// might delete them in the final version
 8000c30:	4b7d      	ldr	r3, [pc, #500]	; (8000e28 <MT_controller_funct+0x2c4>)
 8000c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c34:	e08b      	b.n	8000d4e <MT_controller_funct+0x1ea>
			}
			else if(com.button_id==2){
 8000c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d126      	bne.n	8000c8a <MT_controller_funct+0x126>
					freq = (com.sensor_value)*10000;
 8000c3c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000c40:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8000e2c <MT_controller_funct+0x2c8>
 8000c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c48:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					input_command = "";					//this lines just return the action to the bluetooth
 8000c4c:	4b78      	ldr	r3, [pc, #480]	; (8000e30 <MT_controller_funct+0x2cc>)
 8000c4e:	63bb      	str	r3, [r7, #56]	; 0x38
					freq_int = (int) freq;				// might delete them in the final version
 8000c50:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000c54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c58:	ee17 3a90 	vmov	r3, s15
 8000c5c:	64bb      	str	r3, [r7, #72]	; 0x48
					asprintf(&input_command, "FREQ(Hz): %d\n", freq_int);
 8000c5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c64:	4973      	ldr	r1, [pc, #460]	; (8000e34 <MT_controller_funct+0x2d0>)
 8000c66:	4618      	mov	r0, r3
 8000c68:	f008 f8a8 	bl	8008dbc <asiprintf>

					stationary=0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	65bb      	str	r3, [r7, #88]	; 0x58
					osTimerStop(timer_travaHandle);
 8000c70:	4b67      	ldr	r3, [pc, #412]	; (8000e10 <MT_controller_funct+0x2ac>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f005 f8bb 	bl	8005df0 <osTimerStop>
					osTimerStart(timer_travaHandle, minute*0.5);
 8000c7a:	4b65      	ldr	r3, [pc, #404]	; (8000e10 <MT_controller_funct+0x2ac>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f247 5130 	movw	r1, #30000	; 0x7530
 8000c82:	4618      	mov	r0, r3
 8000c84:	f005 f874 	bl	8005d70 <osTimerStart>
 8000c88:	e061      	b.n	8000d4e <MT_controller_funct+0x1ea>
			}
			else if(com.button_id==9){
 8000c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c8c:	2b09      	cmp	r3, #9
 8000c8e:	d157      	bne.n	8000d40 <MT_controller_funct+0x1dc>
				onhold = com.button_status;
 8000c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c92:	663b      	str	r3, [r7, #96]	; 0x60
				if (onhold){
 8000c94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d002      	beq.n	8000ca0 <MT_controller_funct+0x13c>
					input_command = "lock\n";} 	//this lines just return the action to the bluetooth
 8000c9a:	4b67      	ldr	r3, [pc, #412]	; (8000e38 <MT_controller_funct+0x2d4>)
 8000c9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c9e:	e04a      	b.n	8000d36 <MT_controller_funct+0x1d2>
				else{
					input_command = "UNlock\n";
 8000ca0:	4b66      	ldr	r3, [pc, #408]	; (8000e3c <MT_controller_funct+0x2d8>)
 8000ca2:	63bb      	str	r3, [r7, #56]	; 0x38
					RTC_DateTypeDef currentDate; // Create a structure to get the current date
					HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN); // Get the current date
 8000ca4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ca8:	2200      	movs	r2, #0
 8000caa:	4619      	mov	r1, r3
 8000cac:	4857      	ldr	r0, [pc, #348]	; (8000e0c <MT_controller_funct+0x2a8>)
 8000cae:	f002 fc92 	bl	80035d6 <HAL_RTC_GetDate>
					currentDate.Date = (currentDate.Date + 7) % 31; // Adjust for the maximum day in a month
 8000cb2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000cb6:	1dda      	adds	r2, r3, #7
 8000cb8:	4b61      	ldr	r3, [pc, #388]	; (8000e40 <MT_controller_funct+0x2dc>)
 8000cba:	fb83 1302 	smull	r1, r3, r3, r2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	1119      	asrs	r1, r3, #4
 8000cc2:	17d3      	asrs	r3, r2, #31
 8000cc4:	1ac9      	subs	r1, r1, r3
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	015b      	lsls	r3, r3, #5
 8000cca:	1a5b      	subs	r3, r3, r1
 8000ccc:	1ad1      	subs	r1, r2, r3
 8000cce:	b2cb      	uxtb	r3, r1
 8000cd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

					HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd8:	484c      	ldr	r0, [pc, #304]	; (8000e0c <MT_controller_funct+0x2a8>)
 8000cda:	f002 fe0f 	bl	80038fc <HAL_RTC_DeactivateAlarm>
					  RTC_AlarmTypeDef sAlarm = {0};
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	2228      	movs	r2, #40	; 0x28
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f008 f88c 	bl	8008e04 <memset>
					  sAlarm.AlarmTime.Hours = 0x23;
 8000cec:	2323      	movs	r3, #35	; 0x23
 8000cee:	723b      	strb	r3, [r7, #8]
					  sAlarm.AlarmTime.Minutes = 0x59;
 8000cf0:	2359      	movs	r3, #89	; 0x59
 8000cf2:	727b      	strb	r3, [r7, #9]
					  sAlarm.AlarmTime.Seconds = 0x59;
 8000cf4:	2359      	movs	r3, #89	; 0x59
 8000cf6:	72bb      	strb	r3, [r7, #10]
					  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
					  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
					  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
					  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
					  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
					  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
					  sAlarm.AlarmDateWeekDay = currentDate.Date;
 8000d10:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000d14:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					  sAlarm.Alarm = RTC_ALARM_A;
 8000d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
					  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	2201      	movs	r2, #1
 8000d24:	4619      	mov	r1, r3
 8000d26:	4839      	ldr	r0, [pc, #228]	; (8000e0c <MT_controller_funct+0x2a8>)
 8000d28:	f002 fca4 	bl	8003674 <HAL_RTC_SetAlarm_IT>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MT_controller_funct+0x1d2>
					  {
					    Error_Handler();
 8000d32:	f000 f917 	bl	8000f64 <Error_Handler>
					  }
				}
				backup_write(lock);
 8000d36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fe91 	bl	8000a60 <backup_write>
 8000d3e:	e006      	b.n	8000d4e <MT_controller_funct+0x1ea>
			}
			else if(com.button_id==3){
 8000d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d103      	bne.n	8000d4e <MT_controller_funct+0x1ea>
				stationary = com.button_status;
 8000d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d48:	65bb      	str	r3, [r7, #88]	; 0x58
				input_command = "stoped\n"; 	//this lines just return the action to the bluetooth
 8000d4a:	4b3e      	ldr	r3, [pc, #248]	; (8000e44 <MT_controller_funct+0x2e0>)
 8000d4c:	63bb      	str	r3, [r7, #56]	; 0x38
			}
			osMessageQueuePut(bluetooth_queueHandle, &input_command, 0, 2000);
 8000d4e:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <MT_controller_funct+0x2b4>)
 8000d50:	6818      	ldr	r0, [r3, #0]
 8000d52:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000d56:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f005 f918 	bl	8005f90 <osMessageQueuePut>
 8000d60:	e00a      	b.n	8000d78 <MT_controller_funct+0x214>

		}
		else{
			input_command = "No new input\n";
 8000d62:	4b39      	ldr	r3, [pc, #228]	; (8000e48 <MT_controller_funct+0x2e4>)
 8000d64:	63bb      	str	r3, [r7, #56]	; 0x38
			osMessageQueuePut(bluetooth_queueHandle, &input_command, 0, 2000);
 8000d66:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <MT_controller_funct+0x2b4>)
 8000d68:	6818      	ldr	r0, [r3, #0]
 8000d6a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000d6e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d72:	2200      	movs	r2, #0
 8000d74:	f005 f90c 	bl	8005f90 <osMessageQueuePut>

		}

		if (stationary){
 8000d78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <MT_controller_funct+0x222>
			lock=onhold;
 8000d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d80:	667b      	str	r3, [r7, #100]	; 0x64
			output=666;
 8000d82:	4b32      	ldr	r3, [pc, #200]	; (8000e4c <MT_controller_funct+0x2e8>)
 8000d84:	653b      	str	r3, [r7, #80]	; 0x50
		}
		if(!lock){
 8000d86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d11b      	bne.n	8000dc4 <MT_controller_funct+0x260>
			if (!brk){
 8000d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d106      	bne.n	8000da0 <MT_controller_funct+0x23c>
				//normal movemente
				output = MAP(freq);
 8000d92:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8000d96:	f7ff faad 	bl	80002f4 <MAP>
 8000d9a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
 8000d9e:	e001      	b.n	8000da4 <MT_controller_funct+0x240>
			}
			else{
				//nether motor or lock
			output = pwm_min;
 8000da0:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <MT_controller_funct+0x2ec>)
 8000da2:	653b      	str	r3, [r7, #80]	; 0x50
			}
			HAL_GPIO_WritePin(rele_ctrl_GPIO_Port, rele_ctrl_Pin, 1);
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000daa:	482a      	ldr	r0, [pc, #168]	; (8000e54 <MT_controller_funct+0x2f0>)
 8000dac:	f000 fdea 	bl	8001984 <HAL_GPIO_WritePin>
			htim2.Instance->CCR1 = output;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MT_controller_funct+0x2a4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dbc:	ee17 2a90 	vmov	r2, s15
 8000dc0:	635a      	str	r2, [r3, #52]	; 0x34
 8000dc2:	e009      	b.n	8000dd8 <MT_controller_funct+0x274>
		}
		else{
			//call locking function
			// it is still not defined what to do when locking the bike
			//but the code will go here
			HAL_GPIO_WritePin(rele_ctrl_GPIO_Port, rele_ctrl_Pin, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dca:	4822      	ldr	r0, [pc, #136]	; (8000e54 <MT_controller_funct+0x2f0>)
 8000dcc:	f000 fdda 	bl	8001984 <HAL_GPIO_WritePin>
			htim2.Instance->CCR1 = pwm_min;
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <MT_controller_funct+0x2a4>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2264      	movs	r2, #100	; 0x64
 8000dd6:	635a      	str	r2, [r3, #52]	; 0x34
		}

		//return status to phone
		asprintf(&decision, "OUTPUT: %d\n", (int)output);
 8000dd8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000de0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000de4:	ee17 2a90 	vmov	r2, s15
 8000de8:	491b      	ldr	r1, [pc, #108]	; (8000e58 <MT_controller_funct+0x2f4>)
 8000dea:	4618      	mov	r0, r3
 8000dec:	f007 ffe6 	bl	8008dbc <asiprintf>
		osMessageQueuePut(bluetooth_queueHandle, &decision, 0, 2000);
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MT_controller_funct+0x2b4>)
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8000df8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f005 f8c7 	bl	8005f90 <osMessageQueuePut>

		osThreadYield();
 8000e02:	f004 febb 	bl	8005b7c <osThreadYield>
	while(1){
 8000e06:	e6fb      	b.n	8000c00 <MT_controller_funct+0x9c>
 8000e08:	200000e8 	.word	0x200000e8
 8000e0c:	2000007c 	.word	0x2000007c
 8000e10:	200001d0 	.word	0x200001d0
 8000e14:	0800996c 	.word	0x0800996c
 8000e18:	200001cc 	.word	0x200001cc
 8000e1c:	08009980 	.word	0x08009980
 8000e20:	200001c8 	.word	0x200001c8
 8000e24:	08009990 	.word	0x08009990
 8000e28:	0800999c 	.word	0x0800999c
 8000e2c:	461c4000 	.word	0x461c4000
 8000e30:	080099a4 	.word	0x080099a4
 8000e34:	080099a8 	.word	0x080099a8
 8000e38:	080099b8 	.word	0x080099b8
 8000e3c:	080099c0 	.word	0x080099c0
 8000e40:	84210843 	.word	0x84210843
 8000e44:	080099c8 	.word	0x080099c8
 8000e48:	080099d0 	.word	0x080099d0
 8000e4c:	44268000 	.word	0x44268000
 8000e50:	42c80000 	.word	0x42c80000
 8000e54:	48000800 	.word	0x48000800
 8000e58:	080099e0 	.word	0x080099e0

08000e5c <Sensor_reader_funct>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensor_reader_funct */
void Sensor_reader_funct(void *argument)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sensor_reader_funct */
  /* Infinite loop */
	int delay = 500;				//int to define  how often the sensors will be read
 8000e64:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e68:	623b      	str	r3, [r7, #32]
	float rpm_input, rpm_old = 0;	// both current and old pedal measures
 8000e6a:	f04f 0300 	mov.w	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
	int counter;					// value read from the periferal
	command com;
	com.button_id = 2;				// code of the comand to be sent
 8000e70:	2302      	movs	r3, #2
 8000e72:	60fb      	str	r3, [r7, #12]
	while(1){
        counter = __HAL_TIM_GET_COUNTER(&htim1); //getter for the nummber of pulses
 8000e74:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <Sensor_reader_funct+0x94>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	61fb      	str	r3, [r7, #28]
        rpm_input =(float) 1.0*counter/(PulsesPerRound*delay);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	ee07 3a90 	vmov	s15, r3
 8000e82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e86:	6a3a      	ldr	r2, [r7, #32]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	ee07 3a90 	vmov	s15, r3
 8000e94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e9c:	edc7 7a06 	vstr	s15, [r7, #24]
		com.sensor_value = rpm_input;
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	617b      	str	r3, [r7, #20]
		if (counter != rpm_old){
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	ee07 3a90 	vmov	s15, r3
 8000eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000eb2:	eeb4 7a67 	vcmp.f32	s14, s15
 8000eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eba:	d008      	beq.n	8000ece <Sensor_reader_funct+0x72>
			osMessageQueuePut(input_queueHandle, &com, 0, 500);
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <Sensor_reader_funct+0x98>)
 8000ebe:	6818      	ldr	r0, [r3, #0]
 8000ec0:	f107 010c 	add.w	r1, r7, #12
 8000ec4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f005 f861 	bl	8005f90 <osMessageQueuePut>
		}
		__HAL_TIM_SET_COUNTER(&htim1,0);
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <Sensor_reader_funct+0x94>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24

		rpm_old = counter;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	ee07 3a90 	vmov	s15, r3
 8000edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		osDelay(delay);
 8000ee4:	6a3b      	ldr	r3, [r7, #32]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f004 fe7a 	bl	8005be0 <osDelay>
        counter = __HAL_TIM_GET_COUNTER(&htim1); //getter for the nummber of pulses
 8000eec:	e7c2      	b.n	8000e74 <Sensor_reader_funct+0x18>
 8000eee:	bf00      	nop
 8000ef0:	2000009c 	.word	0x2000009c
 8000ef4:	200001c8 	.word	0x200001c8

08000ef8 <callback_timer_trava>:
  /* USER CODE END Sensor_reader_funct */
}

/* callback_timer_trava function */
void callback_timer_trava(void *argument)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN callback_timer_trava */
	command com;
	com.button_id = 3;
 8000f00:	2303      	movs	r3, #3
 8000f02:	60fb      	str	r3, [r7, #12]
	com.button_status=1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	613b      	str	r3, [r7, #16]
	osMessageQueuePut(input_queueHandle, &com, 0, 0);
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <callback_timer_trava+0x3c>)
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	f107 010c 	add.w	r1, r7, #12
 8000f10:	2300      	movs	r3, #0
 8000f12:	2200      	movs	r2, #0
 8000f14:	f005 f83c 	bl	8005f90 <osMessageQueuePut>

	char* input_command = "Now able to lock!!!!!!!!\n";
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <callback_timer_trava+0x40>)
 8000f1a:	60bb      	str	r3, [r7, #8]
	osMessageQueuePut(bluetooth_queueHandle, &input_command, 0, 0);
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <callback_timer_trava+0x44>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	f107 0108 	add.w	r1, r7, #8
 8000f24:	2300      	movs	r3, #0
 8000f26:	2200      	movs	r2, #0
 8000f28:	f005 f832 	bl	8005f90 <osMessageQueuePut>
  /* USER CODE END callback_timer_trava */
}
 8000f2c:	bf00      	nop
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200001c8 	.word	0x200001c8
 8000f38:	080099ec 	.word	0x080099ec
 8000f3c:	200001cc 	.word	0x200001cc

08000f40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d101      	bne.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f52:	f000 fa8b 	bl	800146c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40001000 	.word	0x40001000

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	char* str = "ERROR_HANDLER CALLED";
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <Error_Handler+0x20>)
 8000f6c:	607b      	str	r3, [r7, #4]
	osMessageQueuePut(bluetooth_queueHandle, &str, 0, 0);
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <Error_Handler+0x24>)
 8000f70:	6818      	ldr	r0, [r3, #0]
 8000f72:	1d39      	adds	r1, r7, #4
 8000f74:	2300      	movs	r3, #0
 8000f76:	2200      	movs	r2, #0
 8000f78:	f005 f80a 	bl	8005f90 <osMessageQueuePut>
  /* USER CODE END Error_Handler_Debug */
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	08009a08 	.word	0x08009a08
 8000f88:	200001cc 	.word	0x200001cc

08000f8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6193      	str	r3, [r2, #24]
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	61d3      	str	r3, [r2, #28]
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	210f      	movs	r1, #15
 8000fc6:	f06f 0001 	mvn.w	r0, #1
 8000fca:	f000 fb27 	bl	800161c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000

08000fdc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a10      	ldr	r2, [pc, #64]	; (800102c <HAL_RTC_MspInit+0x50>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d119      	bne.n	8001022 <HAL_RTC_MspInit+0x46>
 8000fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ff2:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	fa93 f3a3 	rbit	r3, r3
 8000ffa:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ffe:	fab3 f383 	clz	r3, r3
 8001002:	b2db      	uxtb	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_RTC_MspInit+0x54>)
 8001008:	4413      	add	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	461a      	mov	r2, r3
 800100e:	2301      	movs	r3, #1
 8001010:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2105      	movs	r1, #5
 8001016:	2029      	movs	r0, #41	; 0x29
 8001018:	f000 fb00 	bl	800161c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800101c:	2029      	movs	r0, #41	; 0x29
 800101e:	f000 fb19 	bl	8001654 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40002800 	.word	0x40002800
 8001030:	10908100 	.word	0x10908100

08001034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <HAL_TIM_Base_MspInit+0xa4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d12a      	bne.n	80010ac <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_TIM_Base_MspInit+0xa8>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	4a20      	ldr	r2, [pc, #128]	; (80010dc <HAL_TIM_Base_MspInit+0xa8>)
 800105c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001060:	6193      	str	r3, [r2, #24]
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HAL_TIM_Base_MspInit+0xa8>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <HAL_TIM_Base_MspInit+0xa8>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <HAL_TIM_Base_MspInit+0xa8>)
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	6153      	str	r3, [r2, #20]
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <HAL_TIM_Base_MspInit+0xa8>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001090:	2301      	movs	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8001098:	230b      	movs	r3, #11
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a6:	f000 fae3 	bl	8001670 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010aa:	e010      	b.n	80010ce <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b4:	d10b      	bne.n	80010ce <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_TIM_Base_MspInit+0xa8>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <HAL_TIM_Base_MspInit+0xa8>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	61d3      	str	r3, [r2, #28]
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_TIM_Base_MspInit+0xa8>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	; 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40012c00 	.word	0x40012c00
 80010dc:	40021000 	.word	0x40021000

080010e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001100:	d11c      	bne.n	800113c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <HAL_TIM_MspPostInit+0x64>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <HAL_TIM_MspPostInit+0x64>)
 8001108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110c:	6153      	str	r3, [r2, #20]
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <HAL_TIM_MspPostInit+0x64>)
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800111a:	2301      	movs	r3, #1
 800111c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800112a:	2301      	movs	r3, #1
 800112c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	4619      	mov	r1, r3
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f000 fa9a 	bl	8001670 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800113c:	bf00      	nop
 800113e:	3720      	adds	r7, #32
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40021000 	.word	0x40021000

08001148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a17      	ldr	r2, [pc, #92]	; (80011c4 <HAL_UART_MspInit+0x7c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d127      	bne.n	80011ba <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <HAL_UART_MspInit+0x80>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <HAL_UART_MspInit+0x80>)
 8001170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001174:	6193      	str	r3, [r2, #24]
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_UART_MspInit+0x80>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_UART_MspInit+0x80>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4a10      	ldr	r2, [pc, #64]	; (80011c8 <HAL_UART_MspInit+0x80>)
 8001188:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800118c:	6153      	str	r3, [r2, #20]
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_UART_MspInit+0x80>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800119a:	2330      	movs	r3, #48	; 0x30
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011aa:	2307      	movs	r3, #7
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	; (80011cc <HAL_UART_MspInit+0x84>)
 80011b6:	f000 fa5b 	bl	8001670 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40013800 	.word	0x40013800
 80011c8:	40021000 	.word	0x40021000
 80011cc:	48000800 	.word	0x48000800

080011d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08e      	sub	sp, #56	; 0x38
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011e0:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <HAL_InitTick+0xe0>)
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	4a32      	ldr	r2, [pc, #200]	; (80012b0 <HAL_InitTick+0xe0>)
 80011e6:	f043 0310 	orr.w	r3, r3, #16
 80011ea:	61d3      	str	r3, [r2, #28]
 80011ec:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <HAL_InitTick+0xe0>)
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	f003 0310 	and.w	r3, r3, #16
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011f8:	f107 0210 	add.w	r2, r7, #16
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4611      	mov	r1, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f001 fe82 	bl	8002f0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001208:	6a3b      	ldr	r3, [r7, #32]
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120e:	2b00      	cmp	r3, #0
 8001210:	d103      	bne.n	800121a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001212:	f001 fe37 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8001216:	6378      	str	r0, [r7, #52]	; 0x34
 8001218:	e004      	b.n	8001224 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800121a:	f001 fe33 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 800121e:	4603      	mov	r3, r0
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001226:	4a23      	ldr	r2, [pc, #140]	; (80012b4 <HAL_InitTick+0xe4>)
 8001228:	fba2 2303 	umull	r2, r3, r2, r3
 800122c:	0c9b      	lsrs	r3, r3, #18
 800122e:	3b01      	subs	r3, #1
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <HAL_InitTick+0xe8>)
 8001234:	4a21      	ldr	r2, [pc, #132]	; (80012bc <HAL_InitTick+0xec>)
 8001236:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <HAL_InitTick+0xe8>)
 800123a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800123e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001240:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <HAL_InitTick+0xe8>)
 8001242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001244:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <HAL_InitTick+0xe8>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_InitTick+0xe8>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_InitTick+0xe8>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001258:	4817      	ldr	r0, [pc, #92]	; (80012b8 <HAL_InitTick+0xe8>)
 800125a:	f002 fd1d 	bl	8003c98 <HAL_TIM_Base_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001264:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001268:	2b00      	cmp	r3, #0
 800126a:	d11b      	bne.n	80012a4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800126c:	4812      	ldr	r0, [pc, #72]	; (80012b8 <HAL_InitTick+0xe8>)
 800126e:	f002 fd6b 	bl	8003d48 <HAL_TIM_Base_Start_IT>
 8001272:	4603      	mov	r3, r0
 8001274:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001278:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800127c:	2b00      	cmp	r3, #0
 800127e:	d111      	bne.n	80012a4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001280:	2036      	movs	r0, #54	; 0x36
 8001282:	f000 f9e7 	bl	8001654 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	d808      	bhi.n	800129e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800128c:	2200      	movs	r2, #0
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	2036      	movs	r0, #54	; 0x36
 8001292:	f000 f9c3 	bl	800161c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_InitTick+0xf0>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	e002      	b.n	80012a4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3738      	adds	r7, #56	; 0x38
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000
 80012b4:	431bde83 	.word	0x431bde83
 80012b8:	200001d4 	.word	0x200001d4
 80012bc:	40001000 	.word	0x40001000
 80012c0:	20000004 	.word	0x20000004

080012c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80012c8:	f3bf 8f4f 	dsb	sy
}
 80012cc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <__NVIC_SystemReset+0x24>)
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012d6:	4904      	ldr	r1, [pc, #16]	; (80012e8 <__NVIC_SystemReset+0x24>)
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <__NVIC_SystemReset+0x28>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80012de:	f3bf 8f4f 	dsb	sy
}
 80012e2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <__NVIC_SystemReset+0x20>
 80012e8:	e000ed00 	.word	0xe000ed00
 80012ec:	05fa0004 	.word	0x05fa0004

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <NMI_Handler+0x4>

080012f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 80012fa:	f7ff ffe3 	bl	80012c4 <__NVIC_SystemReset>

080012fe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <MemManage_Handler+0x4>

08001304 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <BusFault_Handler+0x4>

0800130a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <UsageFault_Handler+0x4>

08001310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BREAK_1_Pin);
 8001322:	2020      	movs	r0, #32
 8001324:	f000 fb46 	bl	80019b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BREAK_2_Pin);
 8001328:	2040      	movs	r0, #64	; 0x40
 800132a:	f000 fb43 	bl	80019b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <RTC_Alarm_IRQHandler+0x10>)
 800133a:	f002 fb6d 	bl	8003a18 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2000007c 	.word	0x2000007c

08001348 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <TIM6_DAC_IRQHandler+0x10>)
 800134e:	f002 fe97 	bl	8004080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200001d4 	.word	0x200001d4

0800135c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001364:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <_sbrk+0x5c>)
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <_sbrk+0x60>)
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <_sbrk+0x64>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <_sbrk+0x68>)
 800137c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	429a      	cmp	r2, r3
 800138a:	d207      	bcs.n	800139c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800138c:	f007 fd98 	bl	8008ec0 <__errno>
 8001390:	4603      	mov	r3, r0
 8001392:	220c      	movs	r2, #12
 8001394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800139a:	e009      	b.n	80013b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <_sbrk+0x64>)
 80013ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20004000 	.word	0x20004000
 80013bc:	00000400 	.word	0x00000400
 80013c0:	20000220 	.word	0x20000220
 80013c4:	20001d50 	.word	0x20001d50

080013c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <SystemInit+0x20>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <SystemInit+0x20>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001424 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f0:	f7ff ffea 	bl	80013c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <LoopForever+0x6>)
  ldr r1, =_edata
 80013f6:	490d      	ldr	r1, [pc, #52]	; (800142c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <LoopForever+0xe>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013fc:	e002      	b.n	8001404 <LoopCopyDataInit>

080013fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001402:	3304      	adds	r3, #4

08001404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001408:	d3f9      	bcc.n	80013fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <LoopForever+0x12>)
  ldr r4, =_ebss
 800140c:	4c0a      	ldr	r4, [pc, #40]	; (8001438 <LoopForever+0x16>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001410:	e001      	b.n	8001416 <LoopFillZerobss>

08001412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001414:	3204      	adds	r2, #4

08001416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001418:	d3fb      	bcc.n	8001412 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141a:	f007 fd57 	bl	8008ecc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800141e:	f7fe ffa3 	bl	8000368 <main>

08001422 <LoopForever>:

LoopForever:
    b LoopForever
 8001422:	e7fe      	b.n	8001422 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001424:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800142c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001430:	08009b58 	.word	0x08009b58
  ldr r2, =_sbss
 8001434:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001438:	20001d50 	.word	0x20001d50

0800143c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800143c:	e7fe      	b.n	800143c <ADC1_IRQHandler>
	...

08001440 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_Init+0x28>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_Init+0x28>)
 800144a:	f043 0310 	orr.w	r3, r3, #16
 800144e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 f8d8 	bl	8001606 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001456:	200f      	movs	r0, #15
 8001458:	f7ff feba 	bl	80011d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145c:	f7ff fd96 	bl	8000f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40022000 	.word	0x40022000

0800146c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x20>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_IncTick+0x24>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a04      	ldr	r2, [pc, #16]	; (8001490 <HAL_IncTick+0x24>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000008 	.word	0x20000008
 8001490:	20000224 	.word	0x20000224

08001494 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;  
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <HAL_GetTick+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000224 	.word	0x20000224

080014ac <__NVIC_SetPriorityGrouping>:
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_GetPriorityGrouping>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_EnableIRQ>:
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db0b      	blt.n	800153a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	f003 021f 	and.w	r2, r3, #31
 8001528:	4907      	ldr	r1, [pc, #28]	; (8001548 <__NVIC_EnableIRQ+0x38>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	2001      	movs	r0, #1
 8001532:	fa00 f202 	lsl.w	r2, r0, r2
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100

0800154c <__NVIC_SetPriority>:
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	2b00      	cmp	r3, #0
 800155e:	db0a      	blt.n	8001576 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	490c      	ldr	r1, [pc, #48]	; (8001598 <__NVIC_SetPriority+0x4c>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	0112      	lsls	r2, r2, #4
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	440b      	add	r3, r1
 8001570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001574:	e00a      	b.n	800158c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4908      	ldr	r1, [pc, #32]	; (800159c <__NVIC_SetPriority+0x50>)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	3b04      	subs	r3, #4
 8001584:	0112      	lsls	r2, r2, #4
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	440b      	add	r3, r1
 800158a:	761a      	strb	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <NVIC_EncodePriority>:
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f1c3 0307 	rsb	r3, r3, #7
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	bf28      	it	cs
 80015be:	2304      	movcs	r3, #4
 80015c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3304      	adds	r3, #4
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d902      	bls.n	80015d0 <NVIC_EncodePriority+0x30>
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3b03      	subs	r3, #3
 80015ce:	e000      	b.n	80015d2 <NVIC_EncodePriority+0x32>
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	4313      	orrs	r3, r2
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	; 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ff4c 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800162e:	f7ff ff61 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 8001632:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	68b9      	ldr	r1, [r7, #8]
 8001638:	6978      	ldr	r0, [r7, #20]
 800163a:	f7ff ffb1 	bl	80015a0 <NVIC_EncodePriority>
 800163e:	4602      	mov	r2, r0
 8001640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff80 	bl	800154c <__NVIC_SetPriority>
}
 800164c:	bf00      	nop
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ff54 	bl	8001510 <__NVIC_EnableIRQ>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167e:	e14e      	b.n	800191e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2101      	movs	r1, #1
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	fa01 f303 	lsl.w	r3, r1, r3
 800168c:	4013      	ands	r3, r2
 800168e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 8140 	beq.w	8001918 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d005      	beq.n	80016b0 <HAL_GPIO_Init+0x40>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d130      	bne.n	8001712 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	2203      	movs	r2, #3
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e6:	2201      	movs	r2, #1
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	091b      	lsrs	r3, r3, #4
 80016fc:	f003 0201 	and.w	r2, r3, #1
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b03      	cmp	r3, #3
 800171c:	d017      	beq.n	800174e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	2203      	movs	r2, #3
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d123      	bne.n	80017a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	08da      	lsrs	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3208      	adds	r2, #8
 8001762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	220f      	movs	r2, #15
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	691a      	ldr	r2, [r3, #16]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	08da      	lsrs	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3208      	adds	r2, #8
 800179c:	6939      	ldr	r1, [r7, #16]
 800179e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2203      	movs	r2, #3
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0203 	and.w	r2, r3, #3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 809a 	beq.w	8001918 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e4:	4b55      	ldr	r3, [pc, #340]	; (800193c <HAL_GPIO_Init+0x2cc>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a54      	ldr	r2, [pc, #336]	; (800193c <HAL_GPIO_Init+0x2cc>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b52      	ldr	r3, [pc, #328]	; (800193c <HAL_GPIO_Init+0x2cc>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017fc:	4a50      	ldr	r2, [pc, #320]	; (8001940 <HAL_GPIO_Init+0x2d0>)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	089b      	lsrs	r3, r3, #2
 8001802:	3302      	adds	r3, #2
 8001804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	220f      	movs	r2, #15
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001826:	d013      	beq.n	8001850 <HAL_GPIO_Init+0x1e0>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a46      	ldr	r2, [pc, #280]	; (8001944 <HAL_GPIO_Init+0x2d4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d00d      	beq.n	800184c <HAL_GPIO_Init+0x1dc>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a45      	ldr	r2, [pc, #276]	; (8001948 <HAL_GPIO_Init+0x2d8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d007      	beq.n	8001848 <HAL_GPIO_Init+0x1d8>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a44      	ldr	r2, [pc, #272]	; (800194c <HAL_GPIO_Init+0x2dc>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d101      	bne.n	8001844 <HAL_GPIO_Init+0x1d4>
 8001840:	2303      	movs	r3, #3
 8001842:	e006      	b.n	8001852 <HAL_GPIO_Init+0x1e2>
 8001844:	2305      	movs	r3, #5
 8001846:	e004      	b.n	8001852 <HAL_GPIO_Init+0x1e2>
 8001848:	2302      	movs	r3, #2
 800184a:	e002      	b.n	8001852 <HAL_GPIO_Init+0x1e2>
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <HAL_GPIO_Init+0x1e2>
 8001850:	2300      	movs	r3, #0
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	f002 0203 	and.w	r2, r2, #3
 8001858:	0092      	lsls	r2, r2, #2
 800185a:	4093      	lsls	r3, r2
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001862:	4937      	ldr	r1, [pc, #220]	; (8001940 <HAL_GPIO_Init+0x2d0>)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001870:	4b37      	ldr	r3, [pc, #220]	; (8001950 <HAL_GPIO_Init+0x2e0>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001894:	4a2e      	ldr	r2, [pc, #184]	; (8001950 <HAL_GPIO_Init+0x2e0>)
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800189a:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <HAL_GPIO_Init+0x2e0>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018be:	4a24      	ldr	r2, [pc, #144]	; (8001950 <HAL_GPIO_Init+0x2e0>)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_GPIO_Init+0x2e0>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018e8:	4a19      	ldr	r2, [pc, #100]	; (8001950 <HAL_GPIO_Init+0x2e0>)
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_GPIO_Init+0x2e0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001912:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <HAL_GPIO_Init+0x2e0>)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3301      	adds	r3, #1
 800191c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	f47f aea9 	bne.w	8001680 <HAL_GPIO_Init+0x10>
  }
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40021000 	.word	0x40021000
 8001940:	40010000 	.word	0x40010000
 8001944:	48000400 	.word	0x48000400
 8001948:	48000800 	.word	0x48000800
 800194c:	48000c00 	.word	0x48000c00
 8001950:	40010400 	.word	0x40010400

08001954 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800196c:	2301      	movs	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	e001      	b.n	8001976 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001994:	787b      	ldrb	r3, [r7, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019a0:	e002      	b.n	80019a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019d0:	88fb      	ldrh	r3, [r7, #6]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fff6 	bl	80009c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40010400 	.word	0x40010400

080019e4 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40007000 	.word	0x40007000

08001a04 <HAL_PWR_DisableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);  
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8001a0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40007000 	.word	0x40007000

08001a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a34:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	f001 b823 	b.w	8002a90 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 817d 	beq.w	8001d5a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a60:	4bbc      	ldr	r3, [pc, #752]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d00c      	beq.n	8001a86 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a6c:	4bb9      	ldr	r3, [pc, #740]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d15c      	bne.n	8001b32 <HAL_RCC_OscConfig+0x10e>
 8001a78:	4bb6      	ldr	r3, [pc, #728]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a84:	d155      	bne.n	8001b32 <HAL_RCC_OscConfig+0x10e>
 8001a86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a8a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8001a9a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	095b      	lsrs	r3, r3, #5
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d102      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x94>
 8001ab2:	4ba8      	ldr	r3, [pc, #672]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	e015      	b.n	8001ae4 <HAL_RCC_OscConfig+0xc0>
 8001ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001abc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ac4:	fa93 f3a3 	rbit	r3, r3
 8001ac8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001acc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ad0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ad4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ad8:	fa93 f3a3 	rbit	r3, r3
 8001adc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001ae0:	4b9c      	ldr	r3, [pc, #624]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ae8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001aec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001af0:	fa92 f2a2 	rbit	r2, r2
 8001af4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001af8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001afc:	fab2 f282 	clz	r2, r2
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	f042 0220 	orr.w	r2, r2, #32
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	f002 021f 	and.w	r2, r2, #31
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 811f 	beq.w	8001d58 <HAL_RCC_OscConfig+0x334>
 8001b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f040 8116 	bne.w	8001d58 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f000 bfaf 	b.w	8002a90 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x12e>
 8001b44:	4b83      	ldr	r3, [pc, #524]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a82      	ldr	r2, [pc, #520]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	e036      	b.n	8001bc0 <HAL_RCC_OscConfig+0x19c>
 8001b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x158>
 8001b62:	4b7c      	ldr	r3, [pc, #496]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a7b      	ldr	r2, [pc, #492]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b79      	ldr	r3, [pc, #484]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a78      	ldr	r2, [pc, #480]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001b74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e021      	b.n	8001bc0 <HAL_RCC_OscConfig+0x19c>
 8001b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x184>
 8001b8e:	4b71      	ldr	r3, [pc, #452]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a70      	ldr	r2, [pc, #448]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b6e      	ldr	r3, [pc, #440]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a6d      	ldr	r2, [pc, #436]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e00b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x19c>
 8001ba8:	4b6a      	ldr	r3, [pc, #424]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a69      	ldr	r2, [pc, #420]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a66      	ldr	r2, [pc, #408]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bc0:	4b64      	ldr	r3, [pc, #400]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	f023 020f 	bic.w	r2, r3, #15
 8001bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	495f      	ldr	r1, [pc, #380]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d059      	beq.n	8001c9e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7ff fc53 	bl	8001494 <HAL_GetTick>
 8001bee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7ff fc4e 	bl	8001494 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b64      	cmp	r3, #100	; 0x64
 8001c02:	d902      	bls.n	8001c0a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	f000 bf43 	b.w	8002a90 <HAL_RCC_OscConfig+0x106c>
 8001c0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c0e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001c1e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	095b      	lsrs	r3, r3, #5
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d102      	bne.n	8001c3c <HAL_RCC_OscConfig+0x218>
 8001c36:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	e015      	b.n	8001c68 <HAL_RCC_OscConfig+0x244>
 8001c3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c40:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001c48:	fa93 f3a3 	rbit	r3, r3
 8001c4c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c54:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c58:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001c64:	4b3b      	ldr	r3, [pc, #236]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c6c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001c70:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c74:	fa92 f2a2 	rbit	r2, r2
 8001c78:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001c7c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001c80:	fab2 f282 	clz	r2, r2
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	f042 0220 	orr.w	r2, r2, #32
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	f002 021f 	and.w	r2, r2, #31
 8001c90:	2101      	movs	r1, #1
 8001c92:	fa01 f202 	lsl.w	r2, r1, r2
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0ab      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x1d0>
 8001c9c:	e05d      	b.n	8001d5a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9e:	f7ff fbf9 	bl	8001494 <HAL_GetTick>
 8001ca2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff fbf4 	bl	8001494 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b64      	cmp	r3, #100	; 0x64
 8001cb6:	d902      	bls.n	8001cbe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	f000 bee9 	b.w	8002a90 <HAL_RCC_OscConfig+0x106c>
 8001cbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cc2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001cd2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	fab3 f383 	clz	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	095b      	lsrs	r3, r3, #5
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d102      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x2cc>
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	e015      	b.n	8001d1c <HAL_RCC_OscConfig+0x2f8>
 8001cf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001cfc:	fa93 f3a3 	rbit	r3, r3
 8001d00:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d08:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d0c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001d10:	fa93 f3a3 	rbit	r3, r3
 8001d14:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d18:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d20:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001d24:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d28:	fa92 f2a2 	rbit	r2, r2
 8001d2c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001d30:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001d34:	fab2 f282 	clz	r2, r2
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	f042 0220 	orr.w	r2, r2, #32
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	f002 021f 	and.w	r2, r2, #31
 8001d44:	2101      	movs	r1, #1
 8001d46:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ab      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x284>
 8001d50:	e003      	b.n	8001d5a <HAL_RCC_OscConfig+0x336>
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 817d 	beq.w	800206a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d70:	4ba6      	ldr	r3, [pc, #664]	; (800200c <HAL_RCC_OscConfig+0x5e8>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00b      	beq.n	8001d94 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d7c:	4ba3      	ldr	r3, [pc, #652]	; (800200c <HAL_RCC_OscConfig+0x5e8>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d172      	bne.n	8001e6e <HAL_RCC_OscConfig+0x44a>
 8001d88:	4ba0      	ldr	r3, [pc, #640]	; (800200c <HAL_RCC_OscConfig+0x5e8>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d16c      	bne.n	8001e6e <HAL_RCC_OscConfig+0x44a>
 8001d94:	2302      	movs	r3, #2
 8001d96:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001da6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	095b      	lsrs	r3, r3, #5
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d102      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x3a0>
 8001dbe:	4b93      	ldr	r3, [pc, #588]	; (800200c <HAL_RCC_OscConfig+0x5e8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	e013      	b.n	8001dec <HAL_RCC_OscConfig+0x3c8>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ddc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001de0:	fa93 f3a3 	rbit	r3, r3
 8001de4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001de8:	4b88      	ldr	r3, [pc, #544]	; (800200c <HAL_RCC_OscConfig+0x5e8>)
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	2202      	movs	r2, #2
 8001dee:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001df2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001df6:	fa92 f2a2 	rbit	r2, r2
 8001dfa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001dfe:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001e02:	fab2 f282 	clz	r2, r2
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	f042 0220 	orr.w	r2, r2, #32
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	f002 021f 	and.w	r2, r2, #31
 8001e12:	2101      	movs	r1, #1
 8001e14:	fa01 f202 	lsl.w	r2, r1, r2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00a      	beq.n	8001e34 <HAL_RCC_OscConfig+0x410>
 8001e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d002      	beq.n	8001e34 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	f000 be2e 	b.w	8002a90 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e34:	4b75      	ldr	r3, [pc, #468]	; (800200c <HAL_RCC_OscConfig+0x5e8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	21f8      	movs	r1, #248	; 0xf8
 8001e4a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e52:	fa91 f1a1 	rbit	r1, r1
 8001e56:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001e5a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001e5e:	fab1 f181 	clz	r1, r1
 8001e62:	b2c9      	uxtb	r1, r1
 8001e64:	408b      	lsls	r3, r1
 8001e66:	4969      	ldr	r1, [pc, #420]	; (800200c <HAL_RCC_OscConfig+0x5e8>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6c:	e0fd      	b.n	800206a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8088 	beq.w	8001f90 <HAL_RCC_OscConfig+0x56c>
 8001e80:	2301      	movs	r3, #1
 8001e82:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001e92:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ea0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff faf2 	bl	8001494 <HAL_GetTick>
 8001eb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb6:	f7ff faed 	bl	8001494 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d902      	bls.n	8001ecc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	f000 bde2 	b.w	8002a90 <HAL_RCC_OscConfig+0x106c>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001ede:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	095b      	lsrs	r3, r3, #5
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d102      	bne.n	8001efc <HAL_RCC_OscConfig+0x4d8>
 8001ef6:	4b45      	ldr	r3, [pc, #276]	; (800200c <HAL_RCC_OscConfig+0x5e8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	e013      	b.n	8001f24 <HAL_RCC_OscConfig+0x500>
 8001efc:	2302      	movs	r3, #2
 8001efe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f0e:	2302      	movs	r3, #2
 8001f10:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f14:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f20:	4b3a      	ldr	r3, [pc, #232]	; (800200c <HAL_RCC_OscConfig+0x5e8>)
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	2202      	movs	r2, #2
 8001f26:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001f2a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f2e:	fa92 f2a2 	rbit	r2, r2
 8001f32:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001f36:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f3a:	fab2 f282 	clz	r2, r2
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	f042 0220 	orr.w	r2, r2, #32
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	f002 021f 	and.w	r2, r2, #31
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0af      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f56:	4b2d      	ldr	r3, [pc, #180]	; (800200c <HAL_RCC_OscConfig+0x5e8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	21f8      	movs	r1, #248	; 0xf8
 8001f6c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f74:	fa91 f1a1 	rbit	r1, r1
 8001f78:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001f7c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001f80:	fab1 f181 	clz	r1, r1
 8001f84:	b2c9      	uxtb	r1, r1
 8001f86:	408b      	lsls	r3, r1
 8001f88:	4920      	ldr	r1, [pc, #128]	; (800200c <HAL_RCC_OscConfig+0x5e8>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
 8001f8e:	e06c      	b.n	800206a <HAL_RCC_OscConfig+0x646>
 8001f90:	2301      	movs	r3, #1
 8001f92:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001fa2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2300      	movs	r3, #0
 8001fba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fa6a 	bl	8001494 <HAL_GetTick>
 8001fc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc6:	f7ff fa65 	bl	8001494 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d902      	bls.n	8001fdc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	f000 bd5a 	b.w	8002a90 <HAL_RCC_OscConfig+0x106c>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d104      	bne.n	8002010 <HAL_RCC_OscConfig+0x5ec>
 8002006:	4b01      	ldr	r3, [pc, #4]	; (800200c <HAL_RCC_OscConfig+0x5e8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	e015      	b.n	8002038 <HAL_RCC_OscConfig+0x614>
 800200c:	40021000 	.word	0x40021000
 8002010:	2302      	movs	r3, #2
 8002012:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002022:	2302      	movs	r3, #2
 8002024:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002028:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002034:	4bc8      	ldr	r3, [pc, #800]	; (8002358 <HAL_RCC_OscConfig+0x934>)
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	2202      	movs	r2, #2
 800203a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800203e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002042:	fa92 f2a2 	rbit	r2, r2
 8002046:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800204a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800204e:	fab2 f282 	clz	r2, r2
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	f042 0220 	orr.w	r2, r2, #32
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	f002 021f 	and.w	r2, r2, #31
 800205e:	2101      	movs	r1, #1
 8002060:	fa01 f202 	lsl.w	r2, r1, r2
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1ad      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 8110 	beq.w	80022a0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002084:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d079      	beq.n	8002184 <HAL_RCC_OscConfig+0x760>
 8002090:	2301      	movs	r3, #1
 8002092:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80020a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	4bab      	ldr	r3, [pc, #684]	; (800235c <HAL_RCC_OscConfig+0x938>)
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	461a      	mov	r2, r3
 80020b6:	2301      	movs	r3, #1
 80020b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ba:	f7ff f9eb 	bl	8001494 <HAL_GetTick>
 80020be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c2:	e00a      	b.n	80020da <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c4:	f7ff f9e6 	bl	8001494 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d902      	bls.n	80020da <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	f000 bcdb 	b.w	8002a90 <HAL_RCC_OscConfig+0x106c>
 80020da:	2302      	movs	r3, #2
 80020dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80020e4:	fa93 f3a3 	rbit	r3, r3
 80020e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80020ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020f4:	2202      	movs	r2, #2
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	fa93 f2a3 	rbit	r2, r3
 8002106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002118:	2202      	movs	r2, #2
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	fa93 f2a3 	rbit	r2, r3
 800212a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002132:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002134:	4b88      	ldr	r3, [pc, #544]	; (8002358 <HAL_RCC_OscConfig+0x934>)
 8002136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002140:	2102      	movs	r1, #2
 8002142:	6019      	str	r1, [r3, #0]
 8002144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002148:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	fa93 f1a3 	rbit	r1, r3
 8002152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002156:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800215a:	6019      	str	r1, [r3, #0]
  return result;
 800215c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002160:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002170:	b2db      	uxtb	r3, r3
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	2101      	movs	r1, #1
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0a0      	beq.n	80020c4 <HAL_RCC_OscConfig+0x6a0>
 8002182:	e08d      	b.n	80022a0 <HAL_RCC_OscConfig+0x87c>
 8002184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002188:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800218c:	2201      	movs	r2, #1
 800218e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002194:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	fa93 f2a3 	rbit	r2, r3
 800219e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021a6:	601a      	str	r2, [r3, #0]
  return result;
 80021a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021b0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b68      	ldr	r3, [pc, #416]	; (800235c <HAL_RCC_OscConfig+0x938>)
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	461a      	mov	r2, r3
 80021c2:	2300      	movs	r3, #0
 80021c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c6:	f7ff f965 	bl	8001494 <HAL_GetTick>
 80021ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d0:	f7ff f960 	bl	8001494 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d902      	bls.n	80021e6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	f000 bc55 	b.w	8002a90 <HAL_RCC_OscConfig+0x106c>
 80021e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021ee:	2202      	movs	r2, #2
 80021f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	fa93 f2a3 	rbit	r2, r3
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002212:	2202      	movs	r2, #2
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	fa93 f2a3 	rbit	r2, r3
 8002224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002228:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002236:	2202      	movs	r2, #2
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	fa93 f2a3 	rbit	r2, r3
 8002248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002250:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002252:	4b41      	ldr	r3, [pc, #260]	; (8002358 <HAL_RCC_OscConfig+0x934>)
 8002254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800225e:	2102      	movs	r1, #2
 8002260:	6019      	str	r1, [r3, #0]
 8002262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002266:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	fa93 f1a3 	rbit	r1, r3
 8002270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002274:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002278:	6019      	str	r1, [r3, #0]
  return result;
 800227a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f003 031f 	and.w	r3, r3, #31
 8002294:	2101      	movs	r1, #1
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d197      	bne.n	80021d0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 81a1 	beq.w	80025f8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022bc:	4b26      	ldr	r3, [pc, #152]	; (8002358 <HAL_RCC_OscConfig+0x934>)
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d116      	bne.n	80022f6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c8:	4b23      	ldr	r3, [pc, #140]	; (8002358 <HAL_RCC_OscConfig+0x934>)
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	4a22      	ldr	r2, [pc, #136]	; (8002358 <HAL_RCC_OscConfig+0x934>)
 80022ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d2:	61d3      	str	r3, [r2, #28]
 80022d4:	4b20      	ldr	r3, [pc, #128]	; (8002358 <HAL_RCC_OscConfig+0x934>)
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ea:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80022ee:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022f0:	2301      	movs	r3, #1
 80022f2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f6:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <HAL_RCC_OscConfig+0x93c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d11a      	bne.n	8002338 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_RCC_OscConfig+0x93c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a16      	ldr	r2, [pc, #88]	; (8002360 <HAL_RCC_OscConfig+0x93c>)
 8002308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230e:	f7ff f8c1 	bl	8001494 <HAL_GetTick>
 8002312:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002316:	e009      	b.n	800232c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002318:	f7ff f8bc 	bl	8001494 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b64      	cmp	r3, #100	; 0x64
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e3b1      	b.n	8002a90 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <HAL_RCC_OscConfig+0x93c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0ef      	beq.n	8002318 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d10d      	bne.n	8002364 <HAL_RCC_OscConfig+0x940>
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_RCC_OscConfig+0x934>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4a02      	ldr	r2, [pc, #8]	; (8002358 <HAL_RCC_OscConfig+0x934>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6213      	str	r3, [r2, #32]
 8002354:	e03c      	b.n	80023d0 <HAL_RCC_OscConfig+0x9ac>
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
 800235c:	10908120 	.word	0x10908120
 8002360:	40007000 	.word	0x40007000
 8002364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002368:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10c      	bne.n	800238e <HAL_RCC_OscConfig+0x96a>
 8002374:	4bc1      	ldr	r3, [pc, #772]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4ac0      	ldr	r2, [pc, #768]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 800237a:	f023 0301 	bic.w	r3, r3, #1
 800237e:	6213      	str	r3, [r2, #32]
 8002380:	4bbe      	ldr	r3, [pc, #760]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4abd      	ldr	r2, [pc, #756]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 8002386:	f023 0304 	bic.w	r3, r3, #4
 800238a:	6213      	str	r3, [r2, #32]
 800238c:	e020      	b.n	80023d0 <HAL_RCC_OscConfig+0x9ac>
 800238e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002392:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b05      	cmp	r3, #5
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x994>
 800239e:	4bb7      	ldr	r3, [pc, #732]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	4ab6      	ldr	r2, [pc, #728]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6213      	str	r3, [r2, #32]
 80023aa:	4bb4      	ldr	r3, [pc, #720]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4ab3      	ldr	r2, [pc, #716]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6213      	str	r3, [r2, #32]
 80023b6:	e00b      	b.n	80023d0 <HAL_RCC_OscConfig+0x9ac>
 80023b8:	4bb0      	ldr	r3, [pc, #704]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4aaf      	ldr	r2, [pc, #700]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6213      	str	r3, [r2, #32]
 80023c4:	4bad      	ldr	r3, [pc, #692]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4aac      	ldr	r2, [pc, #688]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 80023ca:	f023 0304 	bic.w	r3, r3, #4
 80023ce:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 8081 	beq.w	80024e4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e2:	f7ff f857 	bl	8001494 <HAL_GetTick>
 80023e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ea:	e00b      	b.n	8002404 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ec:	f7ff f852 	bl	8001494 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e345      	b.n	8002a90 <HAL_RCC_OscConfig+0x106c>
 8002404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002408:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800240c:	2202      	movs	r2, #2
 800240e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002414:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	fa93 f2a3 	rbit	r2, r3
 800241e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002422:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002430:	2202      	movs	r2, #2
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002438:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	fa93 f2a3 	rbit	r2, r3
 8002442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002446:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800244a:	601a      	str	r2, [r3, #0]
  return result;
 800244c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002450:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002454:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f043 0302 	orr.w	r3, r3, #2
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d102      	bne.n	8002470 <HAL_RCC_OscConfig+0xa4c>
 800246a:	4b84      	ldr	r3, [pc, #528]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	e013      	b.n	8002498 <HAL_RCC_OscConfig+0xa74>
 8002470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002474:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002478:	2202      	movs	r2, #2
 800247a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002480:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	fa93 f2a3 	rbit	r2, r3
 800248a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	4b79      	ldr	r3, [pc, #484]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800249c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80024a0:	2102      	movs	r1, #2
 80024a2:	6011      	str	r1, [r2, #0]
 80024a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024a8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	fa92 f1a2 	rbit	r1, r2
 80024b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024b6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024ba:	6011      	str	r1, [r2, #0]
  return result;
 80024bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024c0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	fab2 f282 	clz	r2, r2
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	f002 021f 	and.w	r2, r2, #31
 80024d6:	2101      	movs	r1, #1
 80024d8:	fa01 f202 	lsl.w	r2, r1, r2
 80024dc:	4013      	ands	r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d084      	beq.n	80023ec <HAL_RCC_OscConfig+0x9c8>
 80024e2:	e07f      	b.n	80025e4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e4:	f7fe ffd6 	bl	8001494 <HAL_GetTick>
 80024e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ec:	e00b      	b.n	8002506 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ee:	f7fe ffd1 	bl	8001494 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e2c4      	b.n	8002a90 <HAL_RCC_OscConfig+0x106c>
 8002506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800250e:	2202      	movs	r2, #2
 8002510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002516:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	fa93 f2a3 	rbit	r2, r3
 8002520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002524:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002532:	2202      	movs	r2, #2
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	fa93 f2a3 	rbit	r2, r3
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800254c:	601a      	str	r2, [r3, #0]
  return result;
 800254e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002552:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002556:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f043 0302 	orr.w	r3, r3, #2
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d102      	bne.n	8002572 <HAL_RCC_OscConfig+0xb4e>
 800256c:	4b43      	ldr	r3, [pc, #268]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	e013      	b.n	800259a <HAL_RCC_OscConfig+0xb76>
 8002572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002576:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800257a:	2202      	movs	r2, #2
 800257c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002582:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	fa93 f2a3 	rbit	r2, r3
 800258c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002590:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	4b39      	ldr	r3, [pc, #228]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800259e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80025a2:	2102      	movs	r1, #2
 80025a4:	6011      	str	r1, [r2, #0]
 80025a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025aa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	fa92 f1a2 	rbit	r1, r2
 80025b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025b8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025bc:	6011      	str	r1, [r2, #0]
  return result;
 80025be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025c2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	fab2 f282 	clz	r2, r2
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	f002 021f 	and.w	r2, r2, #31
 80025d8:	2101      	movs	r1, #1
 80025da:	fa01 f202 	lsl.w	r2, r1, r2
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d184      	bne.n	80024ee <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025e4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ec:	4b23      	ldr	r3, [pc, #140]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	4a22      	ldr	r2, [pc, #136]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 80025f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8242 	beq.w	8002a8e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800260a:	4b1c      	ldr	r3, [pc, #112]	; (800267c <HAL_RCC_OscConfig+0xc58>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b08      	cmp	r3, #8
 8002614:	f000 8213 	beq.w	8002a3e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2b02      	cmp	r3, #2
 8002626:	f040 8162 	bne.w	80028ee <HAL_RCC_OscConfig+0xeca>
 800262a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002632:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	fa93 f2a3 	rbit	r2, r3
 8002646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800264e:	601a      	str	r2, [r3, #0]
  return result;
 8002650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002654:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002658:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002664:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	461a      	mov	r2, r3
 800266c:	2300      	movs	r3, #0
 800266e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7fe ff10 	bl	8001494 <HAL_GetTick>
 8002674:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002678:	e00c      	b.n	8002694 <HAL_RCC_OscConfig+0xc70>
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002680:	f7fe ff08 	bl	8001494 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e1fd      	b.n	8002a90 <HAL_RCC_OscConfig+0x106c>
 8002694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002698:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800269c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	fa93 f2a3 	rbit	r2, r3
 80026b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026b8:	601a      	str	r2, [r3, #0]
  return result;
 80026ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026be:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c4:	fab3 f383 	clz	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d102      	bne.n	80026de <HAL_RCC_OscConfig+0xcba>
 80026d8:	4bb0      	ldr	r3, [pc, #704]	; (800299c <HAL_RCC_OscConfig+0xf78>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	e027      	b.n	800272e <HAL_RCC_OscConfig+0xd0a>
 80026de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	fa93 f2a3 	rbit	r2, r3
 80026fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002708:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800270c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002716:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	fa93 f2a3 	rbit	r2, r3
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	4b9c      	ldr	r3, [pc, #624]	; (800299c <HAL_RCC_OscConfig+0xf78>)
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002732:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002736:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800273a:	6011      	str	r1, [r2, #0]
 800273c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002740:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	fa92 f1a2 	rbit	r1, r2
 800274a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800274e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002752:	6011      	str	r1, [r2, #0]
  return result;
 8002754:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002758:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	fab2 f282 	clz	r2, r2
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	f042 0220 	orr.w	r2, r2, #32
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	f002 021f 	and.w	r2, r2, #31
 800276e:	2101      	movs	r1, #1
 8002770:	fa01 f202 	lsl.w	r2, r1, r2
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d182      	bne.n	8002680 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277a:	4b88      	ldr	r3, [pc, #544]	; (800299c <HAL_RCC_OscConfig+0xf78>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002786:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800278e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002792:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	430b      	orrs	r3, r1
 800279c:	497f      	ldr	r1, [pc, #508]	; (800299c <HAL_RCC_OscConfig+0xf78>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
 80027a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80027aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	fa93 f2a3 	rbit	r2, r3
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027c6:	601a      	str	r2, [r3, #0]
  return result;
 80027c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027cc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027d0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	461a      	mov	r2, r3
 80027e4:	2301      	movs	r3, #1
 80027e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe fe54 	bl	8001494 <HAL_GetTick>
 80027ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027f0:	e009      	b.n	8002806 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f2:	f7fe fe4f 	bl	8001494 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e144      	b.n	8002a90 <HAL_RCC_OscConfig+0x106c>
 8002806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800280e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002818:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	fa93 f2a3 	rbit	r2, r3
 8002822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002826:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800282a:	601a      	str	r2, [r3, #0]
  return result;
 800282c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002830:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002834:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d102      	bne.n	8002850 <HAL_RCC_OscConfig+0xe2c>
 800284a:	4b54      	ldr	r3, [pc, #336]	; (800299c <HAL_RCC_OscConfig+0xf78>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	e027      	b.n	80028a0 <HAL_RCC_OscConfig+0xe7c>
 8002850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002854:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002858:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800285c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	fa93 f2a3 	rbit	r2, r3
 800286c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002870:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800287e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002888:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	fa93 f2a3 	rbit	r2, r3
 8002892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002896:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	4b3f      	ldr	r3, [pc, #252]	; (800299c <HAL_RCC_OscConfig+0xf78>)
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028a4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80028a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028ac:	6011      	str	r1, [r2, #0]
 80028ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028b2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	fa92 f1a2 	rbit	r1, r2
 80028bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028c0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028c4:	6011      	str	r1, [r2, #0]
  return result;
 80028c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ca:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	fab2 f282 	clz	r2, r2
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	f042 0220 	orr.w	r2, r2, #32
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	f002 021f 	and.w	r2, r2, #31
 80028e0:	2101      	movs	r1, #1
 80028e2:	fa01 f202 	lsl.w	r2, r1, r2
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d082      	beq.n	80027f2 <HAL_RCC_OscConfig+0xdce>
 80028ec:	e0cf      	b.n	8002a8e <HAL_RCC_OscConfig+0x106a>
 80028ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80028f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002900:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	fa93 f2a3 	rbit	r2, r3
 800290a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002912:	601a      	str	r2, [r3, #0]
  return result;
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800291c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002928:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	461a      	mov	r2, r3
 8002930:	2300      	movs	r3, #0
 8002932:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7fe fdae 	bl	8001494 <HAL_GetTick>
 8002938:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800293c:	e009      	b.n	8002952 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293e:	f7fe fda9 	bl	8001494 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e09e      	b.n	8002a90 <HAL_RCC_OscConfig+0x106c>
 8002952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002956:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800295a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800295e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002964:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	fa93 f2a3 	rbit	r2, r3
 800296e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002972:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002976:	601a      	str	r2, [r3, #0]
  return result;
 8002978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002980:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002982:	fab3 f383 	clz	r3, r3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	095b      	lsrs	r3, r3, #5
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b01      	cmp	r3, #1
 8002994:	d104      	bne.n	80029a0 <HAL_RCC_OscConfig+0xf7c>
 8002996:	4b01      	ldr	r3, [pc, #4]	; (800299c <HAL_RCC_OscConfig+0xf78>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	e029      	b.n	80029f0 <HAL_RCC_OscConfig+0xfcc>
 800299c:	40021000 	.word	0x40021000
 80029a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ca:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	fa93 f2a3 	rbit	r2, r3
 80029e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <HAL_RCC_OscConfig+0x1078>)
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029f4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80029f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029fc:	6011      	str	r1, [r2, #0]
 80029fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a02:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	fa92 f1a2 	rbit	r1, r2
 8002a0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a10:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a14:	6011      	str	r1, [r2, #0]
  return result;
 8002a16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a1a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	fab2 f282 	clz	r2, r2
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	f042 0220 	orr.w	r2, r2, #32
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	f002 021f 	and.w	r2, r2, #31
 8002a30:	2101      	movs	r1, #1
 8002a32:	fa01 f202 	lsl.w	r2, r1, r2
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d180      	bne.n	800293e <HAL_RCC_OscConfig+0xf1a>
 8002a3c:	e027      	b.n	8002a8e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e01e      	b.n	8002a90 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a52:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <HAL_RCC_OscConfig+0x1078>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a5e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d10b      	bne.n	8002a8a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a72:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d001      	beq.n	8002a8e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b09e      	sub	sp, #120	; 0x78
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e162      	b.n	8002d7e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b90      	ldr	r3, [pc, #576]	; (8002cfc <HAL_RCC_ClockConfig+0x25c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d910      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b8d      	ldr	r3, [pc, #564]	; (8002cfc <HAL_RCC_ClockConfig+0x25c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 0207 	bic.w	r2, r3, #7
 8002ace:	498b      	ldr	r1, [pc, #556]	; (8002cfc <HAL_RCC_ClockConfig+0x25c>)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b89      	ldr	r3, [pc, #548]	; (8002cfc <HAL_RCC_ClockConfig+0x25c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e14a      	b.n	8002d7e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af4:	4b82      	ldr	r3, [pc, #520]	; (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	497f      	ldr	r1, [pc, #508]	; (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 80dc 	beq.w	8002ccc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d13c      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xf6>
 8002b1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b20:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2c:	fab3 f383 	clz	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d102      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xa6>
 8002b40:	4b6f      	ldr	r3, [pc, #444]	; (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	e00f      	b.n	8002b66 <HAL_RCC_ClockConfig+0xc6>
 8002b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	667b      	str	r3, [r7, #100]	; 0x64
 8002b54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b58:	663b      	str	r3, [r7, #96]	; 0x60
 8002b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b62:	4b67      	ldr	r3, [pc, #412]	; (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b6a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b6e:	fa92 f2a2 	rbit	r2, r2
 8002b72:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002b74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b76:	fab2 f282 	clz	r2, r2
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	f042 0220 	orr.w	r2, r2, #32
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	f002 021f 	and.w	r2, r2, #31
 8002b86:	2101      	movs	r1, #1
 8002b88:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d17b      	bne.n	8002c8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0f3      	b.n	8002d7e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d13c      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x178>
 8002b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ba2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	095b      	lsrs	r3, r3, #5
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d102      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x128>
 8002bc2:	4b4f      	ldr	r3, [pc, #316]	; (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	e00f      	b.n	8002be8 <HAL_RCC_ClockConfig+0x148>
 8002bc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bcc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8002bd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bda:	643b      	str	r3, [r7, #64]	; 0x40
 8002bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be4:	4b46      	ldr	r3, [pc, #280]	; (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bec:	63ba      	str	r2, [r7, #56]	; 0x38
 8002bee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bf0:	fa92 f2a2 	rbit	r2, r2
 8002bf4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf8:	fab2 f282 	clz	r2, r2
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	f042 0220 	orr.w	r2, r2, #32
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	f002 021f 	and.w	r2, r2, #31
 8002c08:	2101      	movs	r1, #1
 8002c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d13a      	bne.n	8002c8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0b2      	b.n	8002d7e <HAL_RCC_ClockConfig+0x2de>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d102      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x1a0>
 8002c3a:	4b31      	ldr	r3, [pc, #196]	; (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	e00d      	b.n	8002c5c <HAL_RCC_ClockConfig+0x1bc>
 8002c40:	2302      	movs	r3, #2
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	623b      	str	r3, [r7, #32]
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	61ba      	str	r2, [r7, #24]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	fa92 f2a2 	rbit	r2, r2
 8002c66:	617a      	str	r2, [r7, #20]
  return result;
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	fab2 f282 	clz	r2, r2
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	f042 0220 	orr.w	r2, r2, #32
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	f002 021f 	and.w	r2, r2, #31
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e079      	b.n	8002d7e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c8a:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f023 0203 	bic.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	491a      	ldr	r1, [pc, #104]	; (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c9c:	f7fe fbfa 	bl	8001494 <HAL_GetTick>
 8002ca0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca4:	f7fe fbf6 	bl	8001494 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e061      	b.n	8002d7e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 020c 	and.w	r2, r3, #12
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d1eb      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCC_ClockConfig+0x25c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d214      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <HAL_RCC_ClockConfig+0x25c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 0207 	bic.w	r2, r3, #7
 8002ce2:	4906      	ldr	r1, [pc, #24]	; (8002cfc <HAL_RCC_ClockConfig+0x25c>)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <HAL_RCC_ClockConfig+0x25c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e040      	b.n	8002d7e <HAL_RCC_ClockConfig+0x2de>
 8002cfc:	40022000 	.word	0x40022000
 8002d00:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d10:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <HAL_RCC_ClockConfig+0x2e8>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	491a      	ldr	r1, [pc, #104]	; (8002d88 <HAL_RCC_ClockConfig+0x2e8>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d2e:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <HAL_RCC_ClockConfig+0x2e8>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4912      	ldr	r1, [pc, #72]	; (8002d88 <HAL_RCC_ClockConfig+0x2e8>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d42:	f000 f829 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002d46:	4601      	mov	r1, r0
 8002d48:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <HAL_RCC_ClockConfig+0x2e8>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d50:	22f0      	movs	r2, #240	; 0xf0
 8002d52:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	fa92 f2a2 	rbit	r2, r2
 8002d5a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	fab2 f282 	clz	r2, r2
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	40d3      	lsrs	r3, r2
 8002d66:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <HAL_RCC_ClockConfig+0x2ec>)
 8002d68:	5cd3      	ldrb	r3, [r2, r3]
 8002d6a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d6e:	4a08      	ldr	r2, [pc, #32]	; (8002d90 <HAL_RCC_ClockConfig+0x2f0>)
 8002d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d72:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <HAL_RCC_ClockConfig+0x2f4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fe fa2a 	bl	80011d0 <HAL_InitTick>
  
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3778      	adds	r7, #120	; 0x78
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	08009ae4 	.word	0x08009ae4
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000004 	.word	0x20000004

08002d98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b08b      	sub	sp, #44	; 0x2c
 8002d9c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	2300      	movs	r3, #0
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002db2:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d002      	beq.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x30>
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d003      	beq.n	8002dce <HAL_RCC_GetSysClockFreq+0x36>
 8002dc6:	e03c      	b.n	8002e42 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dc8:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dca:	623b      	str	r3, [r7, #32]
      break;
 8002dcc:	e03c      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002dd4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002dd8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	fa92 f2a2 	rbit	r2, r2
 8002de0:	607a      	str	r2, [r7, #4]
  return result;
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	fab2 f282 	clz	r2, r2
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	40d3      	lsrs	r3, r2
 8002dec:	4a1c      	ldr	r2, [pc, #112]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002df2:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	220f      	movs	r2, #15
 8002dfc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	fa92 f2a2 	rbit	r2, r2
 8002e04:	60fa      	str	r2, [r7, #12]
  return result;
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	fab2 f282 	clz	r2, r2
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	40d3      	lsrs	r3, r2
 8002e10:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e12:	5cd3      	ldrb	r3, [r2, r3]
 8002e14:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e20:	4a0e      	ldr	r2, [pc, #56]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e30:	e004      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	4a0c      	ldr	r2, [pc, #48]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e36:	fb02 f303 	mul.w	r3, r2, r3
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	623b      	str	r3, [r7, #32]
      break;
 8002e40:	e002      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e44:	623b      	str	r3, [r7, #32]
      break;
 8002e46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e48:	6a3b      	ldr	r3, [r7, #32]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	372c      	adds	r7, #44	; 0x2c
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	007a1200 	.word	0x007a1200
 8002e60:	08009afc 	.word	0x08009afc
 8002e64:	08009b0c 	.word	0x08009b0c
 8002e68:	003d0900 	.word	0x003d0900

08002e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000000 	.word	0x20000000

08002e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e8a:	f7ff ffef 	bl	8002e6c <HAL_RCC_GetHCLKFreq>
 8002e8e:	4601      	mov	r1, r0
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e98:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	fa92 f2a2 	rbit	r2, r2
 8002ea4:	603a      	str	r2, [r7, #0]
  return result;
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	fab2 f282 	clz	r2, r2
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	40d3      	lsrs	r3, r2
 8002eb0:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002eb2:	5cd3      	ldrb	r3, [r2, r3]
 8002eb4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	08009af4 	.word	0x08009af4

08002ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ece:	f7ff ffcd 	bl	8002e6c <HAL_RCC_GetHCLKFreq>
 8002ed2:	4601      	mov	r1, r0
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002edc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ee0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	fa92 f2a2 	rbit	r2, r2
 8002ee8:	603a      	str	r2, [r7, #0]
  return result;
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	fab2 f282 	clz	r2, r2
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	40d3      	lsrs	r3, r2
 8002ef4:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ef6:	5cd3      	ldrb	r3, [r2, r3]
 8002ef8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000
 8002f08:	08009af4 	.word	0x08009af4

08002f0c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	220f      	movs	r2, #15
 8002f1a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_RCC_GetClockConfig+0x5c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0203 	and.w	r2, r3, #3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002f28:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <HAL_RCC_GetClockConfig+0x5c>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <HAL_RCC_GetClockConfig+0x5c>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f40:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCC_GetClockConfig+0x5c>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	08db      	lsrs	r3, r3, #3
 8002f46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002f4e:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <HAL_RCC_GetClockConfig+0x60>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0207 	and.w	r2, r3, #7
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	601a      	str	r2, [r3, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40022000 	.word	0x40022000

08002f70 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b092      	sub	sp, #72	; 0x48
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 80d4 	beq.w	800313c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f94:	4b4e      	ldr	r3, [pc, #312]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10e      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa0:	4b4b      	ldr	r3, [pc, #300]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	4a4a      	ldr	r2, [pc, #296]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002faa:	61d3      	str	r3, [r2, #28]
 8002fac:	4b48      	ldr	r3, [pc, #288]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbe:	4b45      	ldr	r3, [pc, #276]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d118      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fca:	4b42      	ldr	r3, [pc, #264]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a41      	ldr	r2, [pc, #260]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd6:	f7fe fa5d 	bl	8001494 <HAL_GetTick>
 8002fda:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fde:	f7fe fa59 	bl	8001494 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b64      	cmp	r3, #100	; 0x64
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e14b      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff0:	4b38      	ldr	r3, [pc, #224]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ffc:	4b34      	ldr	r3, [pc, #208]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003004:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 8084 	beq.w	8003116 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003016:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003018:	429a      	cmp	r2, r3
 800301a:	d07c      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800301c:	4b2c      	ldr	r3, [pc, #176]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003024:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800302a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003036:	fab3 f383 	clz	r3, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	461a      	mov	r2, r3
 8003046:	2301      	movs	r3, #1
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800304e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	461a      	mov	r2, r3
 800306a:	2300      	movs	r3, #0
 800306c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800306e:	4a18      	ldr	r2, [pc, #96]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003072:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d04b      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7fe fa09 	bl	8001494 <HAL_GetTick>
 8003082:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003084:	e00a      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003086:	f7fe fa05 	bl	8001494 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f241 3288 	movw	r2, #5000	; 0x1388
 8003094:	4293      	cmp	r3, r2
 8003096:	d901      	bls.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e0f5      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800309c:	2302      	movs	r3, #2
 800309e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	fa93 f3a3 	rbit	r3, r3
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
 80030a8:	2302      	movs	r3, #2
 80030aa:	623b      	str	r3, [r7, #32]
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	fa93 f3a3 	rbit	r3, r3
 80030b2:	61fb      	str	r3, [r7, #28]
  return result;
 80030b4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	095b      	lsrs	r3, r3, #5
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f043 0302 	orr.w	r3, r3, #2
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d108      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80030ca:	4b01      	ldr	r3, [pc, #4]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	e00d      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40007000 	.word	0x40007000
 80030d8:	10908100 	.word	0x10908100
 80030dc:	2302      	movs	r3, #2
 80030de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	4b69      	ldr	r3, [pc, #420]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	2202      	movs	r2, #2
 80030ee:	613a      	str	r2, [r7, #16]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	fa92 f2a2 	rbit	r2, r2
 80030f6:	60fa      	str	r2, [r7, #12]
  return result;
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	fab2 f282 	clz	r2, r2
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	f002 021f 	and.w	r2, r2, #31
 800310a:	2101      	movs	r1, #1
 800310c:	fa01 f202 	lsl.w	r2, r1, r2
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0b7      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003116:	4b5e      	ldr	r3, [pc, #376]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	495b      	ldr	r1, [pc, #364]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003124:	4313      	orrs	r3, r2
 8003126:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003128:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800312c:	2b01      	cmp	r3, #1
 800312e:	d105      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003130:	4b57      	ldr	r3, [pc, #348]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	4a56      	ldr	r2, [pc, #344]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800313a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003148:	4b51      	ldr	r3, [pc, #324]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	f023 0203 	bic.w	r2, r3, #3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	494e      	ldr	r1, [pc, #312]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003156:	4313      	orrs	r3, r2
 8003158:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003166:	4b4a      	ldr	r3, [pc, #296]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f023 0210 	bic.w	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	4947      	ldr	r1, [pc, #284]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003174:	4313      	orrs	r3, r2
 8003176:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003184:	4b42      	ldr	r3, [pc, #264]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	493f      	ldr	r1, [pc, #252]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003192:	4313      	orrs	r3, r2
 8003194:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031a2:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f023 0220 	bic.w	r2, r3, #32
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	4938      	ldr	r1, [pc, #224]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031c0:	4b33      	ldr	r3, [pc, #204]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	4930      	ldr	r1, [pc, #192]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031de:	4b2c      	ldr	r3, [pc, #176]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	4929      	ldr	r1, [pc, #164]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80031fc:	4b24      	ldr	r3, [pc, #144]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	4921      	ldr	r1, [pc, #132]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800320a:	4313      	orrs	r3, r2
 800320c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800321a:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	491a      	ldr	r1, [pc, #104]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003228:	4313      	orrs	r3, r2
 800322a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003238:	4b15      	ldr	r3, [pc, #84]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	4912      	ldr	r1, [pc, #72]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003246:	4313      	orrs	r3, r2
 8003248:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d008      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	490b      	ldr	r1, [pc, #44]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003264:	4313      	orrs	r3, r2
 8003266:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	4903      	ldr	r1, [pc, #12]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003282:	4313      	orrs	r3, r2
 8003284:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3748      	adds	r7, #72	; 0x48
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000

08003294 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e073      	b.n	8003392 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7f5b      	ldrb	r3, [r3, #29]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d105      	bne.n	80032c0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fd fe8e 	bl	8000fdc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b10      	cmp	r3, #16
 80032d2:	d055      	beq.n	8003380 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	22ca      	movs	r2, #202	; 0xca
 80032da:	625a      	str	r2, [r3, #36]	; 0x24
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2253      	movs	r2, #83	; 0x53
 80032e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 fc03 	bl	8003af0 <RTC_EnterInitMode>
 80032ea:	4603      	mov	r3, r0
 80032ec:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d12c      	bne.n	800334e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003306:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6899      	ldr	r1, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68d2      	ldr	r2, [r2, #12]
 800332e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6919      	ldr	r1, [r3, #16]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	041a      	lsls	r2, r3, #16
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fc0a 	bl	8003b5e <RTC_ExitInitMode>
 800334a:	4603      	mov	r3, r0
 800334c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d110      	bne.n	8003376 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003362:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	22ff      	movs	r2, #255	; 0xff
 800337c:	625a      	str	r2, [r3, #36]	; 0x24
 800337e:	e001      	b.n	8003384 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d102      	bne.n	8003390 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003390:	7bfb      	ldrb	r3, [r7, #15]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800339a:	b590      	push	{r4, r7, lr}
 800339c:	b087      	sub	sp, #28
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	7f1b      	ldrb	r3, [r3, #28]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_RTC_SetTime+0x1c>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e087      	b.n	80034c6 <HAL_RTC_SetTime+0x12c>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2202      	movs	r2, #2
 80033c0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d126      	bne.n	8003416 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2200      	movs	r2, #0
 80033da:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fbe1 	bl	8003ba8 <RTC_ByteToBcd2>
 80033e6:	4603      	mov	r3, r0
 80033e8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	785b      	ldrb	r3, [r3, #1]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fbda 	bl	8003ba8 <RTC_ByteToBcd2>
 80033f4:	4603      	mov	r3, r0
 80033f6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80033f8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	789b      	ldrb	r3, [r3, #2]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fbd2 	bl	8003ba8 <RTC_ByteToBcd2>
 8003404:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003406:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	78db      	ldrb	r3, [r3, #3]
 800340e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	e018      	b.n	8003448 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003420:	2b00      	cmp	r3, #0
 8003422:	d102      	bne.n	800342a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2200      	movs	r2, #0
 8003428:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	785b      	ldrb	r3, [r3, #1]
 8003434:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003436:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800343c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	78db      	ldrb	r3, [r3, #3]
 8003442:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003444:	4313      	orrs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	22ca      	movs	r2, #202	; 0xca
 800344e:	625a      	str	r2, [r3, #36]	; 0x24
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2253      	movs	r2, #83	; 0x53
 8003456:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 fb49 	bl	8003af0 <RTC_EnterInitMode>
 800345e:	4603      	mov	r3, r0
 8003460:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003462:	7cfb      	ldrb	r3, [r7, #19]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d120      	bne.n	80034aa <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003472:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003476:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003486:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6899      	ldr	r1, [r3, #8]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	431a      	orrs	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 fb5c 	bl	8003b5e <RTC_ExitInitMode>
 80034a6:	4603      	mov	r3, r0
 80034a8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80034aa:	7cfb      	ldrb	r3, [r7, #19]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	22ff      	movs	r2, #255	; 0xff
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]

  return status;
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd90      	pop	{r4, r7, pc}

080034ce <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80034ce:	b590      	push	{r4, r7, lr}
 80034d0:	b087      	sub	sp, #28
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	7f1b      	ldrb	r3, [r3, #28]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_RTC_SetDate+0x1c>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e071      	b.n	80035ce <HAL_RTC_SetDate+0x100>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2202      	movs	r2, #2
 80034f4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10e      	bne.n	800351a <HAL_RTC_SetDate+0x4c>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	785b      	ldrb	r3, [r3, #1]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	785b      	ldrb	r3, [r3, #1]
 800350c:	f023 0310 	bic.w	r3, r3, #16
 8003510:	b2db      	uxtb	r3, r3
 8003512:	330a      	adds	r3, #10
 8003514:	b2da      	uxtb	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d11c      	bne.n	800355a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	78db      	ldrb	r3, [r3, #3]
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fb3f 	bl	8003ba8 <RTC_ByteToBcd2>
 800352a:	4603      	mov	r3, r0
 800352c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	785b      	ldrb	r3, [r3, #1]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 fb38 	bl	8003ba8 <RTC_ByteToBcd2>
 8003538:	4603      	mov	r3, r0
 800353a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800353c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	789b      	ldrb	r3, [r3, #2]
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fb30 	bl	8003ba8 <RTC_ByteToBcd2>
 8003548:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800354a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	e00e      	b.n	8003578 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	78db      	ldrb	r3, [r3, #3]
 800355e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	785b      	ldrb	r3, [r3, #1]
 8003564:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003566:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800356c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	22ca      	movs	r2, #202	; 0xca
 800357e:	625a      	str	r2, [r3, #36]	; 0x24
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2253      	movs	r2, #83	; 0x53
 8003586:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fab1 	bl	8003af0 <RTC_EnterInitMode>
 800358e:	4603      	mov	r3, r0
 8003590:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003592:	7cfb      	ldrb	r3, [r7, #19]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10c      	bne.n	80035b2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80035a6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 fad8 	bl	8003b5e <RTC_ExitInitMode>
 80035ae:	4603      	mov	r3, r0
 80035b0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80035b2:	7cfb      	ldrb	r3, [r7, #19]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d102      	bne.n	80035be <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	22ff      	movs	r2, #255	; 0xff
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	771a      	strb	r2, [r3, #28]

  return status;
 80035cc:	7cfb      	ldrb	r3, [r7, #19]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd90      	pop	{r4, r7, pc}

080035d6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b086      	sub	sp, #24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80035f4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	b2da      	uxtb	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003618:	b2da      	uxtb	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	0b5b      	lsrs	r3, r3, #13
 8003622:	b2db      	uxtb	r3, r3
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	b2da      	uxtb	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d11a      	bne.n	800366a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	78db      	ldrb	r3, [r3, #3]
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fad3 	bl	8003be4 <RTC_Bcd2ToByte>
 800363e:	4603      	mov	r3, r0
 8003640:	461a      	mov	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	785b      	ldrb	r3, [r3, #1]
 800364a:	4618      	mov	r0, r3
 800364c:	f000 faca 	bl	8003be4 <RTC_Bcd2ToByte>
 8003650:	4603      	mov	r3, r0
 8003652:	461a      	mov	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	789b      	ldrb	r3, [r3, #2]
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fac1 	bl	8003be4 <RTC_Bcd2ToByte>
 8003662:	4603      	mov	r3, r0
 8003664:	461a      	mov	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003674:	b590      	push	{r4, r7, lr}
 8003676:	b089      	sub	sp, #36	; 0x24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003680:	4b9b      	ldr	r3, [pc, #620]	; (80038f0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a9b      	ldr	r2, [pc, #620]	; (80038f4 <HAL_RTC_SetAlarm_IT+0x280>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	0adb      	lsrs	r3, r3, #11
 800368c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003690:	fb02 f303 	mul.w	r3, r2, r3
 8003694:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	7f1b      	ldrb	r3, [r3, #28]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_RTC_SetAlarm_IT+0x36>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e11e      	b.n	80038e8 <HAL_RTC_SetAlarm_IT+0x274>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2202      	movs	r2, #2
 80036b4:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d137      	bne.n	800372c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d102      	bne.n	80036d0 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2200      	movs	r2, #0
 80036ce:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fa67 	bl	8003ba8 <RTC_ByteToBcd2>
 80036da:	4603      	mov	r3, r0
 80036dc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	785b      	ldrb	r3, [r3, #1]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fa60 	bl	8003ba8 <RTC_ByteToBcd2>
 80036e8:	4603      	mov	r3, r0
 80036ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80036ec:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	789b      	ldrb	r3, [r3, #2]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fa58 	bl	8003ba8 <RTC_ByteToBcd2>
 80036f8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80036fa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	78db      	ldrb	r3, [r3, #3]
 8003702:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003704:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fa4a 	bl	8003ba8 <RTC_ByteToBcd2>
 8003714:	4603      	mov	r3, r0
 8003716:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003718:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003720:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003726:	4313      	orrs	r3, r2
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	e023      	b.n	8003774 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d102      	bne.n	8003740 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2200      	movs	r2, #0
 800373e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	785b      	ldrb	r3, [r3, #1]
 800374a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800374c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003752:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	78db      	ldrb	r3, [r3, #3]
 8003758:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800375a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003762:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003764:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800376a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003770:	4313      	orrs	r3, r2
 8003772:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	22ca      	movs	r2, #202	; 0xca
 8003786:	625a      	str	r2, [r3, #36]	; 0x24
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2253      	movs	r2, #83	; 0x53
 800378e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003798:	d142      	bne.n	8003820 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037a8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80037ba:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	3b01      	subs	r3, #1
 80037c0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10b      	bne.n	80037e0 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	22ff      	movs	r2, #255	; 0xff
 80037ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2203      	movs	r2, #3
 80037d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e083      	b.n	80038e8 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0e6      	beq.n	80037bc <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800380c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800381c:	609a      	str	r2, [r3, #8]
 800381e:	e04c      	b.n	80038ba <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800382e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	b2da      	uxtb	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003840:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003842:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a2b      	ldr	r2, [pc, #172]	; (80038f4 <HAL_RTC_SetAlarm_IT+0x280>)
 8003848:	fba2 2303 	umull	r2, r3, r2, r3
 800384c:	0adb      	lsrs	r3, r3, #11
 800384e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	3b01      	subs	r3, #1
 800385c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10b      	bne.n	800387c <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	22ff      	movs	r2, #255	; 0xff
 800386a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2203      	movs	r2, #3
 8003870:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e035      	b.n	80038e8 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0e6      	beq.n	8003858 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038b8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80038ba:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <HAL_RTC_SetAlarm_IT+0x284>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a0e      	ldr	r2, [pc, #56]	; (80038f8 <HAL_RTC_SetAlarm_IT+0x284>)
 80038c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c4:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80038c6:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <HAL_RTC_SetAlarm_IT+0x284>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	4a0b      	ldr	r2, [pc, #44]	; (80038f8 <HAL_RTC_SetAlarm_IT+0x284>)
 80038cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	22ff      	movs	r2, #255	; 0xff
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3724      	adds	r7, #36	; 0x24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd90      	pop	{r4, r7, pc}
 80038f0:	20000000 	.word	0x20000000
 80038f4:	10624dd3 	.word	0x10624dd3
 80038f8:	40010400 	.word	0x40010400

080038fc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	7f1b      	ldrb	r3, [r3, #28]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_RTC_DeactivateAlarm+0x1a>
 8003912:	2302      	movs	r3, #2
 8003914:	e07b      	b.n	8003a0e <HAL_RTC_DeactivateAlarm+0x112>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	22ca      	movs	r2, #202	; 0xca
 8003928:	625a      	str	r2, [r3, #36]	; 0x24
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2253      	movs	r2, #83	; 0x53
 8003930:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003938:	d12f      	bne.n	800399a <HAL_RTC_DeactivateAlarm+0x9e>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003948:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003958:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800395a:	f7fd fd9b 	bl	8001494 <HAL_GetTick>
 800395e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003960:	e013      	b.n	800398a <HAL_RTC_DeactivateAlarm+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003962:	f7fd fd97 	bl	8001494 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003970:	d90b      	bls.n	800398a <HAL_RTC_DeactivateAlarm+0x8e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	22ff      	movs	r2, #255	; 0xff
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2203      	movs	r2, #3
 800397e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e041      	b.n	8003a0e <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0e4      	beq.n	8003962 <HAL_RTC_DeactivateAlarm+0x66>
 8003998:	e02e      	b.n	80039f8 <HAL_RTC_DeactivateAlarm+0xfc>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039a8:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039b8:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039ba:	f7fd fd6b 	bl	8001494 <HAL_GetTick>
 80039be:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80039c0:	e013      	b.n	80039ea <HAL_RTC_DeactivateAlarm+0xee>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80039c2:	f7fd fd67 	bl	8001494 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039d0:	d90b      	bls.n	80039ea <HAL_RTC_DeactivateAlarm+0xee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	22ff      	movs	r2, #255	; 0xff
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2203      	movs	r2, #3
 80039de:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e011      	b.n	8003a0e <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0e4      	beq.n	80039c2 <HAL_RTC_DeactivateAlarm+0xc6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	22ff      	movs	r2, #255	; 0xff
 80039fe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003a20:	4b1f      	ldr	r3, [pc, #124]	; (8003aa0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003a22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a26:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d012      	beq.n	8003a5c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00b      	beq.n	8003a5c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003a54:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fc ff60 	bl	800091c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d012      	beq.n	8003a90 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00b      	beq.n	8003a90 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003a88:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f8fa 	bl	8003c84 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	775a      	strb	r2, [r3, #29]
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40010400 	.word	0x40010400

08003aa4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0d      	ldr	r2, [pc, #52]	; (8003aec <HAL_RTC_WaitForSynchro+0x48>)
 8003ab6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ab8:	f7fd fcec 	bl	8001494 <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003abe:	e009      	b.n	8003ad4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ac0:	f7fd fce8 	bl	8001494 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ace:	d901      	bls.n	8003ad4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e007      	b.n	8003ae4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0ee      	beq.n	8003ac0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	00017f5f 	.word	0x00017f5f

08003af0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d122      	bne.n	8003b54 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b1c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b1e:	f7fd fcb9 	bl	8001494 <HAL_GetTick>
 8003b22:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003b24:	e00c      	b.n	8003b40 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b26:	f7fd fcb5 	bl	8001494 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b34:	d904      	bls.n	8003b40 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2204      	movs	r2, #4
 8003b3a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d102      	bne.n	8003b54 <RTC_EnterInitMode+0x64>
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d1e8      	bne.n	8003b26 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b78:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10a      	bne.n	8003b9e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff ff8b 	bl	8003aa4 <HAL_RTC_WaitForSynchro>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d004      	beq.n	8003b9e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2204      	movs	r2, #4
 8003b98:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003bb6:	e005      	b.n	8003bc4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	3b0a      	subs	r3, #10
 8003bc2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	2b09      	cmp	r3, #9
 8003bc8:	d8f6      	bhi.n	8003bb8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	b2db      	uxtb	r3, r3
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	091b      	lsrs	r3, r3, #4
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	4413      	add	r3, r2
 8003c12:	b2db      	uxtb	r3, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_RTCEx_BKUPWrite>:
  *         the same on all devices.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3350      	adds	r3, #80	; 0x50
 8003c36:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4413      	add	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	601a      	str	r2, [r3, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_RTCEx_BKUPRead>:
  *         the total number of Backup data Registers. This total number is not
  *         the same on all devices.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3350      	adds	r3, #80	; 0x50
 8003c68:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4413      	add	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e049      	b.n	8003d3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fd f9b8 	bl	8001034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	f000 fcf8 	bl	80046cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d001      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e03b      	b.n	8003dd8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d009      	beq.n	8003d96 <HAL_TIM_Base_Start_IT+0x4e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8a:	d004      	beq.n	8003d96 <HAL_TIM_Base_Start_IT+0x4e>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a15      	ldr	r2, [pc, #84]	; (8003de8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d115      	bne.n	8003dc2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	4b13      	ldr	r3, [pc, #76]	; (8003dec <HAL_TIM_Base_Start_IT+0xa4>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2b06      	cmp	r3, #6
 8003da6:	d015      	beq.n	8003dd4 <HAL_TIM_Base_Start_IT+0x8c>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dae:	d011      	beq.n	8003dd4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc0:	e008      	b.n	8003dd4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	e000      	b.n	8003dd6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40014000 	.word	0x40014000
 8003dec:	00010007 	.word	0x00010007

08003df0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e049      	b.n	8003e96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f841 	bl	8003e9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4610      	mov	r0, r2
 8003e30:	f000 fc4c 	bl	80046cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d109      	bne.n	8003ed8 <HAL_TIM_PWM_Start+0x24>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	bf14      	ite	ne
 8003ed0:	2301      	movne	r3, #1
 8003ed2:	2300      	moveq	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	e03c      	b.n	8003f52 <HAL_TIM_PWM_Start+0x9e>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d109      	bne.n	8003ef2 <HAL_TIM_PWM_Start+0x3e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	bf14      	ite	ne
 8003eea:	2301      	movne	r3, #1
 8003eec:	2300      	moveq	r3, #0
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	e02f      	b.n	8003f52 <HAL_TIM_PWM_Start+0x9e>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d109      	bne.n	8003f0c <HAL_TIM_PWM_Start+0x58>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	bf14      	ite	ne
 8003f04:	2301      	movne	r3, #1
 8003f06:	2300      	moveq	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	e022      	b.n	8003f52 <HAL_TIM_PWM_Start+0x9e>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b0c      	cmp	r3, #12
 8003f10:	d109      	bne.n	8003f26 <HAL_TIM_PWM_Start+0x72>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	bf14      	ite	ne
 8003f1e:	2301      	movne	r3, #1
 8003f20:	2300      	moveq	r3, #0
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	e015      	b.n	8003f52 <HAL_TIM_PWM_Start+0x9e>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d109      	bne.n	8003f40 <HAL_TIM_PWM_Start+0x8c>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	bf14      	ite	ne
 8003f38:	2301      	movne	r3, #1
 8003f3a:	2300      	moveq	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	e008      	b.n	8003f52 <HAL_TIM_PWM_Start+0x9e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	bf14      	ite	ne
 8003f4c:	2301      	movne	r3, #1
 8003f4e:	2300      	moveq	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e083      	b.n	8004062 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d104      	bne.n	8003f6a <HAL_TIM_PWM_Start+0xb6>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f68:	e023      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xfe>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d104      	bne.n	8003f7a <HAL_TIM_PWM_Start+0xc6>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f78:	e01b      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xfe>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d104      	bne.n	8003f8a <HAL_TIM_PWM_Start+0xd6>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f88:	e013      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xfe>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b0c      	cmp	r3, #12
 8003f8e:	d104      	bne.n	8003f9a <HAL_TIM_PWM_Start+0xe6>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f98:	e00b      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xfe>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b10      	cmp	r3, #16
 8003f9e:	d104      	bne.n	8003faa <HAL_TIM_PWM_Start+0xf6>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa8:	e003      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xfe>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2202      	movs	r2, #2
 8003fae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	6839      	ldr	r1, [r7, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 ff34 	bl	8004e28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a29      	ldr	r2, [pc, #164]	; (800406c <HAL_TIM_PWM_Start+0x1b8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00e      	beq.n	8003fe8 <HAL_TIM_PWM_Start+0x134>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a28      	ldr	r2, [pc, #160]	; (8004070 <HAL_TIM_PWM_Start+0x1bc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d009      	beq.n	8003fe8 <HAL_TIM_PWM_Start+0x134>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a26      	ldr	r2, [pc, #152]	; (8004074 <HAL_TIM_PWM_Start+0x1c0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d004      	beq.n	8003fe8 <HAL_TIM_PWM_Start+0x134>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a25      	ldr	r2, [pc, #148]	; (8004078 <HAL_TIM_PWM_Start+0x1c4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d101      	bne.n	8003fec <HAL_TIM_PWM_Start+0x138>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <HAL_TIM_PWM_Start+0x13a>
 8003fec:	2300      	movs	r3, #0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d007      	beq.n	8004002 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004000:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a19      	ldr	r2, [pc, #100]	; (800406c <HAL_TIM_PWM_Start+0x1b8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d009      	beq.n	8004020 <HAL_TIM_PWM_Start+0x16c>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004014:	d004      	beq.n	8004020 <HAL_TIM_PWM_Start+0x16c>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a15      	ldr	r2, [pc, #84]	; (8004070 <HAL_TIM_PWM_Start+0x1bc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d115      	bne.n	800404c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	4b15      	ldr	r3, [pc, #84]	; (800407c <HAL_TIM_PWM_Start+0x1c8>)
 8004028:	4013      	ands	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b06      	cmp	r3, #6
 8004030:	d015      	beq.n	800405e <HAL_TIM_PWM_Start+0x1aa>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004038:	d011      	beq.n	800405e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0201 	orr.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800404a:	e008      	b.n	800405e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	e000      	b.n	8004060 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40012c00 	.word	0x40012c00
 8004070:	40014000 	.word	0x40014000
 8004074:	40014400 	.word	0x40014400
 8004078:	40014800 	.word	0x40014800
 800407c:	00010007 	.word	0x00010007

08004080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b02      	cmp	r3, #2
 8004094:	d122      	bne.n	80040dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d11b      	bne.n	80040dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0202 	mvn.w	r2, #2
 80040ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fae3 	bl	800468e <HAL_TIM_IC_CaptureCallback>
 80040c8:	e005      	b.n	80040d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fad5 	bl	800467a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fae6 	bl	80046a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d122      	bne.n	8004130 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d11b      	bne.n	8004130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0204 	mvn.w	r2, #4
 8004100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2202      	movs	r2, #2
 8004106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fab9 	bl	800468e <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 faab 	bl	800467a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fabc 	bl	80046a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b08      	cmp	r3, #8
 800413c:	d122      	bne.n	8004184 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b08      	cmp	r3, #8
 800414a:	d11b      	bne.n	8004184 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0208 	mvn.w	r2, #8
 8004154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2204      	movs	r2, #4
 800415a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fa8f 	bl	800468e <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fa81 	bl	800467a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fa92 	bl	80046a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	2b10      	cmp	r3, #16
 8004190:	d122      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b10      	cmp	r3, #16
 800419e:	d11b      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0210 	mvn.w	r2, #16
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2208      	movs	r2, #8
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fa65 	bl	800468e <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fa57 	bl	800467a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fa68 	bl	80046a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d10e      	bne.n	8004204 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d107      	bne.n	8004204 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0201 	mvn.w	r2, #1
 80041fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fc fe9e 	bl	8000f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420e:	2b80      	cmp	r3, #128	; 0x80
 8004210:	d10e      	bne.n	8004230 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421c:	2b80      	cmp	r3, #128	; 0x80
 800421e:	d107      	bne.n	8004230 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fe92 	bl	8004f54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800423e:	d10e      	bne.n	800425e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424a:	2b80      	cmp	r3, #128	; 0x80
 800424c:	d107      	bne.n	800425e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fe85 	bl	8004f68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d10e      	bne.n	800428a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004276:	2b40      	cmp	r3, #64	; 0x40
 8004278:	d107      	bne.n	800428a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fa16 	bl	80046b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b20      	cmp	r3, #32
 8004296:	d10e      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f003 0320 	and.w	r3, r3, #32
 80042a2:	2b20      	cmp	r3, #32
 80042a4:	d107      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f06f 0220 	mvn.w	r2, #32
 80042ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fe45 	bl	8004f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042da:	2302      	movs	r3, #2
 80042dc:	e0ff      	b.n	80044de <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b14      	cmp	r3, #20
 80042ea:	f200 80f0 	bhi.w	80044ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80042ee:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f4:	08004349 	.word	0x08004349
 80042f8:	080044cf 	.word	0x080044cf
 80042fc:	080044cf 	.word	0x080044cf
 8004300:	080044cf 	.word	0x080044cf
 8004304:	08004389 	.word	0x08004389
 8004308:	080044cf 	.word	0x080044cf
 800430c:	080044cf 	.word	0x080044cf
 8004310:	080044cf 	.word	0x080044cf
 8004314:	080043cb 	.word	0x080043cb
 8004318:	080044cf 	.word	0x080044cf
 800431c:	080044cf 	.word	0x080044cf
 8004320:	080044cf 	.word	0x080044cf
 8004324:	0800440b 	.word	0x0800440b
 8004328:	080044cf 	.word	0x080044cf
 800432c:	080044cf 	.word	0x080044cf
 8004330:	080044cf 	.word	0x080044cf
 8004334:	0800444d 	.word	0x0800444d
 8004338:	080044cf 	.word	0x080044cf
 800433c:	080044cf 	.word	0x080044cf
 8004340:	080044cf 	.word	0x080044cf
 8004344:	0800448d 	.word	0x0800448d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68b9      	ldr	r1, [r7, #8]
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fa2a 	bl	80047a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699a      	ldr	r2, [r3, #24]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0208 	orr.w	r2, r2, #8
 8004362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699a      	ldr	r2, [r3, #24]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0204 	bic.w	r2, r2, #4
 8004372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6999      	ldr	r1, [r3, #24]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	619a      	str	r2, [r3, #24]
      break;
 8004386:	e0a5      	b.n	80044d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68b9      	ldr	r1, [r7, #8]
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fa90 	bl	80048b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6999      	ldr	r1, [r3, #24]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	021a      	lsls	r2, r3, #8
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	619a      	str	r2, [r3, #24]
      break;
 80043c8:	e084      	b.n	80044d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 faef 	bl	80049b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69da      	ldr	r2, [r3, #28]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0208 	orr.w	r2, r2, #8
 80043e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69da      	ldr	r2, [r3, #28]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0204 	bic.w	r2, r2, #4
 80043f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69d9      	ldr	r1, [r3, #28]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	61da      	str	r2, [r3, #28]
      break;
 8004408:	e064      	b.n	80044d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fb4d 	bl	8004ab0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69d9      	ldr	r1, [r3, #28]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	021a      	lsls	r2, r3, #8
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	61da      	str	r2, [r3, #28]
      break;
 800444a:	e043      	b.n	80044d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fb90 	bl	8004b78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0208 	orr.w	r2, r2, #8
 8004466:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0204 	bic.w	r2, r2, #4
 8004476:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800448a:	e023      	b.n	80044d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fbce 	bl	8004c34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	021a      	lsls	r2, r3, #8
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044cc:	e002      	b.n	80044d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
      break;
 80044d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop

080044e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_TIM_ConfigClockSource+0x1c>
 8004500:	2302      	movs	r3, #2
 8004502:	e0b6      	b.n	8004672 <HAL_TIM_ConfigClockSource+0x18a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004522:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800452e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004540:	d03e      	beq.n	80045c0 <HAL_TIM_ConfigClockSource+0xd8>
 8004542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004546:	f200 8087 	bhi.w	8004658 <HAL_TIM_ConfigClockSource+0x170>
 800454a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454e:	f000 8086 	beq.w	800465e <HAL_TIM_ConfigClockSource+0x176>
 8004552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004556:	d87f      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x170>
 8004558:	2b70      	cmp	r3, #112	; 0x70
 800455a:	d01a      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0xaa>
 800455c:	2b70      	cmp	r3, #112	; 0x70
 800455e:	d87b      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x170>
 8004560:	2b60      	cmp	r3, #96	; 0x60
 8004562:	d050      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x11e>
 8004564:	2b60      	cmp	r3, #96	; 0x60
 8004566:	d877      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x170>
 8004568:	2b50      	cmp	r3, #80	; 0x50
 800456a:	d03c      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0xfe>
 800456c:	2b50      	cmp	r3, #80	; 0x50
 800456e:	d873      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x170>
 8004570:	2b40      	cmp	r3, #64	; 0x40
 8004572:	d058      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x13e>
 8004574:	2b40      	cmp	r3, #64	; 0x40
 8004576:	d86f      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x170>
 8004578:	2b30      	cmp	r3, #48	; 0x30
 800457a:	d064      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x15e>
 800457c:	2b30      	cmp	r3, #48	; 0x30
 800457e:	d86b      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x170>
 8004580:	2b20      	cmp	r3, #32
 8004582:	d060      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x15e>
 8004584:	2b20      	cmp	r3, #32
 8004586:	d867      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x170>
 8004588:	2b00      	cmp	r3, #0
 800458a:	d05c      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x15e>
 800458c:	2b10      	cmp	r3, #16
 800458e:	d05a      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x15e>
 8004590:	e062      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045a2:	f000 fc21 	bl	8004de8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	609a      	str	r2, [r3, #8]
      break;
 80045be:	e04f      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045d0:	f000 fc0a 	bl	8004de8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045e2:	609a      	str	r2, [r3, #8]
      break;
 80045e4:	e03c      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f2:	461a      	mov	r2, r3
 80045f4:	f000 fb7e 	bl	8004cf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2150      	movs	r1, #80	; 0x50
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fbd7 	bl	8004db2 <TIM_ITRx_SetConfig>
      break;
 8004604:	e02c      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004612:	461a      	mov	r2, r3
 8004614:	f000 fb9d 	bl	8004d52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2160      	movs	r1, #96	; 0x60
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fbc7 	bl	8004db2 <TIM_ITRx_SetConfig>
      break;
 8004624:	e01c      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004632:	461a      	mov	r2, r3
 8004634:	f000 fb5e 	bl	8004cf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2140      	movs	r1, #64	; 0x40
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fbb7 	bl	8004db2 <TIM_ITRx_SetConfig>
      break;
 8004644:	e00c      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4619      	mov	r1, r3
 8004650:	4610      	mov	r0, r2
 8004652:	f000 fbae 	bl	8004db2 <TIM_ITRx_SetConfig>
      break;
 8004656:	e003      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
      break;
 800465c:	e000      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800465e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004670:	7bfb      	ldrb	r3, [r7, #15]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a2e      	ldr	r2, [pc, #184]	; (8004798 <TIM_Base_SetConfig+0xcc>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d003      	beq.n	80046ec <TIM_Base_SetConfig+0x20>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ea:	d108      	bne.n	80046fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a25      	ldr	r2, [pc, #148]	; (8004798 <TIM_Base_SetConfig+0xcc>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00f      	beq.n	8004726 <TIM_Base_SetConfig+0x5a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470c:	d00b      	beq.n	8004726 <TIM_Base_SetConfig+0x5a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a22      	ldr	r2, [pc, #136]	; (800479c <TIM_Base_SetConfig+0xd0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <TIM_Base_SetConfig+0x5a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a21      	ldr	r2, [pc, #132]	; (80047a0 <TIM_Base_SetConfig+0xd4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_Base_SetConfig+0x5a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a20      	ldr	r2, [pc, #128]	; (80047a4 <TIM_Base_SetConfig+0xd8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d108      	bne.n	8004738 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a0e      	ldr	r2, [pc, #56]	; (8004798 <TIM_Base_SetConfig+0xcc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00b      	beq.n	800477c <TIM_Base_SetConfig+0xb0>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a0d      	ldr	r2, [pc, #52]	; (800479c <TIM_Base_SetConfig+0xd0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d007      	beq.n	800477c <TIM_Base_SetConfig+0xb0>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a0c      	ldr	r2, [pc, #48]	; (80047a0 <TIM_Base_SetConfig+0xd4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d003      	beq.n	800477c <TIM_Base_SetConfig+0xb0>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a0b      	ldr	r2, [pc, #44]	; (80047a4 <TIM_Base_SetConfig+0xd8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d103      	bne.n	8004784 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	615a      	str	r2, [r3, #20]
}
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40012c00 	.word	0x40012c00
 800479c:	40014000 	.word	0x40014000
 80047a0:	40014400 	.word	0x40014400
 80047a4:	40014800 	.word	0x40014800

080047a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	f023 0201 	bic.w	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0303 	bic.w	r3, r3, #3
 80047e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f023 0302 	bic.w	r3, r3, #2
 80047f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a28      	ldr	r2, [pc, #160]	; (80048a4 <TIM_OC1_SetConfig+0xfc>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00b      	beq.n	8004820 <TIM_OC1_SetConfig+0x78>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a27      	ldr	r2, [pc, #156]	; (80048a8 <TIM_OC1_SetConfig+0x100>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d007      	beq.n	8004820 <TIM_OC1_SetConfig+0x78>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a26      	ldr	r2, [pc, #152]	; (80048ac <TIM_OC1_SetConfig+0x104>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d003      	beq.n	8004820 <TIM_OC1_SetConfig+0x78>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a25      	ldr	r2, [pc, #148]	; (80048b0 <TIM_OC1_SetConfig+0x108>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d10c      	bne.n	800483a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f023 0308 	bic.w	r3, r3, #8
 8004826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f023 0304 	bic.w	r3, r3, #4
 8004838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a19      	ldr	r2, [pc, #100]	; (80048a4 <TIM_OC1_SetConfig+0xfc>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00b      	beq.n	800485a <TIM_OC1_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a18      	ldr	r2, [pc, #96]	; (80048a8 <TIM_OC1_SetConfig+0x100>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d007      	beq.n	800485a <TIM_OC1_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a17      	ldr	r2, [pc, #92]	; (80048ac <TIM_OC1_SetConfig+0x104>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d003      	beq.n	800485a <TIM_OC1_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a16      	ldr	r2, [pc, #88]	; (80048b0 <TIM_OC1_SetConfig+0x108>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d111      	bne.n	800487e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	621a      	str	r2, [r3, #32]
}
 8004898:	bf00      	nop
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	40012c00 	.word	0x40012c00
 80048a8:	40014000 	.word	0x40014000
 80048ac:	40014400 	.word	0x40014400
 80048b0:	40014800 	.word	0x40014800

080048b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f023 0210 	bic.w	r2, r3, #16
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f023 0320 	bic.w	r3, r3, #32
 8004902:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a24      	ldr	r2, [pc, #144]	; (80049a4 <TIM_OC2_SetConfig+0xf0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d10d      	bne.n	8004934 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800491e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004932:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a1b      	ldr	r2, [pc, #108]	; (80049a4 <TIM_OC2_SetConfig+0xf0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00b      	beq.n	8004954 <TIM_OC2_SetConfig+0xa0>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a1a      	ldr	r2, [pc, #104]	; (80049a8 <TIM_OC2_SetConfig+0xf4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d007      	beq.n	8004954 <TIM_OC2_SetConfig+0xa0>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a19      	ldr	r2, [pc, #100]	; (80049ac <TIM_OC2_SetConfig+0xf8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_OC2_SetConfig+0xa0>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a18      	ldr	r2, [pc, #96]	; (80049b0 <TIM_OC2_SetConfig+0xfc>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d113      	bne.n	800497c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800495a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004962:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	621a      	str	r2, [r3, #32]
}
 8004996:	bf00      	nop
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40012c00 	.word	0x40012c00
 80049a8:	40014000 	.word	0x40014000
 80049ac:	40014400 	.word	0x40014400
 80049b0:	40014800 	.word	0x40014800

080049b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0303 	bic.w	r3, r3, #3
 80049ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	021b      	lsls	r3, r3, #8
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a23      	ldr	r2, [pc, #140]	; (8004aa0 <TIM_OC3_SetConfig+0xec>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d10d      	bne.n	8004a32 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	021b      	lsls	r3, r3, #8
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a30:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a1a      	ldr	r2, [pc, #104]	; (8004aa0 <TIM_OC3_SetConfig+0xec>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00b      	beq.n	8004a52 <TIM_OC3_SetConfig+0x9e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a19      	ldr	r2, [pc, #100]	; (8004aa4 <TIM_OC3_SetConfig+0xf0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d007      	beq.n	8004a52 <TIM_OC3_SetConfig+0x9e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a18      	ldr	r2, [pc, #96]	; (8004aa8 <TIM_OC3_SetConfig+0xf4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d003      	beq.n	8004a52 <TIM_OC3_SetConfig+0x9e>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a17      	ldr	r2, [pc, #92]	; (8004aac <TIM_OC3_SetConfig+0xf8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d113      	bne.n	8004a7a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	621a      	str	r2, [r3, #32]
}
 8004a94:	bf00      	nop
 8004a96:	371c      	adds	r7, #28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	40012c00 	.word	0x40012c00
 8004aa4:	40014000 	.word	0x40014000
 8004aa8:	40014400 	.word	0x40014400
 8004aac:	40014800 	.word	0x40014800

08004ab0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	031b      	lsls	r3, r3, #12
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a16      	ldr	r2, [pc, #88]	; (8004b68 <TIM_OC4_SetConfig+0xb8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00b      	beq.n	8004b2c <TIM_OC4_SetConfig+0x7c>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a15      	ldr	r2, [pc, #84]	; (8004b6c <TIM_OC4_SetConfig+0xbc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d007      	beq.n	8004b2c <TIM_OC4_SetConfig+0x7c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a14      	ldr	r2, [pc, #80]	; (8004b70 <TIM_OC4_SetConfig+0xc0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d003      	beq.n	8004b2c <TIM_OC4_SetConfig+0x7c>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a13      	ldr	r2, [pc, #76]	; (8004b74 <TIM_OC4_SetConfig+0xc4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d109      	bne.n	8004b40 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	019b      	lsls	r3, r3, #6
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	621a      	str	r2, [r3, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40012c00 	.word	0x40012c00
 8004b6c:	40014000 	.word	0x40014000
 8004b70:	40014400 	.word	0x40014400
 8004b74:	40014800 	.word	0x40014800

08004b78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004bbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	041b      	lsls	r3, r3, #16
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a15      	ldr	r2, [pc, #84]	; (8004c24 <TIM_OC5_SetConfig+0xac>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00b      	beq.n	8004bea <TIM_OC5_SetConfig+0x72>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a14      	ldr	r2, [pc, #80]	; (8004c28 <TIM_OC5_SetConfig+0xb0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d007      	beq.n	8004bea <TIM_OC5_SetConfig+0x72>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a13      	ldr	r2, [pc, #76]	; (8004c2c <TIM_OC5_SetConfig+0xb4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d003      	beq.n	8004bea <TIM_OC5_SetConfig+0x72>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a12      	ldr	r2, [pc, #72]	; (8004c30 <TIM_OC5_SetConfig+0xb8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d109      	bne.n	8004bfe <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	021b      	lsls	r3, r3, #8
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	621a      	str	r2, [r3, #32]
}
 8004c18:	bf00      	nop
 8004c1a:	371c      	adds	r7, #28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	40012c00 	.word	0x40012c00
 8004c28:	40014000 	.word	0x40014000
 8004c2c:	40014400 	.word	0x40014400
 8004c30:	40014800 	.word	0x40014800

08004c34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	051b      	lsls	r3, r3, #20
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a16      	ldr	r2, [pc, #88]	; (8004ce4 <TIM_OC6_SetConfig+0xb0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00b      	beq.n	8004ca8 <TIM_OC6_SetConfig+0x74>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a15      	ldr	r2, [pc, #84]	; (8004ce8 <TIM_OC6_SetConfig+0xb4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d007      	beq.n	8004ca8 <TIM_OC6_SetConfig+0x74>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a14      	ldr	r2, [pc, #80]	; (8004cec <TIM_OC6_SetConfig+0xb8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <TIM_OC6_SetConfig+0x74>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a13      	ldr	r2, [pc, #76]	; (8004cf0 <TIM_OC6_SetConfig+0xbc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d109      	bne.n	8004cbc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	029b      	lsls	r3, r3, #10
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	621a      	str	r2, [r3, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40014000 	.word	0x40014000
 8004cec:	40014400 	.word	0x40014400
 8004cf0:	40014800 	.word	0x40014800

08004cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	f023 0201 	bic.w	r2, r3, #1
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f023 030a 	bic.w	r3, r3, #10
 8004d30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	621a      	str	r2, [r3, #32]
}
 8004d46:	bf00      	nop
 8004d48:	371c      	adds	r7, #28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b087      	sub	sp, #28
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	f023 0210 	bic.w	r2, r3, #16
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	031b      	lsls	r3, r3, #12
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	621a      	str	r2, [r3, #32]
}
 8004da6:	bf00      	nop
 8004da8:	371c      	adds	r7, #28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f043 0307 	orr.w	r3, r3, #7
 8004dd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	609a      	str	r2, [r3, #8]
}
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	021a      	lsls	r2, r3, #8
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	609a      	str	r2, [r3, #8]
}
 8004e1c:	bf00      	nop
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a1a      	ldr	r2, [r3, #32]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	401a      	ands	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a1a      	ldr	r2, [r3, #32]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f003 031f 	and.w	r3, r3, #31
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e60:	431a      	orrs	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	621a      	str	r2, [r3, #32]
}
 8004e66:	bf00      	nop
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
	...

08004e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e04f      	b.n	8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a21      	ldr	r2, [pc, #132]	; (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d108      	bne.n	8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ebc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d009      	beq.n	8004f00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef4:	d004      	beq.n	8004f00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a10      	ldr	r2, [pc, #64]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10c      	bne.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40014000 	.word	0x40014000

08004f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e040      	b.n	8005010 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fc f8d2 	bl	8001148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2224      	movs	r2, #36	; 0x24
 8004fa8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0201 	bic.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f980 	bl	80052c0 <UART_SetConfig>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e022      	b.n	8005010 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 faaa 	bl	800552c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fb31 	bl	8005670 <UART_CheckIdleState>
 800500e:	4603      	mov	r3, r0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08a      	sub	sp, #40	; 0x28
 800501c:	af02      	add	r7, sp, #8
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	4613      	mov	r3, r2
 8005026:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800502c:	2b20      	cmp	r3, #32
 800502e:	d178      	bne.n	8005122 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <HAL_UART_Transmit+0x24>
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e071      	b.n	8005124 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2221      	movs	r2, #33	; 0x21
 800504c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800504e:	f7fc fa21 	bl	8001494 <HAL_GetTick>
 8005052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	88fa      	ldrh	r2, [r7, #6]
 8005058:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	88fa      	ldrh	r2, [r7, #6]
 8005060:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506c:	d108      	bne.n	8005080 <HAL_UART_Transmit+0x68>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d104      	bne.n	8005080 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005076:	2300      	movs	r3, #0
 8005078:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	61bb      	str	r3, [r7, #24]
 800507e:	e003      	b.n	8005088 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005084:	2300      	movs	r3, #0
 8005086:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005088:	e030      	b.n	80050ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2200      	movs	r2, #0
 8005092:	2180      	movs	r1, #128	; 0x80
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 fb93 	bl	80057c0 <UART_WaitOnFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d004      	beq.n	80050aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e03c      	b.n	8005124 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10b      	bne.n	80050c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	881a      	ldrh	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050bc:	b292      	uxth	r2, r2
 80050be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	3302      	adds	r3, #2
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	e008      	b.n	80050da <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	781a      	ldrb	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	b292      	uxth	r2, r2
 80050d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	3301      	adds	r3, #1
 80050d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1c8      	bne.n	800508a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2200      	movs	r2, #0
 8005100:	2140      	movs	r1, #64	; 0x40
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 fb5c 	bl	80057c0 <UART_WaitOnFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d004      	beq.n	8005118 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2220      	movs	r2, #32
 8005112:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e005      	b.n	8005124 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	e000      	b.n	8005124 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005122:	2302      	movs	r3, #2
  }
}
 8005124:	4618      	mov	r0, r3
 8005126:	3720      	adds	r7, #32
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08a      	sub	sp, #40	; 0x28
 8005130:	af02      	add	r7, sp, #8
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	4613      	mov	r3, r2
 800513a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005142:	2b20      	cmp	r3, #32
 8005144:	f040 80b6 	bne.w	80052b4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d002      	beq.n	8005154 <HAL_UART_Receive+0x28>
 800514e:	88fb      	ldrh	r3, [r7, #6]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0ae      	b.n	80052b6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2222      	movs	r2, #34	; 0x22
 8005164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800516e:	f7fc f991 	bl	8001494 <HAL_GetTick>
 8005172:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	88fa      	ldrh	r2, [r7, #6]
 8005178:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	88fa      	ldrh	r2, [r7, #6]
 8005180:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518c:	d10e      	bne.n	80051ac <HAL_UART_Receive+0x80>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d105      	bne.n	80051a2 <HAL_UART_Receive+0x76>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f240 12ff 	movw	r2, #511	; 0x1ff
 800519c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051a0:	e02d      	b.n	80051fe <HAL_UART_Receive+0xd2>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	22ff      	movs	r2, #255	; 0xff
 80051a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051aa:	e028      	b.n	80051fe <HAL_UART_Receive+0xd2>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10d      	bne.n	80051d0 <HAL_UART_Receive+0xa4>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d104      	bne.n	80051c6 <HAL_UART_Receive+0x9a>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	22ff      	movs	r2, #255	; 0xff
 80051c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051c4:	e01b      	b.n	80051fe <HAL_UART_Receive+0xd2>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	227f      	movs	r2, #127	; 0x7f
 80051ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051ce:	e016      	b.n	80051fe <HAL_UART_Receive+0xd2>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051d8:	d10d      	bne.n	80051f6 <HAL_UART_Receive+0xca>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d104      	bne.n	80051ec <HAL_UART_Receive+0xc0>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	227f      	movs	r2, #127	; 0x7f
 80051e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051ea:	e008      	b.n	80051fe <HAL_UART_Receive+0xd2>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	223f      	movs	r2, #63	; 0x3f
 80051f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051f4:	e003      	b.n	80051fe <HAL_UART_Receive+0xd2>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005204:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520e:	d108      	bne.n	8005222 <HAL_UART_Receive+0xf6>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d104      	bne.n	8005222 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005218:	2300      	movs	r3, #0
 800521a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	61bb      	str	r3, [r7, #24]
 8005220:	e003      	b.n	800522a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800522a:	e037      	b.n	800529c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2200      	movs	r2, #0
 8005234:	2120      	movs	r1, #32
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 fac2 	bl	80057c0 <UART_WaitOnFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2220      	movs	r2, #32
 8005246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e033      	b.n	80052b6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10c      	bne.n	800526e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800525a:	b29a      	uxth	r2, r3
 800525c:	8a7b      	ldrh	r3, [r7, #18]
 800525e:	4013      	ands	r3, r2
 8005260:	b29a      	uxth	r2, r3
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	3302      	adds	r3, #2
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	e00d      	b.n	800528a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005274:	b29b      	uxth	r3, r3
 8005276:	b2da      	uxtb	r2, r3
 8005278:	8a7b      	ldrh	r3, [r7, #18]
 800527a:	b2db      	uxtb	r3, r3
 800527c:	4013      	ands	r3, r2
 800527e:	b2da      	uxtb	r2, r3
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	3301      	adds	r3, #1
 8005288:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005290:	b29b      	uxth	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1c1      	bne.n	800522c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	e000      	b.n	80052b6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80052b4:	2302      	movs	r3, #2
  }
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4b8a      	ldr	r3, [pc, #552]	; (8005514 <UART_SetConfig+0x254>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	6979      	ldr	r1, [r7, #20]
 80052f4:	430b      	orrs	r3, r1
 80052f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	430a      	orrs	r2, r1
 8005330:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a78      	ldr	r2, [pc, #480]	; (8005518 <UART_SetConfig+0x258>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d120      	bne.n	800537e <UART_SetConfig+0xbe>
 800533c:	4b77      	ldr	r3, [pc, #476]	; (800551c <UART_SetConfig+0x25c>)
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	f003 0303 	and.w	r3, r3, #3
 8005344:	2b03      	cmp	r3, #3
 8005346:	d817      	bhi.n	8005378 <UART_SetConfig+0xb8>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <UART_SetConfig+0x90>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005361 	.word	0x08005361
 8005354:	0800536d 	.word	0x0800536d
 8005358:	08005373 	.word	0x08005373
 800535c:	08005367 	.word	0x08005367
 8005360:	2300      	movs	r3, #0
 8005362:	77fb      	strb	r3, [r7, #31]
 8005364:	e01d      	b.n	80053a2 <UART_SetConfig+0xe2>
 8005366:	2302      	movs	r3, #2
 8005368:	77fb      	strb	r3, [r7, #31]
 800536a:	e01a      	b.n	80053a2 <UART_SetConfig+0xe2>
 800536c:	2304      	movs	r3, #4
 800536e:	77fb      	strb	r3, [r7, #31]
 8005370:	e017      	b.n	80053a2 <UART_SetConfig+0xe2>
 8005372:	2308      	movs	r3, #8
 8005374:	77fb      	strb	r3, [r7, #31]
 8005376:	e014      	b.n	80053a2 <UART_SetConfig+0xe2>
 8005378:	2310      	movs	r3, #16
 800537a:	77fb      	strb	r3, [r7, #31]
 800537c:	e011      	b.n	80053a2 <UART_SetConfig+0xe2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a67      	ldr	r2, [pc, #412]	; (8005520 <UART_SetConfig+0x260>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d102      	bne.n	800538e <UART_SetConfig+0xce>
 8005388:	2300      	movs	r3, #0
 800538a:	77fb      	strb	r3, [r7, #31]
 800538c:	e009      	b.n	80053a2 <UART_SetConfig+0xe2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a64      	ldr	r2, [pc, #400]	; (8005524 <UART_SetConfig+0x264>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d102      	bne.n	800539e <UART_SetConfig+0xde>
 8005398:	2300      	movs	r3, #0
 800539a:	77fb      	strb	r3, [r7, #31]
 800539c:	e001      	b.n	80053a2 <UART_SetConfig+0xe2>
 800539e:	2310      	movs	r3, #16
 80053a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053aa:	d15a      	bne.n	8005462 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80053ac:	7ffb      	ldrb	r3, [r7, #31]
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d827      	bhi.n	8005402 <UART_SetConfig+0x142>
 80053b2:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <UART_SetConfig+0xf8>)
 80053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b8:	080053dd 	.word	0x080053dd
 80053bc:	080053e5 	.word	0x080053e5
 80053c0:	080053ed 	.word	0x080053ed
 80053c4:	08005403 	.word	0x08005403
 80053c8:	080053f3 	.word	0x080053f3
 80053cc:	08005403 	.word	0x08005403
 80053d0:	08005403 	.word	0x08005403
 80053d4:	08005403 	.word	0x08005403
 80053d8:	080053fb 	.word	0x080053fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053dc:	f7fd fd52 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 80053e0:	61b8      	str	r0, [r7, #24]
        break;
 80053e2:	e013      	b.n	800540c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053e4:	f7fd fd70 	bl	8002ec8 <HAL_RCC_GetPCLK2Freq>
 80053e8:	61b8      	str	r0, [r7, #24]
        break;
 80053ea:	e00f      	b.n	800540c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053ec:	4b4e      	ldr	r3, [pc, #312]	; (8005528 <UART_SetConfig+0x268>)
 80053ee:	61bb      	str	r3, [r7, #24]
        break;
 80053f0:	e00c      	b.n	800540c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053f2:	f7fd fcd1 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 80053f6:	61b8      	str	r0, [r7, #24]
        break;
 80053f8:	e008      	b.n	800540c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053fe:	61bb      	str	r3, [r7, #24]
        break;
 8005400:	e004      	b.n	800540c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	77bb      	strb	r3, [r7, #30]
        break;
 800540a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d074      	beq.n	80054fc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	005a      	lsls	r2, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	085b      	lsrs	r3, r3, #1
 800541c:	441a      	add	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	fbb2 f3f3 	udiv	r3, r2, r3
 8005426:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	2b0f      	cmp	r3, #15
 800542c:	d916      	bls.n	800545c <UART_SetConfig+0x19c>
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005434:	d212      	bcs.n	800545c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	b29b      	uxth	r3, r3
 800543a:	f023 030f 	bic.w	r3, r3, #15
 800543e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	085b      	lsrs	r3, r3, #1
 8005444:	b29b      	uxth	r3, r3
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	b29a      	uxth	r2, r3
 800544c:	89fb      	ldrh	r3, [r7, #14]
 800544e:	4313      	orrs	r3, r2
 8005450:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	89fa      	ldrh	r2, [r7, #14]
 8005458:	60da      	str	r2, [r3, #12]
 800545a:	e04f      	b.n	80054fc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	77bb      	strb	r3, [r7, #30]
 8005460:	e04c      	b.n	80054fc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005462:	7ffb      	ldrb	r3, [r7, #31]
 8005464:	2b08      	cmp	r3, #8
 8005466:	d828      	bhi.n	80054ba <UART_SetConfig+0x1fa>
 8005468:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <UART_SetConfig+0x1b0>)
 800546a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546e:	bf00      	nop
 8005470:	08005495 	.word	0x08005495
 8005474:	0800549d 	.word	0x0800549d
 8005478:	080054a5 	.word	0x080054a5
 800547c:	080054bb 	.word	0x080054bb
 8005480:	080054ab 	.word	0x080054ab
 8005484:	080054bb 	.word	0x080054bb
 8005488:	080054bb 	.word	0x080054bb
 800548c:	080054bb 	.word	0x080054bb
 8005490:	080054b3 	.word	0x080054b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005494:	f7fd fcf6 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8005498:	61b8      	str	r0, [r7, #24]
        break;
 800549a:	e013      	b.n	80054c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800549c:	f7fd fd14 	bl	8002ec8 <HAL_RCC_GetPCLK2Freq>
 80054a0:	61b8      	str	r0, [r7, #24]
        break;
 80054a2:	e00f      	b.n	80054c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054a4:	4b20      	ldr	r3, [pc, #128]	; (8005528 <UART_SetConfig+0x268>)
 80054a6:	61bb      	str	r3, [r7, #24]
        break;
 80054a8:	e00c      	b.n	80054c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054aa:	f7fd fc75 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 80054ae:	61b8      	str	r0, [r7, #24]
        break;
 80054b0:	e008      	b.n	80054c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054b6:	61bb      	str	r3, [r7, #24]
        break;
 80054b8:	e004      	b.n	80054c4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	77bb      	strb	r3, [r7, #30]
        break;
 80054c2:	bf00      	nop
    }

    if (pclk != 0U)
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d018      	beq.n	80054fc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	085a      	lsrs	r2, r3, #1
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	441a      	add	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	2b0f      	cmp	r3, #15
 80054e2:	d909      	bls.n	80054f8 <UART_SetConfig+0x238>
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ea:	d205      	bcs.n	80054f8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	60da      	str	r2, [r3, #12]
 80054f6:	e001      	b.n	80054fc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005508:	7fbb      	ldrb	r3, [r7, #30]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3720      	adds	r7, #32
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	efff69f3 	.word	0xefff69f3
 8005518:	40013800 	.word	0x40013800
 800551c:	40021000 	.word	0x40021000
 8005520:	40004400 	.word	0x40004400
 8005524:	40004800 	.word	0x40004800
 8005528:	007a1200 	.word	0x007a1200

0800552c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	f003 0310 	and.w	r3, r3, #16
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b00      	cmp	r3, #0
 800560a:	d01a      	beq.n	8005642 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800562a:	d10a      	bne.n	8005642 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	605a      	str	r2, [r3, #4]
  }
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b098      	sub	sp, #96	; 0x60
 8005674:	af02      	add	r7, sp, #8
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005680:	f7fb ff08 	bl	8001494 <HAL_GetTick>
 8005684:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0308 	and.w	r3, r3, #8
 8005690:	2b08      	cmp	r3, #8
 8005692:	d12e      	bne.n	80056f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005694:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800569c:	2200      	movs	r2, #0
 800569e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f88c 	bl	80057c0 <UART_WaitOnFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d021      	beq.n	80056f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056c2:	653b      	str	r3, [r7, #80]	; 0x50
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	461a      	mov	r2, r3
 80056ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056cc:	647b      	str	r3, [r7, #68]	; 0x44
 80056ce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056d4:	e841 2300 	strex	r3, r2, [r1]
 80056d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e6      	bne.n	80056ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2220      	movs	r2, #32
 80056e4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e062      	b.n	80057b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d149      	bne.n	8005794 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005700:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005708:	2200      	movs	r2, #0
 800570a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f856 	bl	80057c0 <UART_WaitOnFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d03c      	beq.n	8005794 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	623b      	str	r3, [r7, #32]
   return(result);
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800572e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005738:	633b      	str	r3, [r7, #48]	; 0x30
 800573a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800573e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e6      	bne.n	800571a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3308      	adds	r3, #8
 8005752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	60fb      	str	r3, [r7, #12]
   return(result);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	64bb      	str	r3, [r7, #72]	; 0x48
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3308      	adds	r3, #8
 800576a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800576c:	61fa      	str	r2, [r7, #28]
 800576e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	69b9      	ldr	r1, [r7, #24]
 8005772:	69fa      	ldr	r2, [r7, #28]
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	617b      	str	r3, [r7, #20]
   return(result);
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e5      	bne.n	800574c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e011      	b.n	80057b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2220      	movs	r2, #32
 8005798:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3758      	adds	r7, #88	; 0x58
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	603b      	str	r3, [r7, #0]
 80057cc:	4613      	mov	r3, r2
 80057ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d0:	e049      	b.n	8005866 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057d8:	d045      	beq.n	8005866 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057da:	f7fb fe5b 	bl	8001494 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d302      	bcc.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e048      	b.n	8005886 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d031      	beq.n	8005866 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	f003 0308 	and.w	r3, r3, #8
 800580c:	2b08      	cmp	r3, #8
 800580e:	d110      	bne.n	8005832 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2208      	movs	r2, #8
 8005816:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f838 	bl	800588e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2208      	movs	r2, #8
 8005822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e029      	b.n	8005886 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800583c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005840:	d111      	bne.n	8005866 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800584a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 f81e 	bl	800588e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2220      	movs	r2, #32
 8005856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e00f      	b.n	8005886 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4013      	ands	r3, r2
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	429a      	cmp	r2, r3
 8005874:	bf0c      	ite	eq
 8005876:	2301      	moveq	r3, #1
 8005878:	2300      	movne	r3, #0
 800587a:	b2db      	uxtb	r3, r3
 800587c:	461a      	mov	r2, r3
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	429a      	cmp	r2, r3
 8005882:	d0a6      	beq.n	80057d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800588e:	b480      	push	{r7}
 8005890:	b095      	sub	sp, #84	; 0x54
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b4:	643b      	str	r3, [r7, #64]	; 0x40
 80058b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e6      	bne.n	8005896 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3308      	adds	r3, #8
 80058ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	e853 3f00 	ldrex	r3, [r3]
 80058d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f023 0301 	bic.w	r3, r3, #1
 80058de:	64bb      	str	r3, [r7, #72]	; 0x48
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3308      	adds	r3, #8
 80058e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f0:	e841 2300 	strex	r3, r2, [r1]
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e5      	bne.n	80058c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005900:	2b01      	cmp	r3, #1
 8005902:	d118      	bne.n	8005936 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	60bb      	str	r3, [r7, #8]
   return(result);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f023 0310 	bic.w	r3, r3, #16
 8005918:	647b      	str	r3, [r7, #68]	; 0x44
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005922:	61bb      	str	r3, [r7, #24]
 8005924:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	6979      	ldr	r1, [r7, #20]
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	e841 2300 	strex	r3, r2, [r1]
 800592e:	613b      	str	r3, [r7, #16]
   return(result);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1e6      	bne.n	8005904 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	669a      	str	r2, [r3, #104]	; 0x68
}
 800594a:	bf00      	nop
 800594c:	3754      	adds	r7, #84	; 0x54
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800595e:	f3ef 8305 	mrs	r3, IPSR
 8005962:	60bb      	str	r3, [r7, #8]
  return(result);
 8005964:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10f      	bne.n	800598a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800596a:	f3ef 8310 	mrs	r3, PRIMASK
 800596e:	607b      	str	r3, [r7, #4]
  return(result);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d109      	bne.n	800598a <osKernelInitialize+0x32>
 8005976:	4b11      	ldr	r3, [pc, #68]	; (80059bc <osKernelInitialize+0x64>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b02      	cmp	r3, #2
 800597c:	d109      	bne.n	8005992 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800597e:	f3ef 8311 	mrs	r3, BASEPRI
 8005982:	603b      	str	r3, [r7, #0]
  return(result);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800598a:	f06f 0305 	mvn.w	r3, #5
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e00c      	b.n	80059ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005992:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <osKernelInitialize+0x64>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d105      	bne.n	80059a6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800599a:	4b08      	ldr	r3, [pc, #32]	; (80059bc <osKernelInitialize+0x64>)
 800599c:	2201      	movs	r2, #1
 800599e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e002      	b.n	80059ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80059a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80059ac:	68fb      	ldr	r3, [r7, #12]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	20000228 	.word	0x20000228

080059c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059c6:	f3ef 8305 	mrs	r3, IPSR
 80059ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80059cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10f      	bne.n	80059f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059d2:	f3ef 8310 	mrs	r3, PRIMASK
 80059d6:	607b      	str	r3, [r7, #4]
  return(result);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d109      	bne.n	80059f2 <osKernelStart+0x32>
 80059de:	4b11      	ldr	r3, [pc, #68]	; (8005a24 <osKernelStart+0x64>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d109      	bne.n	80059fa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059e6:	f3ef 8311 	mrs	r3, BASEPRI
 80059ea:	603b      	str	r3, [r7, #0]
  return(result);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <osKernelStart+0x3a>
    stat = osErrorISR;
 80059f2:	f06f 0305 	mvn.w	r3, #5
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	e00e      	b.n	8005a18 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80059fa:	4b0a      	ldr	r3, [pc, #40]	; (8005a24 <osKernelStart+0x64>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d107      	bne.n	8005a12 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005a02:	4b08      	ldr	r3, [pc, #32]	; (8005a24 <osKernelStart+0x64>)
 8005a04:	2202      	movs	r2, #2
 8005a06:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005a08:	f001 fc84 	bl	8007314 <vTaskStartScheduler>
      stat = osOK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	e002      	b.n	8005a18 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005a18:	68fb      	ldr	r3, [r7, #12]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000228 	.word	0x20000228

08005a28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b092      	sub	sp, #72	; 0x48
 8005a2c:	af04      	add	r7, sp, #16
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a38:	f3ef 8305 	mrs	r3, IPSR
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f040 8094 	bne.w	8005b6e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a46:	f3ef 8310 	mrs	r3, PRIMASK
 8005a4a:	623b      	str	r3, [r7, #32]
  return(result);
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f040 808d 	bne.w	8005b6e <osThreadNew+0x146>
 8005a54:	4b48      	ldr	r3, [pc, #288]	; (8005b78 <osThreadNew+0x150>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d106      	bne.n	8005a6a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a5c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a60:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f040 8082 	bne.w	8005b6e <osThreadNew+0x146>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d07e      	beq.n	8005b6e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005a74:	2318      	movs	r3, #24
 8005a76:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005a78:	2300      	movs	r3, #0
 8005a7a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005a7c:	f107 031b 	add.w	r3, r7, #27
 8005a80:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a86:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d045      	beq.n	8005b1a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <osThreadNew+0x74>
        name = attr->name;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d008      	beq.n	8005ac2 <osThreadNew+0x9a>
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab2:	2b38      	cmp	r3, #56	; 0x38
 8005ab4:	d805      	bhi.n	8005ac2 <osThreadNew+0x9a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <osThreadNew+0x9e>
        return (NULL);
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e054      	b.n	8005b70 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	089b      	lsrs	r3, r3, #2
 8005ad4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00e      	beq.n	8005afc <osThreadNew+0xd4>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	2ba7      	cmp	r3, #167	; 0xa7
 8005ae4:	d90a      	bls.n	8005afc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d006      	beq.n	8005afc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <osThreadNew+0xd4>
        mem = 1;
 8005af6:	2301      	movs	r3, #1
 8005af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005afa:	e010      	b.n	8005b1e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10c      	bne.n	8005b1e <osThreadNew+0xf6>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d108      	bne.n	8005b1e <osThreadNew+0xf6>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d104      	bne.n	8005b1e <osThreadNew+0xf6>
          mem = 0;
 8005b14:	2300      	movs	r3, #0
 8005b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b18:	e001      	b.n	8005b1e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d110      	bne.n	8005b46 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b2c:	9202      	str	r2, [sp, #8]
 8005b2e:	9301      	str	r3, [sp, #4]
 8005b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f001 fa06 	bl	8006f4c <xTaskCreateStatic>
 8005b40:	4603      	mov	r3, r0
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e013      	b.n	8005b6e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d110      	bne.n	8005b6e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	f107 0314 	add.w	r3, r7, #20
 8005b54:	9301      	str	r3, [sp, #4]
 8005b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f001 fa50 	bl	8007004 <xTaskCreate>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d001      	beq.n	8005b6e <osThreadNew+0x146>
          hTask = NULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b6e:	697b      	ldr	r3, [r7, #20]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3738      	adds	r7, #56	; 0x38
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20000228 	.word	0x20000228

08005b7c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b82:	f3ef 8305 	mrs	r3, IPSR
 8005b86:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10f      	bne.n	8005bae <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b8e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b92:	607b      	str	r3, [r7, #4]
  return(result);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <osThreadYield+0x32>
 8005b9a:	4b0f      	ldr	r3, [pc, #60]	; (8005bd8 <osThreadYield+0x5c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d109      	bne.n	8005bb6 <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ba2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ba6:	603b      	str	r3, [r7, #0]
  return(result);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <osThreadYield+0x3a>
    stat = osErrorISR;
 8005bae:	f06f 0305 	mvn.w	r3, #5
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	e009      	b.n	8005bca <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8005bba:	4b08      	ldr	r3, [pc, #32]	; (8005bdc <osThreadYield+0x60>)
 8005bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8005bca:	68fb      	ldr	r3, [r7, #12]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	20000228 	.word	0x20000228
 8005bdc:	e000ed04 	.word	0xe000ed04

08005be0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005be8:	f3ef 8305 	mrs	r3, IPSR
 8005bec:	613b      	str	r3, [r7, #16]
  return(result);
 8005bee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10f      	bne.n	8005c14 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d109      	bne.n	8005c14 <osDelay+0x34>
 8005c00:	4b0d      	ldr	r3, [pc, #52]	; (8005c38 <osDelay+0x58>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d109      	bne.n	8005c1c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c08:	f3ef 8311 	mrs	r3, BASEPRI
 8005c0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <osDelay+0x3c>
    stat = osErrorISR;
 8005c14:	f06f 0305 	mvn.w	r3, #5
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	e007      	b.n	8005c2c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d002      	beq.n	8005c2c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f001 fb40 	bl	80072ac <vTaskDelay>
    }
  }

  return (stat);
 8005c2c:	697b      	ldr	r3, [r7, #20]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20000228 	.word	0x20000228

08005c3c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f002 fc72 	bl	800852e <pvTimerGetTimerID>
 8005c4a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <TimerCallback+0x22>
    callb->func (callb->arg);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	6852      	ldr	r2, [r2, #4]
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	4798      	blx	r3
  }
}
 8005c5e:	bf00      	nop
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08e      	sub	sp, #56	; 0x38
 8005c6c:	af02      	add	r7, sp, #8
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	607a      	str	r2, [r7, #4]
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	460b      	mov	r3, r1
 8005c76:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c7c:	f3ef 8305 	mrs	r3, IPSR
 8005c80:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c82:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d16a      	bne.n	8005d5e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c88:	f3ef 8310 	mrs	r3, PRIMASK
 8005c8c:	617b      	str	r3, [r7, #20]
  return(result);
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d164      	bne.n	8005d5e <osTimerNew+0xf6>
 8005c94:	4b34      	ldr	r3, [pc, #208]	; (8005d68 <osTimerNew+0x100>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d105      	bne.n	8005ca8 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c9c:	f3ef 8311 	mrs	r3, BASEPRI
 8005ca0:	613b      	str	r3, [r7, #16]
  return(result);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d15a      	bne.n	8005d5e <osTimerNew+0xf6>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d057      	beq.n	8005d5e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005cae:	2008      	movs	r0, #8
 8005cb0:	f002 feaa 	bl	8008a08 <pvPortMalloc>
 8005cb4:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d050      	beq.n	8005d5e <osTimerNew+0xf6>
      callb->func = func;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005cc8:	7afb      	ldrb	r3, [r7, #11]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d102      	bne.n	8005cd4 <osTimerNew+0x6c>
        reload = pdFALSE;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd2:	e001      	b.n	8005cd8 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8005cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cdc:	623b      	str	r3, [r7, #32]
      name = NULL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01c      	beq.n	8005d22 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <osTimerNew+0x8e>
          name = attr->name;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d006      	beq.n	8005d0c <osTimerNew+0xa4>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	2b2f      	cmp	r3, #47	; 0x2f
 8005d04:	d902      	bls.n	8005d0c <osTimerNew+0xa4>
          mem = 1;
 8005d06:	2301      	movs	r3, #1
 8005d08:	623b      	str	r3, [r7, #32]
 8005d0a:	e00c      	b.n	8005d26 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d108      	bne.n	8005d26 <osTimerNew+0xbe>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d104      	bne.n	8005d26 <osTimerNew+0xbe>
            mem = 0;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	623b      	str	r3, [r7, #32]
 8005d20:	e001      	b.n	8005d26 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8005d22:	2300      	movs	r3, #0
 8005d24:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d10c      	bne.n	8005d46 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	9301      	str	r3, [sp, #4]
 8005d32:	4b0e      	ldr	r3, [pc, #56]	; (8005d6c <osTimerNew+0x104>)
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d3e:	f002 f898 	bl	8007e72 <xTimerCreateStatic>
 8005d42:	62b8      	str	r0, [r7, #40]	; 0x28
 8005d44:	e00b      	b.n	8005d5e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d108      	bne.n	8005d5e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005d4c:	4b07      	ldr	r3, [pc, #28]	; (8005d6c <osTimerNew+0x104>)
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d54:	2101      	movs	r1, #1
 8005d56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d58:	f002 f86a 	bl	8007e30 <xTimerCreate>
 8005d5c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3730      	adds	r7, #48	; 0x30
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	20000228 	.word	0x20000228
 8005d6c:	08005c3d 	.word	0x08005c3d

08005d70 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	; 0x28
 8005d74:	af02      	add	r7, sp, #8
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d7e:	f3ef 8305 	mrs	r3, IPSR
 8005d82:	617b      	str	r3, [r7, #20]
  return(result);
 8005d84:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10f      	bne.n	8005daa <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d8e:	613b      	str	r3, [r7, #16]
  return(result);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d109      	bne.n	8005daa <osTimerStart+0x3a>
 8005d96:	4b15      	ldr	r3, [pc, #84]	; (8005dec <osTimerStart+0x7c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d109      	bne.n	8005db2 <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d9e:	f3ef 8311 	mrs	r3, BASEPRI
 8005da2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <osTimerStart+0x42>
    stat = osErrorISR;
 8005daa:	f06f 0305 	mvn.w	r3, #5
 8005dae:	61fb      	str	r3, [r7, #28]
 8005db0:	e017      	b.n	8005de2 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d103      	bne.n	8005dc0 <osTimerStart+0x50>
    stat = osErrorParameter;
 8005db8:	f06f 0303 	mvn.w	r3, #3
 8005dbc:	61fb      	str	r3, [r7, #28]
 8005dbe:	e010      	b.n	8005de2 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	2104      	movs	r1, #4
 8005dca:	69b8      	ldr	r0, [r7, #24]
 8005dcc:	f002 f8c0 	bl	8007f50 <xTimerGenericCommand>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d102      	bne.n	8005ddc <osTimerStart+0x6c>
      stat = osOK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	61fb      	str	r3, [r7, #28]
 8005dda:	e002      	b.n	8005de2 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8005ddc:	f06f 0302 	mvn.w	r3, #2
 8005de0:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8005de2:	69fb      	ldr	r3, [r7, #28]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3720      	adds	r7, #32
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	20000228 	.word	0x20000228

08005df0 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08a      	sub	sp, #40	; 0x28
 8005df4:	af02      	add	r7, sp, #8
 8005df6:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dfc:	f3ef 8305 	mrs	r3, IPSR
 8005e00:	617b      	str	r3, [r7, #20]
  return(result);
 8005e02:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10f      	bne.n	8005e28 <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e08:	f3ef 8310 	mrs	r3, PRIMASK
 8005e0c:	613b      	str	r3, [r7, #16]
  return(result);
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d109      	bne.n	8005e28 <osTimerStop+0x38>
 8005e14:	4b1a      	ldr	r3, [pc, #104]	; (8005e80 <osTimerStop+0x90>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d109      	bne.n	8005e30 <osTimerStop+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e20:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <osTimerStop+0x40>
    stat = osErrorISR;
 8005e28:	f06f 0305 	mvn.w	r3, #5
 8005e2c:	61fb      	str	r3, [r7, #28]
 8005e2e:	e021      	b.n	8005e74 <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d103      	bne.n	8005e3e <osTimerStop+0x4e>
    stat = osErrorParameter;
 8005e36:	f06f 0303 	mvn.w	r3, #3
 8005e3a:	61fb      	str	r3, [r7, #28]
 8005e3c:	e01a      	b.n	8005e74 <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8005e3e:	69b8      	ldr	r0, [r7, #24]
 8005e40:	f002 fb50 	bl	80084e4 <xTimerIsTimerActive>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d103      	bne.n	8005e52 <osTimerStop+0x62>
      stat = osErrorResource;
 8005e4a:	f06f 0302 	mvn.w	r3, #2
 8005e4e:	61fb      	str	r3, [r7, #28]
 8005e50:	e010      	b.n	8005e74 <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8005e52:	2300      	movs	r3, #0
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	2300      	movs	r3, #0
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2103      	movs	r1, #3
 8005e5c:	69b8      	ldr	r0, [r7, #24]
 8005e5e:	f002 f877 	bl	8007f50 <xTimerGenericCommand>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d102      	bne.n	8005e6e <osTimerStop+0x7e>
        stat = osOK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	e002      	b.n	8005e74 <osTimerStop+0x84>
      } else {
        stat = osError;
 8005e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e72:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8005e74:	69fb      	ldr	r3, [r7, #28]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3720      	adds	r7, #32
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	20000228 	.word	0x20000228

08005e84 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b08c      	sub	sp, #48	; 0x30
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005e90:	2300      	movs	r3, #0
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e94:	f3ef 8305 	mrs	r3, IPSR
 8005e98:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e9a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d16f      	bne.n	8005f80 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ea4:	617b      	str	r3, [r7, #20]
  return(result);
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d169      	bne.n	8005f80 <osMessageQueueNew+0xfc>
 8005eac:	4b37      	ldr	r3, [pc, #220]	; (8005f8c <osMessageQueueNew+0x108>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d105      	bne.n	8005ec0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005eb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005eb8:	613b      	str	r3, [r7, #16]
  return(result);
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d15f      	bne.n	8005f80 <osMessageQueueNew+0xfc>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d05c      	beq.n	8005f80 <osMessageQueueNew+0xfc>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d059      	beq.n	8005f80 <osMessageQueueNew+0xfc>
    mem = -1;
 8005ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ed0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d029      	beq.n	8005f2c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d012      	beq.n	8005f06 <osMessageQueueNew+0x82>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	2b4f      	cmp	r3, #79	; 0x4f
 8005ee6:	d90e      	bls.n	8005f06 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	695a      	ldr	r2, [r3, #20]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	68b9      	ldr	r1, [r7, #8]
 8005ef8:	fb01 f303 	mul.w	r3, r1, r3
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d302      	bcc.n	8005f06 <osMessageQueueNew+0x82>
        mem = 1;
 8005f00:	2301      	movs	r3, #1
 8005f02:	623b      	str	r3, [r7, #32]
 8005f04:	e014      	b.n	8005f30 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d110      	bne.n	8005f30 <osMessageQueueNew+0xac>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10c      	bne.n	8005f30 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d108      	bne.n	8005f30 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d104      	bne.n	8005f30 <osMessageQueueNew+0xac>
          mem = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	623b      	str	r3, [r7, #32]
 8005f2a:	e001      	b.n	8005f30 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d10b      	bne.n	8005f4e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	2100      	movs	r1, #0
 8005f40:	9100      	str	r1, [sp, #0]
 8005f42:	68b9      	ldr	r1, [r7, #8]
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 fa8b 	bl	8006460 <xQueueGenericCreateStatic>
 8005f4a:	6278      	str	r0, [r7, #36]	; 0x24
 8005f4c:	e008      	b.n	8005f60 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d105      	bne.n	8005f60 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005f54:	2200      	movs	r2, #0
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 faf8 	bl	800654e <xQueueGenericCreate>
 8005f5e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00c      	beq.n	8005f80 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	61fb      	str	r3, [r7, #28]
 8005f72:	e001      	b.n	8005f78 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005f74:	2300      	movs	r3, #0
 8005f76:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005f78:	69f9      	ldr	r1, [r7, #28]
 8005f7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f7c:	f000 ff88 	bl	8006e90 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3728      	adds	r7, #40	; 0x28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20000228 	.word	0x20000228

08005f90 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08a      	sub	sp, #40	; 0x28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	603b      	str	r3, [r7, #0]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fa8:	f3ef 8305 	mrs	r3, IPSR
 8005fac:	61fb      	str	r3, [r7, #28]
  return(result);
 8005fae:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10f      	bne.n	8005fd4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8005fb8:	61bb      	str	r3, [r7, #24]
  return(result);
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d109      	bne.n	8005fd4 <osMessageQueuePut+0x44>
 8005fc0:	4b2b      	ldr	r3, [pc, #172]	; (8006070 <osMessageQueuePut+0xe0>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d12e      	bne.n	8006026 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fc8:	f3ef 8311 	mrs	r3, BASEPRI
 8005fcc:	617b      	str	r3, [r7, #20]
  return(result);
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d028      	beq.n	8006026 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d005      	beq.n	8005fe6 <osMessageQueuePut+0x56>
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <osMessageQueuePut+0x56>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005fe6:	f06f 0303 	mvn.w	r3, #3
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fec:	e039      	b.n	8006062 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005ff2:	f107 0210 	add.w	r2, r7, #16
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	68b9      	ldr	r1, [r7, #8]
 8005ffa:	6a38      	ldr	r0, [r7, #32]
 8005ffc:	f000 fc06 	bl	800680c <xQueueGenericSendFromISR>
 8006000:	4603      	mov	r3, r0
 8006002:	2b01      	cmp	r3, #1
 8006004:	d003      	beq.n	800600e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006006:	f06f 0302 	mvn.w	r3, #2
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800600c:	e029      	b.n	8006062 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d026      	beq.n	8006062 <osMessageQueuePut+0xd2>
 8006014:	4b17      	ldr	r3, [pc, #92]	; (8006074 <osMessageQueuePut+0xe4>)
 8006016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006024:	e01d      	b.n	8006062 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <osMessageQueuePut+0xa2>
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d103      	bne.n	800603a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006032:	f06f 0303 	mvn.w	r3, #3
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
 8006038:	e014      	b.n	8006064 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800603a:	2300      	movs	r3, #0
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	6a38      	ldr	r0, [r7, #32]
 8006042:	f000 fae5 	bl	8006610 <xQueueGenericSend>
 8006046:	4603      	mov	r3, r0
 8006048:	2b01      	cmp	r3, #1
 800604a:	d00b      	beq.n	8006064 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006052:	f06f 0301 	mvn.w	r3, #1
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
 8006058:	e004      	b.n	8006064 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800605a:	f06f 0302 	mvn.w	r3, #2
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
 8006060:	e000      	b.n	8006064 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006062:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006066:	4618      	mov	r0, r3
 8006068:	3728      	adds	r7, #40	; 0x28
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20000228 	.word	0x20000228
 8006074:	e000ed04 	.word	0xe000ed04

08006078 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006078:	b580      	push	{r7, lr}
 800607a:	b08a      	sub	sp, #40	; 0x28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800608a:	2300      	movs	r3, #0
 800608c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800608e:	f3ef 8305 	mrs	r3, IPSR
 8006092:	61fb      	str	r3, [r7, #28]
  return(result);
 8006094:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10f      	bne.n	80060ba <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800609a:	f3ef 8310 	mrs	r3, PRIMASK
 800609e:	61bb      	str	r3, [r7, #24]
  return(result);
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d109      	bne.n	80060ba <osMessageQueueGet+0x42>
 80060a6:	4b2b      	ldr	r3, [pc, #172]	; (8006154 <osMessageQueueGet+0xdc>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d12e      	bne.n	800610c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060ae:	f3ef 8311 	mrs	r3, BASEPRI
 80060b2:	617b      	str	r3, [r7, #20]
  return(result);
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d028      	beq.n	800610c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <osMessageQueueGet+0x54>
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <osMessageQueueGet+0x54>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80060cc:	f06f 0303 	mvn.w	r3, #3
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060d2:	e038      	b.n	8006146 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80060d4:	2300      	movs	r3, #0
 80060d6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80060d8:	f107 0310 	add.w	r3, r7, #16
 80060dc:	461a      	mov	r2, r3
 80060de:	68b9      	ldr	r1, [r7, #8]
 80060e0:	6a38      	ldr	r0, [r7, #32]
 80060e2:	f000 fd0b 	bl	8006afc <xQueueReceiveFromISR>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d003      	beq.n	80060f4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80060ec:	f06f 0302 	mvn.w	r3, #2
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060f2:	e028      	b.n	8006146 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d025      	beq.n	8006146 <osMessageQueueGet+0xce>
 80060fa:	4b17      	ldr	r3, [pc, #92]	; (8006158 <osMessageQueueGet+0xe0>)
 80060fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800610a:	e01c      	b.n	8006146 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <osMessageQueueGet+0xa0>
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d103      	bne.n	8006120 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006118:	f06f 0303 	mvn.w	r3, #3
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
 800611e:	e013      	b.n	8006148 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	68b9      	ldr	r1, [r7, #8]
 8006124:	6a38      	ldr	r0, [r7, #32]
 8006126:	f000 fc09 	bl	800693c <xQueueReceive>
 800612a:	4603      	mov	r3, r0
 800612c:	2b01      	cmp	r3, #1
 800612e:	d00b      	beq.n	8006148 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006136:	f06f 0301 	mvn.w	r3, #1
 800613a:	627b      	str	r3, [r7, #36]	; 0x24
 800613c:	e004      	b.n	8006148 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800613e:	f06f 0302 	mvn.w	r3, #2
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
 8006144:	e000      	b.n	8006148 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006146:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800614a:	4618      	mov	r0, r3
 800614c:	3728      	adds	r7, #40	; 0x28
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20000228 	.word	0x20000228
 8006158:	e000ed04 	.word	0xe000ed04

0800615c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b088      	sub	sp, #32
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d102      	bne.n	8006174 <osMessageQueueGetCount+0x18>
    count = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	61fb      	str	r3, [r7, #28]
 8006172:	e01e      	b.n	80061b2 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006174:	f3ef 8305 	mrs	r3, IPSR
 8006178:	617b      	str	r3, [r7, #20]
  return(result);
 800617a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10f      	bne.n	80061a0 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006180:	f3ef 8310 	mrs	r3, PRIMASK
 8006184:	613b      	str	r3, [r7, #16]
  return(result);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d109      	bne.n	80061a0 <osMessageQueueGetCount+0x44>
 800618c:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <osMessageQueueGetCount+0x60>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b02      	cmp	r3, #2
 8006192:	d10a      	bne.n	80061aa <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006194:	f3ef 8311 	mrs	r3, BASEPRI
 8006198:	60fb      	str	r3, [r7, #12]
  return(result);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d004      	beq.n	80061aa <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80061a0:	69b8      	ldr	r0, [r7, #24]
 80061a2:	f000 fd49 	bl	8006c38 <uxQueueMessagesWaitingFromISR>
 80061a6:	61f8      	str	r0, [r7, #28]
 80061a8:	e003      	b.n	80061b2 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80061aa:	69b8      	ldr	r0, [r7, #24]
 80061ac:	f000 fd26 	bl	8006bfc <uxQueueMessagesWaiting>
 80061b0:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80061b2:	69fb      	ldr	r3, [r7, #28]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3720      	adds	r7, #32
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	20000228 	.word	0x20000228

080061c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4a07      	ldr	r2, [pc, #28]	; (80061ec <vApplicationGetIdleTaskMemory+0x2c>)
 80061d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	4a06      	ldr	r2, [pc, #24]	; (80061f0 <vApplicationGetIdleTaskMemory+0x30>)
 80061d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2280      	movs	r2, #128	; 0x80
 80061dc:	601a      	str	r2, [r3, #0]
}
 80061de:	bf00      	nop
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	2000022c 	.word	0x2000022c
 80061f0:	200002d4 	.word	0x200002d4

080061f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4a07      	ldr	r2, [pc, #28]	; (8006220 <vApplicationGetTimerTaskMemory+0x2c>)
 8006204:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4a06      	ldr	r2, [pc, #24]	; (8006224 <vApplicationGetTimerTaskMemory+0x30>)
 800620a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006212:	601a      	str	r2, [r3, #0]
}
 8006214:	bf00      	nop
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	200004d4 	.word	0x200004d4
 8006224:	2000057c 	.word	0x2000057c

08006228 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f103 0208 	add.w	r2, r3, #8
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006240:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f103 0208 	add.w	r2, r3, #8
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f103 0208 	add.w	r2, r3, #8
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	601a      	str	r2, [r3, #0]
}
 80062be:	bf00      	nop
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062ca:	b480      	push	{r7}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062e0:	d103      	bne.n	80062ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	e00c      	b.n	8006304 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3308      	adds	r3, #8
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	e002      	b.n	80062f8 <vListInsert+0x2e>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	429a      	cmp	r2, r3
 8006302:	d2f6      	bcs.n	80062f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	601a      	str	r2, [r3, #0]
}
 8006330:	bf00      	nop
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6892      	ldr	r2, [r2, #8]
 8006352:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6852      	ldr	r2, [r2, #4]
 800635c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	429a      	cmp	r2, r3
 8006366:	d103      	bne.n	8006370 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	1e5a      	subs	r2, r3, #1
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10a      	bne.n	80063ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80063b6:	bf00      	nop
 80063b8:	e7fe      	b.n	80063b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80063ba:	f002 fa03 	bl	80087c4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c6:	68f9      	ldr	r1, [r7, #12]
 80063c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063ca:	fb01 f303 	mul.w	r3, r1, r3
 80063ce:	441a      	add	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ea:	3b01      	subs	r3, #1
 80063ec:	68f9      	ldr	r1, [r7, #12]
 80063ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063f0:	fb01 f303 	mul.w	r3, r1, r3
 80063f4:	441a      	add	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	22ff      	movs	r2, #255	; 0xff
 80063fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	22ff      	movs	r2, #255	; 0xff
 8006406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d114      	bne.n	800643a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01a      	beq.n	800644e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3310      	adds	r3, #16
 800641c:	4618      	mov	r0, r3
 800641e:	f001 fa17 	bl	8007850 <xTaskRemoveFromEventList>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d012      	beq.n	800644e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006428:	4b0c      	ldr	r3, [pc, #48]	; (800645c <xQueueGenericReset+0xcc>)
 800642a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	e009      	b.n	800644e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3310      	adds	r3, #16
 800643e:	4618      	mov	r0, r3
 8006440:	f7ff fef2 	bl	8006228 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3324      	adds	r3, #36	; 0x24
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff feed 	bl	8006228 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800644e:	f002 f9e9 	bl	8008824 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006452:	2301      	movs	r3, #1
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	e000ed04 	.word	0xe000ed04

08006460 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08e      	sub	sp, #56	; 0x38
 8006464:	af02      	add	r7, sp, #8
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10a      	bne.n	800648a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006486:	bf00      	nop
 8006488:	e7fe      	b.n	8006488 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <xQueueGenericCreateStatic+0x52>
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <xQueueGenericCreateStatic+0x56>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <xQueueGenericCreateStatic+0x58>
 80064b6:	2300      	movs	r3, #0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	623b      	str	r3, [r7, #32]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d102      	bne.n	80064de <xQueueGenericCreateStatic+0x7e>
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <xQueueGenericCreateStatic+0x82>
 80064de:	2301      	movs	r3, #1
 80064e0:	e000      	b.n	80064e4 <xQueueGenericCreateStatic+0x84>
 80064e2:	2300      	movs	r3, #0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10a      	bne.n	80064fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	61fb      	str	r3, [r7, #28]
}
 80064fa:	bf00      	nop
 80064fc:	e7fe      	b.n	80064fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80064fe:	2350      	movs	r3, #80	; 0x50
 8006500:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b50      	cmp	r3, #80	; 0x50
 8006506:	d00a      	beq.n	800651e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	61bb      	str	r3, [r7, #24]
}
 800651a:	bf00      	nop
 800651c:	e7fe      	b.n	800651c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00d      	beq.n	8006544 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006530:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	4613      	mov	r3, r2
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	68b9      	ldr	r1, [r7, #8]
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 f843 	bl	80065ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006546:	4618      	mov	r0, r3
 8006548:	3730      	adds	r7, #48	; 0x30
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800654e:	b580      	push	{r7, lr}
 8006550:	b08a      	sub	sp, #40	; 0x28
 8006552:	af02      	add	r7, sp, #8
 8006554:	60f8      	str	r0, [r7, #12]
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	4613      	mov	r3, r2
 800655a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10a      	bne.n	8006578 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	613b      	str	r3, [r7, #16]
}
 8006574:	bf00      	nop
 8006576:	e7fe      	b.n	8006576 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d102      	bne.n	8006584 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800657e:	2300      	movs	r3, #0
 8006580:	61fb      	str	r3, [r7, #28]
 8006582:	e004      	b.n	800658e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	fb02 f303 	mul.w	r3, r2, r3
 800658c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	3350      	adds	r3, #80	; 0x50
 8006592:	4618      	mov	r0, r3
 8006594:	f002 fa38 	bl	8008a08 <pvPortMalloc>
 8006598:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00f      	beq.n	80065c0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	3350      	adds	r3, #80	; 0x50
 80065a4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065ae:	79fa      	ldrb	r2, [r7, #7]
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	4613      	mov	r3, r2
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f805 	bl	80065ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80065c0:	69bb      	ldr	r3, [r7, #24]
	}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3720      	adds	r7, #32
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	607a      	str	r2, [r7, #4]
 80065d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d103      	bne.n	80065e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	e002      	b.n	80065ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065f8:	2101      	movs	r1, #1
 80065fa:	69b8      	ldr	r0, [r7, #24]
 80065fc:	f7ff fec8 	bl	8006390 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	78fa      	ldrb	r2, [r7, #3]
 8006604:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006608:	bf00      	nop
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08e      	sub	sp, #56	; 0x38
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800661e:	2300      	movs	r3, #0
 8006620:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <xQueueGenericSend+0x32>
	__asm volatile
 800662c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800663e:	bf00      	nop
 8006640:	e7fe      	b.n	8006640 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d103      	bne.n	8006650 <xQueueGenericSend+0x40>
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <xQueueGenericSend+0x44>
 8006650:	2301      	movs	r3, #1
 8006652:	e000      	b.n	8006656 <xQueueGenericSend+0x46>
 8006654:	2300      	movs	r3, #0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10a      	bne.n	8006670 <xQueueGenericSend+0x60>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800666c:	bf00      	nop
 800666e:	e7fe      	b.n	800666e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d103      	bne.n	800667e <xQueueGenericSend+0x6e>
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667a:	2b01      	cmp	r3, #1
 800667c:	d101      	bne.n	8006682 <xQueueGenericSend+0x72>
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <xQueueGenericSend+0x74>
 8006682:	2300      	movs	r3, #0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10a      	bne.n	800669e <xQueueGenericSend+0x8e>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	623b      	str	r3, [r7, #32]
}
 800669a:	bf00      	nop
 800669c:	e7fe      	b.n	800669c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800669e:	f001 fa9f 	bl	8007be0 <xTaskGetSchedulerState>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d102      	bne.n	80066ae <xQueueGenericSend+0x9e>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <xQueueGenericSend+0xa2>
 80066ae:	2301      	movs	r3, #1
 80066b0:	e000      	b.n	80066b4 <xQueueGenericSend+0xa4>
 80066b2:	2300      	movs	r3, #0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10a      	bne.n	80066ce <xQueueGenericSend+0xbe>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	61fb      	str	r3, [r7, #28]
}
 80066ca:	bf00      	nop
 80066cc:	e7fe      	b.n	80066cc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066ce:	f002 f879 	bl	80087c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066da:	429a      	cmp	r2, r3
 80066dc:	d302      	bcc.n	80066e4 <xQueueGenericSend+0xd4>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d129      	bne.n	8006738 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	68b9      	ldr	r1, [r7, #8]
 80066e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066ea:	f000 fac1 	bl	8006c70 <prvCopyDataToQueue>
 80066ee:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d010      	beq.n	800671a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	3324      	adds	r3, #36	; 0x24
 80066fc:	4618      	mov	r0, r3
 80066fe:	f001 f8a7 	bl	8007850 <xTaskRemoveFromEventList>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d013      	beq.n	8006730 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006708:	4b3f      	ldr	r3, [pc, #252]	; (8006808 <xQueueGenericSend+0x1f8>)
 800670a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	e00a      	b.n	8006730 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d007      	beq.n	8006730 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006720:	4b39      	ldr	r3, [pc, #228]	; (8006808 <xQueueGenericSend+0x1f8>)
 8006722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006730:	f002 f878 	bl	8008824 <vPortExitCritical>
				return pdPASS;
 8006734:	2301      	movs	r3, #1
 8006736:	e063      	b.n	8006800 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d103      	bne.n	8006746 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800673e:	f002 f871 	bl	8008824 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006742:	2300      	movs	r3, #0
 8006744:	e05c      	b.n	8006800 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006748:	2b00      	cmp	r3, #0
 800674a:	d106      	bne.n	800675a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800674c:	f107 0314 	add.w	r3, r7, #20
 8006750:	4618      	mov	r0, r3
 8006752:	f001 f8e1 	bl	8007918 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006756:	2301      	movs	r3, #1
 8006758:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800675a:	f002 f863 	bl	8008824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800675e:	f000 fe49 	bl	80073f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006762:	f002 f82f 	bl	80087c4 <vPortEnterCritical>
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800676c:	b25b      	sxtb	r3, r3
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006772:	d103      	bne.n	800677c <xQueueGenericSend+0x16c>
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006782:	b25b      	sxtb	r3, r3
 8006784:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006788:	d103      	bne.n	8006792 <xQueueGenericSend+0x182>
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006792:	f002 f847 	bl	8008824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006796:	1d3a      	adds	r2, r7, #4
 8006798:	f107 0314 	add.w	r3, r7, #20
 800679c:	4611      	mov	r1, r2
 800679e:	4618      	mov	r0, r3
 80067a0:	f001 f8d0 	bl	8007944 <xTaskCheckForTimeOut>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d124      	bne.n	80067f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80067aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067ac:	f000 fb58 	bl	8006e60 <prvIsQueueFull>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d018      	beq.n	80067e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	3310      	adds	r3, #16
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	4611      	mov	r1, r2
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fff6 	bl	80077b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80067c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067c6:	f000 fae3 	bl	8006d90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80067ca:	f000 fe21 	bl	8007410 <xTaskResumeAll>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f47f af7c 	bne.w	80066ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80067d6:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <xQueueGenericSend+0x1f8>)
 80067d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	e772      	b.n	80066ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80067e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067ea:	f000 fad1 	bl	8006d90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067ee:	f000 fe0f 	bl	8007410 <xTaskResumeAll>
 80067f2:	e76c      	b.n	80066ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80067f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067f6:	f000 facb 	bl	8006d90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067fa:	f000 fe09 	bl	8007410 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80067fe:	2300      	movs	r3, #0
		}
	}
}
 8006800:	4618      	mov	r0, r3
 8006802:	3738      	adds	r7, #56	; 0x38
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	e000ed04 	.word	0xe000ed04

0800680c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08e      	sub	sp, #56	; 0x38
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10a      	bne.n	800683a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006836:	bf00      	nop
 8006838:	e7fe      	b.n	8006838 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d103      	bne.n	8006848 <xQueueGenericSendFromISR+0x3c>
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <xQueueGenericSendFromISR+0x40>
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <xQueueGenericSendFromISR+0x42>
 800684c:	2300      	movs	r3, #0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10a      	bne.n	8006868 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	623b      	str	r3, [r7, #32]
}
 8006864:	bf00      	nop
 8006866:	e7fe      	b.n	8006866 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	2b02      	cmp	r3, #2
 800686c:	d103      	bne.n	8006876 <xQueueGenericSendFromISR+0x6a>
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006872:	2b01      	cmp	r3, #1
 8006874:	d101      	bne.n	800687a <xQueueGenericSendFromISR+0x6e>
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <xQueueGenericSendFromISR+0x70>
 800687a:	2300      	movs	r3, #0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	61fb      	str	r3, [r7, #28]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006896:	f002 f877 	bl	8008988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800689a:	f3ef 8211 	mrs	r2, BASEPRI
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	61ba      	str	r2, [r7, #24]
 80068b0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80068b2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068be:	429a      	cmp	r2, r3
 80068c0:	d302      	bcc.n	80068c8 <xQueueGenericSendFromISR+0xbc>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d12c      	bne.n	8006922 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068d8:	f000 f9ca 	bl	8006c70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068dc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80068e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068e4:	d112      	bne.n	800690c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d016      	beq.n	800691c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	3324      	adds	r3, #36	; 0x24
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 ffac 	bl	8007850 <xTaskRemoveFromEventList>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00e      	beq.n	800691c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00b      	beq.n	800691c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	e007      	b.n	800691c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800690c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006910:	3301      	adds	r3, #1
 8006912:	b2db      	uxtb	r3, r3
 8006914:	b25a      	sxtb	r2, r3
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800691c:	2301      	movs	r3, #1
 800691e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006920:	e001      	b.n	8006926 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006922:	2300      	movs	r3, #0
 8006924:	637b      	str	r3, [r7, #52]	; 0x34
 8006926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006928:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006930:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006934:	4618      	mov	r0, r3
 8006936:	3738      	adds	r7, #56	; 0x38
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08c      	sub	sp, #48	; 0x30
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006948:	2300      	movs	r3, #0
 800694a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10a      	bne.n	800696c <xQueueReceive+0x30>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	623b      	str	r3, [r7, #32]
}
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d103      	bne.n	800697a <xQueueReceive+0x3e>
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <xQueueReceive+0x42>
 800697a:	2301      	movs	r3, #1
 800697c:	e000      	b.n	8006980 <xQueueReceive+0x44>
 800697e:	2300      	movs	r3, #0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <xQueueReceive+0x5e>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	61fb      	str	r3, [r7, #28]
}
 8006996:	bf00      	nop
 8006998:	e7fe      	b.n	8006998 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800699a:	f001 f921 	bl	8007be0 <xTaskGetSchedulerState>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d102      	bne.n	80069aa <xQueueReceive+0x6e>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <xQueueReceive+0x72>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e000      	b.n	80069b0 <xQueueReceive+0x74>
 80069ae:	2300      	movs	r3, #0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <xQueueReceive+0x8e>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	61bb      	str	r3, [r7, #24]
}
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80069ca:	f001 fefb 	bl	80087c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d01f      	beq.n	8006a1a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069da:	68b9      	ldr	r1, [r7, #8]
 80069dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069de:	f000 f9b1 	bl	8006d44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	1e5a      	subs	r2, r3, #1
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00f      	beq.n	8006a12 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	3310      	adds	r3, #16
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 ff2a 	bl	8007850 <xTaskRemoveFromEventList>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d007      	beq.n	8006a12 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a02:	4b3d      	ldr	r3, [pc, #244]	; (8006af8 <xQueueReceive+0x1bc>)
 8006a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a12:	f001 ff07 	bl	8008824 <vPortExitCritical>
				return pdPASS;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e069      	b.n	8006aee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d103      	bne.n	8006a28 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a20:	f001 ff00 	bl	8008824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a24:	2300      	movs	r3, #0
 8006a26:	e062      	b.n	8006aee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d106      	bne.n	8006a3c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a2e:	f107 0310 	add.w	r3, r7, #16
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 ff70 	bl	8007918 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a3c:	f001 fef2 	bl	8008824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a40:	f000 fcd8 	bl	80073f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a44:	f001 febe 	bl	80087c4 <vPortEnterCritical>
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a4e:	b25b      	sxtb	r3, r3
 8006a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a54:	d103      	bne.n	8006a5e <xQueueReceive+0x122>
 8006a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a64:	b25b      	sxtb	r3, r3
 8006a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a6a:	d103      	bne.n	8006a74 <xQueueReceive+0x138>
 8006a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a74:	f001 fed6 	bl	8008824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a78:	1d3a      	adds	r2, r7, #4
 8006a7a:	f107 0310 	add.w	r3, r7, #16
 8006a7e:	4611      	mov	r1, r2
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 ff5f 	bl	8007944 <xTaskCheckForTimeOut>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d123      	bne.n	8006ad4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a8e:	f000 f9d1 	bl	8006e34 <prvIsQueueEmpty>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d017      	beq.n	8006ac8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	3324      	adds	r3, #36	; 0x24
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 fe85 	bl	80077b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aa8:	f000 f972 	bl	8006d90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006aac:	f000 fcb0 	bl	8007410 <xTaskResumeAll>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d189      	bne.n	80069ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006ab6:	4b10      	ldr	r3, [pc, #64]	; (8006af8 <xQueueReceive+0x1bc>)
 8006ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	e780      	b.n	80069ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aca:	f000 f961 	bl	8006d90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ace:	f000 fc9f 	bl	8007410 <xTaskResumeAll>
 8006ad2:	e77a      	b.n	80069ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ad6:	f000 f95b 	bl	8006d90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ada:	f000 fc99 	bl	8007410 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ae0:	f000 f9a8 	bl	8006e34 <prvIsQueueEmpty>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f43f af6f 	beq.w	80069ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006aec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3730      	adds	r7, #48	; 0x30
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	e000ed04 	.word	0xe000ed04

08006afc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08e      	sub	sp, #56	; 0x38
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10a      	bne.n	8006b28 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	623b      	str	r3, [r7, #32]
}
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d103      	bne.n	8006b36 <xQueueReceiveFromISR+0x3a>
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <xQueueReceiveFromISR+0x3e>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <xQueueReceiveFromISR+0x40>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10a      	bne.n	8006b56 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	61fb      	str	r3, [r7, #28]
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b56:	f001 ff17 	bl	8008988 <vPortValidateInterruptPriority>
	__asm volatile
 8006b5a:	f3ef 8211 	mrs	r2, BASEPRI
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	61ba      	str	r2, [r7, #24]
 8006b70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006b72:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d02f      	beq.n	8006be2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b90:	f000 f8d8 	bl	8006d44 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	1e5a      	subs	r2, r3, #1
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006b9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ba4:	d112      	bne.n	8006bcc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d016      	beq.n	8006bdc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	3310      	adds	r3, #16
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 fe4c 	bl	8007850 <xTaskRemoveFromEventList>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00e      	beq.n	8006bdc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00b      	beq.n	8006bdc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]
 8006bca:	e007      	b.n	8006bdc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	b25a      	sxtb	r2, r3
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	637b      	str	r3, [r7, #52]	; 0x34
 8006be0:	e001      	b.n	8006be6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006be2:	2300      	movs	r3, #0
 8006be4:	637b      	str	r3, [r7, #52]	; 0x34
 8006be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f383 8811 	msr	BASEPRI, r3
}
 8006bf0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3738      	adds	r7, #56	; 0x38
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10a      	bne.n	8006c20 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	60bb      	str	r3, [r7, #8]
}
 8006c1c:	bf00      	nop
 8006c1e:	e7fe      	b.n	8006c1e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006c20:	f001 fdd0 	bl	80087c4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c28:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006c2a:	f001 fdfb 	bl	8008824 <vPortExitCritical>

	return uxReturn;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10a      	bne.n	8006c5c <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	60bb      	str	r3, [r7, #8]
}
 8006c58:	bf00      	nop
 8006c5a:	e7fe      	b.n	8006c5a <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c60:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8006c62:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10d      	bne.n	8006caa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d14d      	bne.n	8006d32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 ffbe 	bl	8007c1c <xTaskPriorityDisinherit>
 8006ca0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	605a      	str	r2, [r3, #4]
 8006ca8:	e043      	b.n	8006d32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d119      	bne.n	8006ce4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6898      	ldr	r0, [r3, #8]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb8:	461a      	mov	r2, r3
 8006cba:	68b9      	ldr	r1, [r7, #8]
 8006cbc:	f002 f92c 	bl	8008f18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc8:	441a      	add	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d32b      	bcc.n	8006d32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	609a      	str	r2, [r3, #8]
 8006ce2:	e026      	b.n	8006d32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	68d8      	ldr	r0, [r3, #12]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cec:	461a      	mov	r2, r3
 8006cee:	68b9      	ldr	r1, [r7, #8]
 8006cf0:	f002 f912 	bl	8008f18 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	68da      	ldr	r2, [r3, #12]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfc:	425b      	negs	r3, r3
 8006cfe:	441a      	add	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	68da      	ldr	r2, [r3, #12]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d207      	bcs.n	8006d20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d18:	425b      	negs	r3, r3
 8006d1a:	441a      	add	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d105      	bne.n	8006d32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d3a:	697b      	ldr	r3, [r7, #20]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d018      	beq.n	8006d88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68da      	ldr	r2, [r3, #12]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	441a      	add	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d303      	bcc.n	8006d78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68d9      	ldr	r1, [r3, #12]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d80:	461a      	mov	r2, r3
 8006d82:	6838      	ldr	r0, [r7, #0]
 8006d84:	f002 f8c8 	bl	8008f18 <memcpy>
	}
}
 8006d88:	bf00      	nop
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d98:	f001 fd14 	bl	80087c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006da2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006da4:	e011      	b.n	8006dca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d012      	beq.n	8006dd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3324      	adds	r3, #36	; 0x24
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 fd4c 	bl	8007850 <xTaskRemoveFromEventList>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006dbe:	f000 fe23 	bl	8007a08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	dce9      	bgt.n	8006da6 <prvUnlockQueue+0x16>
 8006dd2:	e000      	b.n	8006dd6 <prvUnlockQueue+0x46>
					break;
 8006dd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	22ff      	movs	r2, #255	; 0xff
 8006dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006dde:	f001 fd21 	bl	8008824 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006de2:	f001 fcef 	bl	80087c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dee:	e011      	b.n	8006e14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d012      	beq.n	8006e1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3310      	adds	r3, #16
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 fd27 	bl	8007850 <xTaskRemoveFromEventList>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d001      	beq.n	8006e0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e08:	f000 fdfe 	bl	8007a08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	dce9      	bgt.n	8006df0 <prvUnlockQueue+0x60>
 8006e1c:	e000      	b.n	8006e20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	22ff      	movs	r2, #255	; 0xff
 8006e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e28:	f001 fcfc 	bl	8008824 <vPortExitCritical>
}
 8006e2c:	bf00      	nop
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e3c:	f001 fcc2 	bl	80087c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d102      	bne.n	8006e4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	e001      	b.n	8006e52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e52:	f001 fce7 	bl	8008824 <vPortExitCritical>

	return xReturn;
 8006e56:	68fb      	ldr	r3, [r7, #12]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e68:	f001 fcac 	bl	80087c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d102      	bne.n	8006e7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	e001      	b.n	8006e82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e82:	f001 fccf 	bl	8008824 <vPortExitCritical>

	return xReturn;
 8006e86:	68fb      	ldr	r3, [r7, #12]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	e014      	b.n	8006eca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ea0:	4a0f      	ldr	r2, [pc, #60]	; (8006ee0 <vQueueAddToRegistry+0x50>)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10b      	bne.n	8006ec4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006eac:	490c      	ldr	r1, [pc, #48]	; (8006ee0 <vQueueAddToRegistry+0x50>)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006eb6:	4a0a      	ldr	r2, [pc, #40]	; (8006ee0 <vQueueAddToRegistry+0x50>)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	4413      	add	r3, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ec2:	e006      	b.n	8006ed2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2b07      	cmp	r3, #7
 8006ece:	d9e7      	bls.n	8006ea0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	2000097c 	.word	0x2000097c

08006ee4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ef4:	f001 fc66 	bl	80087c4 <vPortEnterCritical>
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006efe:	b25b      	sxtb	r3, r3
 8006f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f04:	d103      	bne.n	8006f0e <vQueueWaitForMessageRestricted+0x2a>
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f14:	b25b      	sxtb	r3, r3
 8006f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f1a:	d103      	bne.n	8006f24 <vQueueWaitForMessageRestricted+0x40>
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f24:	f001 fc7e 	bl	8008824 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d106      	bne.n	8006f3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	3324      	adds	r3, #36	; 0x24
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	68b9      	ldr	r1, [r7, #8]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 fc5d 	bl	80077f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f3e:	6978      	ldr	r0, [r7, #20]
 8006f40:	f7ff ff26 	bl	8006d90 <prvUnlockQueue>
	}
 8006f44:	bf00      	nop
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b08e      	sub	sp, #56	; 0x38
 8006f50:	af04      	add	r7, sp, #16
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
 8006f58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10a      	bne.n	8006f76 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	623b      	str	r3, [r7, #32]
}
 8006f72:	bf00      	nop
 8006f74:	e7fe      	b.n	8006f74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10a      	bne.n	8006f92 <xTaskCreateStatic+0x46>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	61fb      	str	r3, [r7, #28]
}
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f92:	23a8      	movs	r3, #168	; 0xa8
 8006f94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	2ba8      	cmp	r3, #168	; 0xa8
 8006f9a:	d00a      	beq.n	8006fb2 <xTaskCreateStatic+0x66>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	61bb      	str	r3, [r7, #24]
}
 8006fae:	bf00      	nop
 8006fb0:	e7fe      	b.n	8006fb0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d01e      	beq.n	8006ff6 <xTaskCreateStatic+0xaa>
 8006fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d01b      	beq.n	8006ff6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fc6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	9303      	str	r3, [sp, #12]
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	9302      	str	r3, [sp, #8]
 8006fd8:	f107 0314 	add.w	r3, r7, #20
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	68b9      	ldr	r1, [r7, #8]
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 f851 	bl	8007090 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ff0:	f000 f8ec 	bl	80071cc <prvAddNewTaskToReadyList>
 8006ff4:	e001      	b.n	8006ffa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ffa:	697b      	ldr	r3, [r7, #20]
	}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3728      	adds	r7, #40	; 0x28
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007004:	b580      	push	{r7, lr}
 8007006:	b08c      	sub	sp, #48	; 0x30
 8007008:	af04      	add	r7, sp, #16
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	603b      	str	r3, [r7, #0]
 8007010:	4613      	mov	r3, r2
 8007012:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007014:	88fb      	ldrh	r3, [r7, #6]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4618      	mov	r0, r3
 800701a:	f001 fcf5 	bl	8008a08 <pvPortMalloc>
 800701e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00e      	beq.n	8007044 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007026:	20a8      	movs	r0, #168	; 0xa8
 8007028:	f001 fcee 	bl	8008a08 <pvPortMalloc>
 800702c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	631a      	str	r2, [r3, #48]	; 0x30
 800703a:	e005      	b.n	8007048 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800703c:	6978      	ldr	r0, [r7, #20]
 800703e:	f001 fda7 	bl	8008b90 <vPortFree>
 8007042:	e001      	b.n	8007048 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007044:	2300      	movs	r3, #0
 8007046:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d017      	beq.n	800707e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007056:	88fa      	ldrh	r2, [r7, #6]
 8007058:	2300      	movs	r3, #0
 800705a:	9303      	str	r3, [sp, #12]
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	9302      	str	r3, [sp, #8]
 8007060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007062:	9301      	str	r3, [sp, #4]
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	68b9      	ldr	r1, [r7, #8]
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 f80f 	bl	8007090 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007072:	69f8      	ldr	r0, [r7, #28]
 8007074:	f000 f8aa 	bl	80071cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007078:	2301      	movs	r3, #1
 800707a:	61bb      	str	r3, [r7, #24]
 800707c:	e002      	b.n	8007084 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800707e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007082:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007084:	69bb      	ldr	r3, [r7, #24]
	}
 8007086:	4618      	mov	r0, r3
 8007088:	3720      	adds	r7, #32
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b088      	sub	sp, #32
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	461a      	mov	r2, r3
 80070a8:	21a5      	movs	r1, #165	; 0xa5
 80070aa:	f001 feab 	bl	8008e04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80070ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80070b8:	3b01      	subs	r3, #1
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	f023 0307 	bic.w	r3, r3, #7
 80070c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	f003 0307 	and.w	r3, r3, #7
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	617b      	str	r3, [r7, #20]
}
 80070e4:	bf00      	nop
 80070e6:	e7fe      	b.n	80070e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070e8:	2300      	movs	r3, #0
 80070ea:	61fb      	str	r3, [r7, #28]
 80070ec:	e012      	b.n	8007114 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	4413      	add	r3, r2
 80070f4:	7819      	ldrb	r1, [r3, #0]
 80070f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	4413      	add	r3, r2
 80070fc:	3334      	adds	r3, #52	; 0x34
 80070fe:	460a      	mov	r2, r1
 8007100:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	4413      	add	r3, r2
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d006      	beq.n	800711c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	3301      	adds	r3, #1
 8007112:	61fb      	str	r3, [r7, #28]
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	2b0f      	cmp	r3, #15
 8007118:	d9e9      	bls.n	80070ee <prvInitialiseNewTask+0x5e>
 800711a:	e000      	b.n	800711e <prvInitialiseNewTask+0x8e>
		{
			break;
 800711c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007128:	2b37      	cmp	r3, #55	; 0x37
 800712a:	d901      	bls.n	8007130 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800712c:	2337      	movs	r3, #55	; 0x37
 800712e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007134:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800713a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	2200      	movs	r2, #0
 8007140:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	3304      	adds	r3, #4
 8007146:	4618      	mov	r0, r3
 8007148:	f7ff f88e 	bl	8006268 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714e:	3318      	adds	r3, #24
 8007150:	4618      	mov	r0, r3
 8007152:	f7ff f889 	bl	8006268 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800715a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800716a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716e:	2200      	movs	r2, #0
 8007170:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	2200      	movs	r2, #0
 8007178:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	3354      	adds	r3, #84	; 0x54
 8007180:	224c      	movs	r2, #76	; 0x4c
 8007182:	2100      	movs	r1, #0
 8007184:	4618      	mov	r0, r3
 8007186:	f001 fe3d 	bl	8008e04 <memset>
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	4a0c      	ldr	r2, [pc, #48]	; (80071c0 <prvInitialiseNewTask+0x130>)
 800718e:	659a      	str	r2, [r3, #88]	; 0x58
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	4a0c      	ldr	r2, [pc, #48]	; (80071c4 <prvInitialiseNewTask+0x134>)
 8007194:	65da      	str	r2, [r3, #92]	; 0x5c
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	4a0b      	ldr	r2, [pc, #44]	; (80071c8 <prvInitialiseNewTask+0x138>)
 800719a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	68f9      	ldr	r1, [r7, #12]
 80071a0:	69b8      	ldr	r0, [r7, #24]
 80071a2:	f001 f9e5 	bl	8008570 <pxPortInitialiseStack>
 80071a6:	4602      	mov	r2, r0
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80071ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d002      	beq.n	80071b8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80071b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071b8:	bf00      	nop
 80071ba:	3720      	adds	r7, #32
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	20001c08 	.word	0x20001c08
 80071c4:	20001c70 	.word	0x20001c70
 80071c8:	20001cd8 	.word	0x20001cd8

080071cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80071d4:	f001 faf6 	bl	80087c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80071d8:	4b2d      	ldr	r3, [pc, #180]	; (8007290 <prvAddNewTaskToReadyList+0xc4>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3301      	adds	r3, #1
 80071de:	4a2c      	ldr	r2, [pc, #176]	; (8007290 <prvAddNewTaskToReadyList+0xc4>)
 80071e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80071e2:	4b2c      	ldr	r3, [pc, #176]	; (8007294 <prvAddNewTaskToReadyList+0xc8>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d109      	bne.n	80071fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071ea:	4a2a      	ldr	r2, [pc, #168]	; (8007294 <prvAddNewTaskToReadyList+0xc8>)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071f0:	4b27      	ldr	r3, [pc, #156]	; (8007290 <prvAddNewTaskToReadyList+0xc4>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d110      	bne.n	800721a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071f8:	f000 fc2a 	bl	8007a50 <prvInitialiseTaskLists>
 80071fc:	e00d      	b.n	800721a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071fe:	4b26      	ldr	r3, [pc, #152]	; (8007298 <prvAddNewTaskToReadyList+0xcc>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d109      	bne.n	800721a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007206:	4b23      	ldr	r3, [pc, #140]	; (8007294 <prvAddNewTaskToReadyList+0xc8>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007210:	429a      	cmp	r2, r3
 8007212:	d802      	bhi.n	800721a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007214:	4a1f      	ldr	r2, [pc, #124]	; (8007294 <prvAddNewTaskToReadyList+0xc8>)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800721a:	4b20      	ldr	r3, [pc, #128]	; (800729c <prvAddNewTaskToReadyList+0xd0>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3301      	adds	r3, #1
 8007220:	4a1e      	ldr	r2, [pc, #120]	; (800729c <prvAddNewTaskToReadyList+0xd0>)
 8007222:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007224:	4b1d      	ldr	r3, [pc, #116]	; (800729c <prvAddNewTaskToReadyList+0xd0>)
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007230:	4b1b      	ldr	r3, [pc, #108]	; (80072a0 <prvAddNewTaskToReadyList+0xd4>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d903      	bls.n	8007240 <prvAddNewTaskToReadyList+0x74>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723c:	4a18      	ldr	r2, [pc, #96]	; (80072a0 <prvAddNewTaskToReadyList+0xd4>)
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007244:	4613      	mov	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4a15      	ldr	r2, [pc, #84]	; (80072a4 <prvAddNewTaskToReadyList+0xd8>)
 800724e:	441a      	add	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3304      	adds	r3, #4
 8007254:	4619      	mov	r1, r3
 8007256:	4610      	mov	r0, r2
 8007258:	f7ff f813 	bl	8006282 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800725c:	f001 fae2 	bl	8008824 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007260:	4b0d      	ldr	r3, [pc, #52]	; (8007298 <prvAddNewTaskToReadyList+0xcc>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00e      	beq.n	8007286 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007268:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <prvAddNewTaskToReadyList+0xc8>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007272:	429a      	cmp	r2, r3
 8007274:	d207      	bcs.n	8007286 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007276:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <prvAddNewTaskToReadyList+0xdc>)
 8007278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20000e90 	.word	0x20000e90
 8007294:	200009bc 	.word	0x200009bc
 8007298:	20000e9c 	.word	0x20000e9c
 800729c:	20000eac 	.word	0x20000eac
 80072a0:	20000e98 	.word	0x20000e98
 80072a4:	200009c0 	.word	0x200009c0
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d017      	beq.n	80072ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072be:	4b13      	ldr	r3, [pc, #76]	; (800730c <vTaskDelay+0x60>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <vTaskDelay+0x30>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	60bb      	str	r3, [r7, #8]
}
 80072d8:	bf00      	nop
 80072da:	e7fe      	b.n	80072da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80072dc:	f000 f88a 	bl	80073f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072e0:	2100      	movs	r1, #0
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fd08 	bl	8007cf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072e8:	f000 f892 	bl	8007410 <xTaskResumeAll>
 80072ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d107      	bne.n	8007304 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80072f4:	4b06      	ldr	r3, [pc, #24]	; (8007310 <vTaskDelay+0x64>)
 80072f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007304:	bf00      	nop
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	20000eb8 	.word	0x20000eb8
 8007310:	e000ed04 	.word	0xe000ed04

08007314 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b08a      	sub	sp, #40	; 0x28
 8007318:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800731a:	2300      	movs	r3, #0
 800731c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800731e:	2300      	movs	r3, #0
 8007320:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007322:	463a      	mov	r2, r7
 8007324:	1d39      	adds	r1, r7, #4
 8007326:	f107 0308 	add.w	r3, r7, #8
 800732a:	4618      	mov	r0, r3
 800732c:	f7fe ff48 	bl	80061c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	9202      	str	r2, [sp, #8]
 8007338:	9301      	str	r3, [sp, #4]
 800733a:	2300      	movs	r3, #0
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	2300      	movs	r3, #0
 8007340:	460a      	mov	r2, r1
 8007342:	4924      	ldr	r1, [pc, #144]	; (80073d4 <vTaskStartScheduler+0xc0>)
 8007344:	4824      	ldr	r0, [pc, #144]	; (80073d8 <vTaskStartScheduler+0xc4>)
 8007346:	f7ff fe01 	bl	8006f4c <xTaskCreateStatic>
 800734a:	4603      	mov	r3, r0
 800734c:	4a23      	ldr	r2, [pc, #140]	; (80073dc <vTaskStartScheduler+0xc8>)
 800734e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007350:	4b22      	ldr	r3, [pc, #136]	; (80073dc <vTaskStartScheduler+0xc8>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007358:	2301      	movs	r3, #1
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	e001      	b.n	8007362 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800735e:	2300      	movs	r3, #0
 8007360:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d102      	bne.n	800736e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007368:	f000 fd1a 	bl	8007da0 <xTimerCreateTimerTask>
 800736c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d11b      	bne.n	80073ac <vTaskStartScheduler+0x98>
	__asm volatile
 8007374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	613b      	str	r3, [r7, #16]
}
 8007386:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007388:	4b15      	ldr	r3, [pc, #84]	; (80073e0 <vTaskStartScheduler+0xcc>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3354      	adds	r3, #84	; 0x54
 800738e:	4a15      	ldr	r2, [pc, #84]	; (80073e4 <vTaskStartScheduler+0xd0>)
 8007390:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007392:	4b15      	ldr	r3, [pc, #84]	; (80073e8 <vTaskStartScheduler+0xd4>)
 8007394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007398:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800739a:	4b14      	ldr	r3, [pc, #80]	; (80073ec <vTaskStartScheduler+0xd8>)
 800739c:	2201      	movs	r2, #1
 800739e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80073a0:	4b13      	ldr	r3, [pc, #76]	; (80073f0 <vTaskStartScheduler+0xdc>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073a6:	f001 f96b 	bl	8008680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073aa:	e00e      	b.n	80073ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073b2:	d10a      	bne.n	80073ca <vTaskStartScheduler+0xb6>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	60fb      	str	r3, [r7, #12]
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <vTaskStartScheduler+0xb4>
}
 80073ca:	bf00      	nop
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	08009a20 	.word	0x08009a20
 80073d8:	08007a21 	.word	0x08007a21
 80073dc:	20000eb4 	.word	0x20000eb4
 80073e0:	200009bc 	.word	0x200009bc
 80073e4:	2000005c 	.word	0x2000005c
 80073e8:	20000eb0 	.word	0x20000eb0
 80073ec:	20000e9c 	.word	0x20000e9c
 80073f0:	20000e94 	.word	0x20000e94

080073f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073f4:	b480      	push	{r7}
 80073f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80073f8:	4b04      	ldr	r3, [pc, #16]	; (800740c <vTaskSuspendAll+0x18>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3301      	adds	r3, #1
 80073fe:	4a03      	ldr	r2, [pc, #12]	; (800740c <vTaskSuspendAll+0x18>)
 8007400:	6013      	str	r3, [r2, #0]
}
 8007402:	bf00      	nop
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	20000eb8 	.word	0x20000eb8

08007410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007416:	2300      	movs	r3, #0
 8007418:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800741a:	2300      	movs	r3, #0
 800741c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800741e:	4b42      	ldr	r3, [pc, #264]	; (8007528 <xTaskResumeAll+0x118>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10a      	bne.n	800743c <xTaskResumeAll+0x2c>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	603b      	str	r3, [r7, #0]
}
 8007438:	bf00      	nop
 800743a:	e7fe      	b.n	800743a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800743c:	f001 f9c2 	bl	80087c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007440:	4b39      	ldr	r3, [pc, #228]	; (8007528 <xTaskResumeAll+0x118>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3b01      	subs	r3, #1
 8007446:	4a38      	ldr	r2, [pc, #224]	; (8007528 <xTaskResumeAll+0x118>)
 8007448:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800744a:	4b37      	ldr	r3, [pc, #220]	; (8007528 <xTaskResumeAll+0x118>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d162      	bne.n	8007518 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007452:	4b36      	ldr	r3, [pc, #216]	; (800752c <xTaskResumeAll+0x11c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d05e      	beq.n	8007518 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800745a:	e02f      	b.n	80074bc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800745c:	4b34      	ldr	r3, [pc, #208]	; (8007530 <xTaskResumeAll+0x120>)
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	3318      	adds	r3, #24
 8007468:	4618      	mov	r0, r3
 800746a:	f7fe ff67 	bl	800633c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	3304      	adds	r3, #4
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe ff62 	bl	800633c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747c:	4b2d      	ldr	r3, [pc, #180]	; (8007534 <xTaskResumeAll+0x124>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d903      	bls.n	800748c <xTaskResumeAll+0x7c>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007488:	4a2a      	ldr	r2, [pc, #168]	; (8007534 <xTaskResumeAll+0x124>)
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007490:	4613      	mov	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4a27      	ldr	r2, [pc, #156]	; (8007538 <xTaskResumeAll+0x128>)
 800749a:	441a      	add	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3304      	adds	r3, #4
 80074a0:	4619      	mov	r1, r3
 80074a2:	4610      	mov	r0, r2
 80074a4:	f7fe feed 	bl	8006282 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ac:	4b23      	ldr	r3, [pc, #140]	; (800753c <xTaskResumeAll+0x12c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d302      	bcc.n	80074bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80074b6:	4b22      	ldr	r3, [pc, #136]	; (8007540 <xTaskResumeAll+0x130>)
 80074b8:	2201      	movs	r2, #1
 80074ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074bc:	4b1c      	ldr	r3, [pc, #112]	; (8007530 <xTaskResumeAll+0x120>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1cb      	bne.n	800745c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074ca:	f000 fb63 	bl	8007b94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80074ce:	4b1d      	ldr	r3, [pc, #116]	; (8007544 <xTaskResumeAll+0x134>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d010      	beq.n	80074fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074da:	f000 f847 	bl	800756c <xTaskIncrementTick>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80074e4:	4b16      	ldr	r3, [pc, #88]	; (8007540 <xTaskResumeAll+0x130>)
 80074e6:	2201      	movs	r2, #1
 80074e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1f1      	bne.n	80074da <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80074f6:	4b13      	ldr	r3, [pc, #76]	; (8007544 <xTaskResumeAll+0x134>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074fc:	4b10      	ldr	r3, [pc, #64]	; (8007540 <xTaskResumeAll+0x130>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d009      	beq.n	8007518 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007504:	2301      	movs	r3, #1
 8007506:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007508:	4b0f      	ldr	r3, [pc, #60]	; (8007548 <xTaskResumeAll+0x138>)
 800750a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007518:	f001 f984 	bl	8008824 <vPortExitCritical>

	return xAlreadyYielded;
 800751c:	68bb      	ldr	r3, [r7, #8]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20000eb8 	.word	0x20000eb8
 800752c:	20000e90 	.word	0x20000e90
 8007530:	20000e50 	.word	0x20000e50
 8007534:	20000e98 	.word	0x20000e98
 8007538:	200009c0 	.word	0x200009c0
 800753c:	200009bc 	.word	0x200009bc
 8007540:	20000ea4 	.word	0x20000ea4
 8007544:	20000ea0 	.word	0x20000ea0
 8007548:	e000ed04 	.word	0xe000ed04

0800754c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007552:	4b05      	ldr	r3, [pc, #20]	; (8007568 <xTaskGetTickCount+0x1c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007558:	687b      	ldr	r3, [r7, #4]
}
 800755a:	4618      	mov	r0, r3
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	20000e94 	.word	0x20000e94

0800756c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007572:	2300      	movs	r3, #0
 8007574:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007576:	4b51      	ldr	r3, [pc, #324]	; (80076bc <xTaskIncrementTick+0x150>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f040 808e 	bne.w	800769c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007580:	4b4f      	ldr	r3, [pc, #316]	; (80076c0 <xTaskIncrementTick+0x154>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3301      	adds	r3, #1
 8007586:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007588:	4a4d      	ldr	r2, [pc, #308]	; (80076c0 <xTaskIncrementTick+0x154>)
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d120      	bne.n	80075d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007594:	4b4b      	ldr	r3, [pc, #300]	; (80076c4 <xTaskIncrementTick+0x158>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	603b      	str	r3, [r7, #0]
}
 80075b0:	bf00      	nop
 80075b2:	e7fe      	b.n	80075b2 <xTaskIncrementTick+0x46>
 80075b4:	4b43      	ldr	r3, [pc, #268]	; (80076c4 <xTaskIncrementTick+0x158>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	60fb      	str	r3, [r7, #12]
 80075ba:	4b43      	ldr	r3, [pc, #268]	; (80076c8 <xTaskIncrementTick+0x15c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a41      	ldr	r2, [pc, #260]	; (80076c4 <xTaskIncrementTick+0x158>)
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	4a41      	ldr	r2, [pc, #260]	; (80076c8 <xTaskIncrementTick+0x15c>)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	4b40      	ldr	r3, [pc, #256]	; (80076cc <xTaskIncrementTick+0x160>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3301      	adds	r3, #1
 80075ce:	4a3f      	ldr	r2, [pc, #252]	; (80076cc <xTaskIncrementTick+0x160>)
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	f000 fadf 	bl	8007b94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075d6:	4b3e      	ldr	r3, [pc, #248]	; (80076d0 <xTaskIncrementTick+0x164>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d34e      	bcc.n	800767e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075e0:	4b38      	ldr	r3, [pc, #224]	; (80076c4 <xTaskIncrementTick+0x158>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <xTaskIncrementTick+0x82>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e000      	b.n	80075f0 <xTaskIncrementTick+0x84>
 80075ee:	2300      	movs	r3, #0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d004      	beq.n	80075fe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075f4:	4b36      	ldr	r3, [pc, #216]	; (80076d0 <xTaskIncrementTick+0x164>)
 80075f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075fa:	601a      	str	r2, [r3, #0]
					break;
 80075fc:	e03f      	b.n	800767e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80075fe:	4b31      	ldr	r3, [pc, #196]	; (80076c4 <xTaskIncrementTick+0x158>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	429a      	cmp	r2, r3
 8007614:	d203      	bcs.n	800761e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007616:	4a2e      	ldr	r2, [pc, #184]	; (80076d0 <xTaskIncrementTick+0x164>)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6013      	str	r3, [r2, #0]
						break;
 800761c:	e02f      	b.n	800767e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	3304      	adds	r3, #4
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe fe8a 	bl	800633c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762c:	2b00      	cmp	r3, #0
 800762e:	d004      	beq.n	800763a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	3318      	adds	r3, #24
 8007634:	4618      	mov	r0, r3
 8007636:	f7fe fe81 	bl	800633c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763e:	4b25      	ldr	r3, [pc, #148]	; (80076d4 <xTaskIncrementTick+0x168>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	429a      	cmp	r2, r3
 8007644:	d903      	bls.n	800764e <xTaskIncrementTick+0xe2>
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	4a22      	ldr	r2, [pc, #136]	; (80076d4 <xTaskIncrementTick+0x168>)
 800764c:	6013      	str	r3, [r2, #0]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007652:	4613      	mov	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4a1f      	ldr	r2, [pc, #124]	; (80076d8 <xTaskIncrementTick+0x16c>)
 800765c:	441a      	add	r2, r3
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	3304      	adds	r3, #4
 8007662:	4619      	mov	r1, r3
 8007664:	4610      	mov	r0, r2
 8007666:	f7fe fe0c 	bl	8006282 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766e:	4b1b      	ldr	r3, [pc, #108]	; (80076dc <xTaskIncrementTick+0x170>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007674:	429a      	cmp	r2, r3
 8007676:	d3b3      	bcc.n	80075e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007678:	2301      	movs	r3, #1
 800767a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800767c:	e7b0      	b.n	80075e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800767e:	4b17      	ldr	r3, [pc, #92]	; (80076dc <xTaskIncrementTick+0x170>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007684:	4914      	ldr	r1, [pc, #80]	; (80076d8 <xTaskIncrementTick+0x16c>)
 8007686:	4613      	mov	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	440b      	add	r3, r1
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d907      	bls.n	80076a6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007696:	2301      	movs	r3, #1
 8007698:	617b      	str	r3, [r7, #20]
 800769a:	e004      	b.n	80076a6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800769c:	4b10      	ldr	r3, [pc, #64]	; (80076e0 <xTaskIncrementTick+0x174>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3301      	adds	r3, #1
 80076a2:	4a0f      	ldr	r2, [pc, #60]	; (80076e0 <xTaskIncrementTick+0x174>)
 80076a4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80076a6:	4b0f      	ldr	r3, [pc, #60]	; (80076e4 <xTaskIncrementTick+0x178>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80076ae:	2301      	movs	r3, #1
 80076b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80076b2:	697b      	ldr	r3, [r7, #20]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	20000eb8 	.word	0x20000eb8
 80076c0:	20000e94 	.word	0x20000e94
 80076c4:	20000e48 	.word	0x20000e48
 80076c8:	20000e4c 	.word	0x20000e4c
 80076cc:	20000ea8 	.word	0x20000ea8
 80076d0:	20000eb0 	.word	0x20000eb0
 80076d4:	20000e98 	.word	0x20000e98
 80076d8:	200009c0 	.word	0x200009c0
 80076dc:	200009bc 	.word	0x200009bc
 80076e0:	20000ea0 	.word	0x20000ea0
 80076e4:	20000ea4 	.word	0x20000ea4

080076e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80076ee:	4b2a      	ldr	r3, [pc, #168]	; (8007798 <vTaskSwitchContext+0xb0>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076f6:	4b29      	ldr	r3, [pc, #164]	; (800779c <vTaskSwitchContext+0xb4>)
 80076f8:	2201      	movs	r2, #1
 80076fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076fc:	e046      	b.n	800778c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80076fe:	4b27      	ldr	r3, [pc, #156]	; (800779c <vTaskSwitchContext+0xb4>)
 8007700:	2200      	movs	r2, #0
 8007702:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007704:	4b26      	ldr	r3, [pc, #152]	; (80077a0 <vTaskSwitchContext+0xb8>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	60fb      	str	r3, [r7, #12]
 800770a:	e010      	b.n	800772e <vTaskSwitchContext+0x46>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <vTaskSwitchContext+0x40>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	607b      	str	r3, [r7, #4]
}
 8007724:	bf00      	nop
 8007726:	e7fe      	b.n	8007726 <vTaskSwitchContext+0x3e>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3b01      	subs	r3, #1
 800772c:	60fb      	str	r3, [r7, #12]
 800772e:	491d      	ldr	r1, [pc, #116]	; (80077a4 <vTaskSwitchContext+0xbc>)
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	440b      	add	r3, r1
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d0e4      	beq.n	800770c <vTaskSwitchContext+0x24>
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	4613      	mov	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4a15      	ldr	r2, [pc, #84]	; (80077a4 <vTaskSwitchContext+0xbc>)
 800774e:	4413      	add	r3, r2
 8007750:	60bb      	str	r3, [r7, #8]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	605a      	str	r2, [r3, #4]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	3308      	adds	r3, #8
 8007764:	429a      	cmp	r2, r3
 8007766:	d104      	bne.n	8007772 <vTaskSwitchContext+0x8a>
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	605a      	str	r2, [r3, #4]
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	4a0b      	ldr	r2, [pc, #44]	; (80077a8 <vTaskSwitchContext+0xc0>)
 800777a:	6013      	str	r3, [r2, #0]
 800777c:	4a08      	ldr	r2, [pc, #32]	; (80077a0 <vTaskSwitchContext+0xb8>)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007782:	4b09      	ldr	r3, [pc, #36]	; (80077a8 <vTaskSwitchContext+0xc0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3354      	adds	r3, #84	; 0x54
 8007788:	4a08      	ldr	r2, [pc, #32]	; (80077ac <vTaskSwitchContext+0xc4>)
 800778a:	6013      	str	r3, [r2, #0]
}
 800778c:	bf00      	nop
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	20000eb8 	.word	0x20000eb8
 800779c:	20000ea4 	.word	0x20000ea4
 80077a0:	20000e98 	.word	0x20000e98
 80077a4:	200009c0 	.word	0x200009c0
 80077a8:	200009bc 	.word	0x200009bc
 80077ac:	2000005c 	.word	0x2000005c

080077b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10a      	bne.n	80077d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	60fb      	str	r3, [r7, #12]
}
 80077d2:	bf00      	nop
 80077d4:	e7fe      	b.n	80077d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077d6:	4b07      	ldr	r3, [pc, #28]	; (80077f4 <vTaskPlaceOnEventList+0x44>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3318      	adds	r3, #24
 80077dc:	4619      	mov	r1, r3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7fe fd73 	bl	80062ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077e4:	2101      	movs	r1, #1
 80077e6:	6838      	ldr	r0, [r7, #0]
 80077e8:	f000 fa86 	bl	8007cf8 <prvAddCurrentTaskToDelayedList>
}
 80077ec:	bf00      	nop
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	200009bc 	.word	0x200009bc

080077f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10a      	bne.n	8007820 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	617b      	str	r3, [r7, #20]
}
 800781c:	bf00      	nop
 800781e:	e7fe      	b.n	800781e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007820:	4b0a      	ldr	r3, [pc, #40]	; (800784c <vTaskPlaceOnEventListRestricted+0x54>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3318      	adds	r3, #24
 8007826:	4619      	mov	r1, r3
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f7fe fd2a 	bl	8006282 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007838:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	68b8      	ldr	r0, [r7, #8]
 800783e:	f000 fa5b 	bl	8007cf8 <prvAddCurrentTaskToDelayedList>
	}
 8007842:	bf00      	nop
 8007844:	3718      	adds	r7, #24
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	200009bc 	.word	0x200009bc

08007850 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10a      	bne.n	800787c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	60fb      	str	r3, [r7, #12]
}
 8007878:	bf00      	nop
 800787a:	e7fe      	b.n	800787a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	3318      	adds	r3, #24
 8007880:	4618      	mov	r0, r3
 8007882:	f7fe fd5b 	bl	800633c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007886:	4b1e      	ldr	r3, [pc, #120]	; (8007900 <xTaskRemoveFromEventList+0xb0>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d11d      	bne.n	80078ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	3304      	adds	r3, #4
 8007892:	4618      	mov	r0, r3
 8007894:	f7fe fd52 	bl	800633c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800789c:	4b19      	ldr	r3, [pc, #100]	; (8007904 <xTaskRemoveFromEventList+0xb4>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d903      	bls.n	80078ac <xTaskRemoveFromEventList+0x5c>
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	4a16      	ldr	r2, [pc, #88]	; (8007904 <xTaskRemoveFromEventList+0xb4>)
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b0:	4613      	mov	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4a13      	ldr	r2, [pc, #76]	; (8007908 <xTaskRemoveFromEventList+0xb8>)
 80078ba:	441a      	add	r2, r3
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	3304      	adds	r3, #4
 80078c0:	4619      	mov	r1, r3
 80078c2:	4610      	mov	r0, r2
 80078c4:	f7fe fcdd 	bl	8006282 <vListInsertEnd>
 80078c8:	e005      	b.n	80078d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	3318      	adds	r3, #24
 80078ce:	4619      	mov	r1, r3
 80078d0:	480e      	ldr	r0, [pc, #56]	; (800790c <xTaskRemoveFromEventList+0xbc>)
 80078d2:	f7fe fcd6 	bl	8006282 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078da:	4b0d      	ldr	r3, [pc, #52]	; (8007910 <xTaskRemoveFromEventList+0xc0>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d905      	bls.n	80078f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078e4:	2301      	movs	r3, #1
 80078e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078e8:	4b0a      	ldr	r3, [pc, #40]	; (8007914 <xTaskRemoveFromEventList+0xc4>)
 80078ea:	2201      	movs	r2, #1
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	e001      	b.n	80078f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80078f0:	2300      	movs	r3, #0
 80078f2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80078f4:	697b      	ldr	r3, [r7, #20]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3718      	adds	r7, #24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	20000eb8 	.word	0x20000eb8
 8007904:	20000e98 	.word	0x20000e98
 8007908:	200009c0 	.word	0x200009c0
 800790c:	20000e50 	.word	0x20000e50
 8007910:	200009bc 	.word	0x200009bc
 8007914:	20000ea4 	.word	0x20000ea4

08007918 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007920:	4b06      	ldr	r3, [pc, #24]	; (800793c <vTaskInternalSetTimeOutState+0x24>)
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007928:	4b05      	ldr	r3, [pc, #20]	; (8007940 <vTaskInternalSetTimeOutState+0x28>)
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	605a      	str	r2, [r3, #4]
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	20000ea8 	.word	0x20000ea8
 8007940:	20000e94 	.word	0x20000e94

08007944 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b088      	sub	sp, #32
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10a      	bne.n	800796a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	613b      	str	r3, [r7, #16]
}
 8007966:	bf00      	nop
 8007968:	e7fe      	b.n	8007968 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10a      	bne.n	8007986 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	60fb      	str	r3, [r7, #12]
}
 8007982:	bf00      	nop
 8007984:	e7fe      	b.n	8007984 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007986:	f000 ff1d 	bl	80087c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800798a:	4b1d      	ldr	r3, [pc, #116]	; (8007a00 <xTaskCheckForTimeOut+0xbc>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079a2:	d102      	bne.n	80079aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079a4:	2300      	movs	r3, #0
 80079a6:	61fb      	str	r3, [r7, #28]
 80079a8:	e023      	b.n	80079f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	4b15      	ldr	r3, [pc, #84]	; (8007a04 <xTaskCheckForTimeOut+0xc0>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d007      	beq.n	80079c6 <xTaskCheckForTimeOut+0x82>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d302      	bcc.n	80079c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079c0:	2301      	movs	r3, #1
 80079c2:	61fb      	str	r3, [r7, #28]
 80079c4:	e015      	b.n	80079f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d20b      	bcs.n	80079e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	1ad2      	subs	r2, r2, r3
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff ff9b 	bl	8007918 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079e2:	2300      	movs	r3, #0
 80079e4:	61fb      	str	r3, [r7, #28]
 80079e6:	e004      	b.n	80079f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2200      	movs	r2, #0
 80079ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079ee:	2301      	movs	r3, #1
 80079f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079f2:	f000 ff17 	bl	8008824 <vPortExitCritical>

	return xReturn;
 80079f6:	69fb      	ldr	r3, [r7, #28]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3720      	adds	r7, #32
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	20000e94 	.word	0x20000e94
 8007a04:	20000ea8 	.word	0x20000ea8

08007a08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a0c:	4b03      	ldr	r3, [pc, #12]	; (8007a1c <vTaskMissedYield+0x14>)
 8007a0e:	2201      	movs	r2, #1
 8007a10:	601a      	str	r2, [r3, #0]
}
 8007a12:	bf00      	nop
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	20000ea4 	.word	0x20000ea4

08007a20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a28:	f000 f852 	bl	8007ad0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a2c:	4b06      	ldr	r3, [pc, #24]	; (8007a48 <prvIdleTask+0x28>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d9f9      	bls.n	8007a28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a34:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <prvIdleTask+0x2c>)
 8007a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a44:	e7f0      	b.n	8007a28 <prvIdleTask+0x8>
 8007a46:	bf00      	nop
 8007a48:	200009c0 	.word	0x200009c0
 8007a4c:	e000ed04 	.word	0xe000ed04

08007a50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a56:	2300      	movs	r3, #0
 8007a58:	607b      	str	r3, [r7, #4]
 8007a5a:	e00c      	b.n	8007a76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4a12      	ldr	r2, [pc, #72]	; (8007ab0 <prvInitialiseTaskLists+0x60>)
 8007a68:	4413      	add	r3, r2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe fbdc 	bl	8006228 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3301      	adds	r3, #1
 8007a74:	607b      	str	r3, [r7, #4]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b37      	cmp	r3, #55	; 0x37
 8007a7a:	d9ef      	bls.n	8007a5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a7c:	480d      	ldr	r0, [pc, #52]	; (8007ab4 <prvInitialiseTaskLists+0x64>)
 8007a7e:	f7fe fbd3 	bl	8006228 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a82:	480d      	ldr	r0, [pc, #52]	; (8007ab8 <prvInitialiseTaskLists+0x68>)
 8007a84:	f7fe fbd0 	bl	8006228 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a88:	480c      	ldr	r0, [pc, #48]	; (8007abc <prvInitialiseTaskLists+0x6c>)
 8007a8a:	f7fe fbcd 	bl	8006228 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a8e:	480c      	ldr	r0, [pc, #48]	; (8007ac0 <prvInitialiseTaskLists+0x70>)
 8007a90:	f7fe fbca 	bl	8006228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a94:	480b      	ldr	r0, [pc, #44]	; (8007ac4 <prvInitialiseTaskLists+0x74>)
 8007a96:	f7fe fbc7 	bl	8006228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a9a:	4b0b      	ldr	r3, [pc, #44]	; (8007ac8 <prvInitialiseTaskLists+0x78>)
 8007a9c:	4a05      	ldr	r2, [pc, #20]	; (8007ab4 <prvInitialiseTaskLists+0x64>)
 8007a9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007aa0:	4b0a      	ldr	r3, [pc, #40]	; (8007acc <prvInitialiseTaskLists+0x7c>)
 8007aa2:	4a05      	ldr	r2, [pc, #20]	; (8007ab8 <prvInitialiseTaskLists+0x68>)
 8007aa4:	601a      	str	r2, [r3, #0]
}
 8007aa6:	bf00      	nop
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	200009c0 	.word	0x200009c0
 8007ab4:	20000e20 	.word	0x20000e20
 8007ab8:	20000e34 	.word	0x20000e34
 8007abc:	20000e50 	.word	0x20000e50
 8007ac0:	20000e64 	.word	0x20000e64
 8007ac4:	20000e7c 	.word	0x20000e7c
 8007ac8:	20000e48 	.word	0x20000e48
 8007acc:	20000e4c 	.word	0x20000e4c

08007ad0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ad6:	e019      	b.n	8007b0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ad8:	f000 fe74 	bl	80087c4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007adc:	4b10      	ldr	r3, [pc, #64]	; (8007b20 <prvCheckTasksWaitingTermination+0x50>)
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fe fc27 	bl	800633c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007aee:	4b0d      	ldr	r3, [pc, #52]	; (8007b24 <prvCheckTasksWaitingTermination+0x54>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	4a0b      	ldr	r2, [pc, #44]	; (8007b24 <prvCheckTasksWaitingTermination+0x54>)
 8007af6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007af8:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <prvCheckTasksWaitingTermination+0x58>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	4a0a      	ldr	r2, [pc, #40]	; (8007b28 <prvCheckTasksWaitingTermination+0x58>)
 8007b00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b02:	f000 fe8f 	bl	8008824 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f810 	bl	8007b2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b0c:	4b06      	ldr	r3, [pc, #24]	; (8007b28 <prvCheckTasksWaitingTermination+0x58>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e1      	bne.n	8007ad8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000e64 	.word	0x20000e64
 8007b24:	20000e90 	.word	0x20000e90
 8007b28:	20000e78 	.word	0x20000e78

08007b2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3354      	adds	r3, #84	; 0x54
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f001 f96b 	bl	8008e14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d108      	bne.n	8007b5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f001 f81f 	bl	8008b90 <vPortFree>
				vPortFree( pxTCB );
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 f81c 	bl	8008b90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b58:	e018      	b.n	8007b8c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d103      	bne.n	8007b6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 f813 	bl	8008b90 <vPortFree>
	}
 8007b6a:	e00f      	b.n	8007b8c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d00a      	beq.n	8007b8c <prvDeleteTCB+0x60>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	60fb      	str	r3, [r7, #12]
}
 8007b88:	bf00      	nop
 8007b8a:	e7fe      	b.n	8007b8a <prvDeleteTCB+0x5e>
	}
 8007b8c:	bf00      	nop
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b9a:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <prvResetNextTaskUnblockTime+0x44>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <prvResetNextTaskUnblockTime+0x14>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e000      	b.n	8007baa <prvResetNextTaskUnblockTime+0x16>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d004      	beq.n	8007bb8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bae:	4b0b      	ldr	r3, [pc, #44]	; (8007bdc <prvResetNextTaskUnblockTime+0x48>)
 8007bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bb4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bb6:	e008      	b.n	8007bca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007bb8:	4b07      	ldr	r3, [pc, #28]	; (8007bd8 <prvResetNextTaskUnblockTime+0x44>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	4a05      	ldr	r2, [pc, #20]	; (8007bdc <prvResetNextTaskUnblockTime+0x48>)
 8007bc8:	6013      	str	r3, [r2, #0]
}
 8007bca:	bf00      	nop
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	20000e48 	.word	0x20000e48
 8007bdc:	20000eb0 	.word	0x20000eb0

08007be0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007be6:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <xTaskGetSchedulerState+0x34>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d102      	bne.n	8007bf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	607b      	str	r3, [r7, #4]
 8007bf2:	e008      	b.n	8007c06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bf4:	4b08      	ldr	r3, [pc, #32]	; (8007c18 <xTaskGetSchedulerState+0x38>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d102      	bne.n	8007c02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	607b      	str	r3, [r7, #4]
 8007c00:	e001      	b.n	8007c06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c02:	2300      	movs	r3, #0
 8007c04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c06:	687b      	ldr	r3, [r7, #4]
	}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	20000e9c 	.word	0x20000e9c
 8007c18:	20000eb8 	.word	0x20000eb8

08007c1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d056      	beq.n	8007ce0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c32:	4b2e      	ldr	r3, [pc, #184]	; (8007cec <xTaskPriorityDisinherit+0xd0>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d00a      	beq.n	8007c52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	60fb      	str	r3, [r7, #12]
}
 8007c4e:	bf00      	nop
 8007c50:	e7fe      	b.n	8007c50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10a      	bne.n	8007c70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	60bb      	str	r3, [r7, #8]
}
 8007c6c:	bf00      	nop
 8007c6e:	e7fe      	b.n	8007c6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c74:	1e5a      	subs	r2, r3, #1
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d02c      	beq.n	8007ce0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d128      	bne.n	8007ce0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	3304      	adds	r3, #4
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fe fb52 	bl	800633c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb0:	4b0f      	ldr	r3, [pc, #60]	; (8007cf0 <xTaskPriorityDisinherit+0xd4>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d903      	bls.n	8007cc0 <xTaskPriorityDisinherit+0xa4>
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbc:	4a0c      	ldr	r2, [pc, #48]	; (8007cf0 <xTaskPriorityDisinherit+0xd4>)
 8007cbe:	6013      	str	r3, [r2, #0]
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4a09      	ldr	r2, [pc, #36]	; (8007cf4 <xTaskPriorityDisinherit+0xd8>)
 8007cce:	441a      	add	r2, r3
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	f7fe fad3 	bl	8006282 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ce0:	697b      	ldr	r3, [r7, #20]
	}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3718      	adds	r7, #24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	200009bc 	.word	0x200009bc
 8007cf0:	20000e98 	.word	0x20000e98
 8007cf4:	200009c0 	.word	0x200009c0

08007cf8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d02:	4b21      	ldr	r3, [pc, #132]	; (8007d88 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d08:	4b20      	ldr	r3, [pc, #128]	; (8007d8c <prvAddCurrentTaskToDelayedList+0x94>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe fb14 	bl	800633c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d1a:	d10a      	bne.n	8007d32 <prvAddCurrentTaskToDelayedList+0x3a>
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d007      	beq.n	8007d32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d22:	4b1a      	ldr	r3, [pc, #104]	; (8007d8c <prvAddCurrentTaskToDelayedList+0x94>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3304      	adds	r3, #4
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4819      	ldr	r0, [pc, #100]	; (8007d90 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d2c:	f7fe faa9 	bl	8006282 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d30:	e026      	b.n	8007d80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4413      	add	r3, r2
 8007d38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d3a:	4b14      	ldr	r3, [pc, #80]	; (8007d8c <prvAddCurrentTaskToDelayedList+0x94>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d209      	bcs.n	8007d5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d4a:	4b12      	ldr	r3, [pc, #72]	; (8007d94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <prvAddCurrentTaskToDelayedList+0x94>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3304      	adds	r3, #4
 8007d54:	4619      	mov	r1, r3
 8007d56:	4610      	mov	r0, r2
 8007d58:	f7fe fab7 	bl	80062ca <vListInsert>
}
 8007d5c:	e010      	b.n	8007d80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d5e:	4b0e      	ldr	r3, [pc, #56]	; (8007d98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <prvAddCurrentTaskToDelayedList+0x94>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	3304      	adds	r3, #4
 8007d68:	4619      	mov	r1, r3
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	f7fe faad 	bl	80062ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d70:	4b0a      	ldr	r3, [pc, #40]	; (8007d9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d202      	bcs.n	8007d80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d7a:	4a08      	ldr	r2, [pc, #32]	; (8007d9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	6013      	str	r3, [r2, #0]
}
 8007d80:	bf00      	nop
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	20000e94 	.word	0x20000e94
 8007d8c:	200009bc 	.word	0x200009bc
 8007d90:	20000e7c 	.word	0x20000e7c
 8007d94:	20000e4c 	.word	0x20000e4c
 8007d98:	20000e48 	.word	0x20000e48
 8007d9c:	20000eb0 	.word	0x20000eb0

08007da0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b08a      	sub	sp, #40	; 0x28
 8007da4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007daa:	f000 fb5b 	bl	8008464 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007dae:	4b1c      	ldr	r3, [pc, #112]	; (8007e20 <xTimerCreateTimerTask+0x80>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d021      	beq.n	8007dfa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007db6:	2300      	movs	r3, #0
 8007db8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007dbe:	1d3a      	adds	r2, r7, #4
 8007dc0:	f107 0108 	add.w	r1, r7, #8
 8007dc4:	f107 030c 	add.w	r3, r7, #12
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe fa13 	bl	80061f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	9202      	str	r2, [sp, #8]
 8007dd6:	9301      	str	r3, [sp, #4]
 8007dd8:	2302      	movs	r3, #2
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	2300      	movs	r3, #0
 8007dde:	460a      	mov	r2, r1
 8007de0:	4910      	ldr	r1, [pc, #64]	; (8007e24 <xTimerCreateTimerTask+0x84>)
 8007de2:	4811      	ldr	r0, [pc, #68]	; (8007e28 <xTimerCreateTimerTask+0x88>)
 8007de4:	f7ff f8b2 	bl	8006f4c <xTaskCreateStatic>
 8007de8:	4603      	mov	r3, r0
 8007dea:	4a10      	ldr	r2, [pc, #64]	; (8007e2c <xTimerCreateTimerTask+0x8c>)
 8007dec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007dee:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <xTimerCreateTimerTask+0x8c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007df6:	2301      	movs	r3, #1
 8007df8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10a      	bne.n	8007e16 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	613b      	str	r3, [r7, #16]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e16:	697b      	ldr	r3, [r7, #20]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	20000eec 	.word	0x20000eec
 8007e24:	08009a28 	.word	0x08009a28
 8007e28:	0800806d 	.word	0x0800806d
 8007e2c:	20000ef0 	.word	0x20000ef0

08007e30 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b088      	sub	sp, #32
 8007e34:	af02      	add	r7, sp, #8
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
 8007e3c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8007e3e:	2030      	movs	r0, #48	; 0x30
 8007e40:	f000 fde2 	bl	8008a08 <pvPortMalloc>
 8007e44:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00d      	beq.n	8007e68 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	9301      	str	r3, [sp, #4]
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	68b9      	ldr	r1, [r7, #8]
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 f846 	bl	8007eec <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8007e68:	697b      	ldr	r3, [r7, #20]
	}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b08a      	sub	sp, #40	; 0x28
 8007e76:	af02      	add	r7, sp, #8
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	607a      	str	r2, [r7, #4]
 8007e7e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007e80:	2330      	movs	r3, #48	; 0x30
 8007e82:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	2b30      	cmp	r3, #48	; 0x30
 8007e88:	d00a      	beq.n	8007ea0 <xTimerCreateStatic+0x2e>
	__asm volatile
 8007e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	61bb      	str	r3, [r7, #24]
}
 8007e9c:	bf00      	nop
 8007e9e:	e7fe      	b.n	8007e9e <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10a      	bne.n	8007ebc <xTimerCreateStatic+0x4a>
	__asm volatile
 8007ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	617b      	str	r3, [r7, #20]
}
 8007eb8:	bf00      	nop
 8007eba:	e7fe      	b.n	8007eba <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebe:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00d      	beq.n	8007ee2 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	68b9      	ldr	r1, [r7, #8]
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f000 f809 	bl	8007eec <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8007ee2:	69fb      	ldr	r3, [r7, #28]
	}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3720      	adds	r7, #32
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10a      	bne.n	8007f16 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	617b      	str	r3, [r7, #20]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d015      	beq.n	8007f48 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007f1c:	f000 faa2 	bl	8008464 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8007f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	6a3a      	ldr	r2, [r7, #32]
 8007f3c:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	3304      	adds	r3, #4
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe f990 	bl	8006268 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007f48:	bf00      	nop
 8007f4a:	3718      	adds	r7, #24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08a      	sub	sp, #40	; 0x28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10a      	bne.n	8007f7e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	623b      	str	r3, [r7, #32]
}
 8007f7a:	bf00      	nop
 8007f7c:	e7fe      	b.n	8007f7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f7e:	4b1a      	ldr	r3, [pc, #104]	; (8007fe8 <xTimerGenericCommand+0x98>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d02a      	beq.n	8007fdc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b05      	cmp	r3, #5
 8007f96:	dc18      	bgt.n	8007fca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f98:	f7ff fe22 	bl	8007be0 <xTaskGetSchedulerState>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d109      	bne.n	8007fb6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007fa2:	4b11      	ldr	r3, [pc, #68]	; (8007fe8 <xTimerGenericCommand+0x98>)
 8007fa4:	6818      	ldr	r0, [r3, #0]
 8007fa6:	f107 0110 	add.w	r1, r7, #16
 8007faa:	2300      	movs	r3, #0
 8007fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fae:	f7fe fb2f 	bl	8006610 <xQueueGenericSend>
 8007fb2:	6278      	str	r0, [r7, #36]	; 0x24
 8007fb4:	e012      	b.n	8007fdc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007fb6:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <xTimerGenericCommand+0x98>)
 8007fb8:	6818      	ldr	r0, [r3, #0]
 8007fba:	f107 0110 	add.w	r1, r7, #16
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f7fe fb25 	bl	8006610 <xQueueGenericSend>
 8007fc6:	6278      	str	r0, [r7, #36]	; 0x24
 8007fc8:	e008      	b.n	8007fdc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007fca:	4b07      	ldr	r3, [pc, #28]	; (8007fe8 <xTimerGenericCommand+0x98>)
 8007fcc:	6818      	ldr	r0, [r3, #0]
 8007fce:	f107 0110 	add.w	r1, r7, #16
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	f7fe fc19 	bl	800680c <xQueueGenericSendFromISR>
 8007fda:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3728      	adds	r7, #40	; 0x28
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20000eec 	.word	0x20000eec

08007fec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b088      	sub	sp, #32
 8007ff0:	af02      	add	r7, sp, #8
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ff6:	4b1c      	ldr	r3, [pc, #112]	; (8008068 <prvProcessExpiredTimer+0x7c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	3304      	adds	r3, #4
 8008004:	4618      	mov	r0, r3
 8008006:	f7fe f999 	bl	800633c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d122      	bne.n	8008058 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	699a      	ldr	r2, [r3, #24]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	18d1      	adds	r1, r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	6978      	ldr	r0, [r7, #20]
 8008020:	f000 f8c8 	bl	80081b4 <prvInsertTimerInActiveList>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d016      	beq.n	8008058 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800802a:	2300      	movs	r3, #0
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	2300      	movs	r3, #0
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	2100      	movs	r1, #0
 8008034:	6978      	ldr	r0, [r7, #20]
 8008036:	f7ff ff8b 	bl	8007f50 <xTimerGenericCommand>
 800803a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10a      	bne.n	8008058 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	60fb      	str	r3, [r7, #12]
}
 8008054:	bf00      	nop
 8008056:	e7fe      	b.n	8008056 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	6978      	ldr	r0, [r7, #20]
 800805e:	4798      	blx	r3
}
 8008060:	bf00      	nop
 8008062:	3718      	adds	r7, #24
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	20000ee4 	.word	0x20000ee4

0800806c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008074:	f107 0308 	add.w	r3, r7, #8
 8008078:	4618      	mov	r0, r3
 800807a:	f000 f857 	bl	800812c <prvGetNextExpireTime>
 800807e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	4619      	mov	r1, r3
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 f803 	bl	8008090 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800808a:	f000 f8d5 	bl	8008238 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800808e:	e7f1      	b.n	8008074 <prvTimerTask+0x8>

08008090 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800809a:	f7ff f9ab 	bl	80073f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800809e:	f107 0308 	add.w	r3, r7, #8
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 f866 	bl	8008174 <prvSampleTimeNow>
 80080a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d130      	bne.n	8008112 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10a      	bne.n	80080cc <prvProcessTimerOrBlockTask+0x3c>
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d806      	bhi.n	80080cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80080be:	f7ff f9a7 	bl	8007410 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80080c2:	68f9      	ldr	r1, [r7, #12]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7ff ff91 	bl	8007fec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80080ca:	e024      	b.n	8008116 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d008      	beq.n	80080e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80080d2:	4b13      	ldr	r3, [pc, #76]	; (8008120 <prvProcessTimerOrBlockTask+0x90>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	bf0c      	ite	eq
 80080dc:	2301      	moveq	r3, #1
 80080de:	2300      	movne	r3, #0
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080e4:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <prvProcessTimerOrBlockTask+0x94>)
 80080e6:	6818      	ldr	r0, [r3, #0]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	4619      	mov	r1, r3
 80080f2:	f7fe fef7 	bl	8006ee4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80080f6:	f7ff f98b 	bl	8007410 <xTaskResumeAll>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10a      	bne.n	8008116 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008100:	4b09      	ldr	r3, [pc, #36]	; (8008128 <prvProcessTimerOrBlockTask+0x98>)
 8008102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008106:	601a      	str	r2, [r3, #0]
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	f3bf 8f6f 	isb	sy
}
 8008110:	e001      	b.n	8008116 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008112:	f7ff f97d 	bl	8007410 <xTaskResumeAll>
}
 8008116:	bf00      	nop
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	20000ee8 	.word	0x20000ee8
 8008124:	20000eec 	.word	0x20000eec
 8008128:	e000ed04 	.word	0xe000ed04

0800812c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008134:	4b0e      	ldr	r3, [pc, #56]	; (8008170 <prvGetNextExpireTime+0x44>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	bf0c      	ite	eq
 800813e:	2301      	moveq	r3, #1
 8008140:	2300      	movne	r3, #0
 8008142:	b2db      	uxtb	r3, r3
 8008144:	461a      	mov	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d105      	bne.n	800815e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008152:	4b07      	ldr	r3, [pc, #28]	; (8008170 <prvGetNextExpireTime+0x44>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	e001      	b.n	8008162 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008162:	68fb      	ldr	r3, [r7, #12]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	20000ee4 	.word	0x20000ee4

08008174 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800817c:	f7ff f9e6 	bl	800754c <xTaskGetTickCount>
 8008180:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008182:	4b0b      	ldr	r3, [pc, #44]	; (80081b0 <prvSampleTimeNow+0x3c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	429a      	cmp	r2, r3
 800818a:	d205      	bcs.n	8008198 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800818c:	f000 f908 	bl	80083a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	e002      	b.n	800819e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800819e:	4a04      	ldr	r2, [pc, #16]	; (80081b0 <prvSampleTimeNow+0x3c>)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80081a4:	68fb      	ldr	r3, [r7, #12]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	20000ef4 	.word	0x20000ef4

080081b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80081c2:	2300      	movs	r3, #0
 80081c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d812      	bhi.n	8008200 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	1ad2      	subs	r2, r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d302      	bcc.n	80081ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081e8:	2301      	movs	r3, #1
 80081ea:	617b      	str	r3, [r7, #20]
 80081ec:	e01b      	b.n	8008226 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081ee:	4b10      	ldr	r3, [pc, #64]	; (8008230 <prvInsertTimerInActiveList+0x7c>)
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3304      	adds	r3, #4
 80081f6:	4619      	mov	r1, r3
 80081f8:	4610      	mov	r0, r2
 80081fa:	f7fe f866 	bl	80062ca <vListInsert>
 80081fe:	e012      	b.n	8008226 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	429a      	cmp	r2, r3
 8008206:	d206      	bcs.n	8008216 <prvInsertTimerInActiveList+0x62>
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	429a      	cmp	r2, r3
 800820e:	d302      	bcc.n	8008216 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008210:	2301      	movs	r3, #1
 8008212:	617b      	str	r3, [r7, #20]
 8008214:	e007      	b.n	8008226 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008216:	4b07      	ldr	r3, [pc, #28]	; (8008234 <prvInsertTimerInActiveList+0x80>)
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3304      	adds	r3, #4
 800821e:	4619      	mov	r1, r3
 8008220:	4610      	mov	r0, r2
 8008222:	f7fe f852 	bl	80062ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008226:	697b      	ldr	r3, [r7, #20]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	20000ee8 	.word	0x20000ee8
 8008234:	20000ee4 	.word	0x20000ee4

08008238 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b08e      	sub	sp, #56	; 0x38
 800823c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800823e:	e09d      	b.n	800837c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	da18      	bge.n	8008278 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008246:	1d3b      	adds	r3, r7, #4
 8008248:	3304      	adds	r3, #4
 800824a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800824c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10a      	bne.n	8008268 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	61fb      	str	r3, [r7, #28]
}
 8008264:	bf00      	nop
 8008266:	e7fe      	b.n	8008266 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800826e:	6850      	ldr	r0, [r2, #4]
 8008270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008272:	6892      	ldr	r2, [r2, #8]
 8008274:	4611      	mov	r1, r2
 8008276:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	db7e      	blt.n	800837c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d004      	beq.n	8008294 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800828a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828c:	3304      	adds	r3, #4
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe f854 	bl	800633c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008294:	463b      	mov	r3, r7
 8008296:	4618      	mov	r0, r3
 8008298:	f7ff ff6c 	bl	8008174 <prvSampleTimeNow>
 800829c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b09      	cmp	r3, #9
 80082a2:	d86a      	bhi.n	800837a <prvProcessReceivedCommands+0x142>
 80082a4:	a201      	add	r2, pc, #4	; (adr r2, 80082ac <prvProcessReceivedCommands+0x74>)
 80082a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082aa:	bf00      	nop
 80082ac:	080082d5 	.word	0x080082d5
 80082b0:	080082d5 	.word	0x080082d5
 80082b4:	080082d5 	.word	0x080082d5
 80082b8:	0800837d 	.word	0x0800837d
 80082bc:	08008331 	.word	0x08008331
 80082c0:	08008369 	.word	0x08008369
 80082c4:	080082d5 	.word	0x080082d5
 80082c8:	080082d5 	.word	0x080082d5
 80082cc:	0800837d 	.word	0x0800837d
 80082d0:	08008331 	.word	0x08008331
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	18d1      	adds	r1, r2, r3
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082e2:	f7ff ff67 	bl	80081b4 <prvInsertTimerInActiveList>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d047      	beq.n	800837c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082f2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80082f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f6:	69db      	ldr	r3, [r3, #28]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d13f      	bne.n	800837c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	441a      	add	r2, r3
 8008304:	2300      	movs	r3, #0
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	2300      	movs	r3, #0
 800830a:	2100      	movs	r1, #0
 800830c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800830e:	f7ff fe1f 	bl	8007f50 <xTimerGenericCommand>
 8008312:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d130      	bne.n	800837c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	61bb      	str	r3, [r7, #24]
}
 800832c:	bf00      	nop
 800832e:	e7fe      	b.n	800832e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008334:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10a      	bne.n	8008354 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	617b      	str	r3, [r7, #20]
}
 8008350:	bf00      	nop
 8008352:	e7fe      	b.n	8008352 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008356:	699a      	ldr	r2, [r3, #24]
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	18d1      	adds	r1, r2, r3
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008362:	f7ff ff27 	bl	80081b4 <prvInsertTimerInActiveList>
					break;
 8008366:	e009      	b.n	800837c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800836e:	2b00      	cmp	r3, #0
 8008370:	d104      	bne.n	800837c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008374:	f000 fc0c 	bl	8008b90 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008378:	e000      	b.n	800837c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800837a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800837c:	4b07      	ldr	r3, [pc, #28]	; (800839c <prvProcessReceivedCommands+0x164>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	1d39      	adds	r1, r7, #4
 8008382:	2200      	movs	r2, #0
 8008384:	4618      	mov	r0, r3
 8008386:	f7fe fad9 	bl	800693c <xQueueReceive>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	f47f af57 	bne.w	8008240 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008392:	bf00      	nop
 8008394:	bf00      	nop
 8008396:	3730      	adds	r7, #48	; 0x30
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	20000eec 	.word	0x20000eec

080083a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083a6:	e045      	b.n	8008434 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083a8:	4b2c      	ldr	r3, [pc, #176]	; (800845c <prvSwitchTimerLists+0xbc>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083b2:	4b2a      	ldr	r3, [pc, #168]	; (800845c <prvSwitchTimerLists+0xbc>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	3304      	adds	r3, #4
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fd ffbb 	bl	800633c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d12e      	bne.n	8008434 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	4413      	add	r3, r2
 80083de:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d90e      	bls.n	8008406 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083f4:	4b19      	ldr	r3, [pc, #100]	; (800845c <prvSwitchTimerLists+0xbc>)
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3304      	adds	r3, #4
 80083fc:	4619      	mov	r1, r3
 80083fe:	4610      	mov	r0, r2
 8008400:	f7fd ff63 	bl	80062ca <vListInsert>
 8008404:	e016      	b.n	8008434 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008406:	2300      	movs	r3, #0
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	2300      	movs	r3, #0
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	2100      	movs	r1, #0
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f7ff fd9d 	bl	8007f50 <xTimerGenericCommand>
 8008416:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10a      	bne.n	8008434 <prvSwitchTimerLists+0x94>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	603b      	str	r3, [r7, #0]
}
 8008430:	bf00      	nop
 8008432:	e7fe      	b.n	8008432 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008434:	4b09      	ldr	r3, [pc, #36]	; (800845c <prvSwitchTimerLists+0xbc>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1b4      	bne.n	80083a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800843e:	4b07      	ldr	r3, [pc, #28]	; (800845c <prvSwitchTimerLists+0xbc>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008444:	4b06      	ldr	r3, [pc, #24]	; (8008460 <prvSwitchTimerLists+0xc0>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a04      	ldr	r2, [pc, #16]	; (800845c <prvSwitchTimerLists+0xbc>)
 800844a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800844c:	4a04      	ldr	r2, [pc, #16]	; (8008460 <prvSwitchTimerLists+0xc0>)
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	6013      	str	r3, [r2, #0]
}
 8008452:	bf00      	nop
 8008454:	3718      	adds	r7, #24
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	20000ee4 	.word	0x20000ee4
 8008460:	20000ee8 	.word	0x20000ee8

08008464 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800846a:	f000 f9ab 	bl	80087c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800846e:	4b15      	ldr	r3, [pc, #84]	; (80084c4 <prvCheckForValidListAndQueue+0x60>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d120      	bne.n	80084b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008476:	4814      	ldr	r0, [pc, #80]	; (80084c8 <prvCheckForValidListAndQueue+0x64>)
 8008478:	f7fd fed6 	bl	8006228 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800847c:	4813      	ldr	r0, [pc, #76]	; (80084cc <prvCheckForValidListAndQueue+0x68>)
 800847e:	f7fd fed3 	bl	8006228 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008482:	4b13      	ldr	r3, [pc, #76]	; (80084d0 <prvCheckForValidListAndQueue+0x6c>)
 8008484:	4a10      	ldr	r2, [pc, #64]	; (80084c8 <prvCheckForValidListAndQueue+0x64>)
 8008486:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008488:	4b12      	ldr	r3, [pc, #72]	; (80084d4 <prvCheckForValidListAndQueue+0x70>)
 800848a:	4a10      	ldr	r2, [pc, #64]	; (80084cc <prvCheckForValidListAndQueue+0x68>)
 800848c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800848e:	2300      	movs	r3, #0
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	4b11      	ldr	r3, [pc, #68]	; (80084d8 <prvCheckForValidListAndQueue+0x74>)
 8008494:	4a11      	ldr	r2, [pc, #68]	; (80084dc <prvCheckForValidListAndQueue+0x78>)
 8008496:	2110      	movs	r1, #16
 8008498:	200a      	movs	r0, #10
 800849a:	f7fd ffe1 	bl	8006460 <xQueueGenericCreateStatic>
 800849e:	4603      	mov	r3, r0
 80084a0:	4a08      	ldr	r2, [pc, #32]	; (80084c4 <prvCheckForValidListAndQueue+0x60>)
 80084a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80084a4:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <prvCheckForValidListAndQueue+0x60>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d005      	beq.n	80084b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80084ac:	4b05      	ldr	r3, [pc, #20]	; (80084c4 <prvCheckForValidListAndQueue+0x60>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	490b      	ldr	r1, [pc, #44]	; (80084e0 <prvCheckForValidListAndQueue+0x7c>)
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe fcec 	bl	8006e90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084b8:	f000 f9b4 	bl	8008824 <vPortExitCritical>
}
 80084bc:	bf00      	nop
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20000eec 	.word	0x20000eec
 80084c8:	20000ebc 	.word	0x20000ebc
 80084cc:	20000ed0 	.word	0x20000ed0
 80084d0:	20000ee4 	.word	0x20000ee4
 80084d4:	20000ee8 	.word	0x20000ee8
 80084d8:	20000f98 	.word	0x20000f98
 80084dc:	20000ef8 	.word	0x20000ef8
 80084e0:	08009a30 	.word	0x08009a30

080084e4 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10a      	bne.n	800850c <xTimerIsTimerActive+0x28>
	__asm volatile
 80084f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	60fb      	str	r3, [r7, #12]
}
 8008508:	bf00      	nop
 800850a:	e7fe      	b.n	800850a <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800850c:	f000 f95a 	bl	80087c4 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	2b00      	cmp	r3, #0
 8008516:	bf14      	ite	ne
 8008518:	2301      	movne	r3, #1
 800851a:	2300      	moveq	r3, #0
 800851c:	b2db      	uxtb	r3, r3
 800851e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008520:	f000 f980 	bl	8008824 <vPortExitCritical>

	return xTimerIsInActiveList;
 8008524:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b086      	sub	sp, #24
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10a      	bne.n	8008556 <pvTimerGetTimerID+0x28>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	60fb      	str	r3, [r7, #12]
}
 8008552:	bf00      	nop
 8008554:	e7fe      	b.n	8008554 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8008556:	f000 f935 	bl	80087c4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008560:	f000 f960 	bl	8008824 <vPortExitCritical>

	return pvReturn;
 8008564:	693b      	ldr	r3, [r7, #16]
}
 8008566:	4618      	mov	r0, r3
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
	...

08008570 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	3b04      	subs	r3, #4
 8008580:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	3b04      	subs	r3, #4
 800858e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	f023 0201 	bic.w	r2, r3, #1
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	3b04      	subs	r3, #4
 800859e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085a0:	4a0c      	ldr	r2, [pc, #48]	; (80085d4 <pxPortInitialiseStack+0x64>)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	3b14      	subs	r3, #20
 80085aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3b04      	subs	r3, #4
 80085b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f06f 0202 	mvn.w	r2, #2
 80085be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	3b20      	subs	r3, #32
 80085c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085c6:	68fb      	ldr	r3, [r7, #12]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	080085d9 	.word	0x080085d9

080085d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085e2:	4b12      	ldr	r3, [pc, #72]	; (800862c <prvTaskExitError+0x54>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085ea:	d00a      	beq.n	8008602 <prvTaskExitError+0x2a>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	60fb      	str	r3, [r7, #12]
}
 80085fe:	bf00      	nop
 8008600:	e7fe      	b.n	8008600 <prvTaskExitError+0x28>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	60bb      	str	r3, [r7, #8]
}
 8008614:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008616:	bf00      	nop
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d0fc      	beq.n	8008618 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800861e:	bf00      	nop
 8008620:	bf00      	nop
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	2000000c 	.word	0x2000000c

08008630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008630:	4b07      	ldr	r3, [pc, #28]	; (8008650 <pxCurrentTCBConst2>)
 8008632:	6819      	ldr	r1, [r3, #0]
 8008634:	6808      	ldr	r0, [r1, #0]
 8008636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863a:	f380 8809 	msr	PSP, r0
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f04f 0000 	mov.w	r0, #0
 8008646:	f380 8811 	msr	BASEPRI, r0
 800864a:	4770      	bx	lr
 800864c:	f3af 8000 	nop.w

08008650 <pxCurrentTCBConst2>:
 8008650:	200009bc 	.word	0x200009bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop

08008658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008658:	4808      	ldr	r0, [pc, #32]	; (800867c <prvPortStartFirstTask+0x24>)
 800865a:	6800      	ldr	r0, [r0, #0]
 800865c:	6800      	ldr	r0, [r0, #0]
 800865e:	f380 8808 	msr	MSP, r0
 8008662:	f04f 0000 	mov.w	r0, #0
 8008666:	f380 8814 	msr	CONTROL, r0
 800866a:	b662      	cpsie	i
 800866c:	b661      	cpsie	f
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	df00      	svc	0
 8008678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800867a:	bf00      	nop
 800867c:	e000ed08 	.word	0xe000ed08

08008680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008686:	4b46      	ldr	r3, [pc, #280]	; (80087a0 <xPortStartScheduler+0x120>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a46      	ldr	r2, [pc, #280]	; (80087a4 <xPortStartScheduler+0x124>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d10a      	bne.n	80086a6 <xPortStartScheduler+0x26>
	__asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	613b      	str	r3, [r7, #16]
}
 80086a2:	bf00      	nop
 80086a4:	e7fe      	b.n	80086a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80086a6:	4b3e      	ldr	r3, [pc, #248]	; (80087a0 <xPortStartScheduler+0x120>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a3f      	ldr	r2, [pc, #252]	; (80087a8 <xPortStartScheduler+0x128>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d10a      	bne.n	80086c6 <xPortStartScheduler+0x46>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	60fb      	str	r3, [r7, #12]
}
 80086c2:	bf00      	nop
 80086c4:	e7fe      	b.n	80086c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086c6:	4b39      	ldr	r3, [pc, #228]	; (80087ac <xPortStartScheduler+0x12c>)
 80086c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	22ff      	movs	r2, #255	; 0xff
 80086d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086e0:	78fb      	ldrb	r3, [r7, #3]
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	4b31      	ldr	r3, [pc, #196]	; (80087b0 <xPortStartScheduler+0x130>)
 80086ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086ee:	4b31      	ldr	r3, [pc, #196]	; (80087b4 <xPortStartScheduler+0x134>)
 80086f0:	2207      	movs	r2, #7
 80086f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086f4:	e009      	b.n	800870a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80086f6:	4b2f      	ldr	r3, [pc, #188]	; (80087b4 <xPortStartScheduler+0x134>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	4a2d      	ldr	r2, [pc, #180]	; (80087b4 <xPortStartScheduler+0x134>)
 80086fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	b2db      	uxtb	r3, r3
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	b2db      	uxtb	r3, r3
 8008708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800870a:	78fb      	ldrb	r3, [r7, #3]
 800870c:	b2db      	uxtb	r3, r3
 800870e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008712:	2b80      	cmp	r3, #128	; 0x80
 8008714:	d0ef      	beq.n	80086f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008716:	4b27      	ldr	r3, [pc, #156]	; (80087b4 <xPortStartScheduler+0x134>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f1c3 0307 	rsb	r3, r3, #7
 800871e:	2b04      	cmp	r3, #4
 8008720:	d00a      	beq.n	8008738 <xPortStartScheduler+0xb8>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	60bb      	str	r3, [r7, #8]
}
 8008734:	bf00      	nop
 8008736:	e7fe      	b.n	8008736 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008738:	4b1e      	ldr	r3, [pc, #120]	; (80087b4 <xPortStartScheduler+0x134>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	021b      	lsls	r3, r3, #8
 800873e:	4a1d      	ldr	r2, [pc, #116]	; (80087b4 <xPortStartScheduler+0x134>)
 8008740:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008742:	4b1c      	ldr	r3, [pc, #112]	; (80087b4 <xPortStartScheduler+0x134>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800874a:	4a1a      	ldr	r2, [pc, #104]	; (80087b4 <xPortStartScheduler+0x134>)
 800874c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	b2da      	uxtb	r2, r3
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008756:	4b18      	ldr	r3, [pc, #96]	; (80087b8 <xPortStartScheduler+0x138>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a17      	ldr	r2, [pc, #92]	; (80087b8 <xPortStartScheduler+0x138>)
 800875c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008760:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008762:	4b15      	ldr	r3, [pc, #84]	; (80087b8 <xPortStartScheduler+0x138>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a14      	ldr	r2, [pc, #80]	; (80087b8 <xPortStartScheduler+0x138>)
 8008768:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800876c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800876e:	f000 f8dd 	bl	800892c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008772:	4b12      	ldr	r3, [pc, #72]	; (80087bc <xPortStartScheduler+0x13c>)
 8008774:	2200      	movs	r2, #0
 8008776:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008778:	f000 f8fc 	bl	8008974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800877c:	4b10      	ldr	r3, [pc, #64]	; (80087c0 <xPortStartScheduler+0x140>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a0f      	ldr	r2, [pc, #60]	; (80087c0 <xPortStartScheduler+0x140>)
 8008782:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008786:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008788:	f7ff ff66 	bl	8008658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800878c:	f7fe ffac 	bl	80076e8 <vTaskSwitchContext>
	prvTaskExitError();
 8008790:	f7ff ff22 	bl	80085d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	e000ed00 	.word	0xe000ed00
 80087a4:	410fc271 	.word	0x410fc271
 80087a8:	410fc270 	.word	0x410fc270
 80087ac:	e000e400 	.word	0xe000e400
 80087b0:	20000fe8 	.word	0x20000fe8
 80087b4:	20000fec 	.word	0x20000fec
 80087b8:	e000ed20 	.word	0xe000ed20
 80087bc:	2000000c 	.word	0x2000000c
 80087c0:	e000ef34 	.word	0xe000ef34

080087c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	607b      	str	r3, [r7, #4]
}
 80087dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087de:	4b0f      	ldr	r3, [pc, #60]	; (800881c <vPortEnterCritical+0x58>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	3301      	adds	r3, #1
 80087e4:	4a0d      	ldr	r2, [pc, #52]	; (800881c <vPortEnterCritical+0x58>)
 80087e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80087e8:	4b0c      	ldr	r3, [pc, #48]	; (800881c <vPortEnterCritical+0x58>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d10f      	bne.n	8008810 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087f0:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <vPortEnterCritical+0x5c>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00a      	beq.n	8008810 <vPortEnterCritical+0x4c>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	603b      	str	r3, [r7, #0]
}
 800880c:	bf00      	nop
 800880e:	e7fe      	b.n	800880e <vPortEnterCritical+0x4a>
	}
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr
 800881c:	2000000c 	.word	0x2000000c
 8008820:	e000ed04 	.word	0xe000ed04

08008824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800882a:	4b12      	ldr	r3, [pc, #72]	; (8008874 <vPortExitCritical+0x50>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10a      	bne.n	8008848 <vPortExitCritical+0x24>
	__asm volatile
 8008832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	607b      	str	r3, [r7, #4]
}
 8008844:	bf00      	nop
 8008846:	e7fe      	b.n	8008846 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008848:	4b0a      	ldr	r3, [pc, #40]	; (8008874 <vPortExitCritical+0x50>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3b01      	subs	r3, #1
 800884e:	4a09      	ldr	r2, [pc, #36]	; (8008874 <vPortExitCritical+0x50>)
 8008850:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008852:	4b08      	ldr	r3, [pc, #32]	; (8008874 <vPortExitCritical+0x50>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d105      	bne.n	8008866 <vPortExitCritical+0x42>
 800885a:	2300      	movs	r3, #0
 800885c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	f383 8811 	msr	BASEPRI, r3
}
 8008864:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008866:	bf00      	nop
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	2000000c 	.word	0x2000000c
	...

08008880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008880:	f3ef 8009 	mrs	r0, PSP
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	4b15      	ldr	r3, [pc, #84]	; (80088e0 <pxCurrentTCBConst>)
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	f01e 0f10 	tst.w	lr, #16
 8008890:	bf08      	it	eq
 8008892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889a:	6010      	str	r0, [r2, #0]
 800889c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80088a4:	f380 8811 	msr	BASEPRI, r0
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f7fe ff1a 	bl	80076e8 <vTaskSwitchContext>
 80088b4:	f04f 0000 	mov.w	r0, #0
 80088b8:	f380 8811 	msr	BASEPRI, r0
 80088bc:	bc09      	pop	{r0, r3}
 80088be:	6819      	ldr	r1, [r3, #0]
 80088c0:	6808      	ldr	r0, [r1, #0]
 80088c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c6:	f01e 0f10 	tst.w	lr, #16
 80088ca:	bf08      	it	eq
 80088cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088d0:	f380 8809 	msr	PSP, r0
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	f3af 8000 	nop.w

080088e0 <pxCurrentTCBConst>:
 80088e0:	200009bc 	.word	0x200009bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop

080088e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	607b      	str	r3, [r7, #4]
}
 8008900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008902:	f7fe fe33 	bl	800756c <xTaskIncrementTick>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d003      	beq.n	8008914 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800890c:	4b06      	ldr	r3, [pc, #24]	; (8008928 <SysTick_Handler+0x40>)
 800890e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	2300      	movs	r3, #0
 8008916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	f383 8811 	msr	BASEPRI, r3
}
 800891e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	e000ed04 	.word	0xe000ed04

0800892c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008930:	4b0b      	ldr	r3, [pc, #44]	; (8008960 <vPortSetupTimerInterrupt+0x34>)
 8008932:	2200      	movs	r2, #0
 8008934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008936:	4b0b      	ldr	r3, [pc, #44]	; (8008964 <vPortSetupTimerInterrupt+0x38>)
 8008938:	2200      	movs	r2, #0
 800893a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800893c:	4b0a      	ldr	r3, [pc, #40]	; (8008968 <vPortSetupTimerInterrupt+0x3c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a0a      	ldr	r2, [pc, #40]	; (800896c <vPortSetupTimerInterrupt+0x40>)
 8008942:	fba2 2303 	umull	r2, r3, r2, r3
 8008946:	099b      	lsrs	r3, r3, #6
 8008948:	4a09      	ldr	r2, [pc, #36]	; (8008970 <vPortSetupTimerInterrupt+0x44>)
 800894a:	3b01      	subs	r3, #1
 800894c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800894e:	4b04      	ldr	r3, [pc, #16]	; (8008960 <vPortSetupTimerInterrupt+0x34>)
 8008950:	2207      	movs	r2, #7
 8008952:	601a      	str	r2, [r3, #0]
}
 8008954:	bf00      	nop
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	e000e010 	.word	0xe000e010
 8008964:	e000e018 	.word	0xe000e018
 8008968:	20000000 	.word	0x20000000
 800896c:	10624dd3 	.word	0x10624dd3
 8008970:	e000e014 	.word	0xe000e014

08008974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008974:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008984 <vPortEnableVFP+0x10>
 8008978:	6801      	ldr	r1, [r0, #0]
 800897a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800897e:	6001      	str	r1, [r0, #0]
 8008980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008982:	bf00      	nop
 8008984:	e000ed88 	.word	0xe000ed88

08008988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800898e:	f3ef 8305 	mrs	r3, IPSR
 8008992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b0f      	cmp	r3, #15
 8008998:	d914      	bls.n	80089c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800899a:	4a17      	ldr	r2, [pc, #92]	; (80089f8 <vPortValidateInterruptPriority+0x70>)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4413      	add	r3, r2
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80089a4:	4b15      	ldr	r3, [pc, #84]	; (80089fc <vPortValidateInterruptPriority+0x74>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	7afa      	ldrb	r2, [r7, #11]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d20a      	bcs.n	80089c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	607b      	str	r3, [r7, #4]
}
 80089c0:	bf00      	nop
 80089c2:	e7fe      	b.n	80089c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089c4:	4b0e      	ldr	r3, [pc, #56]	; (8008a00 <vPortValidateInterruptPriority+0x78>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089cc:	4b0d      	ldr	r3, [pc, #52]	; (8008a04 <vPortValidateInterruptPriority+0x7c>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d90a      	bls.n	80089ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	603b      	str	r3, [r7, #0]
}
 80089e6:	bf00      	nop
 80089e8:	e7fe      	b.n	80089e8 <vPortValidateInterruptPriority+0x60>
	}
 80089ea:	bf00      	nop
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	e000e3f0 	.word	0xe000e3f0
 80089fc:	20000fe8 	.word	0x20000fe8
 8008a00:	e000ed0c 	.word	0xe000ed0c
 8008a04:	20000fec 	.word	0x20000fec

08008a08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b08a      	sub	sp, #40	; 0x28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a10:	2300      	movs	r3, #0
 8008a12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a14:	f7fe fcee 	bl	80073f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a18:	4b58      	ldr	r3, [pc, #352]	; (8008b7c <pvPortMalloc+0x174>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d101      	bne.n	8008a24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a20:	f000 f910 	bl	8008c44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a24:	4b56      	ldr	r3, [pc, #344]	; (8008b80 <pvPortMalloc+0x178>)
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f040 808e 	bne.w	8008b4e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d01d      	beq.n	8008a74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008a38:	2208      	movs	r2, #8
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f003 0307 	and.w	r3, r3, #7
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d014      	beq.n	8008a74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f023 0307 	bic.w	r3, r3, #7
 8008a50:	3308      	adds	r3, #8
 8008a52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00a      	beq.n	8008a74 <pvPortMalloc+0x6c>
	__asm volatile
 8008a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	617b      	str	r3, [r7, #20]
}
 8008a70:	bf00      	nop
 8008a72:	e7fe      	b.n	8008a72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d069      	beq.n	8008b4e <pvPortMalloc+0x146>
 8008a7a:	4b42      	ldr	r3, [pc, #264]	; (8008b84 <pvPortMalloc+0x17c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d864      	bhi.n	8008b4e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a84:	4b40      	ldr	r3, [pc, #256]	; (8008b88 <pvPortMalloc+0x180>)
 8008a86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a88:	4b3f      	ldr	r3, [pc, #252]	; (8008b88 <pvPortMalloc+0x180>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a8e:	e004      	b.n	8008a9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d903      	bls.n	8008aac <pvPortMalloc+0xa4>
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1f1      	bne.n	8008a90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008aac:	4b33      	ldr	r3, [pc, #204]	; (8008b7c <pvPortMalloc+0x174>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d04b      	beq.n	8008b4e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2208      	movs	r2, #8
 8008abc:	4413      	add	r3, r2
 8008abe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	6a3b      	ldr	r3, [r7, #32]
 8008ac6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	1ad2      	subs	r2, r2, r3
 8008ad0:	2308      	movs	r3, #8
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d91f      	bls.n	8008b18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4413      	add	r3, r2
 8008ade:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	f003 0307 	and.w	r3, r3, #7
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00a      	beq.n	8008b00 <pvPortMalloc+0xf8>
	__asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	613b      	str	r3, [r7, #16]
}
 8008afc:	bf00      	nop
 8008afe:	e7fe      	b.n	8008afe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	1ad2      	subs	r2, r2, r3
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b12:	69b8      	ldr	r0, [r7, #24]
 8008b14:	f000 f8f8 	bl	8008d08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b18:	4b1a      	ldr	r3, [pc, #104]	; (8008b84 <pvPortMalloc+0x17c>)
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	4a18      	ldr	r2, [pc, #96]	; (8008b84 <pvPortMalloc+0x17c>)
 8008b24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b26:	4b17      	ldr	r3, [pc, #92]	; (8008b84 <pvPortMalloc+0x17c>)
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	4b18      	ldr	r3, [pc, #96]	; (8008b8c <pvPortMalloc+0x184>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d203      	bcs.n	8008b3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b32:	4b14      	ldr	r3, [pc, #80]	; (8008b84 <pvPortMalloc+0x17c>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a15      	ldr	r2, [pc, #84]	; (8008b8c <pvPortMalloc+0x184>)
 8008b38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	4b10      	ldr	r3, [pc, #64]	; (8008b80 <pvPortMalloc+0x178>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	431a      	orrs	r2, r3
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b4e:	f7fe fc5f 	bl	8007410 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	f003 0307 	and.w	r3, r3, #7
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00a      	beq.n	8008b72 <pvPortMalloc+0x16a>
	__asm volatile
 8008b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	60fb      	str	r3, [r7, #12]
}
 8008b6e:	bf00      	nop
 8008b70:	e7fe      	b.n	8008b70 <pvPortMalloc+0x168>
	return pvReturn;
 8008b72:	69fb      	ldr	r3, [r7, #28]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3728      	adds	r7, #40	; 0x28
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	20001bf8 	.word	0x20001bf8
 8008b80:	20001c04 	.word	0x20001c04
 8008b84:	20001bfc 	.word	0x20001bfc
 8008b88:	20001bf0 	.word	0x20001bf0
 8008b8c:	20001c00 	.word	0x20001c00

08008b90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d048      	beq.n	8008c34 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ba2:	2308      	movs	r3, #8
 8008ba4:	425b      	negs	r3, r3
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	4413      	add	r3, r2
 8008baa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	685a      	ldr	r2, [r3, #4]
 8008bb4:	4b21      	ldr	r3, [pc, #132]	; (8008c3c <vPortFree+0xac>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4013      	ands	r3, r2
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10a      	bne.n	8008bd4 <vPortFree+0x44>
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	60fb      	str	r3, [r7, #12]
}
 8008bd0:	bf00      	nop
 8008bd2:	e7fe      	b.n	8008bd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00a      	beq.n	8008bf2 <vPortFree+0x62>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	60bb      	str	r3, [r7, #8]
}
 8008bee:	bf00      	nop
 8008bf0:	e7fe      	b.n	8008bf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	4b11      	ldr	r3, [pc, #68]	; (8008c3c <vPortFree+0xac>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d019      	beq.n	8008c34 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d115      	bne.n	8008c34 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	4b0b      	ldr	r3, [pc, #44]	; (8008c3c <vPortFree+0xac>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	43db      	mvns	r3, r3
 8008c12:	401a      	ands	r2, r3
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c18:	f7fe fbec 	bl	80073f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	4b07      	ldr	r3, [pc, #28]	; (8008c40 <vPortFree+0xb0>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4413      	add	r3, r2
 8008c26:	4a06      	ldr	r2, [pc, #24]	; (8008c40 <vPortFree+0xb0>)
 8008c28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c2a:	6938      	ldr	r0, [r7, #16]
 8008c2c:	f000 f86c 	bl	8008d08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008c30:	f7fe fbee 	bl	8007410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c34:	bf00      	nop
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	20001c04 	.word	0x20001c04
 8008c40:	20001bfc 	.word	0x20001bfc

08008c44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008c4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c50:	4b27      	ldr	r3, [pc, #156]	; (8008cf0 <prvHeapInit+0xac>)
 8008c52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f003 0307 	and.w	r3, r3, #7
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00c      	beq.n	8008c78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	3307      	adds	r3, #7
 8008c62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f023 0307 	bic.w	r3, r3, #7
 8008c6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	4a1f      	ldr	r2, [pc, #124]	; (8008cf0 <prvHeapInit+0xac>)
 8008c74:	4413      	add	r3, r2
 8008c76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c7c:	4a1d      	ldr	r2, [pc, #116]	; (8008cf4 <prvHeapInit+0xb0>)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c82:	4b1c      	ldr	r3, [pc, #112]	; (8008cf4 <prvHeapInit+0xb0>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c90:	2208      	movs	r2, #8
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	1a9b      	subs	r3, r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 0307 	bic.w	r3, r3, #7
 8008c9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4a15      	ldr	r2, [pc, #84]	; (8008cf8 <prvHeapInit+0xb4>)
 8008ca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ca6:	4b14      	ldr	r3, [pc, #80]	; (8008cf8 <prvHeapInit+0xb4>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2200      	movs	r2, #0
 8008cac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cae:	4b12      	ldr	r3, [pc, #72]	; (8008cf8 <prvHeapInit+0xb4>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	1ad2      	subs	r2, r2, r3
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008cc4:	4b0c      	ldr	r3, [pc, #48]	; (8008cf8 <prvHeapInit+0xb4>)
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	4a0a      	ldr	r2, [pc, #40]	; (8008cfc <prvHeapInit+0xb8>)
 8008cd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	4a09      	ldr	r2, [pc, #36]	; (8008d00 <prvHeapInit+0xbc>)
 8008cda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cdc:	4b09      	ldr	r3, [pc, #36]	; (8008d04 <prvHeapInit+0xc0>)
 8008cde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ce2:	601a      	str	r2, [r3, #0]
}
 8008ce4:	bf00      	nop
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	20000ff0 	.word	0x20000ff0
 8008cf4:	20001bf0 	.word	0x20001bf0
 8008cf8:	20001bf8 	.word	0x20001bf8
 8008cfc:	20001c00 	.word	0x20001c00
 8008d00:	20001bfc 	.word	0x20001bfc
 8008d04:	20001c04 	.word	0x20001c04

08008d08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d10:	4b28      	ldr	r3, [pc, #160]	; (8008db4 <prvInsertBlockIntoFreeList+0xac>)
 8008d12:	60fb      	str	r3, [r7, #12]
 8008d14:	e002      	b.n	8008d1c <prvInsertBlockIntoFreeList+0x14>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60fb      	str	r3, [r7, #12]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d8f7      	bhi.n	8008d16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	4413      	add	r3, r2
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d108      	bne.n	8008d4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	685a      	ldr	r2, [r3, #4]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	441a      	add	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	441a      	add	r2, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d118      	bne.n	8008d90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	4b15      	ldr	r3, [pc, #84]	; (8008db8 <prvInsertBlockIntoFreeList+0xb0>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d00d      	beq.n	8008d86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	441a      	add	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	e008      	b.n	8008d98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d86:	4b0c      	ldr	r3, [pc, #48]	; (8008db8 <prvInsertBlockIntoFreeList+0xb0>)
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	e003      	b.n	8008d98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d002      	beq.n	8008da6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008da6:	bf00      	nop
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	20001bf0 	.word	0x20001bf0
 8008db8:	20001bf8 	.word	0x20001bf8

08008dbc <asiprintf>:
 8008dbc:	b40e      	push	{r1, r2, r3}
 8008dbe:	b530      	push	{r4, r5, lr}
 8008dc0:	b09c      	sub	sp, #112	; 0x70
 8008dc2:	ab1f      	add	r3, sp, #124	; 0x7c
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	490d      	ldr	r1, [pc, #52]	; (8008dfc <asiprintf+0x40>)
 8008dc8:	480d      	ldr	r0, [pc, #52]	; (8008e00 <asiprintf+0x44>)
 8008dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dce:	6800      	ldr	r0, [r0, #0]
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	2400      	movs	r4, #0
 8008dd4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8008dd8:	a902      	add	r1, sp, #8
 8008dda:	9402      	str	r4, [sp, #8]
 8008ddc:	9404      	str	r4, [sp, #16]
 8008dde:	9407      	str	r4, [sp, #28]
 8008de0:	f000 f9fa 	bl	80091d8 <_svfiprintf_r>
 8008de4:	2800      	cmp	r0, #0
 8008de6:	bfa1      	itttt	ge
 8008de8:	9b02      	ldrge	r3, [sp, #8]
 8008dea:	701c      	strbge	r4, [r3, #0]
 8008dec:	9b06      	ldrge	r3, [sp, #24]
 8008dee:	602b      	strge	r3, [r5, #0]
 8008df0:	b01c      	add	sp, #112	; 0x70
 8008df2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008df6:	b003      	add	sp, #12
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	ffff0288 	.word	0xffff0288
 8008e00:	2000005c 	.word	0x2000005c

08008e04 <memset>:
 8008e04:	4402      	add	r2, r0
 8008e06:	4603      	mov	r3, r0
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d100      	bne.n	8008e0e <memset+0xa>
 8008e0c:	4770      	bx	lr
 8008e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e12:	e7f9      	b.n	8008e08 <memset+0x4>

08008e14 <_reclaim_reent>:
 8008e14:	4b29      	ldr	r3, [pc, #164]	; (8008ebc <_reclaim_reent+0xa8>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4283      	cmp	r3, r0
 8008e1a:	b570      	push	{r4, r5, r6, lr}
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	d04b      	beq.n	8008eb8 <_reclaim_reent+0xa4>
 8008e20:	69c3      	ldr	r3, [r0, #28]
 8008e22:	b143      	cbz	r3, 8008e36 <_reclaim_reent+0x22>
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d144      	bne.n	8008eb4 <_reclaim_reent+0xa0>
 8008e2a:	69e3      	ldr	r3, [r4, #28]
 8008e2c:	6819      	ldr	r1, [r3, #0]
 8008e2e:	b111      	cbz	r1, 8008e36 <_reclaim_reent+0x22>
 8008e30:	4620      	mov	r0, r4
 8008e32:	f000 f87f 	bl	8008f34 <_free_r>
 8008e36:	6961      	ldr	r1, [r4, #20]
 8008e38:	b111      	cbz	r1, 8008e40 <_reclaim_reent+0x2c>
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 f87a 	bl	8008f34 <_free_r>
 8008e40:	69e1      	ldr	r1, [r4, #28]
 8008e42:	b111      	cbz	r1, 8008e4a <_reclaim_reent+0x36>
 8008e44:	4620      	mov	r0, r4
 8008e46:	f000 f875 	bl	8008f34 <_free_r>
 8008e4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008e4c:	b111      	cbz	r1, 8008e54 <_reclaim_reent+0x40>
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f000 f870 	bl	8008f34 <_free_r>
 8008e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e56:	b111      	cbz	r1, 8008e5e <_reclaim_reent+0x4a>
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f000 f86b 	bl	8008f34 <_free_r>
 8008e5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008e60:	b111      	cbz	r1, 8008e68 <_reclaim_reent+0x54>
 8008e62:	4620      	mov	r0, r4
 8008e64:	f000 f866 	bl	8008f34 <_free_r>
 8008e68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008e6a:	b111      	cbz	r1, 8008e72 <_reclaim_reent+0x5e>
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f000 f861 	bl	8008f34 <_free_r>
 8008e72:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008e74:	b111      	cbz	r1, 8008e7c <_reclaim_reent+0x68>
 8008e76:	4620      	mov	r0, r4
 8008e78:	f000 f85c 	bl	8008f34 <_free_r>
 8008e7c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008e7e:	b111      	cbz	r1, 8008e86 <_reclaim_reent+0x72>
 8008e80:	4620      	mov	r0, r4
 8008e82:	f000 f857 	bl	8008f34 <_free_r>
 8008e86:	6a23      	ldr	r3, [r4, #32]
 8008e88:	b1b3      	cbz	r3, 8008eb8 <_reclaim_reent+0xa4>
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e90:	4718      	bx	r3
 8008e92:	5949      	ldr	r1, [r1, r5]
 8008e94:	b941      	cbnz	r1, 8008ea8 <_reclaim_reent+0x94>
 8008e96:	3504      	adds	r5, #4
 8008e98:	69e3      	ldr	r3, [r4, #28]
 8008e9a:	2d80      	cmp	r5, #128	; 0x80
 8008e9c:	68d9      	ldr	r1, [r3, #12]
 8008e9e:	d1f8      	bne.n	8008e92 <_reclaim_reent+0x7e>
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 f847 	bl	8008f34 <_free_r>
 8008ea6:	e7c0      	b.n	8008e2a <_reclaim_reent+0x16>
 8008ea8:	680e      	ldr	r6, [r1, #0]
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f000 f842 	bl	8008f34 <_free_r>
 8008eb0:	4631      	mov	r1, r6
 8008eb2:	e7ef      	b.n	8008e94 <_reclaim_reent+0x80>
 8008eb4:	2500      	movs	r5, #0
 8008eb6:	e7ef      	b.n	8008e98 <_reclaim_reent+0x84>
 8008eb8:	bd70      	pop	{r4, r5, r6, pc}
 8008eba:	bf00      	nop
 8008ebc:	2000005c 	.word	0x2000005c

08008ec0 <__errno>:
 8008ec0:	4b01      	ldr	r3, [pc, #4]	; (8008ec8 <__errno+0x8>)
 8008ec2:	6818      	ldr	r0, [r3, #0]
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	2000005c 	.word	0x2000005c

08008ecc <__libc_init_array>:
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	4d0d      	ldr	r5, [pc, #52]	; (8008f04 <__libc_init_array+0x38>)
 8008ed0:	4c0d      	ldr	r4, [pc, #52]	; (8008f08 <__libc_init_array+0x3c>)
 8008ed2:	1b64      	subs	r4, r4, r5
 8008ed4:	10a4      	asrs	r4, r4, #2
 8008ed6:	2600      	movs	r6, #0
 8008ed8:	42a6      	cmp	r6, r4
 8008eda:	d109      	bne.n	8008ef0 <__libc_init_array+0x24>
 8008edc:	4d0b      	ldr	r5, [pc, #44]	; (8008f0c <__libc_init_array+0x40>)
 8008ede:	4c0c      	ldr	r4, [pc, #48]	; (8008f10 <__libc_init_array+0x44>)
 8008ee0:	f000 fc6a 	bl	80097b8 <_init>
 8008ee4:	1b64      	subs	r4, r4, r5
 8008ee6:	10a4      	asrs	r4, r4, #2
 8008ee8:	2600      	movs	r6, #0
 8008eea:	42a6      	cmp	r6, r4
 8008eec:	d105      	bne.n	8008efa <__libc_init_array+0x2e>
 8008eee:	bd70      	pop	{r4, r5, r6, pc}
 8008ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef4:	4798      	blx	r3
 8008ef6:	3601      	adds	r6, #1
 8008ef8:	e7ee      	b.n	8008ed8 <__libc_init_array+0xc>
 8008efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008efe:	4798      	blx	r3
 8008f00:	3601      	adds	r6, #1
 8008f02:	e7f2      	b.n	8008eea <__libc_init_array+0x1e>
 8008f04:	08009b50 	.word	0x08009b50
 8008f08:	08009b50 	.word	0x08009b50
 8008f0c:	08009b50 	.word	0x08009b50
 8008f10:	08009b54 	.word	0x08009b54

08008f14 <__retarget_lock_acquire_recursive>:
 8008f14:	4770      	bx	lr

08008f16 <__retarget_lock_release_recursive>:
 8008f16:	4770      	bx	lr

08008f18 <memcpy>:
 8008f18:	440a      	add	r2, r1
 8008f1a:	4291      	cmp	r1, r2
 8008f1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008f20:	d100      	bne.n	8008f24 <memcpy+0xc>
 8008f22:	4770      	bx	lr
 8008f24:	b510      	push	{r4, lr}
 8008f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f2e:	4291      	cmp	r1, r2
 8008f30:	d1f9      	bne.n	8008f26 <memcpy+0xe>
 8008f32:	bd10      	pop	{r4, pc}

08008f34 <_free_r>:
 8008f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f36:	2900      	cmp	r1, #0
 8008f38:	d044      	beq.n	8008fc4 <_free_r+0x90>
 8008f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f3e:	9001      	str	r0, [sp, #4]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f1a1 0404 	sub.w	r4, r1, #4
 8008f46:	bfb8      	it	lt
 8008f48:	18e4      	addlt	r4, r4, r3
 8008f4a:	f000 f8df 	bl	800910c <__malloc_lock>
 8008f4e:	4a1e      	ldr	r2, [pc, #120]	; (8008fc8 <_free_r+0x94>)
 8008f50:	9801      	ldr	r0, [sp, #4]
 8008f52:	6813      	ldr	r3, [r2, #0]
 8008f54:	b933      	cbnz	r3, 8008f64 <_free_r+0x30>
 8008f56:	6063      	str	r3, [r4, #4]
 8008f58:	6014      	str	r4, [r2, #0]
 8008f5a:	b003      	add	sp, #12
 8008f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f60:	f000 b8da 	b.w	8009118 <__malloc_unlock>
 8008f64:	42a3      	cmp	r3, r4
 8008f66:	d908      	bls.n	8008f7a <_free_r+0x46>
 8008f68:	6825      	ldr	r5, [r4, #0]
 8008f6a:	1961      	adds	r1, r4, r5
 8008f6c:	428b      	cmp	r3, r1
 8008f6e:	bf01      	itttt	eq
 8008f70:	6819      	ldreq	r1, [r3, #0]
 8008f72:	685b      	ldreq	r3, [r3, #4]
 8008f74:	1949      	addeq	r1, r1, r5
 8008f76:	6021      	streq	r1, [r4, #0]
 8008f78:	e7ed      	b.n	8008f56 <_free_r+0x22>
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	b10b      	cbz	r3, 8008f84 <_free_r+0x50>
 8008f80:	42a3      	cmp	r3, r4
 8008f82:	d9fa      	bls.n	8008f7a <_free_r+0x46>
 8008f84:	6811      	ldr	r1, [r2, #0]
 8008f86:	1855      	adds	r5, r2, r1
 8008f88:	42a5      	cmp	r5, r4
 8008f8a:	d10b      	bne.n	8008fa4 <_free_r+0x70>
 8008f8c:	6824      	ldr	r4, [r4, #0]
 8008f8e:	4421      	add	r1, r4
 8008f90:	1854      	adds	r4, r2, r1
 8008f92:	42a3      	cmp	r3, r4
 8008f94:	6011      	str	r1, [r2, #0]
 8008f96:	d1e0      	bne.n	8008f5a <_free_r+0x26>
 8008f98:	681c      	ldr	r4, [r3, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	6053      	str	r3, [r2, #4]
 8008f9e:	440c      	add	r4, r1
 8008fa0:	6014      	str	r4, [r2, #0]
 8008fa2:	e7da      	b.n	8008f5a <_free_r+0x26>
 8008fa4:	d902      	bls.n	8008fac <_free_r+0x78>
 8008fa6:	230c      	movs	r3, #12
 8008fa8:	6003      	str	r3, [r0, #0]
 8008faa:	e7d6      	b.n	8008f5a <_free_r+0x26>
 8008fac:	6825      	ldr	r5, [r4, #0]
 8008fae:	1961      	adds	r1, r4, r5
 8008fb0:	428b      	cmp	r3, r1
 8008fb2:	bf04      	itt	eq
 8008fb4:	6819      	ldreq	r1, [r3, #0]
 8008fb6:	685b      	ldreq	r3, [r3, #4]
 8008fb8:	6063      	str	r3, [r4, #4]
 8008fba:	bf04      	itt	eq
 8008fbc:	1949      	addeq	r1, r1, r5
 8008fbe:	6021      	streq	r1, [r4, #0]
 8008fc0:	6054      	str	r4, [r2, #4]
 8008fc2:	e7ca      	b.n	8008f5a <_free_r+0x26>
 8008fc4:	b003      	add	sp, #12
 8008fc6:	bd30      	pop	{r4, r5, pc}
 8008fc8:	20001d48 	.word	0x20001d48

08008fcc <sbrk_aligned>:
 8008fcc:	b570      	push	{r4, r5, r6, lr}
 8008fce:	4e0e      	ldr	r6, [pc, #56]	; (8009008 <sbrk_aligned+0x3c>)
 8008fd0:	460c      	mov	r4, r1
 8008fd2:	6831      	ldr	r1, [r6, #0]
 8008fd4:	4605      	mov	r5, r0
 8008fd6:	b911      	cbnz	r1, 8008fde <sbrk_aligned+0x12>
 8008fd8:	f000 fba6 	bl	8009728 <_sbrk_r>
 8008fdc:	6030      	str	r0, [r6, #0]
 8008fde:	4621      	mov	r1, r4
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	f000 fba1 	bl	8009728 <_sbrk_r>
 8008fe6:	1c43      	adds	r3, r0, #1
 8008fe8:	d00a      	beq.n	8009000 <sbrk_aligned+0x34>
 8008fea:	1cc4      	adds	r4, r0, #3
 8008fec:	f024 0403 	bic.w	r4, r4, #3
 8008ff0:	42a0      	cmp	r0, r4
 8008ff2:	d007      	beq.n	8009004 <sbrk_aligned+0x38>
 8008ff4:	1a21      	subs	r1, r4, r0
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f000 fb96 	bl	8009728 <_sbrk_r>
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d101      	bne.n	8009004 <sbrk_aligned+0x38>
 8009000:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009004:	4620      	mov	r0, r4
 8009006:	bd70      	pop	{r4, r5, r6, pc}
 8009008:	20001d4c 	.word	0x20001d4c

0800900c <_malloc_r>:
 800900c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009010:	1ccd      	adds	r5, r1, #3
 8009012:	f025 0503 	bic.w	r5, r5, #3
 8009016:	3508      	adds	r5, #8
 8009018:	2d0c      	cmp	r5, #12
 800901a:	bf38      	it	cc
 800901c:	250c      	movcc	r5, #12
 800901e:	2d00      	cmp	r5, #0
 8009020:	4607      	mov	r7, r0
 8009022:	db01      	blt.n	8009028 <_malloc_r+0x1c>
 8009024:	42a9      	cmp	r1, r5
 8009026:	d905      	bls.n	8009034 <_malloc_r+0x28>
 8009028:	230c      	movs	r3, #12
 800902a:	603b      	str	r3, [r7, #0]
 800902c:	2600      	movs	r6, #0
 800902e:	4630      	mov	r0, r6
 8009030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009034:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009108 <_malloc_r+0xfc>
 8009038:	f000 f868 	bl	800910c <__malloc_lock>
 800903c:	f8d8 3000 	ldr.w	r3, [r8]
 8009040:	461c      	mov	r4, r3
 8009042:	bb5c      	cbnz	r4, 800909c <_malloc_r+0x90>
 8009044:	4629      	mov	r1, r5
 8009046:	4638      	mov	r0, r7
 8009048:	f7ff ffc0 	bl	8008fcc <sbrk_aligned>
 800904c:	1c43      	adds	r3, r0, #1
 800904e:	4604      	mov	r4, r0
 8009050:	d155      	bne.n	80090fe <_malloc_r+0xf2>
 8009052:	f8d8 4000 	ldr.w	r4, [r8]
 8009056:	4626      	mov	r6, r4
 8009058:	2e00      	cmp	r6, #0
 800905a:	d145      	bne.n	80090e8 <_malloc_r+0xdc>
 800905c:	2c00      	cmp	r4, #0
 800905e:	d048      	beq.n	80090f2 <_malloc_r+0xe6>
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	4631      	mov	r1, r6
 8009064:	4638      	mov	r0, r7
 8009066:	eb04 0903 	add.w	r9, r4, r3
 800906a:	f000 fb5d 	bl	8009728 <_sbrk_r>
 800906e:	4581      	cmp	r9, r0
 8009070:	d13f      	bne.n	80090f2 <_malloc_r+0xe6>
 8009072:	6821      	ldr	r1, [r4, #0]
 8009074:	1a6d      	subs	r5, r5, r1
 8009076:	4629      	mov	r1, r5
 8009078:	4638      	mov	r0, r7
 800907a:	f7ff ffa7 	bl	8008fcc <sbrk_aligned>
 800907e:	3001      	adds	r0, #1
 8009080:	d037      	beq.n	80090f2 <_malloc_r+0xe6>
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	442b      	add	r3, r5
 8009086:	6023      	str	r3, [r4, #0]
 8009088:	f8d8 3000 	ldr.w	r3, [r8]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d038      	beq.n	8009102 <_malloc_r+0xf6>
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	42a2      	cmp	r2, r4
 8009094:	d12b      	bne.n	80090ee <_malloc_r+0xe2>
 8009096:	2200      	movs	r2, #0
 8009098:	605a      	str	r2, [r3, #4]
 800909a:	e00f      	b.n	80090bc <_malloc_r+0xb0>
 800909c:	6822      	ldr	r2, [r4, #0]
 800909e:	1b52      	subs	r2, r2, r5
 80090a0:	d41f      	bmi.n	80090e2 <_malloc_r+0xd6>
 80090a2:	2a0b      	cmp	r2, #11
 80090a4:	d917      	bls.n	80090d6 <_malloc_r+0xca>
 80090a6:	1961      	adds	r1, r4, r5
 80090a8:	42a3      	cmp	r3, r4
 80090aa:	6025      	str	r5, [r4, #0]
 80090ac:	bf18      	it	ne
 80090ae:	6059      	strne	r1, [r3, #4]
 80090b0:	6863      	ldr	r3, [r4, #4]
 80090b2:	bf08      	it	eq
 80090b4:	f8c8 1000 	streq.w	r1, [r8]
 80090b8:	5162      	str	r2, [r4, r5]
 80090ba:	604b      	str	r3, [r1, #4]
 80090bc:	4638      	mov	r0, r7
 80090be:	f104 060b 	add.w	r6, r4, #11
 80090c2:	f000 f829 	bl	8009118 <__malloc_unlock>
 80090c6:	f026 0607 	bic.w	r6, r6, #7
 80090ca:	1d23      	adds	r3, r4, #4
 80090cc:	1af2      	subs	r2, r6, r3
 80090ce:	d0ae      	beq.n	800902e <_malloc_r+0x22>
 80090d0:	1b9b      	subs	r3, r3, r6
 80090d2:	50a3      	str	r3, [r4, r2]
 80090d4:	e7ab      	b.n	800902e <_malloc_r+0x22>
 80090d6:	42a3      	cmp	r3, r4
 80090d8:	6862      	ldr	r2, [r4, #4]
 80090da:	d1dd      	bne.n	8009098 <_malloc_r+0x8c>
 80090dc:	f8c8 2000 	str.w	r2, [r8]
 80090e0:	e7ec      	b.n	80090bc <_malloc_r+0xb0>
 80090e2:	4623      	mov	r3, r4
 80090e4:	6864      	ldr	r4, [r4, #4]
 80090e6:	e7ac      	b.n	8009042 <_malloc_r+0x36>
 80090e8:	4634      	mov	r4, r6
 80090ea:	6876      	ldr	r6, [r6, #4]
 80090ec:	e7b4      	b.n	8009058 <_malloc_r+0x4c>
 80090ee:	4613      	mov	r3, r2
 80090f0:	e7cc      	b.n	800908c <_malloc_r+0x80>
 80090f2:	230c      	movs	r3, #12
 80090f4:	603b      	str	r3, [r7, #0]
 80090f6:	4638      	mov	r0, r7
 80090f8:	f000 f80e 	bl	8009118 <__malloc_unlock>
 80090fc:	e797      	b.n	800902e <_malloc_r+0x22>
 80090fe:	6025      	str	r5, [r4, #0]
 8009100:	e7dc      	b.n	80090bc <_malloc_r+0xb0>
 8009102:	605b      	str	r3, [r3, #4]
 8009104:	deff      	udf	#255	; 0xff
 8009106:	bf00      	nop
 8009108:	20001d48 	.word	0x20001d48

0800910c <__malloc_lock>:
 800910c:	4801      	ldr	r0, [pc, #4]	; (8009114 <__malloc_lock+0x8>)
 800910e:	f7ff bf01 	b.w	8008f14 <__retarget_lock_acquire_recursive>
 8009112:	bf00      	nop
 8009114:	20001d44 	.word	0x20001d44

08009118 <__malloc_unlock>:
 8009118:	4801      	ldr	r0, [pc, #4]	; (8009120 <__malloc_unlock+0x8>)
 800911a:	f7ff befc 	b.w	8008f16 <__retarget_lock_release_recursive>
 800911e:	bf00      	nop
 8009120:	20001d44 	.word	0x20001d44

08009124 <__ssputs_r>:
 8009124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009128:	688e      	ldr	r6, [r1, #8]
 800912a:	461f      	mov	r7, r3
 800912c:	42be      	cmp	r6, r7
 800912e:	680b      	ldr	r3, [r1, #0]
 8009130:	4682      	mov	sl, r0
 8009132:	460c      	mov	r4, r1
 8009134:	4690      	mov	r8, r2
 8009136:	d82c      	bhi.n	8009192 <__ssputs_r+0x6e>
 8009138:	898a      	ldrh	r2, [r1, #12]
 800913a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800913e:	d026      	beq.n	800918e <__ssputs_r+0x6a>
 8009140:	6965      	ldr	r5, [r4, #20]
 8009142:	6909      	ldr	r1, [r1, #16]
 8009144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009148:	eba3 0901 	sub.w	r9, r3, r1
 800914c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009150:	1c7b      	adds	r3, r7, #1
 8009152:	444b      	add	r3, r9
 8009154:	106d      	asrs	r5, r5, #1
 8009156:	429d      	cmp	r5, r3
 8009158:	bf38      	it	cc
 800915a:	461d      	movcc	r5, r3
 800915c:	0553      	lsls	r3, r2, #21
 800915e:	d527      	bpl.n	80091b0 <__ssputs_r+0x8c>
 8009160:	4629      	mov	r1, r5
 8009162:	f7ff ff53 	bl	800900c <_malloc_r>
 8009166:	4606      	mov	r6, r0
 8009168:	b360      	cbz	r0, 80091c4 <__ssputs_r+0xa0>
 800916a:	6921      	ldr	r1, [r4, #16]
 800916c:	464a      	mov	r2, r9
 800916e:	f7ff fed3 	bl	8008f18 <memcpy>
 8009172:	89a3      	ldrh	r3, [r4, #12]
 8009174:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800917c:	81a3      	strh	r3, [r4, #12]
 800917e:	6126      	str	r6, [r4, #16]
 8009180:	6165      	str	r5, [r4, #20]
 8009182:	444e      	add	r6, r9
 8009184:	eba5 0509 	sub.w	r5, r5, r9
 8009188:	6026      	str	r6, [r4, #0]
 800918a:	60a5      	str	r5, [r4, #8]
 800918c:	463e      	mov	r6, r7
 800918e:	42be      	cmp	r6, r7
 8009190:	d900      	bls.n	8009194 <__ssputs_r+0x70>
 8009192:	463e      	mov	r6, r7
 8009194:	6820      	ldr	r0, [r4, #0]
 8009196:	4632      	mov	r2, r6
 8009198:	4641      	mov	r1, r8
 800919a:	f000 faab 	bl	80096f4 <memmove>
 800919e:	68a3      	ldr	r3, [r4, #8]
 80091a0:	1b9b      	subs	r3, r3, r6
 80091a2:	60a3      	str	r3, [r4, #8]
 80091a4:	6823      	ldr	r3, [r4, #0]
 80091a6:	4433      	add	r3, r6
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	2000      	movs	r0, #0
 80091ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b0:	462a      	mov	r2, r5
 80091b2:	f000 fac9 	bl	8009748 <_realloc_r>
 80091b6:	4606      	mov	r6, r0
 80091b8:	2800      	cmp	r0, #0
 80091ba:	d1e0      	bne.n	800917e <__ssputs_r+0x5a>
 80091bc:	6921      	ldr	r1, [r4, #16]
 80091be:	4650      	mov	r0, sl
 80091c0:	f7ff feb8 	bl	8008f34 <_free_r>
 80091c4:	230c      	movs	r3, #12
 80091c6:	f8ca 3000 	str.w	r3, [sl]
 80091ca:	89a3      	ldrh	r3, [r4, #12]
 80091cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091d0:	81a3      	strh	r3, [r4, #12]
 80091d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091d6:	e7e9      	b.n	80091ac <__ssputs_r+0x88>

080091d8 <_svfiprintf_r>:
 80091d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091dc:	4698      	mov	r8, r3
 80091de:	898b      	ldrh	r3, [r1, #12]
 80091e0:	061b      	lsls	r3, r3, #24
 80091e2:	b09d      	sub	sp, #116	; 0x74
 80091e4:	4607      	mov	r7, r0
 80091e6:	460d      	mov	r5, r1
 80091e8:	4614      	mov	r4, r2
 80091ea:	d50e      	bpl.n	800920a <_svfiprintf_r+0x32>
 80091ec:	690b      	ldr	r3, [r1, #16]
 80091ee:	b963      	cbnz	r3, 800920a <_svfiprintf_r+0x32>
 80091f0:	2140      	movs	r1, #64	; 0x40
 80091f2:	f7ff ff0b 	bl	800900c <_malloc_r>
 80091f6:	6028      	str	r0, [r5, #0]
 80091f8:	6128      	str	r0, [r5, #16]
 80091fa:	b920      	cbnz	r0, 8009206 <_svfiprintf_r+0x2e>
 80091fc:	230c      	movs	r3, #12
 80091fe:	603b      	str	r3, [r7, #0]
 8009200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009204:	e0d0      	b.n	80093a8 <_svfiprintf_r+0x1d0>
 8009206:	2340      	movs	r3, #64	; 0x40
 8009208:	616b      	str	r3, [r5, #20]
 800920a:	2300      	movs	r3, #0
 800920c:	9309      	str	r3, [sp, #36]	; 0x24
 800920e:	2320      	movs	r3, #32
 8009210:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009214:	f8cd 800c 	str.w	r8, [sp, #12]
 8009218:	2330      	movs	r3, #48	; 0x30
 800921a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80093c0 <_svfiprintf_r+0x1e8>
 800921e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009222:	f04f 0901 	mov.w	r9, #1
 8009226:	4623      	mov	r3, r4
 8009228:	469a      	mov	sl, r3
 800922a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800922e:	b10a      	cbz	r2, 8009234 <_svfiprintf_r+0x5c>
 8009230:	2a25      	cmp	r2, #37	; 0x25
 8009232:	d1f9      	bne.n	8009228 <_svfiprintf_r+0x50>
 8009234:	ebba 0b04 	subs.w	fp, sl, r4
 8009238:	d00b      	beq.n	8009252 <_svfiprintf_r+0x7a>
 800923a:	465b      	mov	r3, fp
 800923c:	4622      	mov	r2, r4
 800923e:	4629      	mov	r1, r5
 8009240:	4638      	mov	r0, r7
 8009242:	f7ff ff6f 	bl	8009124 <__ssputs_r>
 8009246:	3001      	adds	r0, #1
 8009248:	f000 80a9 	beq.w	800939e <_svfiprintf_r+0x1c6>
 800924c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800924e:	445a      	add	r2, fp
 8009250:	9209      	str	r2, [sp, #36]	; 0x24
 8009252:	f89a 3000 	ldrb.w	r3, [sl]
 8009256:	2b00      	cmp	r3, #0
 8009258:	f000 80a1 	beq.w	800939e <_svfiprintf_r+0x1c6>
 800925c:	2300      	movs	r3, #0
 800925e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009266:	f10a 0a01 	add.w	sl, sl, #1
 800926a:	9304      	str	r3, [sp, #16]
 800926c:	9307      	str	r3, [sp, #28]
 800926e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009272:	931a      	str	r3, [sp, #104]	; 0x68
 8009274:	4654      	mov	r4, sl
 8009276:	2205      	movs	r2, #5
 8009278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800927c:	4850      	ldr	r0, [pc, #320]	; (80093c0 <_svfiprintf_r+0x1e8>)
 800927e:	f7f6 ffaf 	bl	80001e0 <memchr>
 8009282:	9a04      	ldr	r2, [sp, #16]
 8009284:	b9d8      	cbnz	r0, 80092be <_svfiprintf_r+0xe6>
 8009286:	06d0      	lsls	r0, r2, #27
 8009288:	bf44      	itt	mi
 800928a:	2320      	movmi	r3, #32
 800928c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009290:	0711      	lsls	r1, r2, #28
 8009292:	bf44      	itt	mi
 8009294:	232b      	movmi	r3, #43	; 0x2b
 8009296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800929a:	f89a 3000 	ldrb.w	r3, [sl]
 800929e:	2b2a      	cmp	r3, #42	; 0x2a
 80092a0:	d015      	beq.n	80092ce <_svfiprintf_r+0xf6>
 80092a2:	9a07      	ldr	r2, [sp, #28]
 80092a4:	4654      	mov	r4, sl
 80092a6:	2000      	movs	r0, #0
 80092a8:	f04f 0c0a 	mov.w	ip, #10
 80092ac:	4621      	mov	r1, r4
 80092ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092b2:	3b30      	subs	r3, #48	; 0x30
 80092b4:	2b09      	cmp	r3, #9
 80092b6:	d94d      	bls.n	8009354 <_svfiprintf_r+0x17c>
 80092b8:	b1b0      	cbz	r0, 80092e8 <_svfiprintf_r+0x110>
 80092ba:	9207      	str	r2, [sp, #28]
 80092bc:	e014      	b.n	80092e8 <_svfiprintf_r+0x110>
 80092be:	eba0 0308 	sub.w	r3, r0, r8
 80092c2:	fa09 f303 	lsl.w	r3, r9, r3
 80092c6:	4313      	orrs	r3, r2
 80092c8:	9304      	str	r3, [sp, #16]
 80092ca:	46a2      	mov	sl, r4
 80092cc:	e7d2      	b.n	8009274 <_svfiprintf_r+0x9c>
 80092ce:	9b03      	ldr	r3, [sp, #12]
 80092d0:	1d19      	adds	r1, r3, #4
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	9103      	str	r1, [sp, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	bfbb      	ittet	lt
 80092da:	425b      	neglt	r3, r3
 80092dc:	f042 0202 	orrlt.w	r2, r2, #2
 80092e0:	9307      	strge	r3, [sp, #28]
 80092e2:	9307      	strlt	r3, [sp, #28]
 80092e4:	bfb8      	it	lt
 80092e6:	9204      	strlt	r2, [sp, #16]
 80092e8:	7823      	ldrb	r3, [r4, #0]
 80092ea:	2b2e      	cmp	r3, #46	; 0x2e
 80092ec:	d10c      	bne.n	8009308 <_svfiprintf_r+0x130>
 80092ee:	7863      	ldrb	r3, [r4, #1]
 80092f0:	2b2a      	cmp	r3, #42	; 0x2a
 80092f2:	d134      	bne.n	800935e <_svfiprintf_r+0x186>
 80092f4:	9b03      	ldr	r3, [sp, #12]
 80092f6:	1d1a      	adds	r2, r3, #4
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	9203      	str	r2, [sp, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	bfb8      	it	lt
 8009300:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009304:	3402      	adds	r4, #2
 8009306:	9305      	str	r3, [sp, #20]
 8009308:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80093d0 <_svfiprintf_r+0x1f8>
 800930c:	7821      	ldrb	r1, [r4, #0]
 800930e:	2203      	movs	r2, #3
 8009310:	4650      	mov	r0, sl
 8009312:	f7f6 ff65 	bl	80001e0 <memchr>
 8009316:	b138      	cbz	r0, 8009328 <_svfiprintf_r+0x150>
 8009318:	9b04      	ldr	r3, [sp, #16]
 800931a:	eba0 000a 	sub.w	r0, r0, sl
 800931e:	2240      	movs	r2, #64	; 0x40
 8009320:	4082      	lsls	r2, r0
 8009322:	4313      	orrs	r3, r2
 8009324:	3401      	adds	r4, #1
 8009326:	9304      	str	r3, [sp, #16]
 8009328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800932c:	4825      	ldr	r0, [pc, #148]	; (80093c4 <_svfiprintf_r+0x1ec>)
 800932e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009332:	2206      	movs	r2, #6
 8009334:	f7f6 ff54 	bl	80001e0 <memchr>
 8009338:	2800      	cmp	r0, #0
 800933a:	d038      	beq.n	80093ae <_svfiprintf_r+0x1d6>
 800933c:	4b22      	ldr	r3, [pc, #136]	; (80093c8 <_svfiprintf_r+0x1f0>)
 800933e:	bb1b      	cbnz	r3, 8009388 <_svfiprintf_r+0x1b0>
 8009340:	9b03      	ldr	r3, [sp, #12]
 8009342:	3307      	adds	r3, #7
 8009344:	f023 0307 	bic.w	r3, r3, #7
 8009348:	3308      	adds	r3, #8
 800934a:	9303      	str	r3, [sp, #12]
 800934c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800934e:	4433      	add	r3, r6
 8009350:	9309      	str	r3, [sp, #36]	; 0x24
 8009352:	e768      	b.n	8009226 <_svfiprintf_r+0x4e>
 8009354:	fb0c 3202 	mla	r2, ip, r2, r3
 8009358:	460c      	mov	r4, r1
 800935a:	2001      	movs	r0, #1
 800935c:	e7a6      	b.n	80092ac <_svfiprintf_r+0xd4>
 800935e:	2300      	movs	r3, #0
 8009360:	3401      	adds	r4, #1
 8009362:	9305      	str	r3, [sp, #20]
 8009364:	4619      	mov	r1, r3
 8009366:	f04f 0c0a 	mov.w	ip, #10
 800936a:	4620      	mov	r0, r4
 800936c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009370:	3a30      	subs	r2, #48	; 0x30
 8009372:	2a09      	cmp	r2, #9
 8009374:	d903      	bls.n	800937e <_svfiprintf_r+0x1a6>
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0c6      	beq.n	8009308 <_svfiprintf_r+0x130>
 800937a:	9105      	str	r1, [sp, #20]
 800937c:	e7c4      	b.n	8009308 <_svfiprintf_r+0x130>
 800937e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009382:	4604      	mov	r4, r0
 8009384:	2301      	movs	r3, #1
 8009386:	e7f0      	b.n	800936a <_svfiprintf_r+0x192>
 8009388:	ab03      	add	r3, sp, #12
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	462a      	mov	r2, r5
 800938e:	4b0f      	ldr	r3, [pc, #60]	; (80093cc <_svfiprintf_r+0x1f4>)
 8009390:	a904      	add	r1, sp, #16
 8009392:	4638      	mov	r0, r7
 8009394:	f3af 8000 	nop.w
 8009398:	1c42      	adds	r2, r0, #1
 800939a:	4606      	mov	r6, r0
 800939c:	d1d6      	bne.n	800934c <_svfiprintf_r+0x174>
 800939e:	89ab      	ldrh	r3, [r5, #12]
 80093a0:	065b      	lsls	r3, r3, #25
 80093a2:	f53f af2d 	bmi.w	8009200 <_svfiprintf_r+0x28>
 80093a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093a8:	b01d      	add	sp, #116	; 0x74
 80093aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ae:	ab03      	add	r3, sp, #12
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	462a      	mov	r2, r5
 80093b4:	4b05      	ldr	r3, [pc, #20]	; (80093cc <_svfiprintf_r+0x1f4>)
 80093b6:	a904      	add	r1, sp, #16
 80093b8:	4638      	mov	r0, r7
 80093ba:	f000 f879 	bl	80094b0 <_printf_i>
 80093be:	e7eb      	b.n	8009398 <_svfiprintf_r+0x1c0>
 80093c0:	08009b1c 	.word	0x08009b1c
 80093c4:	08009b26 	.word	0x08009b26
 80093c8:	00000000 	.word	0x00000000
 80093cc:	08009125 	.word	0x08009125
 80093d0:	08009b22 	.word	0x08009b22

080093d4 <_printf_common>:
 80093d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d8:	4616      	mov	r6, r2
 80093da:	4699      	mov	r9, r3
 80093dc:	688a      	ldr	r2, [r1, #8]
 80093de:	690b      	ldr	r3, [r1, #16]
 80093e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093e4:	4293      	cmp	r3, r2
 80093e6:	bfb8      	it	lt
 80093e8:	4613      	movlt	r3, r2
 80093ea:	6033      	str	r3, [r6, #0]
 80093ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093f0:	4607      	mov	r7, r0
 80093f2:	460c      	mov	r4, r1
 80093f4:	b10a      	cbz	r2, 80093fa <_printf_common+0x26>
 80093f6:	3301      	adds	r3, #1
 80093f8:	6033      	str	r3, [r6, #0]
 80093fa:	6823      	ldr	r3, [r4, #0]
 80093fc:	0699      	lsls	r1, r3, #26
 80093fe:	bf42      	ittt	mi
 8009400:	6833      	ldrmi	r3, [r6, #0]
 8009402:	3302      	addmi	r3, #2
 8009404:	6033      	strmi	r3, [r6, #0]
 8009406:	6825      	ldr	r5, [r4, #0]
 8009408:	f015 0506 	ands.w	r5, r5, #6
 800940c:	d106      	bne.n	800941c <_printf_common+0x48>
 800940e:	f104 0a19 	add.w	sl, r4, #25
 8009412:	68e3      	ldr	r3, [r4, #12]
 8009414:	6832      	ldr	r2, [r6, #0]
 8009416:	1a9b      	subs	r3, r3, r2
 8009418:	42ab      	cmp	r3, r5
 800941a:	dc26      	bgt.n	800946a <_printf_common+0x96>
 800941c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009420:	1e13      	subs	r3, r2, #0
 8009422:	6822      	ldr	r2, [r4, #0]
 8009424:	bf18      	it	ne
 8009426:	2301      	movne	r3, #1
 8009428:	0692      	lsls	r2, r2, #26
 800942a:	d42b      	bmi.n	8009484 <_printf_common+0xb0>
 800942c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009430:	4649      	mov	r1, r9
 8009432:	4638      	mov	r0, r7
 8009434:	47c0      	blx	r8
 8009436:	3001      	adds	r0, #1
 8009438:	d01e      	beq.n	8009478 <_printf_common+0xa4>
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	6922      	ldr	r2, [r4, #16]
 800943e:	f003 0306 	and.w	r3, r3, #6
 8009442:	2b04      	cmp	r3, #4
 8009444:	bf02      	ittt	eq
 8009446:	68e5      	ldreq	r5, [r4, #12]
 8009448:	6833      	ldreq	r3, [r6, #0]
 800944a:	1aed      	subeq	r5, r5, r3
 800944c:	68a3      	ldr	r3, [r4, #8]
 800944e:	bf0c      	ite	eq
 8009450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009454:	2500      	movne	r5, #0
 8009456:	4293      	cmp	r3, r2
 8009458:	bfc4      	itt	gt
 800945a:	1a9b      	subgt	r3, r3, r2
 800945c:	18ed      	addgt	r5, r5, r3
 800945e:	2600      	movs	r6, #0
 8009460:	341a      	adds	r4, #26
 8009462:	42b5      	cmp	r5, r6
 8009464:	d11a      	bne.n	800949c <_printf_common+0xc8>
 8009466:	2000      	movs	r0, #0
 8009468:	e008      	b.n	800947c <_printf_common+0xa8>
 800946a:	2301      	movs	r3, #1
 800946c:	4652      	mov	r2, sl
 800946e:	4649      	mov	r1, r9
 8009470:	4638      	mov	r0, r7
 8009472:	47c0      	blx	r8
 8009474:	3001      	adds	r0, #1
 8009476:	d103      	bne.n	8009480 <_printf_common+0xac>
 8009478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800947c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009480:	3501      	adds	r5, #1
 8009482:	e7c6      	b.n	8009412 <_printf_common+0x3e>
 8009484:	18e1      	adds	r1, r4, r3
 8009486:	1c5a      	adds	r2, r3, #1
 8009488:	2030      	movs	r0, #48	; 0x30
 800948a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800948e:	4422      	add	r2, r4
 8009490:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009494:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009498:	3302      	adds	r3, #2
 800949a:	e7c7      	b.n	800942c <_printf_common+0x58>
 800949c:	2301      	movs	r3, #1
 800949e:	4622      	mov	r2, r4
 80094a0:	4649      	mov	r1, r9
 80094a2:	4638      	mov	r0, r7
 80094a4:	47c0      	blx	r8
 80094a6:	3001      	adds	r0, #1
 80094a8:	d0e6      	beq.n	8009478 <_printf_common+0xa4>
 80094aa:	3601      	adds	r6, #1
 80094ac:	e7d9      	b.n	8009462 <_printf_common+0x8e>
	...

080094b0 <_printf_i>:
 80094b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094b4:	7e0f      	ldrb	r7, [r1, #24]
 80094b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094b8:	2f78      	cmp	r7, #120	; 0x78
 80094ba:	4691      	mov	r9, r2
 80094bc:	4680      	mov	r8, r0
 80094be:	460c      	mov	r4, r1
 80094c0:	469a      	mov	sl, r3
 80094c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80094c6:	d807      	bhi.n	80094d8 <_printf_i+0x28>
 80094c8:	2f62      	cmp	r7, #98	; 0x62
 80094ca:	d80a      	bhi.n	80094e2 <_printf_i+0x32>
 80094cc:	2f00      	cmp	r7, #0
 80094ce:	f000 80d4 	beq.w	800967a <_printf_i+0x1ca>
 80094d2:	2f58      	cmp	r7, #88	; 0x58
 80094d4:	f000 80c0 	beq.w	8009658 <_printf_i+0x1a8>
 80094d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094e0:	e03a      	b.n	8009558 <_printf_i+0xa8>
 80094e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094e6:	2b15      	cmp	r3, #21
 80094e8:	d8f6      	bhi.n	80094d8 <_printf_i+0x28>
 80094ea:	a101      	add	r1, pc, #4	; (adr r1, 80094f0 <_printf_i+0x40>)
 80094ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094f0:	08009549 	.word	0x08009549
 80094f4:	0800955d 	.word	0x0800955d
 80094f8:	080094d9 	.word	0x080094d9
 80094fc:	080094d9 	.word	0x080094d9
 8009500:	080094d9 	.word	0x080094d9
 8009504:	080094d9 	.word	0x080094d9
 8009508:	0800955d 	.word	0x0800955d
 800950c:	080094d9 	.word	0x080094d9
 8009510:	080094d9 	.word	0x080094d9
 8009514:	080094d9 	.word	0x080094d9
 8009518:	080094d9 	.word	0x080094d9
 800951c:	08009661 	.word	0x08009661
 8009520:	08009589 	.word	0x08009589
 8009524:	0800961b 	.word	0x0800961b
 8009528:	080094d9 	.word	0x080094d9
 800952c:	080094d9 	.word	0x080094d9
 8009530:	08009683 	.word	0x08009683
 8009534:	080094d9 	.word	0x080094d9
 8009538:	08009589 	.word	0x08009589
 800953c:	080094d9 	.word	0x080094d9
 8009540:	080094d9 	.word	0x080094d9
 8009544:	08009623 	.word	0x08009623
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	1d1a      	adds	r2, r3, #4
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	602a      	str	r2, [r5, #0]
 8009550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009558:	2301      	movs	r3, #1
 800955a:	e09f      	b.n	800969c <_printf_i+0x1ec>
 800955c:	6820      	ldr	r0, [r4, #0]
 800955e:	682b      	ldr	r3, [r5, #0]
 8009560:	0607      	lsls	r7, r0, #24
 8009562:	f103 0104 	add.w	r1, r3, #4
 8009566:	6029      	str	r1, [r5, #0]
 8009568:	d501      	bpl.n	800956e <_printf_i+0xbe>
 800956a:	681e      	ldr	r6, [r3, #0]
 800956c:	e003      	b.n	8009576 <_printf_i+0xc6>
 800956e:	0646      	lsls	r6, r0, #25
 8009570:	d5fb      	bpl.n	800956a <_printf_i+0xba>
 8009572:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009576:	2e00      	cmp	r6, #0
 8009578:	da03      	bge.n	8009582 <_printf_i+0xd2>
 800957a:	232d      	movs	r3, #45	; 0x2d
 800957c:	4276      	negs	r6, r6
 800957e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009582:	485a      	ldr	r0, [pc, #360]	; (80096ec <_printf_i+0x23c>)
 8009584:	230a      	movs	r3, #10
 8009586:	e012      	b.n	80095ae <_printf_i+0xfe>
 8009588:	682b      	ldr	r3, [r5, #0]
 800958a:	6820      	ldr	r0, [r4, #0]
 800958c:	1d19      	adds	r1, r3, #4
 800958e:	6029      	str	r1, [r5, #0]
 8009590:	0605      	lsls	r5, r0, #24
 8009592:	d501      	bpl.n	8009598 <_printf_i+0xe8>
 8009594:	681e      	ldr	r6, [r3, #0]
 8009596:	e002      	b.n	800959e <_printf_i+0xee>
 8009598:	0641      	lsls	r1, r0, #25
 800959a:	d5fb      	bpl.n	8009594 <_printf_i+0xe4>
 800959c:	881e      	ldrh	r6, [r3, #0]
 800959e:	4853      	ldr	r0, [pc, #332]	; (80096ec <_printf_i+0x23c>)
 80095a0:	2f6f      	cmp	r7, #111	; 0x6f
 80095a2:	bf0c      	ite	eq
 80095a4:	2308      	moveq	r3, #8
 80095a6:	230a      	movne	r3, #10
 80095a8:	2100      	movs	r1, #0
 80095aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095ae:	6865      	ldr	r5, [r4, #4]
 80095b0:	60a5      	str	r5, [r4, #8]
 80095b2:	2d00      	cmp	r5, #0
 80095b4:	bfa2      	ittt	ge
 80095b6:	6821      	ldrge	r1, [r4, #0]
 80095b8:	f021 0104 	bicge.w	r1, r1, #4
 80095bc:	6021      	strge	r1, [r4, #0]
 80095be:	b90e      	cbnz	r6, 80095c4 <_printf_i+0x114>
 80095c0:	2d00      	cmp	r5, #0
 80095c2:	d04b      	beq.n	800965c <_printf_i+0x1ac>
 80095c4:	4615      	mov	r5, r2
 80095c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80095ca:	fb03 6711 	mls	r7, r3, r1, r6
 80095ce:	5dc7      	ldrb	r7, [r0, r7]
 80095d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80095d4:	4637      	mov	r7, r6
 80095d6:	42bb      	cmp	r3, r7
 80095d8:	460e      	mov	r6, r1
 80095da:	d9f4      	bls.n	80095c6 <_printf_i+0x116>
 80095dc:	2b08      	cmp	r3, #8
 80095de:	d10b      	bne.n	80095f8 <_printf_i+0x148>
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	07de      	lsls	r6, r3, #31
 80095e4:	d508      	bpl.n	80095f8 <_printf_i+0x148>
 80095e6:	6923      	ldr	r3, [r4, #16]
 80095e8:	6861      	ldr	r1, [r4, #4]
 80095ea:	4299      	cmp	r1, r3
 80095ec:	bfde      	ittt	le
 80095ee:	2330      	movle	r3, #48	; 0x30
 80095f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80095f8:	1b52      	subs	r2, r2, r5
 80095fa:	6122      	str	r2, [r4, #16]
 80095fc:	f8cd a000 	str.w	sl, [sp]
 8009600:	464b      	mov	r3, r9
 8009602:	aa03      	add	r2, sp, #12
 8009604:	4621      	mov	r1, r4
 8009606:	4640      	mov	r0, r8
 8009608:	f7ff fee4 	bl	80093d4 <_printf_common>
 800960c:	3001      	adds	r0, #1
 800960e:	d14a      	bne.n	80096a6 <_printf_i+0x1f6>
 8009610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009614:	b004      	add	sp, #16
 8009616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800961a:	6823      	ldr	r3, [r4, #0]
 800961c:	f043 0320 	orr.w	r3, r3, #32
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	4833      	ldr	r0, [pc, #204]	; (80096f0 <_printf_i+0x240>)
 8009624:	2778      	movs	r7, #120	; 0x78
 8009626:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	6829      	ldr	r1, [r5, #0]
 800962e:	061f      	lsls	r7, r3, #24
 8009630:	f851 6b04 	ldr.w	r6, [r1], #4
 8009634:	d402      	bmi.n	800963c <_printf_i+0x18c>
 8009636:	065f      	lsls	r7, r3, #25
 8009638:	bf48      	it	mi
 800963a:	b2b6      	uxthmi	r6, r6
 800963c:	07df      	lsls	r7, r3, #31
 800963e:	bf48      	it	mi
 8009640:	f043 0320 	orrmi.w	r3, r3, #32
 8009644:	6029      	str	r1, [r5, #0]
 8009646:	bf48      	it	mi
 8009648:	6023      	strmi	r3, [r4, #0]
 800964a:	b91e      	cbnz	r6, 8009654 <_printf_i+0x1a4>
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	f023 0320 	bic.w	r3, r3, #32
 8009652:	6023      	str	r3, [r4, #0]
 8009654:	2310      	movs	r3, #16
 8009656:	e7a7      	b.n	80095a8 <_printf_i+0xf8>
 8009658:	4824      	ldr	r0, [pc, #144]	; (80096ec <_printf_i+0x23c>)
 800965a:	e7e4      	b.n	8009626 <_printf_i+0x176>
 800965c:	4615      	mov	r5, r2
 800965e:	e7bd      	b.n	80095dc <_printf_i+0x12c>
 8009660:	682b      	ldr	r3, [r5, #0]
 8009662:	6826      	ldr	r6, [r4, #0]
 8009664:	6961      	ldr	r1, [r4, #20]
 8009666:	1d18      	adds	r0, r3, #4
 8009668:	6028      	str	r0, [r5, #0]
 800966a:	0635      	lsls	r5, r6, #24
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	d501      	bpl.n	8009674 <_printf_i+0x1c4>
 8009670:	6019      	str	r1, [r3, #0]
 8009672:	e002      	b.n	800967a <_printf_i+0x1ca>
 8009674:	0670      	lsls	r0, r6, #25
 8009676:	d5fb      	bpl.n	8009670 <_printf_i+0x1c0>
 8009678:	8019      	strh	r1, [r3, #0]
 800967a:	2300      	movs	r3, #0
 800967c:	6123      	str	r3, [r4, #16]
 800967e:	4615      	mov	r5, r2
 8009680:	e7bc      	b.n	80095fc <_printf_i+0x14c>
 8009682:	682b      	ldr	r3, [r5, #0]
 8009684:	1d1a      	adds	r2, r3, #4
 8009686:	602a      	str	r2, [r5, #0]
 8009688:	681d      	ldr	r5, [r3, #0]
 800968a:	6862      	ldr	r2, [r4, #4]
 800968c:	2100      	movs	r1, #0
 800968e:	4628      	mov	r0, r5
 8009690:	f7f6 fda6 	bl	80001e0 <memchr>
 8009694:	b108      	cbz	r0, 800969a <_printf_i+0x1ea>
 8009696:	1b40      	subs	r0, r0, r5
 8009698:	6060      	str	r0, [r4, #4]
 800969a:	6863      	ldr	r3, [r4, #4]
 800969c:	6123      	str	r3, [r4, #16]
 800969e:	2300      	movs	r3, #0
 80096a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096a4:	e7aa      	b.n	80095fc <_printf_i+0x14c>
 80096a6:	6923      	ldr	r3, [r4, #16]
 80096a8:	462a      	mov	r2, r5
 80096aa:	4649      	mov	r1, r9
 80096ac:	4640      	mov	r0, r8
 80096ae:	47d0      	blx	sl
 80096b0:	3001      	adds	r0, #1
 80096b2:	d0ad      	beq.n	8009610 <_printf_i+0x160>
 80096b4:	6823      	ldr	r3, [r4, #0]
 80096b6:	079b      	lsls	r3, r3, #30
 80096b8:	d413      	bmi.n	80096e2 <_printf_i+0x232>
 80096ba:	68e0      	ldr	r0, [r4, #12]
 80096bc:	9b03      	ldr	r3, [sp, #12]
 80096be:	4298      	cmp	r0, r3
 80096c0:	bfb8      	it	lt
 80096c2:	4618      	movlt	r0, r3
 80096c4:	e7a6      	b.n	8009614 <_printf_i+0x164>
 80096c6:	2301      	movs	r3, #1
 80096c8:	4632      	mov	r2, r6
 80096ca:	4649      	mov	r1, r9
 80096cc:	4640      	mov	r0, r8
 80096ce:	47d0      	blx	sl
 80096d0:	3001      	adds	r0, #1
 80096d2:	d09d      	beq.n	8009610 <_printf_i+0x160>
 80096d4:	3501      	adds	r5, #1
 80096d6:	68e3      	ldr	r3, [r4, #12]
 80096d8:	9903      	ldr	r1, [sp, #12]
 80096da:	1a5b      	subs	r3, r3, r1
 80096dc:	42ab      	cmp	r3, r5
 80096de:	dcf2      	bgt.n	80096c6 <_printf_i+0x216>
 80096e0:	e7eb      	b.n	80096ba <_printf_i+0x20a>
 80096e2:	2500      	movs	r5, #0
 80096e4:	f104 0619 	add.w	r6, r4, #25
 80096e8:	e7f5      	b.n	80096d6 <_printf_i+0x226>
 80096ea:	bf00      	nop
 80096ec:	08009b2d 	.word	0x08009b2d
 80096f0:	08009b3e 	.word	0x08009b3e

080096f4 <memmove>:
 80096f4:	4288      	cmp	r0, r1
 80096f6:	b510      	push	{r4, lr}
 80096f8:	eb01 0402 	add.w	r4, r1, r2
 80096fc:	d902      	bls.n	8009704 <memmove+0x10>
 80096fe:	4284      	cmp	r4, r0
 8009700:	4623      	mov	r3, r4
 8009702:	d807      	bhi.n	8009714 <memmove+0x20>
 8009704:	1e43      	subs	r3, r0, #1
 8009706:	42a1      	cmp	r1, r4
 8009708:	d008      	beq.n	800971c <memmove+0x28>
 800970a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800970e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009712:	e7f8      	b.n	8009706 <memmove+0x12>
 8009714:	4402      	add	r2, r0
 8009716:	4601      	mov	r1, r0
 8009718:	428a      	cmp	r2, r1
 800971a:	d100      	bne.n	800971e <memmove+0x2a>
 800971c:	bd10      	pop	{r4, pc}
 800971e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009726:	e7f7      	b.n	8009718 <memmove+0x24>

08009728 <_sbrk_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4d06      	ldr	r5, [pc, #24]	; (8009744 <_sbrk_r+0x1c>)
 800972c:	2300      	movs	r3, #0
 800972e:	4604      	mov	r4, r0
 8009730:	4608      	mov	r0, r1
 8009732:	602b      	str	r3, [r5, #0]
 8009734:	f7f7 fe12 	bl	800135c <_sbrk>
 8009738:	1c43      	adds	r3, r0, #1
 800973a:	d102      	bne.n	8009742 <_sbrk_r+0x1a>
 800973c:	682b      	ldr	r3, [r5, #0]
 800973e:	b103      	cbz	r3, 8009742 <_sbrk_r+0x1a>
 8009740:	6023      	str	r3, [r4, #0]
 8009742:	bd38      	pop	{r3, r4, r5, pc}
 8009744:	20001d40 	.word	0x20001d40

08009748 <_realloc_r>:
 8009748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800974c:	4680      	mov	r8, r0
 800974e:	4614      	mov	r4, r2
 8009750:	460e      	mov	r6, r1
 8009752:	b921      	cbnz	r1, 800975e <_realloc_r+0x16>
 8009754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009758:	4611      	mov	r1, r2
 800975a:	f7ff bc57 	b.w	800900c <_malloc_r>
 800975e:	b92a      	cbnz	r2, 800976c <_realloc_r+0x24>
 8009760:	f7ff fbe8 	bl	8008f34 <_free_r>
 8009764:	4625      	mov	r5, r4
 8009766:	4628      	mov	r0, r5
 8009768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800976c:	f000 f81b 	bl	80097a6 <_malloc_usable_size_r>
 8009770:	4284      	cmp	r4, r0
 8009772:	4607      	mov	r7, r0
 8009774:	d802      	bhi.n	800977c <_realloc_r+0x34>
 8009776:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800977a:	d812      	bhi.n	80097a2 <_realloc_r+0x5a>
 800977c:	4621      	mov	r1, r4
 800977e:	4640      	mov	r0, r8
 8009780:	f7ff fc44 	bl	800900c <_malloc_r>
 8009784:	4605      	mov	r5, r0
 8009786:	2800      	cmp	r0, #0
 8009788:	d0ed      	beq.n	8009766 <_realloc_r+0x1e>
 800978a:	42bc      	cmp	r4, r7
 800978c:	4622      	mov	r2, r4
 800978e:	4631      	mov	r1, r6
 8009790:	bf28      	it	cs
 8009792:	463a      	movcs	r2, r7
 8009794:	f7ff fbc0 	bl	8008f18 <memcpy>
 8009798:	4631      	mov	r1, r6
 800979a:	4640      	mov	r0, r8
 800979c:	f7ff fbca 	bl	8008f34 <_free_r>
 80097a0:	e7e1      	b.n	8009766 <_realloc_r+0x1e>
 80097a2:	4635      	mov	r5, r6
 80097a4:	e7df      	b.n	8009766 <_realloc_r+0x1e>

080097a6 <_malloc_usable_size_r>:
 80097a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097aa:	1f18      	subs	r0, r3, #4
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	bfbc      	itt	lt
 80097b0:	580b      	ldrlt	r3, [r1, r0]
 80097b2:	18c0      	addlt	r0, r0, r3
 80097b4:	4770      	bx	lr
	...

080097b8 <_init>:
 80097b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ba:	bf00      	nop
 80097bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097be:	bc08      	pop	{r3}
 80097c0:	469e      	mov	lr, r3
 80097c2:	4770      	bx	lr

080097c4 <_fini>:
 80097c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c6:	bf00      	nop
 80097c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ca:	bc08      	pop	{r3}
 80097cc:	469e      	mov	lr, r3
 80097ce:	4770      	bx	lr
